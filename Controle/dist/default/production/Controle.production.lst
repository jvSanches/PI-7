

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Jun 06 17:21:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F886 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0089                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  0105                     	;# 
   202  0107                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0185                     	;# 
   211  0187                     	;# 
   212  0188                     	;# 
   213  0189                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000D                     	;# 
   305  000E                     	;# 
   306  000E                     	;# 
   307  000F                     	;# 
   308  0010                     	;# 
   309  0011                     	;# 
   310  0012                     	;# 
   311  0013                     	;# 
   312  0014                     	;# 
   313  0015                     	;# 
   314  0015                     	;# 
   315  0016                     	;# 
   316  0017                     	;# 
   317  0018                     	;# 
   318  0019                     	;# 
   319  001A                     	;# 
   320  001B                     	;# 
   321  001B                     	;# 
   322  001C                     	;# 
   323  001D                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  0081                     	;# 
   327  0085                     	;# 
   328  0086                     	;# 
   329  0087                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  008F                     	;# 
   335  0090                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009A                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  009F                     	;# 
   353  0105                     	;# 
   354  0107                     	;# 
   355  0108                     	;# 
   356  0109                     	;# 
   357  010C                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  010F                     	;# 
   362  0185                     	;# 
   363  0187                     	;# 
   364  0188                     	;# 
   365  0189                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  000E                     	;# 
   383  000F                     	;# 
   384  0010                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0014                     	;# 
   389  0015                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001D                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  0081                     	;# 
   403  0085                     	;# 
   404  0086                     	;# 
   405  0087                     	;# 
   406  0089                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  008F                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0093                     	;# 
   417  0094                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  0105                     	;# 
   430  0107                     	;# 
   431  0108                     	;# 
   432  0109                     	;# 
   433  010C                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  010F                     	;# 
   438  0185                     	;# 
   439  0187                     	;# 
   440  0188                     	;# 
   441  0189                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0089                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  008F                     	;# 
   487  0090                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0094                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009A                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  0105                     	;# 
   506  0107                     	;# 
   507  0108                     	;# 
   508  0109                     	;# 
   509  010C                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  010F                     	;# 
   514  0185                     	;# 
   515  0187                     	;# 
   516  0188                     	;# 
   517  0189                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520                           
   521                           	psect	strings
   522  04DE                     __pstrings:	
   523  04DE                     stringtab:	
   524  04DE                     __stringtab:	
   525  04DE                     stringcode:	
   526                           ;	String table - string pointers are 1 byte each
   527                           
   528  04DE                     stringdir:	
   529  04DE  3004               	movlw	high stringdir
   530  04DF  008A               	movwf	10
   531  04E0  0804               	movf	4,w
   532  04E1  0A84               	incf	4,f
   533  04E2  0782               	addwf	2,f
   534  04E3                     __stringbase:	
   535  04E3  3400               	retlw	0
   536  04E4                     __end_of__stringtab:	
   537  04E4                     _dpowers:	
   538  04E4  3401               	retlw	1
   539  04E5  3400               	retlw	0
   540  04E6  340A               	retlw	10
   541  04E7  3400               	retlw	0
   542  04E8  3464               	retlw	100
   543  04E9  3400               	retlw	0
   544  04EA  34E8               	retlw	232
   545  04EB  3403               	retlw	3
   546  04EC  3410               	retlw	16
   547  04ED  3427               	retlw	39
   548  04EE                     __end_of_dpowers:	
   549  0006                     _PORTB	set	6
   550  0001                     _TMR0	set	1
   551  0012                     _T2CONbits	set	18
   552  000C                     _PIR1bits	set	12
   553  001B                     _CCPR2L	set	27
   554  0015                     _CCPR1L	set	21
   555  001D                     _CCP2CONbits	set	29
   556  0017                     _CCP1CONbits	set	23
   557  0019                     _TXREG	set	25
   558  001A                     _RCREG	set	26
   559  003D                     _RC5	set	61
   560  003B                     _RC3	set	59
   561  003C                     _RC4	set	60
   562  005F                     _GIE	set	95
   563  005E                     _PEIE	set	94
   564  0035                     _RB5	set	53
   565  0058                     _RBIF	set	88
   566  005B                     _RBIE	set	91
   567  005A                     _T0IF	set	90
   568  005D                     _T0IE	set	93
   569  002E                     _RA6	set	46
   570  002D                     _RA5	set	45
   571  0065                     _RCIF	set	101
   572  0064                     _TXIF	set	100
   573  00C2                     _FERR	set	194
   574  00C1                     _OERR	set	193
   575  00C6                     _RX9	set	198
   576  00C5                     _SREN	set	197
   577  00C4                     _CREN	set	196
   578  00C7                     _SPEN	set	199
   579  0096                     _IOCB	set	150
   580  0081                     _OPTION_REGbits	set	129
   581  0092                     _PR2	set	146
   582  0099                     _SPBRG	set	153
   583  043D                     _TRISC5	set	1085
   584  043C                     _TRISC4	set	1084
   585  043B                     _TRISC3	set	1083
   586  0460                     _TMR1IE	set	1120
   587  0434                     _TRISB4	set	1076
   588  0433                     _TRISB3	set	1075
   589  0432                     _TRISB2	set	1074
   590  0431                     _TRISB1	set	1073
   591  0437                     _TRISB7	set	1079
   592  0435                     _TRISB5	set	1077
   593  042E                     _TRISA6	set	1070
   594  042D                     _TRISA5	set	1069
   595  043A                     _TRISC2	set	1082
   596  0439                     _TRISC1	set	1081
   597  04C5                     _TXEN	set	1221
   598  04C6                     _TX9	set	1222
   599  0465                     _RCIE	set	1125
   600  0464                     _TXIE	set	1124
   601  04C4                     _SYNC	set	1220
   602  04C2                     _BRGH	set	1218
   603  0C4B                     _ANS11	set	3147
   604  0C48                     _ANS8	set	3144
   605  0C49                     _ANS9	set	3145
   606  0C4A                     _ANS10	set	3146
   607  0C4D                     _ANS13	set	3149
   608  0C44                     _ANS4	set	3140
   609  04EE                     STR_1:	
   610  04EE  3453               	retlw	83	;'S'
   611  04EF  3465               	retlw	101	;'e'
   612  04F0  3474               	retlw	116	;'t'
   613  04F1  3450               	retlw	80	;'P'
   614  04F2  346F               	retlw	111	;'o'
   615  04F3  3469               	retlw	105	;'i'
   616  04F4  346E               	retlw	110	;'n'
   617  04F5  3474               	retlw	116	;'t'
   618  04F6  343A               	retlw	58	;':'
   619  04F7  3420               	retlw	32	;' '
   620  04F8  3425               	retlw	37	;'%'
   621  04F9  3464               	retlw	100	;'d'
   622  04FA  3420               	retlw	32	;' '
   623  04FB  340D               	retlw	13
   624  04FC  340A               	retlw	10
   625  04FD  3400               	retlw	0
   626                           
   627                           ; #config settings
   628  0000                     
   629                           	psect	cinit
   630  0011                     start_initialization:	
   631  0011                     __initialization:	
   632                           
   633                           ; Clear objects allocated to COMMON
   634  0011  01F6               	clrf	__pbssCOMMON& (0+127)
   635  0012  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   636  0013  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   637  0014  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   638  0015  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   639                           
   640                           ; Clear objects allocated to BANK0
   641  0016  1383               	bcf	3,7	;select IRP bank0
   642  0017  3050               	movlw	low __pbssBANK0
   643  0018  0084               	movwf	4
   644  0019  3063               	movlw	low (__pbssBANK0+19)
   645  001A  120A  118A  2550   	fcall	clear_ram0
   646  001D                     end_of_initialization:	
   647                           ;End of C runtime variable initialization code
   648                           
   649  001D                     __end_of__initialization:	
   650  001D  0183               	clrf	3
   651  001E  120A  118A  29D5   	ljmp	_main	;jump to C main() function
   652                           
   653                           	psect	bssCOMMON
   654  0076                     __pbssCOMMON:	
   655  0076                     _lStep:	
   656  0076                     	ds	1
   657  0077                     _ab1:	
   658  0077                     	ds	1
   659  0078                     _state1:	
   660  0078                     	ds	1
   661  0079                     _dummy:	
   662  0079                     	ds	1
   663  007A                     _delayus_variable:	
   664  007A                     	ds	1
   665                           
   666                           	psect	bssBANK0
   667  0050                     __pbssBANK0:	
   668  0050                     _set_point:	
   669  0050                     	ds	4
   670  0054                     _motor_pos:	
   671  0054                     	ds	4
   672  0058                     _encoder1_counter:	
   673  0058                     	ds	4
   674  005C                     isr@tick:	
   675  005C                     	ds	2
   676  005E                     SetMotor@last_err:	
   677  005E                     	ds	2
   678  0060                     _set_motor_flag:	
   679  0060                     	ds	1
   680  0061                     SetMotor@derivative:	
   681  0061                     	ds	2
   682                           
   683                           	psect	clrtext
   684  0550                     clear_ram0:	
   685                           ;	Called with FSR containing the base address, and
   686                           ;	W with the last address+1
   687                           
   688  0550  0064               	clrwdt	;clear the watchdog before getting into this loop
   689  0551                     clrloop0:	
   690  0551  0180               	clrf	0	;clear RAM location pointed to by FSR
   691  0552  0A84               	incf	4,f	;increment pointer
   692  0553  0604               	xorwf	4,w	;XOR with final address
   693  0554  1903               	btfsc	3,2	;have we reached the end yet?
   694  0555  3400               	retlw	0	;all done for this memory range, return
   695  0556  0604               	xorwf	4,w	;XOR again to restore value
   696  0557  2D51               	goto	clrloop0	;do the next byte
   697                           
   698                           	psect	cstackCOMMON
   699  0070                     __pcstackCOMMON:	
   700  0070                     ?_serial_init:	
   701  0070                     ?_pwm_init:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_SetMotor:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_resetCounter:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_motor_reset:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_isr:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ??_isr:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_encoders_init:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_main:	
   723                           ; 1 bytes @ 0x0
   724                           
   725                           
   726                           ; 1 bytes @ 0x0
   727  0070                     	ds	5
   728  0075                     isr@portB:	
   729                           
   730                           ; 1 bytes @ 0x5
   731  0075                     	ds	1
   732                           
   733                           	psect	cstackBANK0
   734  0020                     __pcstackBANK0:	
   735  0020                     ??_serial_init:	
   736  0020                     ??_pwm_init:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0020                     ??_resetCounter:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0020                     ??_encoders_init:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0020                     ?_getServoState:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0020                     ?_getServoCommand:	
   749                           ; 2 bytes @ 0x0
   750                           
   751  0020                     ?_constrain:	
   752                           ; 2 bytes @ 0x0
   753                           
   754  0020                     ?___lmul:	
   755                           ; 4 bytes @ 0x0
   756                           
   757  0020                     constrain@value:	
   758                           ; 4 bytes @ 0x0
   759                           
   760  0020                     ___lmul@multiplier:	
   761                           ; 4 bytes @ 0x0
   762                           
   763                           
   764                           ; 4 bytes @ 0x0
   765  0020                     	ds	2
   766  0022                     ??_getServoState:	
   767  0022                     ??_getServoCommand:	
   768                           ; 1 bytes @ 0x2
   769                           
   770                           
   771                           ; 1 bytes @ 0x2
   772  0022                     	ds	2
   773  0024                     constrain@lLimit:	
   774  0024                     ___lmul@multiplicand:	
   775                           ; 4 bytes @ 0x4
   776                           
   777                           
   778                           ; 4 bytes @ 0x4
   779  0024                     	ds	2
   780  0026                     ?___wmul:	
   781  0026                     ___wmul@multiplier:	
   782                           ; 2 bytes @ 0x6
   783                           
   784                           
   785                           ; 2 bytes @ 0x6
   786  0026                     	ds	2
   787  0028                     ??___lmul:	
   788  0028                     ___wmul@multiplicand:	
   789                           ; 1 bytes @ 0x8
   790                           
   791  0028                     constrain@uLimit:	
   792                           ; 2 bytes @ 0x8
   793                           
   794                           
   795                           ; 4 bytes @ 0x8
   796  0028                     	ds	1
   797  0029                     ___lmul@product:	
   798                           
   799                           ; 4 bytes @ 0x9
   800  0029                     	ds	1
   801  002A                     ??___wmul:	
   802  002A                     ___wmul@product:	
   803                           ; 1 bytes @ 0xA
   804                           
   805                           
   806                           ; 2 bytes @ 0xA
   807  002A                     	ds	2
   808  002C                     ??_constrain:	
   809  002C                     ?_SetPoint:	
   810                           ; 1 bytes @ 0xC
   811                           
   812  002C                     SetPoint@new_val:	
   813                           ; 1 bytes @ 0xC
   814                           
   815                           
   816                           ; 2 bytes @ 0xC
   817  002C                     	ds	1
   818  002D                     ?___aldiv:	
   819  002D                     ___aldiv@divisor:	
   820                           ; 4 bytes @ 0xD
   821                           
   822                           
   823                           ; 4 bytes @ 0xD
   824  002D                     	ds	1
   825  002E                     ??_SetPoint:	
   826                           
   827                           ; 1 bytes @ 0xE
   828  002E                     	ds	3
   829  0031                     ___aldiv@dividend:	
   830                           
   831                           ; 4 bytes @ 0x11
   832  0031                     	ds	4
   833  0035                     ??___aldiv:	
   834                           
   835                           ; 1 bytes @ 0x15
   836  0035                     	ds	1
   837  0036                     ___aldiv@counter:	
   838                           
   839                           ; 1 bytes @ 0x16
   840  0036                     	ds	1
   841  0037                     ___aldiv@sign:	
   842                           
   843                           ; 1 bytes @ 0x17
   844  0037                     	ds	1
   845  0038                     ___aldiv@quotient:	
   846                           
   847                           ; 4 bytes @ 0x18
   848  0038                     	ds	4
   849  003C                     ?_pwm_set:	
   850  003C                     pwm_set@channel:	
   851                           ; 1 bytes @ 0x1C
   852                           
   853                           
   854                           ; 2 bytes @ 0x1C
   855  003C                     	ds	2
   856  003E                     pwm_set@duty_cycle:	
   857                           
   858                           ; 4 bytes @ 0x1E
   859  003E                     	ds	4
   860  0042                     ??_pwm_set:	
   861                           
   862                           ; 1 bytes @ 0x22
   863  0042                     	ds	4
   864  0046                     ??_SetMotor:	
   865  0046                     ??_motor_reset:	
   866                           ; 1 bytes @ 0x26
   867                           
   868  0046                     SetMotor@P_Response:	
   869                           ; 1 bytes @ 0x26
   870                           
   871                           
   872                           ; 2 bytes @ 0x26
   873  0046                     	ds	2
   874  0048                     SetMotor@D_Response:	
   875                           
   876                           ; 2 bytes @ 0x28
   877  0048                     	ds	2
   878  004A                     SetMotor@err:	
   879                           
   880                           ; 2 bytes @ 0x2A
   881  004A                     	ds	2
   882  004C                     SetMotor@resp:	
   883                           
   884                           ; 4 bytes @ 0x2C
   885  004C                     	ds	4
   886  0050                     ??_main:	
   887                           
   888                           	psect	maintext
   889  01D5                     __pmaintext:	
   890                           ; 1 bytes @ 0x30
   891 ;;
   892 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   893 ;;
   894 ;; *************** function _main *****************
   895 ;; Defined at:
   896 ;;		line 214 in file "main.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  i               2    0        int 
   901 ;;  enc1            2    0        int 
   902 ;;  serialIn        1    0        unsigned char 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  1    wreg      void 
   905 ;; Registers used:
   906 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : B00/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   912 ;;      Params:         0       0       0       0       0
   913 ;;      Locals:         0       5       0       0       0
   914 ;;      Temps:          0       0       0       0       0
   915 ;;      Totals:         0       5       0       0       0
   916 ;;Total ram usage:        5 bytes
   917 ;; Hardware stack levels required when called:    4
   918 ;; This function calls:
   919 ;;		_SetMotor
   920 ;;		_SetPoint
   921 ;;		___wmul
   922 ;;		_encoders_init
   923 ;;		_getServoCommand
   924 ;;		_getServoState
   925 ;;		_motor_reset
   926 ;;		_pwm_init
   927 ;;		_pwm_set
   928 ;;		_serial_init
   929 ;; This function is called by:
   930 ;;		Startup code after reset
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           
   935                           ;psect for function _main
   936  01D5                     _main:	
   937                           
   938                           ;main.c: 223: OPTION_REGbits.T0CS = 0;
   939                           
   940                           ;incstack = 0
   941                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   942  01D5  1683               	bsf	3,5	;RP0=1, select bank1
   943  01D6  1303               	bcf	3,6	;RP1=0, select bank1
   944  01D7  1281               	bcf	1,5	;volatile
   945                           
   946                           ;main.c: 224: OPTION_REGbits.PSA = 0;
   947  01D8  1181               	bcf	1,3	;volatile
   948                           
   949                           ;main.c: 225: OPTION_REGbits.PS = 7;
   950  01D9  3007               	movlw	7
   951  01DA  0481               	iorwf	1,f	;volatile
   952                           
   953                           ;main.c: 228: TRISB5 = 0;
   954  01DB  1286               	bcf	6,5	;volatile
   955                           
   956                           ;main.c: 229: ANS13 = 0;
   957  01DC  1683               	bsf	3,5	;RP0=1, select bank3
   958  01DD  1703               	bsf	3,6	;RP1=1, select bank3
   959  01DE  1289               	bcf	9,5	;volatile
   960                           
   961                           ;main.c: 230: TRISB7 = 0;
   962  01DF  1683               	bsf	3,5	;RP0=1, select bank1
   963  01E0  1303               	bcf	3,6	;RP1=0, select bank1
   964  01E1  1386               	bcf	6,7	;volatile
   965                           
   966                           ;main.c: 231: TRISB1 = 1;
   967  01E2  1486               	bsf	6,1	;volatile
   968                           
   969                           ;main.c: 232: TRISB2 = 1;
   970  01E3  1506               	bsf	6,2	;volatile
   971                           
   972                           ;main.c: 233: TRISB3 = 1;
   973  01E4  1586               	bsf	6,3	;volatile
   974                           
   975                           ;main.c: 234: TRISB4 = 1;
   976  01E5  1606               	bsf	6,4	;volatile
   977                           
   978                           ;main.c: 235: ANS10 = 0;
   979  01E6  1683               	bsf	3,5	;RP0=1, select bank3
   980  01E7  1703               	bsf	3,6	;RP1=1, select bank3
   981  01E8  1109               	bcf	9,2	;volatile
   982                           
   983                           ;main.c: 236: ANS9 = 0;
   984  01E9  1089               	bcf	9,1	;volatile
   985                           
   986                           ;main.c: 237: ANS8 = 0;
   987  01EA  1009               	bcf	9,0	;volatile
   988                           
   989                           ;main.c: 238: ANS11 = 0;
   990  01EB  1189               	bcf	9,3	;volatile
   991                           
   992                           ;main.c: 239: RB5=1;
   993  01EC  1283               	bcf	3,5	;RP0=0, select bank0
   994  01ED  1303               	bcf	3,6	;RP1=0, select bank0
   995  01EE  1686               	bsf	6,5	;volatile
   996                           
   997                           ;main.c: 242: T0IE = 1;
   998  01EF  168B               	bsf	11,5	;volatile
   999                           
  1000                           ;main.c: 243: TMR1IE = 0;
  1001  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  1002  01F1  1303               	bcf	3,6	;RP1=0, select bank1
  1003  01F2  100C               	bcf	12,0	;volatile
  1004                           
  1005                           ;main.c: 244: PEIE = 1;
  1006  01F3  170B               	bsf	11,6	;volatile
  1007                           
  1008                           ;main.c: 245: GIE = 1;
  1009  01F4  178B               	bsf	11,7	;volatile
  1010                           
  1011                           ;main.c: 246: IOCB=0b00011000;
  1012  01F5  3018               	movlw	24
  1013  01F6  0096               	movwf	22	;volatile
  1014                           
  1015                           ;main.c: 247: RBIE = 1;
  1016  01F7  158B               	bsf	11,3	;volatile
  1017                           
  1018                           ;main.c: 251: serial_init();
  1019  01F8  120A  118A  24FE  120A  118A  	fcall	_serial_init
  1020                           
  1021                           ;main.c: 254: pwm_init();
  1022  01FD  120A  118A  246C  120A  118A  	fcall	_pwm_init
  1023                           
  1024                           ;main.c: 261: encoders_init();
  1025  0202  120A  118A  2516  120A  118A  	fcall	_encoders_init
  1026                           
  1027                           ;main.c: 268: pwm_set(1, 0);
  1028  0207  3001               	movlw	1
  1029  0208  1283               	bcf	3,5	;RP0=0, select bank0
  1030  0209  1303               	bcf	3,6	;RP1=0, select bank0
  1031  020A  00BC               	movwf	pwm_set@channel
  1032  020B  3000               	movlw	0
  1033  020C  00BD               	movwf	pwm_set@channel+1
  1034  020D  3000               	movlw	0
  1035  020E  00C1               	movwf	pwm_set@duty_cycle+3
  1036  020F  3000               	movlw	0
  1037  0210  00C0               	movwf	pwm_set@duty_cycle+2
  1038  0211  3000               	movlw	0
  1039  0212  00BF               	movwf	pwm_set@duty_cycle+1
  1040  0213  3000               	movlw	0
  1041  0214  00BE               	movwf	pwm_set@duty_cycle
  1042  0215  120A  118A  230E  120A  118A  	fcall	_pwm_set
  1043                           
  1044                           ;main.c: 269: pwm_set(2, 0);
  1045  021A  3002               	movlw	2
  1046  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1047  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1048  021D  00BC               	movwf	pwm_set@channel
  1049  021E  3000               	movlw	0
  1050  021F  00BD               	movwf	pwm_set@channel+1
  1051  0220  3000               	movlw	0
  1052  0221  00C1               	movwf	pwm_set@duty_cycle+3
  1053  0222  3000               	movlw	0
  1054  0223  00C0               	movwf	pwm_set@duty_cycle+2
  1055  0224  3000               	movlw	0
  1056  0225  00BF               	movwf	pwm_set@duty_cycle+1
  1057  0226  3000               	movlw	0
  1058  0227  00BE               	movwf	pwm_set@duty_cycle
  1059  0228  120A  118A  230E  120A  118A  	fcall	_pwm_set
  1060  022D                     l2356:	
  1061                           
  1062                           ;main.c: 273: RB5 = getServoState();
  1063  022D  120A  118A  2541  120A  118A  	fcall	_getServoState
  1064  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0233  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0234  1C20               	btfss	?_getServoState,0
  1067  0235  2A3A               	goto	u2020
  1068  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1070  0238  1686               	bsf	6,5	;volatile
  1071  0239  2A3D               	goto	l2358
  1072  023A                     u2020:	
  1073  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1074  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1075  023C  1286               	bcf	6,5	;volatile
  1076  023D                     l2358:	
  1077                           
  1078                           ;main.c: 274: if (!getServoState()){
  1079  023D  120A  118A  2541  120A  118A  	fcall	_getServoState
  1080  0242  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0243  1303               	bcf	3,6	;RP1=0, select bank0
  1082  0244  0820               	movf	?_getServoState,w
  1083  0245  0421               	iorwf	?_getServoState+1,w
  1084  0246  1D03               	btfss	3,2
  1085  0247  2A4E               	goto	l2362
  1086                           
  1087                           ;main.c: 275: motor_reset();
  1088  0248  120A  118A  240C  120A  118A  	fcall	_motor_reset
  1089                           
  1090                           ;main.c: 277: }else{
  1091  024D  2A71               	goto	l2364
  1092  024E                     l2362:	
  1093                           
  1094                           ;main.c: 278: SetPoint(set_point + (5 * getServoCommand()));
  1095  024E  120A  118A  2440  120A  118A  	fcall	_getServoCommand
  1096  0253  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0254  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0255  0821               	movf	?_getServoCommand+1,w
  1099  0256  00A7               	movwf	___wmul@multiplier+1
  1100  0257  0820               	movf	?_getServoCommand,w
  1101  0258  00A6               	movwf	___wmul@multiplier
  1102  0259  3005               	movlw	5
  1103  025A  00A8               	movwf	___wmul@multiplicand
  1104  025B  3000               	movlw	0
  1105  025C  00A9               	movwf	___wmul@multiplicand+1
  1106  025D  120A  118A  24BB  120A  118A  	fcall	___wmul
  1107  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1108  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1109  0264  0850               	movf	_set_point,w	;volatile
  1110  0265  0726               	addwf	?___wmul,w
  1111  0266  00AC               	movwf	SetPoint@new_val
  1112  0267  0851               	movf	_set_point+1,w	;volatile
  1113  0268  1803               	skipnc
  1114  0269  0A51               	incf	_set_point+1,w	;volatile
  1115  026A  0727               	addwf	?___wmul+1,w
  1116  026B  00AD               	movwf	SetPoint@new_val+1
  1117  026C  120A  118A  2496  120A  118A  	fcall	_SetPoint
  1118  0271                     l2364:	
  1119                           
  1120                           ;main.c: 279: };main.c: 281: if (set_motor_flag){
  1121  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1122  0272  1303               	bcf	3,6	;RP1=0, select bank0
  1123  0273  0860               	movf	_set_motor_flag,w
  1124  0274  1903               	btfsc	3,2
  1125  0275  2A2D               	goto	l2356
  1126                           
  1127                           ;main.c: 282: SetMotor();
  1128  0276  120A  118A  2021  120A  118A  	fcall	_SetMotor
  1129                           
  1130                           ;main.c: 283: set_motor_flag = 0;
  1131  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1132  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1133  027D  01E0               	clrf	_set_motor_flag
  1134  027E  2A2D               	goto	l2356
  1135  027F                     __end_of_main:	
  1136                           
  1137                           	psect	text1
  1138  04FE                     __ptext1:	
  1139 ;; *************** function _serial_init *****************
  1140 ;; Defined at:
  1141 ;;		line 29 in file "serial.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1155 ;;      Params:         0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0
  1158 ;;      Totals:         0       0       0       0       0
  1159 ;;Total ram usage:        0 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    1
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function _serial_init
  1171  04FE                     _serial_init:	
  1172                           
  1173                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _serial_init: [wreg]
  1177  04FE  3040               	movlw	64
  1178  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  1179  0500  1303               	bcf	3,6	;RP1=0, select bank1
  1180  0501  0099               	movwf	25	;volatile
  1181                           
  1182                           ;serial.c: 66: BRGH=1;
  1183  0502  1518               	bsf	24,2	;volatile
  1184                           
  1185                           ;serial.c: 67: SYNC=0;
  1186  0503  1218               	bcf	24,4	;volatile
  1187                           
  1188                           ;serial.c: 68: SPEN=1;
  1189  0504  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0505  1303               	bcf	3,6	;RP1=0, select bank0
  1191  0506  1798               	bsf	24,7	;volatile
  1192                           
  1193                           ;serial.c: 69: CREN=1;
  1194  0507  1618               	bsf	24,4	;volatile
  1195                           
  1196                           ;serial.c: 70: SREN=0;
  1197  0508  1298               	bcf	24,5	;volatile
  1198                           
  1199                           ;serial.c: 71: TXIE=0;
  1200  0509  1683               	bsf	3,5	;RP0=1, select bank1
  1201  050A  1303               	bcf	3,6	;RP1=0, select bank1
  1202  050B  120C               	bcf	12,4	;volatile
  1203                           
  1204                           ;serial.c: 72: RCIE=0;
  1205  050C  128C               	bcf	12,5	;volatile
  1206                           
  1207                           ;serial.c: 73: TX9=0;
  1208  050D  1318               	bcf	24,6	;volatile
  1209                           
  1210                           ;serial.c: 74: RX9=0;
  1211  050E  1283               	bcf	3,5	;RP0=0, select bank0
  1212  050F  1303               	bcf	3,6	;RP1=0, select bank0
  1213  0510  1318               	bcf	24,6	;volatile
  1214                           
  1215                           ;serial.c: 75: TXEN=0;
  1216  0511  1683               	bsf	3,5	;RP0=1, select bank1
  1217  0512  1303               	bcf	3,6	;RP1=0, select bank1
  1218  0513  1298               	bcf	24,5	;volatile
  1219                           
  1220                           ;serial.c: 76: TXEN=1;
  1221  0514  1698               	bsf	24,5	;volatile
  1222  0515  0008               	return
  1223  0516                     __end_of_serial_init:	
  1224                           
  1225                           	psect	text2
  1226  046C                     __ptext2:	
  1227 ;; *************** function _pwm_init *****************
  1228 ;; Defined at:
  1229 ;;		line 25 in file "pwm.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1243 ;;      Params:         0       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0
  1246 ;;      Totals:         0       0       0       0       0
  1247 ;;Total ram usage:        0 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    1
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           
  1258                           ;psect for function _pwm_init
  1259  046C                     _pwm_init:	
  1260                           
  1261                           ;pwm.c: 28: TRISC1 = 1;
  1262                           
  1263                           ;incstack = 0
  1264                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  1265  046C  1683               	bsf	3,5	;RP0=1, select bank1
  1266  046D  1303               	bcf	3,6	;RP1=0, select bank1
  1267  046E  1487               	bsf	7,1	;volatile
  1268                           
  1269                           ;pwm.c: 29: TRISC2 = 1;
  1270  046F  1507               	bsf	7,2	;volatile
  1271                           
  1272                           ;pwm.c: 32: PR2 = 0xFF;
  1273  0470  30FF               	movlw	255
  1274  0471  0092               	movwf	18	;volatile
  1275                           
  1276                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  1277  0472  1283               	bcf	3,5	;RP0=0, select bank0
  1278  0473  1303               	bcf	3,6	;RP1=0, select bank0
  1279  0474  0817               	movf	23,w	;volatile
  1280  0475  39F0               	andlw	-16
  1281  0476  380C               	iorlw	12
  1282  0477  0097               	movwf	23	;volatile
  1283                           
  1284                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  1285  0478  081D               	movf	29,w	;volatile
  1286  0479  39F0               	andlw	-16
  1287  047A  380C               	iorlw	12
  1288  047B  009D               	movwf	29	;volatile
  1289                           
  1290                           ;pwm.c: 39: CCPR1L = 0;
  1291  047C  0195               	clrf	21	;volatile
  1292                           
  1293                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  1294  047D  30CF               	movlw	-49
  1295  047E  0597               	andwf	23,f	;volatile
  1296                           
  1297                           ;pwm.c: 41: CCPR2L = 0;
  1298  047F  019B               	clrf	27	;volatile
  1299                           
  1300                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  1301  0480  108C               	bcf	12,1	;volatile
  1302                           
  1303                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  1304  0481  30FC               	movlw	-4
  1305  0482  0592               	andwf	18,f	;volatile
  1306                           
  1307                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  1308  0483  1512               	bsf	18,2	;volatile
  1309  0484                     l170:	
  1310                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  1311                           
  1312  0484  1C8C               	btfss	12,1	;volatile
  1313  0485  2C84               	goto	l170
  1314                           
  1315                           ;pwm.c: 53: TRISC1 = 0;
  1316  0486  1683               	bsf	3,5	;RP0=1, select bank1
  1317  0487  1303               	bcf	3,6	;RP1=0, select bank1
  1318  0488  1087               	bcf	7,1	;volatile
  1319                           
  1320                           ;pwm.c: 54: TRISC2 = 0;
  1321  0489  1107               	bcf	7,2	;volatile
  1322                           
  1323                           ;pwm.c: 59: ANS4 = 0;
  1324  048A  1683               	bsf	3,5	;RP0=1, select bank3
  1325  048B  1703               	bsf	3,6	;RP1=1, select bank3
  1326  048C  1208               	bcf	8,4	;volatile
  1327                           
  1328                           ;pwm.c: 60: TRISA5 = 0;
  1329  048D  1683               	bsf	3,5	;RP0=1, select bank1
  1330  048E  1303               	bcf	3,6	;RP1=0, select bank1
  1331  048F  1285               	bcf	5,5	;volatile
  1332                           
  1333                           ;pwm.c: 61: TRISA6 = 0;
  1334  0490  1305               	bcf	5,6	;volatile
  1335                           
  1336                           ;pwm.c: 62: RA5 = 0;
  1337  0491  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0492  1303               	bcf	3,6	;RP1=0, select bank0
  1339  0493  1285               	bcf	5,5	;volatile
  1340                           
  1341                           ;pwm.c: 63: RA6 = 0;
  1342  0494  1305               	bcf	5,6	;volatile
  1343  0495  0008               	return
  1344  0496                     __end_of_pwm_init:	
  1345                           
  1346                           	psect	text3
  1347  040C                     __ptext3:	
  1348 ;; *************** function _motor_reset *****************
  1349 ;; Defined at:
  1350 ;;		line 129 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;		None
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1364 ;;      Params:         0       0       0       0       0
  1365 ;;      Locals:         0       0       0       0       0
  1366 ;;      Temps:          0       0       0       0       0
  1367 ;;      Totals:         0       0       0       0       0
  1368 ;;Total ram usage:        0 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    3
  1371 ;; This function calls:
  1372 ;;		_SetPoint
  1373 ;;		_pwm_set
  1374 ;;		_resetCounter
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           
  1381                           ;psect for function _motor_reset
  1382  040C                     _motor_reset:	
  1383                           
  1384                           ;main.c: 130: pwm_set(1, 0);
  1385                           
  1386                           ;incstack = 0
  1387                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1388  040C  3001               	movlw	1
  1389  040D  1283               	bcf	3,5	;RP0=0, select bank0
  1390  040E  1303               	bcf	3,6	;RP1=0, select bank0
  1391  040F  00BC               	movwf	pwm_set@channel
  1392  0410  3000               	movlw	0
  1393  0411  00BD               	movwf	pwm_set@channel+1
  1394  0412  3000               	movlw	0
  1395  0413  00C1               	movwf	pwm_set@duty_cycle+3
  1396  0414  3000               	movlw	0
  1397  0415  00C0               	movwf	pwm_set@duty_cycle+2
  1398  0416  3000               	movlw	0
  1399  0417  00BF               	movwf	pwm_set@duty_cycle+1
  1400  0418  3000               	movlw	0
  1401  0419  00BE               	movwf	pwm_set@duty_cycle
  1402  041A  120A  118A  230E  120A  118A  	fcall	_pwm_set
  1403                           
  1404                           ;main.c: 131: pwm_set(2, 0);
  1405  041F  3002               	movlw	2
  1406  0420  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0421  1303               	bcf	3,6	;RP1=0, select bank0
  1408  0422  00BC               	movwf	pwm_set@channel
  1409  0423  3000               	movlw	0
  1410  0424  00BD               	movwf	pwm_set@channel+1
  1411  0425  3000               	movlw	0
  1412  0426  00C1               	movwf	pwm_set@duty_cycle+3
  1413  0427  3000               	movlw	0
  1414  0428  00C0               	movwf	pwm_set@duty_cycle+2
  1415  0429  3000               	movlw	0
  1416  042A  00BF               	movwf	pwm_set@duty_cycle+1
  1417  042B  3000               	movlw	0
  1418  042C  00BE               	movwf	pwm_set@duty_cycle
  1419  042D  120A  118A  230E  120A  118A  	fcall	_pwm_set
  1420                           
  1421                           ;main.c: 132: resetCounter();
  1422  0432  120A  118A  252E  120A  118A  	fcall	_resetCounter
  1423                           
  1424                           ;main.c: 133: SetPoint(0);
  1425  0437  3000               	movlw	0
  1426  0438  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0439  1303               	bcf	3,6	;RP1=0, select bank0
  1428  043A  00AC               	movwf	SetPoint@new_val
  1429  043B  00AD               	movwf	SetPoint@new_val+1
  1430  043C  120A  118A  2496   	fcall	_SetPoint
  1431  043F  0008               	return
  1432  0440                     __end_of_motor_reset:	
  1433                           
  1434                           	psect	text4
  1435  052E                     __ptext4:	
  1436 ;; *************** function _resetCounter *****************
  1437 ;; Defined at:
  1438 ;;		line 124 in file "main.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1452 ;;      Params:         0       0       0       0       0
  1453 ;;      Locals:         0       0       0       0       0
  1454 ;;      Temps:          0       0       0       0       0
  1455 ;;      Totals:         0       0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used:    1
  1458 ;; Hardware stack levels required when called:    1
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_motor_reset
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           
  1467                           ;psect for function _resetCounter
  1468  052E                     _resetCounter:	
  1469                           
  1470                           ;main.c: 125: encoder1_counter = 0;
  1471                           
  1472                           ;incstack = 0
  1473                           ; Regs used in _resetCounter: [wreg]
  1474  052E  3000               	movlw	0
  1475  052F  1283               	bcf	3,5	;RP0=0, select bank0
  1476  0530  1303               	bcf	3,6	;RP1=0, select bank0
  1477  0531  00DB               	movwf	_encoder1_counter+3	;volatile
  1478  0532  3000               	movlw	0
  1479  0533  00DA               	movwf	_encoder1_counter+2	;volatile
  1480  0534  3000               	movlw	0
  1481  0535  00D9               	movwf	_encoder1_counter+1	;volatile
  1482  0536  3000               	movlw	0
  1483  0537  00D8               	movwf	_encoder1_counter	;volatile
  1484                           
  1485                           ;main.c: 126: motor_pos = 0;
  1486  0538  3000               	movlw	0
  1487  0539  00D7               	movwf	_motor_pos+3	;volatile
  1488  053A  3000               	movlw	0
  1489  053B  00D6               	movwf	_motor_pos+2	;volatile
  1490  053C  3000               	movlw	0
  1491  053D  00D5               	movwf	_motor_pos+1	;volatile
  1492  053E  3000               	movlw	0
  1493  053F  00D4               	movwf	_motor_pos	;volatile
  1494  0540  0008               	return
  1495  0541                     __end_of_resetCounter:	
  1496                           
  1497                           	psect	text5
  1498  0496                     __ptext5:	
  1499 ;; *************** function _SetPoint *****************
  1500 ;; Defined at:
  1501 ;;		line 117 in file "main.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  new_val         2   12[BANK0 ] int 
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg
  1510 ;; Tracked objects:
  1511 ;;		On entry : 0/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1515 ;;      Params:         0       2       0       0       0
  1516 ;;      Locals:         0       0       0       0       0
  1517 ;;      Temps:          0       4       0       0       0
  1518 ;;      Totals:         0       6       0       0       0
  1519 ;;Total ram usage:        6 bytes
  1520 ;; Hardware stack levels used:    1
  1521 ;; Hardware stack levels required when called:    1
  1522 ;; This function calls:
  1523 ;;		Nothing
  1524 ;; This function is called by:
  1525 ;;		_motor_reset
  1526 ;;		_main
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           
  1531                           ;psect for function _SetPoint
  1532  0496                     _SetPoint:	
  1533                           
  1534                           ;main.c: 118: if (new_val != set_point){
  1535                           
  1536                           ;incstack = 0
  1537                           ; Regs used in _SetPoint: [wreg]
  1538  0496  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0497  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0498  082C               	movf	SetPoint@new_val,w
  1541  0499  00AE               	movwf	??_SetPoint
  1542  049A  082D               	movf	SetPoint@new_val+1,w
  1543  049B  00AF               	movwf	??_SetPoint+1
  1544  049C  3000               	movlw	0
  1545  049D  1BAF               	btfsc	??_SetPoint+1,7
  1546  049E  30FF               	movlw	255
  1547  049F  00B0               	movwf	??_SetPoint+2
  1548  04A0  00B1               	movwf	??_SetPoint+3
  1549  04A1  0853               	movf	_set_point+3,w	;volatile
  1550  04A2  0631               	xorwf	??_SetPoint+3,w
  1551  04A3  1D03               	skipz
  1552  04A4  2CAF               	goto	u1055
  1553  04A5  0852               	movf	_set_point+2,w	;volatile
  1554  04A6  0630               	xorwf	??_SetPoint+2,w
  1555  04A7  1D03               	skipz
  1556  04A8  2CAF               	goto	u1055
  1557  04A9  0851               	movf	_set_point+1,w	;volatile
  1558  04AA  062F               	xorwf	??_SetPoint+1,w
  1559  04AB  1D03               	skipz
  1560  04AC  2CAF               	goto	u1055
  1561  04AD  0850               	movf	_set_point,w	;volatile
  1562  04AE  062E               	xorwf	??_SetPoint,w
  1563  04AF                     u1055:	
  1564  04AF  1903               	skipnz
  1565  04B0  0008               	return
  1566                           
  1567                           ;main.c: 119: set_point = new_val;
  1568  04B1  082C               	movf	SetPoint@new_val,w
  1569  04B2  00D0               	movwf	_set_point	;volatile
  1570  04B3  082D               	movf	SetPoint@new_val+1,w
  1571  04B4  00D1               	movwf	_set_point+1	;volatile
  1572  04B5  3000               	movlw	0
  1573  04B6  1BD1               	btfsc	_set_point+1,7	;volatile
  1574  04B7  30FF               	movlw	255
  1575  04B8  00D2               	movwf	_set_point+2	;volatile
  1576  04B9  00D3               	movwf	_set_point+3	;volatile
  1577  04BA  0008               	return
  1578  04BB                     __end_of_SetPoint:	
  1579                           
  1580                           	psect	text6
  1581  0541                     __ptext6:	
  1582 ;; *************** function _getServoState *****************
  1583 ;; Defined at:
  1584 ;;		line 19 in file "servoController.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  2    0[BANK0 ] int 
  1591 ;; Registers used:
  1592 ;;		wreg, status,0
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1598 ;;      Params:         0       2       0       0       0
  1599 ;;      Locals:         0       0       0       0       0
  1600 ;;      Temps:          0       2       0       0       0
  1601 ;;      Totals:         0       4       0       0       0
  1602 ;;Total ram usage:        4 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    1
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           
  1613                           ;psect for function _getServoState
  1614  0541                     _getServoState:	
  1615                           
  1616                           ;servoController.c: 20: return RC3;
  1617                           
  1618                           ;incstack = 0
  1619                           ; Regs used in _getServoState: [wreg+status,0]
  1620  0541  1003               	clrc
  1621  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0544  1987               	btfsc	7,3	;volatile
  1624  0545  1403               	setc
  1625  0546  3000               	movlw	0
  1626  0547  1803               	skipnc
  1627  0548  3001               	movlw	1
  1628  0549  00A2               	movwf	??_getServoState
  1629  054A  01A3               	clrf	??_getServoState+1
  1630  054B  0822               	movf	??_getServoState,w
  1631  054C  00A0               	movwf	?_getServoState
  1632  054D  0823               	movf	??_getServoState+1,w
  1633  054E  00A1               	movwf	?_getServoState+1
  1634  054F  0008               	return
  1635  0550                     __end_of_getServoState:	
  1636                           
  1637                           	psect	text7
  1638  0440                     __ptext7:	
  1639 ;; *************** function _getServoCommand *****************
  1640 ;; Defined at:
  1641 ;;		line 23 in file "servoController.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;		None
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  2    0[BANK0 ] int 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1655 ;;      Params:         0       2       0       0       0
  1656 ;;      Locals:         0       0       0       0       0
  1657 ;;      Temps:          0       4       0       0       0
  1658 ;;      Totals:         0       6       0       0       0
  1659 ;;Total ram usage:        6 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function _getServoCommand
  1671  0440                     _getServoCommand:	
  1672                           
  1673                           ;servoController.c: 25: if (RC4 != lStep){
  1674                           
  1675                           ;incstack = 0
  1676                           ; Regs used in _getServoCommand: [wreg+status,2+status,0]
  1677  0440  3000               	movlw	0
  1678  0441  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0442  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0443  1A07               	btfsc	7,4	;volatile
  1681  0444  3001               	movlw	1
  1682  0445  0676               	xorwf	_lStep,w
  1683  0446  1903               	skipnz
  1684  0447  2C69               	goto	l2232
  1685                           
  1686                           ;servoController.c: 26: lStep = !lStep;
  1687  0448  0876               	movf	_lStep,w
  1688  0449  1D03               	btfss	3,2
  1689  044A  2C4D               	goto	u1930
  1690  044B  3001               	movlw	1
  1691  044C  2C4E               	goto	u1940
  1692  044D                     u1930:	
  1693  044D  3000               	movlw	0
  1694  044E                     u1940:	
  1695  044E  00A2               	movwf	??_getServoCommand
  1696  044F  0822               	movf	??_getServoCommand,w
  1697  0450  00F6               	movwf	_lStep
  1698                           
  1699                           ;servoController.c: 27: return ((2*RC5) - 1);
  1700  0451  1003               	clrc
  1701  0452  1A87               	btfsc	7,5	;volatile
  1702  0453  1403               	setc
  1703  0454  3000               	movlw	0
  1704  0455  1803               	skipnc
  1705  0456  3001               	movlw	1
  1706  0457  00A2               	movwf	??_getServoCommand
  1707  0458  01A3               	clrf	??_getServoCommand+1
  1708  0459  1003               	clrc
  1709  045A  0DA2               	rlf	??_getServoCommand,f
  1710  045B  0DA3               	rlf	??_getServoCommand+1,f
  1711  045C  0822               	movf	??_getServoCommand,w
  1712  045D  3EFF               	addlw	255
  1713  045E  00A4               	movwf	??_getServoCommand+2
  1714  045F  0823               	movf	??_getServoCommand+1,w
  1715  0460  1803               	skipnc
  1716  0461  3E01               	addlw	1
  1717  0462  3EFF               	addlw	255
  1718  0463  00A5               	movwf	??_getServoCommand+3
  1719  0464  0824               	movf	??_getServoCommand+2,w
  1720  0465  00A0               	movwf	?_getServoCommand
  1721  0466  0825               	movf	??_getServoCommand+3,w
  1722  0467  00A1               	movwf	?_getServoCommand+1
  1723  0468  0008               	return
  1724  0469                     l2232:	
  1725                           
  1726                           ;servoController.c: 29: return 0;
  1727  0469  01A0               	clrf	?_getServoCommand
  1728  046A  01A1               	clrf	?_getServoCommand+1
  1729  046B  0008               	return
  1730  046C                     __end_of_getServoCommand:	
  1731                           
  1732                           	psect	text8
  1733  0516                     __ptext8:	
  1734 ;; *************** function _encoders_init *****************
  1735 ;; Defined at:
  1736 ;;		line 205 in file "main.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, status,2, status,0
  1745 ;; Tracked objects:
  1746 ;;		On entry : 0/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0
  1752 ;;      Temps:          0       2       0       0       0
  1753 ;;      Totals:         0       2       0       0       0
  1754 ;;Total ram usage:        2 bytes
  1755 ;; Hardware stack levels used:    1
  1756 ;; Hardware stack levels required when called:    1
  1757 ;; This function calls:
  1758 ;;		Nothing
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           
  1765                           ;psect for function _encoders_init
  1766  0516                     _encoders_init:	
  1767                           
  1768                           ;main.c: 208: state1 = (PORTB & 0b00011000) >>3;
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  1772  0516  1283               	bcf	3,5	;RP0=0, select bank0
  1773  0517  1303               	bcf	3,6	;RP1=0, select bank0
  1774  0518  0806               	movf	6,w	;volatile
  1775  0519  00A0               	movwf	??_encoders_init
  1776  051A  3003               	movlw	3
  1777  051B                     u1915:	
  1778  051B  1003               	clrc
  1779  051C  0CA0               	rrf	??_encoders_init,f
  1780  051D  3EFF               	addlw	-1
  1781  051E  1D03               	skipz
  1782  051F  2D1B               	goto	u1915
  1783  0520  0820               	movf	??_encoders_init,w
  1784  0521  3903               	andlw	3
  1785  0522  00A1               	movwf	??_encoders_init+1
  1786  0523  0821               	movf	??_encoders_init+1,w
  1787  0524  00F8               	movwf	_state1	;volatile
  1788                           
  1789                           ;main.c: 209: encoder1_counter = 0;
  1790  0525  3000               	movlw	0
  1791  0526  00DB               	movwf	_encoder1_counter+3	;volatile
  1792  0527  3000               	movlw	0
  1793  0528  00DA               	movwf	_encoder1_counter+2	;volatile
  1794  0529  3000               	movlw	0
  1795  052A  00D9               	movwf	_encoder1_counter+1	;volatile
  1796  052B  3000               	movlw	0
  1797  052C  00D8               	movwf	_encoder1_counter	;volatile
  1798  052D  0008               	return
  1799  052E                     __end_of_encoders_init:	
  1800                           
  1801                           	psect	text9
  1802  0021                     __ptext9:	
  1803 ;; *************** function _SetMotor *****************
  1804 ;; Defined at:
  1805 ;;		line 89 in file "main.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;		None
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  resp            4   44[BANK0 ] long 
  1810 ;;  err             2   42[BANK0 ] int 
  1811 ;;  D_Response      2   40[BANK0 ] int 
  1812 ;;  P_Response      2   38[BANK0 ] int 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1822 ;;      Params:         0       0       0       0       0
  1823 ;;      Locals:         0      10       0       0       0
  1824 ;;      Temps:          0       0       0       0       0
  1825 ;;      Totals:         0      10       0       0       0
  1826 ;;Total ram usage:       10 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:    3
  1829 ;; This function calls:
  1830 ;;		___wmul
  1831 ;;		_constrain
  1832 ;;		_pwm_set
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           
  1839                           ;psect for function _SetMotor
  1840  0021                     _SetMotor:	
  1841                           
  1842                           ;main.c: 91: static int derivative;;main.c: 92: static int last_err;;main.c: 93: long re
      +                          sp;;main.c: 94: int err = set_point - motor_pos;
  1843                           
  1844                           ;incstack = 0
  1845                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1846  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0023  0854               	movf	_motor_pos,w	;volatile
  1849  0024  0250               	subwf	_set_point,w	;volatile
  1850  0025  00CA               	movwf	SetMotor@err
  1851  0026  0855               	movf	_motor_pos+1,w	;volatile
  1852  0027  1C03               	skipc
  1853  0028  0A55               	incf	_motor_pos+1,w	;volatile
  1854  0029  0251               	subwf	_set_point+1,w	;volatile
  1855  002A  00CB               	movwf	SetMotor@err+1
  1856                           
  1857                           ;main.c: 96: derivative = (err - last_err);
  1858  002B  085E               	movf	SetMotor@last_err,w
  1859  002C  024A               	subwf	SetMotor@err,w
  1860  002D  00E1               	movwf	SetMotor@derivative
  1861  002E  085F               	movf	SetMotor@last_err+1,w
  1862  002F  1C03               	skipc
  1863  0030  0A5F               	incf	SetMotor@last_err+1,w
  1864  0031  024B               	subwf	SetMotor@err+1,w
  1865  0032  00E2               	movwf	SetMotor@derivative+1
  1866                           
  1867                           ;main.c: 97: last_err = err;
  1868  0033  084B               	movf	SetMotor@err+1,w
  1869  0034  00DF               	movwf	SetMotor@last_err+1
  1870  0035  084A               	movf	SetMotor@err,w
  1871  0036  00DE               	movwf	SetMotor@last_err
  1872                           
  1873                           ;main.c: 99: int P_Response = 3 * err;
  1874  0037  084B               	movf	SetMotor@err+1,w
  1875  0038  00A7               	movwf	___wmul@multiplier+1
  1876  0039  084A               	movf	SetMotor@err,w
  1877  003A  00A6               	movwf	___wmul@multiplier
  1878  003B  3003               	movlw	3
  1879  003C  00A8               	movwf	___wmul@multiplicand
  1880  003D  3000               	movlw	0
  1881  003E  00A9               	movwf	___wmul@multiplicand+1
  1882  003F  120A  118A  24BB  120A  118A  	fcall	___wmul
  1883  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0046  0827               	movf	?___wmul+1,w
  1886  0047  00C7               	movwf	SetMotor@P_Response+1
  1887  0048  0826               	movf	?___wmul,w
  1888  0049  00C6               	movwf	SetMotor@P_Response
  1889                           
  1890                           ;main.c: 100: int D_Response = (11 * derivative);
  1891  004A  0862               	movf	SetMotor@derivative+1,w
  1892  004B  00A7               	movwf	___wmul@multiplier+1
  1893  004C  0861               	movf	SetMotor@derivative,w
  1894  004D  00A6               	movwf	___wmul@multiplier
  1895  004E  300B               	movlw	11
  1896  004F  00A8               	movwf	___wmul@multiplicand
  1897  0050  3000               	movlw	0
  1898  0051  00A9               	movwf	___wmul@multiplicand+1
  1899  0052  120A  118A  24BB  120A  118A  	fcall	___wmul
  1900  0057  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0058  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0059  0827               	movf	?___wmul+1,w
  1903  005A  00C9               	movwf	SetMotor@D_Response+1
  1904  005B  0826               	movf	?___wmul,w
  1905  005C  00C8               	movwf	SetMotor@D_Response
  1906                           
  1907                           ;main.c: 102: resp = P_Response + D_Response;
  1908  005D  0848               	movf	SetMotor@D_Response,w
  1909  005E  0746               	addwf	SetMotor@P_Response,w
  1910  005F  00CC               	movwf	SetMotor@resp
  1911  0060  0849               	movf	SetMotor@D_Response+1,w
  1912  0061  1803               	skipnc
  1913  0062  0A49               	incf	SetMotor@D_Response+1,w
  1914  0063  0747               	addwf	SetMotor@P_Response+1,w
  1915  0064  00CD               	movwf	SetMotor@resp+1
  1916  0065  01CE               	clrf	SetMotor@resp+2
  1917  0066  1BCD               	btfsc	SetMotor@resp+1,7
  1918  0067  03CE               	decf	SetMotor@resp+2,f
  1919  0068  084E               	movf	SetMotor@resp+2,w
  1920  0069  00CF               	movwf	SetMotor@resp+3
  1921                           
  1922                           ;main.c: 104: resp = constrain(resp, -255,255 );
  1923  006A  084F               	movf	SetMotor@resp+3,w
  1924  006B  00A3               	movwf	constrain@value+3
  1925  006C  084E               	movf	SetMotor@resp+2,w
  1926  006D  00A2               	movwf	constrain@value+2
  1927  006E  084D               	movf	SetMotor@resp+1,w
  1928  006F  00A1               	movwf	constrain@value+1
  1929  0070  084C               	movf	SetMotor@resp,w
  1930  0071  00A0               	movwf	constrain@value
  1931  0072  30FF               	movlw	255
  1932  0073  00A7               	movwf	constrain@lLimit+3
  1933  0074  30FF               	movlw	255
  1934  0075  00A6               	movwf	constrain@lLimit+2
  1935  0076  30FF               	movlw	255
  1936  0077  00A5               	movwf	constrain@lLimit+1
  1937  0078  3001               	movlw	1
  1938  0079  00A4               	movwf	constrain@lLimit
  1939  007A  3000               	movlw	0
  1940  007B  00AB               	movwf	constrain@uLimit+3
  1941  007C  3000               	movlw	0
  1942  007D  00AA               	movwf	constrain@uLimit+2
  1943  007E  3000               	movlw	0
  1944  007F  00A9               	movwf	constrain@uLimit+1
  1945  0080  30FF               	movlw	255
  1946  0081  00A8               	movwf	constrain@uLimit
  1947  0082  120A  118A  23D0  120A  118A  	fcall	_constrain
  1948  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1949  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0089  0823               	movf	?_constrain+3,w
  1951  008A  00CF               	movwf	SetMotor@resp+3
  1952  008B  0822               	movf	?_constrain+2,w
  1953  008C  00CE               	movwf	SetMotor@resp+2
  1954  008D  0821               	movf	?_constrain+1,w
  1955  008E  00CD               	movwf	SetMotor@resp+1
  1956  008F  0820               	movf	?_constrain,w
  1957  0090  00CC               	movwf	SetMotor@resp
  1958                           
  1959                           ;main.c: 105: if (resp > 0){
  1960  0091  1BCF               	btfsc	SetMotor@resp+3,7
  1961  0092  28C5               	goto	l278
  1962  0093  084F               	movf	SetMotor@resp+3,w
  1963  0094  1D03               	btfss	3,2
  1964  0095  28A2               	goto	l2204
  1965  0096  084E               	movf	SetMotor@resp+2,w
  1966  0097  1D03               	btfss	3,2
  1967  0098  28A2               	goto	l2204
  1968  0099  084D               	movf	SetMotor@resp+1,w
  1969  009A  1D03               	btfss	3,2
  1970  009B  28A2               	goto	l2204
  1971  009C  3001               	movlw	1
  1972  009D  024C               	subwf	SetMotor@resp,w
  1973  009E  1D03               	skipz
  1974  009F  28A0               	goto	u1893
  1975  00A0                     u1893:	
  1976  00A0  1C03               	btfss	3,0
  1977  00A1  28C5               	goto	l278
  1978  00A2                     l2204:	
  1979                           
  1980                           ;main.c: 106: pwm_set(1, resp );
  1981  00A2  3001               	movlw	1
  1982  00A3  00BC               	movwf	pwm_set@channel
  1983  00A4  3000               	movlw	0
  1984  00A5  00BD               	movwf	pwm_set@channel+1
  1985  00A6  084F               	movf	SetMotor@resp+3,w
  1986  00A7  00C1               	movwf	pwm_set@duty_cycle+3
  1987  00A8  084E               	movf	SetMotor@resp+2,w
  1988  00A9  00C0               	movwf	pwm_set@duty_cycle+2
  1989  00AA  084D               	movf	SetMotor@resp+1,w
  1990  00AB  00BF               	movwf	pwm_set@duty_cycle+1
  1991  00AC  084C               	movf	SetMotor@resp,w
  1992  00AD  00BE               	movwf	pwm_set@duty_cycle
  1993  00AE  120A  118A  230E  120A  118A  	fcall	_pwm_set
  1994                           
  1995                           ;main.c: 107: pwm_set(2, 0 );
  1996  00B3  3002               	movlw	2
  1997  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1998  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1999  00B6  00BC               	movwf	pwm_set@channel
  2000  00B7  3000               	movlw	0
  2001  00B8  00BD               	movwf	pwm_set@channel+1
  2002  00B9  3000               	movlw	0
  2003  00BA  00C1               	movwf	pwm_set@duty_cycle+3
  2004  00BB  3000               	movlw	0
  2005  00BC  00C0               	movwf	pwm_set@duty_cycle+2
  2006  00BD  3000               	movlw	0
  2007  00BE  00BF               	movwf	pwm_set@duty_cycle+1
  2008  00BF  3000               	movlw	0
  2009  00C0  00BE               	movwf	pwm_set@duty_cycle
  2010  00C1  120A  118A  230E   	fcall	_pwm_set
  2011                           
  2012                           ;main.c: 108: }else if(resp < 0){
  2013  00C4  0008               	return
  2014  00C5                     l278:	
  2015  00C5  1FCF               	btfss	SetMotor@resp+3,7
  2016  00C6  28F1               	goto	l2208
  2017                           
  2018                           ;main.c: 109: pwm_set(1, 0 );
  2019  00C7  3001               	movlw	1
  2020  00C8  00BC               	movwf	pwm_set@channel
  2021  00C9  3000               	movlw	0
  2022  00CA  00BD               	movwf	pwm_set@channel+1
  2023  00CB  3000               	movlw	0
  2024  00CC  00C1               	movwf	pwm_set@duty_cycle+3
  2025  00CD  3000               	movlw	0
  2026  00CE  00C0               	movwf	pwm_set@duty_cycle+2
  2027  00CF  3000               	movlw	0
  2028  00D0  00BF               	movwf	pwm_set@duty_cycle+1
  2029  00D1  3000               	movlw	0
  2030  00D2  00BE               	movwf	pwm_set@duty_cycle
  2031  00D3  120A  118A  230E  120A  118A  	fcall	_pwm_set
  2032                           
  2033                           ;main.c: 110: pwm_set(2, -resp );
  2034  00D8  3002               	movlw	2
  2035  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2036  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  2037  00DB  00BC               	movwf	pwm_set@channel
  2038  00DC  3000               	movlw	0
  2039  00DD  00BD               	movwf	pwm_set@channel+1
  2040  00DE  094C               	comf	SetMotor@resp,w
  2041  00DF  00BE               	movwf	pwm_set@duty_cycle
  2042  00E0  094D               	comf	SetMotor@resp+1,w
  2043  00E1  00BF               	movwf	pwm_set@duty_cycle+1
  2044  00E2  094E               	comf	SetMotor@resp+2,w
  2045  00E3  00C0               	movwf	pwm_set@duty_cycle+2
  2046  00E4  094F               	comf	SetMotor@resp+3,w
  2047  00E5  00C1               	movwf	pwm_set@duty_cycle+3
  2048  00E6  0ABE               	incf	pwm_set@duty_cycle,f
  2049  00E7  1903               	skipnz
  2050  00E8  0ABF               	incf	pwm_set@duty_cycle+1,f
  2051  00E9  1903               	skipnz
  2052  00EA  0AC0               	incf	pwm_set@duty_cycle+2,f
  2053  00EB  1903               	skipnz
  2054  00EC  0AC1               	incf	pwm_set@duty_cycle+3,f
  2055  00ED  120A  118A  230E   	fcall	_pwm_set
  2056                           
  2057                           ;main.c: 111: }else{
  2058  00F0  0008               	return
  2059  00F1                     l2208:	
  2060                           
  2061                           ;main.c: 112: pwm_set(1, 0 );
  2062  00F1  3001               	movlw	1
  2063  00F2  00BC               	movwf	pwm_set@channel
  2064  00F3  3000               	movlw	0
  2065  00F4  00BD               	movwf	pwm_set@channel+1
  2066  00F5  3000               	movlw	0
  2067  00F6  00C1               	movwf	pwm_set@duty_cycle+3
  2068  00F7  3000               	movlw	0
  2069  00F8  00C0               	movwf	pwm_set@duty_cycle+2
  2070  00F9  3000               	movlw	0
  2071  00FA  00BF               	movwf	pwm_set@duty_cycle+1
  2072  00FB  3000               	movlw	0
  2073  00FC  00BE               	movwf	pwm_set@duty_cycle
  2074  00FD  120A  118A  230E  120A  118A  	fcall	_pwm_set
  2075                           
  2076                           ;main.c: 113: pwm_set(2, 0 );
  2077  0102  3002               	movlw	2
  2078  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0104  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0105  00BC               	movwf	pwm_set@channel
  2081  0106  3000               	movlw	0
  2082  0107  00BD               	movwf	pwm_set@channel+1
  2083  0108  3000               	movlw	0
  2084  0109  00C1               	movwf	pwm_set@duty_cycle+3
  2085  010A  3000               	movlw	0
  2086  010B  00C0               	movwf	pwm_set@duty_cycle+2
  2087  010C  3000               	movlw	0
  2088  010D  00BF               	movwf	pwm_set@duty_cycle+1
  2089  010E  3000               	movlw	0
  2090  010F  00BE               	movwf	pwm_set@duty_cycle
  2091  0110  120A  118A  230E   	fcall	_pwm_set
  2092  0113  0008               	return
  2093  0114                     __end_of_SetMotor:	
  2094                           
  2095                           	psect	text10
  2096  030E                     __ptext10:	
  2097 ;; *************** function _pwm_set *****************
  2098 ;; Defined at:
  2099 ;;		line 72 in file "pwm.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  channel         2   28[BANK0 ] int 
  2102 ;;  duty_cycle      4   30[BANK0 ] long 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;		None
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      void 
  2107 ;; Registers used:
  2108 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2114 ;;      Params:         0       6       0       0       0
  2115 ;;      Locals:         0       0       0       0       0
  2116 ;;      Temps:          0       4       0       0       0
  2117 ;;      Totals:         0      10       0       0       0
  2118 ;;Total ram usage:       10 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    2
  2121 ;; This function calls:
  2122 ;;		___aldiv
  2123 ;;		___lmul
  2124 ;; This function is called by:
  2125 ;;		_SetMotor
  2126 ;;		_motor_reset
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           
  2132                           ;psect for function _pwm_set
  2133  030E                     _pwm_set:	
  2134                           
  2135                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2136                           
  2137                           ;incstack = 0
  2138                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2139  030E  1283               	bcf	3,5	;RP0=0, select bank0
  2140  030F  1303               	bcf	3,6	;RP1=0, select bank0
  2141  0310  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  2142  0311  0008               	return
  2143  0312  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  2144  0313  2B24               	goto	l2098
  2145  0314  0841               	movf	pwm_set@duty_cycle+3,w
  2146  0315  1D03               	btfss	3,2
  2147  0316  0008               	return
  2148  0317  0840               	movf	pwm_set@duty_cycle+2,w
  2149  0318  1D03               	btfss	3,2
  2150  0319  0008               	return
  2151  031A  3001               	movlw	1
  2152  031B  023F               	subwf	pwm_set@duty_cycle+1,w
  2153  031C  1D03               	skipz
  2154  031D  2B22               	goto	u1793
  2155  031E  3000               	movlw	0
  2156  031F  023E               	subwf	pwm_set@duty_cycle,w
  2157  0320  1D03               	skipz
  2158  0321  2B22               	goto	u1793
  2159  0322                     u1793:	
  2160  0322  1803               	btfsc	3,0
  2161  0323  0008               	return
  2162  0324                     l2098:	
  2163                           
  2164                           ;pwm.c: 77: if (duty_cycle !=0){
  2165  0324  0841               	movf	pwm_set@duty_cycle+3,w
  2166  0325  0440               	iorwf	pwm_set@duty_cycle+2,w
  2167  0326  043F               	iorwf	pwm_set@duty_cycle+1,w
  2168  0327  043E               	iorwf	pwm_set@duty_cycle,w
  2169  0328  1903               	skipnz
  2170  0329  2B81               	goto	l2108
  2171                           
  2172                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  2173  032A  3020               	movlw	32
  2174  032B  00C2               	movwf	??_pwm_set
  2175  032C  3000               	movlw	0
  2176  032D  00C3               	movwf	??_pwm_set+1
  2177  032E  3000               	movlw	0
  2178  032F  00C4               	movwf	??_pwm_set+2
  2179  0330  3000               	movlw	0
  2180  0331  00C5               	movwf	??_pwm_set+3
  2181  0332  3000               	movlw	0
  2182  0333  00B0               	movwf	___aldiv@divisor+3
  2183  0334  3000               	movlw	0
  2184  0335  00AF               	movwf	___aldiv@divisor+2
  2185  0336  3000               	movlw	0
  2186  0337  00AE               	movwf	___aldiv@divisor+1
  2187  0338  30FF               	movlw	255
  2188  0339  00AD               	movwf	___aldiv@divisor
  2189  033A  0841               	movf	pwm_set@duty_cycle+3,w
  2190  033B  00A3               	movwf	___lmul@multiplier+3
  2191  033C  0840               	movf	pwm_set@duty_cycle+2,w
  2192  033D  00A2               	movwf	___lmul@multiplier+2
  2193  033E  083F               	movf	pwm_set@duty_cycle+1,w
  2194  033F  00A1               	movwf	___lmul@multiplier+1
  2195  0340  083E               	movf	pwm_set@duty_cycle,w
  2196  0341  00A0               	movwf	___lmul@multiplier
  2197  0342  3000               	movlw	0
  2198  0343  00A7               	movwf	___lmul@multiplicand+3
  2199  0344  3000               	movlw	0
  2200  0345  00A6               	movwf	___lmul@multiplicand+2
  2201  0346  3000               	movlw	0
  2202  0347  00A5               	movwf	___lmul@multiplicand+1
  2203  0348  30DF               	movlw	223
  2204  0349  00A4               	movwf	___lmul@multiplicand
  2205  034A  120A  118A  238F  120A  118A  	fcall	___lmul
  2206  034F  1283               	bcf	3,5	;RP0=0, select bank0
  2207  0350  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0351  0823               	movf	?___lmul+3,w
  2209  0352  00B4               	movwf	___aldiv@dividend+3
  2210  0353  0822               	movf	?___lmul+2,w
  2211  0354  00B3               	movwf	___aldiv@dividend+2
  2212  0355  0821               	movf	?___lmul+1,w
  2213  0356  00B2               	movwf	___aldiv@dividend+1
  2214  0357  0820               	movf	?___lmul,w
  2215  0358  00B1               	movwf	___aldiv@dividend
  2216  0359  120A  118A  227F  120A  118A  	fcall	___aldiv
  2217  035E  1283               	bcf	3,5	;RP0=0, select bank0
  2218  035F  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0360  082D               	movf	?___aldiv,w
  2220  0361  07C2               	addwf	??_pwm_set,f
  2221  0362  082E               	movf	?___aldiv+1,w
  2222  0363  1803               	skipnc
  2223  0364  0F2E               	incfsz	?___aldiv+1,w
  2224  0365  2B67               	goto	u1810
  2225  0366  2B68               	goto	u1811
  2226  0367                     u1810:	
  2227  0367  07C3               	addwf	??_pwm_set+1,f
  2228  0368                     u1811:	
  2229  0368  082F               	movf	?___aldiv+2,w
  2230  0369  1803               	skipnc
  2231  036A  0F2F               	incfsz	?___aldiv+2,w
  2232  036B  2B6D               	goto	u1812
  2233  036C  2B6E               	goto	u1813
  2234  036D                     u1812:	
  2235  036D  07C4               	addwf	??_pwm_set+2,f
  2236  036E                     u1813:	
  2237  036E  0830               	movf	?___aldiv+3,w
  2238  036F  1803               	skipnc
  2239  0370  0A30               	incf	?___aldiv+3,w
  2240  0371  07C5               	addwf	??_pwm_set+3,f
  2241  0372  0845               	movf	??_pwm_set+3,w
  2242  0373  00C1               	movwf	pwm_set@duty_cycle+3
  2243  0374  0844               	movf	??_pwm_set+2,w
  2244  0375  00C0               	movwf	pwm_set@duty_cycle+2
  2245  0376  0843               	movf	??_pwm_set+1,w
  2246  0377  00BF               	movwf	pwm_set@duty_cycle+1
  2247  0378  0842               	movf	??_pwm_set,w
  2248  0379  00BE               	movwf	pwm_set@duty_cycle
  2249  037A  2B81               	goto	l2108
  2250  037B                     l2102:	
  2251                           
  2252                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2253  037B  083E               	movf	pwm_set@duty_cycle,w
  2254  037C  0095               	movwf	21	;volatile
  2255                           
  2256                           ;pwm.c: 83: break;
  2257  037D  0008               	return
  2258  037E                     l2104:	
  2259                           
  2260                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2261  037E  083E               	movf	pwm_set@duty_cycle,w
  2262  037F  009B               	movwf	27	;volatile
  2263                           
  2264                           ;pwm.c: 86: break;
  2265  0380  0008               	return
  2266  0381                     l2108:	
  2267                           
  2268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2269                           ; Switch size 1, requested type "simple"
  2270                           ; Number of cases is 1, Range of values is 0 to 0
  2271                           ; switch strategies available:
  2272                           ; Name         Instructions Cycles
  2273                           ; simple_byte            4     3 (average)
  2274                           ; direct_byte           11     8 (fixed)
  2275                           ; jumptable            260     6 (fixed)
  2276                           ;	Chosen strategy is simple_byte
  2277  0381  083D               	movf	pwm_set@channel+1,w
  2278  0382  3A00               	xorlw	0	; case 0
  2279  0383  1903               	skipnz
  2280  0384  2B86               	goto	l2390
  2281  0385  2B8E               	goto	l182
  2282  0386                     l2390:	
  2283                           
  2284                           ; Switch size 1, requested type "simple"
  2285                           ; Number of cases is 2, Range of values is 1 to 2
  2286                           ; switch strategies available:
  2287                           ; Name         Instructions Cycles
  2288                           ; simple_byte            7     4 (average)
  2289                           ; direct_byte           17    11 (fixed)
  2290                           ; jumptable            263     9 (fixed)
  2291                           ;	Chosen strategy is simple_byte
  2292  0386  083C               	movf	pwm_set@channel,w
  2293  0387  3A01               	xorlw	1	; case 1
  2294  0388  1903               	skipnz
  2295  0389  2B7B               	goto	l2102
  2296  038A  3A03               	xorlw	3	; case 2
  2297  038B  1903               	skipnz
  2298  038C  2B7E               	goto	l2104
  2299  038D  2B8E               	goto	l182
  2300  038E                     l182:	
  2301  038E  0008               	return
  2302  038F                     __end_of_pwm_set:	
  2303                           
  2304                           	psect	text11
  2305  038F                     __ptext11:	
  2306 ;; *************** function ___lmul *****************
  2307 ;; Defined at:
  2308 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2311 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  product         4    9[BANK0 ] unsigned long 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  4    0[BANK0 ] unsigned long 
  2316 ;; Registers used:
  2317 ;;		wreg, status,2, status,0
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2323 ;;      Params:         0       8       0       0       0
  2324 ;;      Locals:         0       4       0       0       0
  2325 ;;      Temps:          0       1       0       0       0
  2326 ;;      Totals:         0      13       0       0       0
  2327 ;;Total ram usage:       13 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    1
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_pwm_set
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function ___lmul
  2339  038F                     ___lmul:	
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2343  038F  3000               	movlw	0
  2344  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2345  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2346  0392  00AC               	movwf	___lmul@product+3
  2347  0393  3000               	movlw	0
  2348  0394  00AB               	movwf	___lmul@product+2
  2349  0395  3000               	movlw	0
  2350  0396  00AA               	movwf	___lmul@product+1
  2351  0397  3000               	movlw	0
  2352  0398  00A9               	movwf	___lmul@product
  2353  0399                     l2042:	
  2354  0399  1C20               	btfss	___lmul@multiplier,0
  2355  039A  2BAF               	goto	l2046
  2356  039B  0824               	movf	___lmul@multiplicand,w
  2357  039C  07A9               	addwf	___lmul@product,f
  2358  039D  0825               	movf	___lmul@multiplicand+1,w
  2359  039E  1103               	clrz
  2360  039F  1803               	skipnc
  2361  03A0  3E01               	addlw	1
  2362  03A1  1D03               	btfss	3,2
  2363  03A2  07AA               	addwf	___lmul@product+1,f
  2364  03A3  0826               	movf	___lmul@multiplicand+2,w
  2365  03A4  1103               	clrz
  2366  03A5  1803               	skipnc
  2367  03A6  3E01               	addlw	1
  2368  03A7  1D03               	btfss	3,2
  2369  03A8  07AB               	addwf	___lmul@product+2,f
  2370  03A9  0827               	movf	___lmul@multiplicand+3,w
  2371  03AA  1103               	clrz
  2372  03AB  1803               	skipnc
  2373  03AC  3E01               	addlw	1
  2374  03AD  1D03               	btfss	3,2
  2375  03AE  07AC               	addwf	___lmul@product+3,f
  2376  03AF                     l2046:	
  2377  03AF  3001               	movlw	1
  2378  03B0  00A8               	movwf	??___lmul
  2379  03B1                     u1655:	
  2380  03B1  1003               	clrc
  2381  03B2  0DA4               	rlf	___lmul@multiplicand,f
  2382  03B3  0DA5               	rlf	___lmul@multiplicand+1,f
  2383  03B4  0DA6               	rlf	___lmul@multiplicand+2,f
  2384  03B5  0DA7               	rlf	___lmul@multiplicand+3,f
  2385  03B6  0BA8               	decfsz	??___lmul,f
  2386  03B7  2BB1               	goto	u1655
  2387  03B8  3001               	movlw	1
  2388  03B9                     u1665:	
  2389  03B9  1003               	clrc
  2390  03BA  0CA3               	rrf	___lmul@multiplier+3,f
  2391  03BB  0CA2               	rrf	___lmul@multiplier+2,f
  2392  03BC  0CA1               	rrf	___lmul@multiplier+1,f
  2393  03BD  0CA0               	rrf	___lmul@multiplier,f
  2394  03BE  3EFF               	addlw	-1
  2395  03BF  1D03               	skipz
  2396  03C0  2BB9               	goto	u1665
  2397  03C1  0823               	movf	___lmul@multiplier+3,w
  2398  03C2  0422               	iorwf	___lmul@multiplier+2,w
  2399  03C3  0421               	iorwf	___lmul@multiplier+1,w
  2400  03C4  0420               	iorwf	___lmul@multiplier,w
  2401  03C5  1D03               	skipz
  2402  03C6  2B99               	goto	l2042
  2403  03C7  082C               	movf	___lmul@product+3,w
  2404  03C8  00A3               	movwf	?___lmul+3
  2405  03C9  082B               	movf	___lmul@product+2,w
  2406  03CA  00A2               	movwf	?___lmul+2
  2407  03CB  082A               	movf	___lmul@product+1,w
  2408  03CC  00A1               	movwf	?___lmul+1
  2409  03CD  0829               	movf	___lmul@product,w
  2410  03CE  00A0               	movwf	?___lmul
  2411  03CF  0008               	return
  2412  03D0                     __end_of___lmul:	
  2413                           
  2414                           	psect	text12
  2415  027F                     __ptext12:	
  2416 ;; *************** function ___aldiv *****************
  2417 ;; Defined at:
  2418 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  divisor         4   13[BANK0 ] long 
  2421 ;;  dividend        4   17[BANK0 ] long 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  quotient        4   24[BANK0 ] long 
  2424 ;;  sign            1   23[BANK0 ] unsigned char 
  2425 ;;  counter         1   22[BANK0 ] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  4   13[BANK0 ] long 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         0       8       0       0       0
  2436 ;;      Locals:         0       6       0       0       0
  2437 ;;      Temps:          0       1       0       0       0
  2438 ;;      Totals:         0      15       0       0       0
  2439 ;;Total ram usage:       15 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_pwm_set
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           
  2450                           ;psect for function ___aldiv
  2451  027F                     ___aldiv:	
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2455  027F  1283               	bcf	3,5	;RP0=0, select bank0
  2456  0280  1303               	bcf	3,6	;RP1=0, select bank0
  2457  0281  01B7               	clrf	___aldiv@sign
  2458  0282  1FB0               	btfss	___aldiv@divisor+3,7
  2459  0283  2A91               	goto	l539
  2460  0284  09AD               	comf	___aldiv@divisor,f
  2461  0285  09AE               	comf	___aldiv@divisor+1,f
  2462  0286  09AF               	comf	___aldiv@divisor+2,f
  2463  0287  09B0               	comf	___aldiv@divisor+3,f
  2464  0288  0AAD               	incf	___aldiv@divisor,f
  2465  0289  1903               	skipnz
  2466  028A  0AAE               	incf	___aldiv@divisor+1,f
  2467  028B  1903               	skipnz
  2468  028C  0AAF               	incf	___aldiv@divisor+2,f
  2469  028D  1903               	skipnz
  2470  028E  0AB0               	incf	___aldiv@divisor+3,f
  2471  028F  01B7               	clrf	___aldiv@sign
  2472  0290  0AB7               	incf	___aldiv@sign,f
  2473  0291                     l539:	
  2474  0291  1FB4               	btfss	___aldiv@dividend+3,7
  2475  0292  2AA2               	goto	l2064
  2476  0293  09B1               	comf	___aldiv@dividend,f
  2477  0294  09B2               	comf	___aldiv@dividend+1,f
  2478  0295  09B3               	comf	___aldiv@dividend+2,f
  2479  0296  09B4               	comf	___aldiv@dividend+3,f
  2480  0297  0AB1               	incf	___aldiv@dividend,f
  2481  0298  1903               	skipnz
  2482  0299  0AB2               	incf	___aldiv@dividend+1,f
  2483  029A  1903               	skipnz
  2484  029B  0AB3               	incf	___aldiv@dividend+2,f
  2485  029C  1903               	skipnz
  2486  029D  0AB4               	incf	___aldiv@dividend+3,f
  2487  029E  3001               	movlw	1
  2488  029F  00B5               	movwf	??___aldiv
  2489  02A0  0835               	movf	??___aldiv,w
  2490  02A1  06B7               	xorwf	___aldiv@sign,f
  2491  02A2                     l2064:	
  2492  02A2  3000               	movlw	0
  2493  02A3  00BB               	movwf	___aldiv@quotient+3
  2494  02A4  3000               	movlw	0
  2495  02A5  00BA               	movwf	___aldiv@quotient+2
  2496  02A6  3000               	movlw	0
  2497  02A7  00B9               	movwf	___aldiv@quotient+1
  2498  02A8  3000               	movlw	0
  2499  02A9  00B8               	movwf	___aldiv@quotient
  2500  02AA  0830               	movf	___aldiv@divisor+3,w
  2501  02AB  042F               	iorwf	___aldiv@divisor+2,w
  2502  02AC  042E               	iorwf	___aldiv@divisor+1,w
  2503  02AD  042D               	iorwf	___aldiv@divisor,w
  2504  02AE  1903               	skipnz
  2505  02AF  2AF7               	goto	l2086
  2506  02B0  01B6               	clrf	___aldiv@counter
  2507  02B1  0AB6               	incf	___aldiv@counter,f
  2508  02B2                     l2072:	
  2509  02B2  1BB0               	btfsc	___aldiv@divisor+3,7
  2510  02B3  2AC2               	goto	l2074
  2511  02B4  3001               	movlw	1
  2512  02B5  00B5               	movwf	??___aldiv
  2513  02B6                     u1715:	
  2514  02B6  1003               	clrc
  2515  02B7  0DAD               	rlf	___aldiv@divisor,f
  2516  02B8  0DAE               	rlf	___aldiv@divisor+1,f
  2517  02B9  0DAF               	rlf	___aldiv@divisor+2,f
  2518  02BA  0DB0               	rlf	___aldiv@divisor+3,f
  2519  02BB  0BB5               	decfsz	??___aldiv,f
  2520  02BC  2AB6               	goto	u1715
  2521  02BD  3001               	movlw	1
  2522  02BE  00B5               	movwf	??___aldiv
  2523  02BF  0835               	movf	??___aldiv,w
  2524  02C0  07B6               	addwf	___aldiv@counter,f
  2525  02C1  2AB2               	goto	l2072
  2526  02C2                     l2074:	
  2527  02C2  3001               	movlw	1
  2528  02C3  00B5               	movwf	??___aldiv
  2529  02C4                     u1735:	
  2530  02C4  1003               	clrc
  2531  02C5  0DB8               	rlf	___aldiv@quotient,f
  2532  02C6  0DB9               	rlf	___aldiv@quotient+1,f
  2533  02C7  0DBA               	rlf	___aldiv@quotient+2,f
  2534  02C8  0DBB               	rlf	___aldiv@quotient+3,f
  2535  02C9  0BB5               	decfsz	??___aldiv,f
  2536  02CA  2AC4               	goto	u1735
  2537  02CB  0830               	movf	___aldiv@divisor+3,w
  2538  02CC  0234               	subwf	___aldiv@dividend+3,w
  2539  02CD  1D03               	skipz
  2540  02CE  2AD9               	goto	u1745
  2541  02CF  082F               	movf	___aldiv@divisor+2,w
  2542  02D0  0233               	subwf	___aldiv@dividend+2,w
  2543  02D1  1D03               	skipz
  2544  02D2  2AD9               	goto	u1745
  2545  02D3  082E               	movf	___aldiv@divisor+1,w
  2546  02D4  0232               	subwf	___aldiv@dividend+1,w
  2547  02D5  1D03               	skipz
  2548  02D6  2AD9               	goto	u1745
  2549  02D7  082D               	movf	___aldiv@divisor,w
  2550  02D8  0231               	subwf	___aldiv@dividend,w
  2551  02D9                     u1745:	
  2552  02D9  1C03               	skipc
  2553  02DA  2AEA               	goto	l2082
  2554  02DB  082D               	movf	___aldiv@divisor,w
  2555  02DC  02B1               	subwf	___aldiv@dividend,f
  2556  02DD  082E               	movf	___aldiv@divisor+1,w
  2557  02DE  1C03               	skipc
  2558  02DF  0F2E               	incfsz	___aldiv@divisor+1,w
  2559  02E0  02B2               	subwf	___aldiv@dividend+1,f
  2560  02E1  082F               	movf	___aldiv@divisor+2,w
  2561  02E2  1C03               	skipc
  2562  02E3  0F2F               	incfsz	___aldiv@divisor+2,w
  2563  02E4  02B3               	subwf	___aldiv@dividend+2,f
  2564  02E5  0830               	movf	___aldiv@divisor+3,w
  2565  02E6  1C03               	skipc
  2566  02E7  0F30               	incfsz	___aldiv@divisor+3,w
  2567  02E8  02B4               	subwf	___aldiv@dividend+3,f
  2568  02E9  1438               	bsf	___aldiv@quotient,0
  2569  02EA                     l2082:	
  2570  02EA  3001               	movlw	1
  2571  02EB                     u1755:	
  2572  02EB  1003               	clrc
  2573  02EC  0CB0               	rrf	___aldiv@divisor+3,f
  2574  02ED  0CAF               	rrf	___aldiv@divisor+2,f
  2575  02EE  0CAE               	rrf	___aldiv@divisor+1,f
  2576  02EF  0CAD               	rrf	___aldiv@divisor,f
  2577  02F0  3EFF               	addlw	-1
  2578  02F1  1D03               	skipz
  2579  02F2  2AEB               	goto	u1755
  2580  02F3  3001               	movlw	1
  2581  02F4  02B6               	subwf	___aldiv@counter,f
  2582  02F5  1D03               	btfss	3,2
  2583  02F6  2AC2               	goto	l2074
  2584  02F7                     l2086:	
  2585  02F7  0837               	movf	___aldiv@sign,w
  2586  02F8  1903               	btfsc	3,2
  2587  02F9  2B05               	goto	l2090
  2588  02FA  09B8               	comf	___aldiv@quotient,f
  2589  02FB  09B9               	comf	___aldiv@quotient+1,f
  2590  02FC  09BA               	comf	___aldiv@quotient+2,f
  2591  02FD  09BB               	comf	___aldiv@quotient+3,f
  2592  02FE  0AB8               	incf	___aldiv@quotient,f
  2593  02FF  1903               	skipnz
  2594  0300  0AB9               	incf	___aldiv@quotient+1,f
  2595  0301  1903               	skipnz
  2596  0302  0ABA               	incf	___aldiv@quotient+2,f
  2597  0303  1903               	skipnz
  2598  0304  0ABB               	incf	___aldiv@quotient+3,f
  2599  0305                     l2090:	
  2600  0305  083B               	movf	___aldiv@quotient+3,w
  2601  0306  00B0               	movwf	?___aldiv+3
  2602  0307  083A               	movf	___aldiv@quotient+2,w
  2603  0308  00AF               	movwf	?___aldiv+2
  2604  0309  0839               	movf	___aldiv@quotient+1,w
  2605  030A  00AE               	movwf	?___aldiv+1
  2606  030B  0838               	movf	___aldiv@quotient,w
  2607  030C  00AD               	movwf	?___aldiv
  2608  030D  0008               	return
  2609  030E                     __end_of___aldiv:	
  2610                           
  2611                           	psect	text13
  2612  03D0                     __ptext13:	
  2613 ;; *************** function _constrain *****************
  2614 ;; Defined at:
  2615 ;;		line 71 in file "main.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  value           4    0[BANK0 ] long 
  2618 ;;  lLimit          4    4[BANK0 ] long 
  2619 ;;  uLimit          4    8[BANK0 ] long 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  4    0[BANK0 ] long 
  2624 ;; Registers used:
  2625 ;;		wreg, btemp+1
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2631 ;;      Params:         0      12       0       0       0
  2632 ;;      Locals:         0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0
  2634 ;;      Totals:         0      12       0       0       0
  2635 ;;Total ram usage:       12 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_SetMotor
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function _constrain
  2647  03D0                     _constrain:	
  2648                           
  2649                           ;main.c: 72: if (value > uLimit){
  2650                           
  2651                           ;incstack = 0
  2652                           ; Regs used in _constrain: [wreg+btemp+1]
  2653  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2654  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2655  03D2  082B               	movf	constrain@uLimit+3,w
  2656  03D3  3A80               	xorlw	128
  2657  03D4  00FF               	movwf	127
  2658  03D5  0823               	movf	constrain@value+3,w
  2659  03D6  3A80               	xorlw	128
  2660  03D7  027F               	subwf	127,w
  2661  03D8  1D03               	skipz
  2662  03D9  2BE4               	goto	u1823
  2663  03DA  0822               	movf	constrain@value+2,w
  2664  03DB  022A               	subwf	constrain@uLimit+2,w
  2665  03DC  1D03               	skipz
  2666  03DD  2BE4               	goto	u1823
  2667  03DE  0821               	movf	constrain@value+1,w
  2668  03DF  0229               	subwf	constrain@uLimit+1,w
  2669  03E0  1D03               	skipz
  2670  03E1  2BE4               	goto	u1823
  2671  03E2  0820               	movf	constrain@value,w
  2672  03E3  0228               	subwf	constrain@uLimit,w
  2673  03E4                     u1823:	
  2674  03E4  1803               	skipnc
  2675  03E5  2BEF               	goto	l2122
  2676                           
  2677                           ;main.c: 73: return(uLimit);
  2678  03E6  082B               	movf	constrain@uLimit+3,w
  2679  03E7  00A3               	movwf	?_constrain+3
  2680  03E8  082A               	movf	constrain@uLimit+2,w
  2681  03E9  00A2               	movwf	?_constrain+2
  2682  03EA  0829               	movf	constrain@uLimit+1,w
  2683  03EB  00A1               	movwf	?_constrain+1
  2684  03EC  0828               	movf	constrain@uLimit,w
  2685  03ED  00A0               	movwf	?_constrain
  2686  03EE  0008               	return
  2687  03EF                     l2122:	
  2688  03EF  0823               	movf	constrain@value+3,w
  2689  03F0  3A80               	xorlw	128
  2690  03F1  00FF               	movwf	127
  2691  03F2  0827               	movf	constrain@lLimit+3,w
  2692  03F3  3A80               	xorlw	128
  2693  03F4  027F               	subwf	127,w
  2694  03F5  1D03               	skipz
  2695  03F6  2C01               	goto	u1833
  2696  03F7  0826               	movf	constrain@lLimit+2,w
  2697  03F8  0222               	subwf	constrain@value+2,w
  2698  03F9  1D03               	skipz
  2699  03FA  2C01               	goto	u1833
  2700  03FB  0825               	movf	constrain@lLimit+1,w
  2701  03FC  0221               	subwf	constrain@value+1,w
  2702  03FD  1D03               	skipz
  2703  03FE  2C01               	goto	u1833
  2704  03FF  0824               	movf	constrain@lLimit,w
  2705  0400  0220               	subwf	constrain@value,w
  2706  0401                     u1833:	
  2707  0401  1803               	skipnc
  2708  0402  0008               	return
  2709                           
  2710                           ;main.c: 75: return(lLimit);
  2711  0403  0827               	movf	constrain@lLimit+3,w
  2712  0404  00A3               	movwf	?_constrain+3
  2713  0405  0826               	movf	constrain@lLimit+2,w
  2714  0406  00A2               	movwf	?_constrain+2
  2715  0407  0825               	movf	constrain@lLimit+1,w
  2716  0408  00A1               	movwf	?_constrain+1
  2717  0409  0824               	movf	constrain@lLimit,w
  2718  040A  00A0               	movwf	?_constrain
  2719  040B  0008               	return
  2720  040C                     __end_of_constrain:	
  2721                           ;main.c: 77: return(value);
  2722                           
  2723                           
  2724                           	psect	text14
  2725  04BB                     __ptext14:	
  2726 ;; *************** function ___wmul *****************
  2727 ;; Defined at:
  2728 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  multiplier      2    6[BANK0 ] unsigned int 
  2731 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  product         2   10[BANK0 ] unsigned int 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  2    6[BANK0 ] unsigned int 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2743 ;;      Params:         0       4       0       0       0
  2744 ;;      Locals:         0       2       0       0       0
  2745 ;;      Temps:          0       0       0       0       0
  2746 ;;      Totals:         0       6       0       0       0
  2747 ;;Total ram usage:        6 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_SetMotor
  2754 ;;		_main
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           
  2759                           ;psect for function ___wmul
  2760  04BB                     ___wmul:	
  2761                           
  2762                           ;incstack = 0
  2763                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2764  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2765  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2766  04BD  01AA               	clrf	___wmul@product
  2767  04BE  01AB               	clrf	___wmul@product+1
  2768  04BF                     l2134:	
  2769  04BF  1C26               	btfss	___wmul@multiplier,0
  2770  04C0  2CC7               	goto	l474
  2771  04C1  0828               	movf	___wmul@multiplicand,w
  2772  04C2  07AA               	addwf	___wmul@product,f
  2773  04C3  1803               	skipnc
  2774  04C4  0AAB               	incf	___wmul@product+1,f
  2775  04C5  0829               	movf	___wmul@multiplicand+1,w
  2776  04C6  07AB               	addwf	___wmul@product+1,f
  2777  04C7                     l474:	
  2778  04C7  3001               	movlw	1
  2779  04C8                     u1855:	
  2780  04C8  1003               	clrc
  2781  04C9  0DA8               	rlf	___wmul@multiplicand,f
  2782  04CA  0DA9               	rlf	___wmul@multiplicand+1,f
  2783  04CB  3EFF               	addlw	-1
  2784  04CC  1D03               	skipz
  2785  04CD  2CC8               	goto	u1855
  2786  04CE  3001               	movlw	1
  2787  04CF                     u1865:	
  2788  04CF  1003               	clrc
  2789  04D0  0CA7               	rrf	___wmul@multiplier+1,f
  2790  04D1  0CA6               	rrf	___wmul@multiplier,f
  2791  04D2  3EFF               	addlw	-1
  2792  04D3  1D03               	skipz
  2793  04D4  2CCF               	goto	u1865
  2794  04D5  0826               	movf	___wmul@multiplier,w
  2795  04D6  0427               	iorwf	___wmul@multiplier+1,w
  2796  04D7  1D03               	btfss	3,2
  2797  04D8  2CBF               	goto	l2134
  2798  04D9  082B               	movf	___wmul@product+1,w
  2799  04DA  00A7               	movwf	?___wmul+1
  2800  04DB  082A               	movf	___wmul@product,w
  2801  04DC  00A6               	movwf	?___wmul
  2802  04DD  0008               	return
  2803  04DE                     __end_of___wmul:	
  2804                           
  2805                           	psect	text15
  2806  0114                     __ptext15:	
  2807 ;; *************** function _isr *****************
  2808 ;; Defined at:
  2809 ;;		line 137 in file "main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  portB           1    5[COMMON] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2823 ;;      Params:         0       0       0       0       0
  2824 ;;      Locals:         1       0       0       0       0
  2825 ;;      Temps:          5       0       0       0       0
  2826 ;;      Totals:         6       0       0       0       0
  2827 ;;Total ram usage:        6 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		Interrupt level 1
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _isr
  2838  0114                     _isr:	
  2839                           
  2840                           ;main.c: 138: static int tick;;main.c: 142: if (T0IE && T0IF) {
  2841  0114  1A8B               	btfsc	11,5	;volatile
  2842  0115  1D0B               	btfss	11,2	;volatile
  2843  0116  291E               	goto	i1l1848
  2844                           
  2845                           ;main.c: 143: set_motor_flag = 1;
  2846  0117  1283               	bcf	3,5	;RP0=0, select bank0
  2847  0118  1303               	bcf	3,6	;RP1=0, select bank0
  2848  0119  01E0               	clrf	_set_motor_flag
  2849  011A  0AE0               	incf	_set_motor_flag,f
  2850                           
  2851                           ;main.c: 145: TMR0 = (0xff - 195);
  2852  011B  303C               	movlw	60
  2853  011C  0081               	movwf	1	;volatile
  2854                           
  2855                           ;main.c: 146: T0IF = 0;
  2856  011D  110B               	bcf	11,2	;volatile
  2857  011E                     i1l1848:	
  2858                           
  2859                           ;main.c: 147: };main.c: 150: if (RBIE && RBIF) {
  2860  011E  198B               	btfsc	11,3	;volatile
  2861  011F  1C0B               	btfss	11,0	;volatile
  2862  0120  29CC               	goto	i1l321
  2863                           
  2864                           ;main.c: 151: char portB = PORTB;
  2865  0121  1283               	bcf	3,5	;RP0=0, select bank0
  2866  0122  1303               	bcf	3,6	;RP1=0, select bank0
  2867  0123  0806               	movf	6,w	;volatile
  2868  0124  00F0               	movwf	??_isr
  2869  0125  0870               	movf	??_isr,w
  2870  0126  00F5               	movwf	isr@portB
  2871                           
  2872                           ;main.c: 153: ab1 = (portB & 0b00011000) >>3;
  2873  0127  0875               	movf	isr@portB,w
  2874  0128  00F0               	movwf	??_isr
  2875  0129  3003               	movlw	3
  2876  012A                     u137_25:	
  2877  012A  1003               	clrc
  2878  012B  0CF0               	rrf	??_isr,f
  2879  012C  3EFF               	addlw	-1
  2880  012D  1D03               	skipz
  2881  012E  292A               	goto	u137_25
  2882  012F  0870               	movf	??_isr,w
  2883  0130  3903               	andlw	3
  2884  0131  00F1               	movwf	??_isr+1
  2885  0132  0871               	movf	??_isr+1,w
  2886  0133  00F7               	movwf	_ab1	;volatile
  2887                           
  2888                           ;main.c: 154: switch(state1)
  2889  0134  29AE               	goto	i1l1894
  2890  0135                     i1l1856:	
  2891                           
  2892                           ;main.c: 157: if(ab1 == 1){
  2893  0135  0377               	decf	_ab1,w	;volatile
  2894  0136  1D03               	btfss	3,2
  2895  0137  293A               	goto	i1l1860
  2896                           
  2897                           ;main.c: 158: state1 = 1;
  2898  0138  3001               	movlw	1
  2899  0139  295A               	goto	L1
  2900  013A                     i1l1860:	
  2901                           ;main.c: 160: }
  2902                           
  2903                           ;main.c: 159: encoder1_counter--;
  2904                           
  2905                           
  2906                           ;main.c: 161: else if(ab1 == 2){
  2907  013A  3002               	movlw	2
  2908  013B  0677               	xorwf	_ab1,w	;volatile
  2909  013C  1D03               	btfss	3,2
  2910  013D  29BC               	goto	i1l1896
  2911                           
  2912                           ;main.c: 162: state1 = 2;
  2913  013E  3002               	movlw	2
  2914  013F  00F0               	movwf	??_isr
  2915  0140  0870               	movf	??_isr,w
  2916  0141  00F8               	movwf	_state1	;volatile
  2917  0142  2947               	goto	i1l1868
  2918  0143                     i1l1864:	
  2919                           ;main.c: 163: encoder1_counter++;
  2920                           
  2921                           
  2922                           ;main.c: 167: if(ab1 == 0){
  2923  0143  0877               	movf	_ab1,w	;volatile
  2924  0144  1D03               	btfss	3,2
  2925  0145  2955               	goto	i1l1870
  2926                           
  2927                           ;main.c: 168: state1 = 0;
  2928  0146  01F8               	clrf	_state1	;volatile
  2929  0147                     i1l1868:	
  2930                           
  2931                           ;main.c: 169: encoder1_counter++;
  2932  0147  3001               	movlw	1
  2933  0148  07D8               	addwf	_encoder1_counter,f	;volatile
  2934  0149  3000               	movlw	0
  2935  014A  1803               	skipnc
  2936  014B  3001               	movlw	1
  2937  014C  07D9               	addwf	_encoder1_counter+1,f	;volatile
  2938  014D  3000               	movlw	0
  2939  014E  1803               	skipnc
  2940  014F  3001               	movlw	1
  2941  0150  07DA               	addwf	_encoder1_counter+2,f	;volatile
  2942  0151  3000               	movlw	0
  2943  0152  1803               	skipnc
  2944  0153  3001               	movlw	1
  2945  0154  2967               	goto	L2
  2946  0155                     i1l1870:	
  2947                           ;main.c: 170: }
  2948                           
  2949                           
  2950                           ;main.c: 171: else if (ab1 == 3){
  2951  0155  3003               	movlw	3
  2952  0156  0677               	xorwf	_ab1,w	;volatile
  2953  0157  1D03               	btfss	3,2
  2954  0158  29BC               	goto	i1l1896
  2955                           
  2956                           ;main.c: 172: state1 = 3;
  2957  0159  3003               	movlw	3
  2958  015A                     L1:	
  2959  015A  00F0               	movwf	??_isr
  2960  015B  0870               	movf	??_isr,w
  2961  015C  00F8               	movwf	_state1	;volatile
  2962                           
  2963                           ;main.c: 173: encoder1_counter--;
  2964  015D  30FF               	movlw	255
  2965  015E  07D8               	addwf	_encoder1_counter,f	;volatile
  2966  015F  30FF               	movlw	255
  2967  0160  1C03               	skipc
  2968  0161  07D9               	addwf	_encoder1_counter+1,f	;volatile
  2969  0162  30FF               	movlw	255
  2970  0163  1C03               	skipc
  2971  0164  07DA               	addwf	_encoder1_counter+2,f	;volatile
  2972  0165  30FF               	movlw	255
  2973  0166  1C03               	skipc
  2974  0167                     L2:	
  2975  0167  07DB               	addwf	_encoder1_counter+3,f	;volatile
  2976  0168  29BC               	goto	i1l1896
  2977  0169                     i1l1874:	
  2978                           
  2979                           ;main.c: 177: if(ab1 == 0){
  2980  0169  0877               	movf	_ab1,w	;volatile
  2981  016A  1D03               	btfss	3,2
  2982  016B  296E               	goto	i1l1880
  2983                           
  2984                           ;main.c: 178: state1 = 0;
  2985  016C  01F8               	clrf	_state1	;volatile
  2986  016D  298C               	goto	L3
  2987  016E                     i1l1880:	
  2988                           ;main.c: 180: }
  2989                           
  2990                           ;main.c: 179: encoder1_counter--;
  2991                           
  2992                           
  2993                           ;main.c: 181: else if(ab1 == 3){
  2994  016E  3003               	movlw	3
  2995  016F  0677               	xorwf	_ab1,w	;volatile
  2996  0170  1D03               	btfss	3,2
  2997  0171  29BC               	goto	i1l1896
  2998                           
  2999                           ;main.c: 182: state1 = 3;
  3000  0172  3003               	movlw	3
  3001  0173  00F0               	movwf	??_isr
  3002  0174  0870               	movf	??_isr,w
  3003  0175  00F8               	movwf	_state1	;volatile
  3004                           
  3005                           ;main.c: 183: encoder1_counter++;
  3006  0176  3001               	movlw	1
  3007  0177  07D8               	addwf	_encoder1_counter,f	;volatile
  3008  0178  3000               	movlw	0
  3009  0179  1803               	skipnc
  3010  017A  3001               	movlw	1
  3011  017B  07D9               	addwf	_encoder1_counter+1,f	;volatile
  3012  017C  3000               	movlw	0
  3013  017D  1803               	skipnc
  3014  017E  3001               	movlw	1
  3015  017F  07DA               	addwf	_encoder1_counter+2,f	;volatile
  3016  0180  3000               	movlw	0
  3017  0181  1803               	skipnc
  3018  0182  3001               	movlw	1
  3019  0183  2996               	goto	L4
  3020  0184                     i1l1884:	
  3021                           
  3022                           ;main.c: 187: if(ab1 == 2){
  3023  0184  3002               	movlw	2
  3024  0185  0677               	xorwf	_ab1,w	;volatile
  3025  0186  1D03               	btfss	3,2
  3026  0187  2998               	goto	i1l1888
  3027                           
  3028                           ;main.c: 188: state1 = 2;
  3029  0188  3002               	movlw	2
  3030  0189  00F0               	movwf	??_isr
  3031  018A  0870               	movf	??_isr,w
  3032  018B  00F8               	movwf	_state1	;volatile
  3033  018C                     L3:	
  3034                           
  3035                           ;main.c: 189: encoder1_counter--;
  3036  018C  30FF               	movlw	255
  3037  018D  07D8               	addwf	_encoder1_counter,f	;volatile
  3038  018E  30FF               	movlw	255
  3039  018F  1C03               	skipc
  3040  0190  07D9               	addwf	_encoder1_counter+1,f	;volatile
  3041  0191  30FF               	movlw	255
  3042  0192  1C03               	skipc
  3043  0193  07DA               	addwf	_encoder1_counter+2,f	;volatile
  3044  0194  30FF               	movlw	255
  3045  0195  1C03               	skipc
  3046  0196                     L4:	
  3047  0196  07DB               	addwf	_encoder1_counter+3,f	;volatile
  3048                           
  3049                           ;main.c: 190: }
  3050  0197  29BC               	goto	i1l1896
  3051  0198                     i1l1888:	
  3052                           
  3053                           ;main.c: 191: else if (ab1 == 1){
  3054  0198  0377               	decf	_ab1,w	;volatile
  3055  0199  1D03               	btfss	3,2
  3056  019A  29BC               	goto	i1l1896
  3057                           
  3058                           ;main.c: 192: state1 = 1;
  3059  019B  3001               	movlw	1
  3060  019C  00F0               	movwf	??_isr
  3061  019D  0870               	movf	??_isr,w
  3062  019E  00F8               	movwf	_state1	;volatile
  3063                           
  3064                           ;main.c: 193: encoder1_counter++;
  3065  019F  3001               	movlw	1
  3066  01A0  07D8               	addwf	_encoder1_counter,f	;volatile
  3067  01A1  3000               	movlw	0
  3068  01A2  1803               	skipnc
  3069  01A3  3001               	movlw	1
  3070  01A4  07D9               	addwf	_encoder1_counter+1,f	;volatile
  3071  01A5  3000               	movlw	0
  3072  01A6  1803               	skipnc
  3073  01A7  3001               	movlw	1
  3074  01A8  07DA               	addwf	_encoder1_counter+2,f	;volatile
  3075  01A9  3000               	movlw	0
  3076  01AA  1803               	skipnc
  3077  01AB  3001               	movlw	1
  3078  01AC  07DB               	addwf	_encoder1_counter+3,f	;volatile
  3079  01AD  29BC               	goto	i1l1896
  3080  01AE                     i1l1894:	
  3081  01AE  0878               	movf	_state1,w	;volatile
  3082                           
  3083                           ; Switch size 1, requested type "simple"
  3084                           ; Number of cases is 4, Range of values is 0 to 3
  3085                           ; switch strategies available:
  3086                           ; Name         Instructions Cycles
  3087                           ; simple_byte           13     7 (average)
  3088                           ; direct_byte           20     8 (fixed)
  3089                           ; jumptable            260     6 (fixed)
  3090                           ;	Chosen strategy is simple_byte
  3091  01AF  3A00               	xorlw	0	; case 0
  3092  01B0  1903               	skipnz
  3093  01B1  2935               	goto	i1l1856
  3094  01B2  3A01               	xorlw	1	; case 1
  3095  01B3  1903               	skipnz
  3096  01B4  2943               	goto	i1l1864
  3097  01B5  3A03               	xorlw	3	; case 2
  3098  01B6  1903               	skipnz
  3099  01B7  2969               	goto	i1l1874
  3100  01B8  3A01               	xorlw	1	; case 3
  3101  01B9  1903               	skipnz
  3102  01BA  2984               	goto	i1l1884
  3103  01BB  29BC               	goto	i1l1896
  3104  01BC                     i1l1896:	
  3105                           
  3106                           ;main.c: 198: motor_pos = -encoder1_counter;
  3107  01BC  0958               	comf	_encoder1_counter,w	;volatile
  3108  01BD  00D4               	movwf	_motor_pos	;volatile
  3109  01BE  0959               	comf	_encoder1_counter+1,w	;volatile
  3110  01BF  00D5               	movwf	_motor_pos+1	;volatile
  3111  01C0  095A               	comf	_encoder1_counter+2,w	;volatile
  3112  01C1  00D6               	movwf	_motor_pos+2	;volatile
  3113  01C2  095B               	comf	_encoder1_counter+3,w	;volatile
  3114  01C3  00D7               	movwf	_motor_pos+3	;volatile
  3115  01C4  0AD4               	incf	_motor_pos,f	;volatile
  3116  01C5  1903               	skipnz
  3117  01C6  0AD5               	incf	_motor_pos+1,f	;volatile
  3118  01C7  1903               	skipnz
  3119  01C8  0AD6               	incf	_motor_pos+2,f	;volatile
  3120  01C9  1903               	skipnz
  3121  01CA  0AD7               	incf	_motor_pos+3,f	;volatile
  3122                           
  3123                           ;main.c: 199: RBIF = 0;
  3124  01CB  100B               	bcf	11,0	;volatile
  3125  01CC                     i1l321:	
  3126  01CC  0874               	movf	??_isr+4,w
  3127  01CD  008A               	movwf	10
  3128  01CE  0873               	movf	??_isr+3,w
  3129  01CF  0084               	movwf	4
  3130  01D0  0E72               	swapf	(??_isr+2)^(0+4294967168),w
  3131  01D1  0083               	movwf	3
  3132  01D2  0EFE               	swapf	126,f
  3133  01D3  0E7E               	swapf	126,w
  3134  01D4  0009               	retfie
  3135  01D5                     __end_of_isr:	
  3136  007E                     btemp	set	126	;btemp
  3137  007E                     wtemp0	set	126
  3138                           
  3139                           	psect	intentry
  3140  0004                     __pintentry:	
  3141                           ;incstack = 0
  3142                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
  3143                           
  3144  0004                     interrupt_function:	
  3145  007E                     saved_w	set	btemp
  3146  0004  00FE               	movwf	btemp
  3147  0005  0E03               	swapf	3,w
  3148  0006  00F2               	movwf	??_isr+2
  3149  0007  0804               	movf	4,w
  3150  0008  00F3               	movwf	??_isr+3
  3151  0009  080A               	movf	10,w
  3152  000A  00F4               	movwf	??_isr+4
  3153  000B  120A  118A  2914   	ljmp	_isr


Data Sizes:
    Strings     16
    Constant    10
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     53      72
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetMotor
    _motor_reset->_pwm_set
    _SetPoint->___wmul
    _SetMotor->_pwm_set
    _pwm_set->___aldiv
    ___aldiv->___lmul
    ___wmul->_getServoCommand

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   11448
                                             48 BANK0      5     5      0
                           _SetMotor
                           _SetPoint
                             ___wmul
                      _encoders_init
                    _getServoCommand
                      _getServoState
                        _motor_reset
                           _pwm_init
                            _pwm_set
                        _serial_init
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    3157
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (2) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                             6     4      2     196
                                             12 BANK0      6     4      2
                             ___wmul (ARG)
                    _getServoCommand (ARG)
 ---------------------------------------------------------------------------------
 (1) _getServoState                                        4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _getServoCommand                                      6     4      2       0
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetMotor                                            10    10      0    4449
                                             38 BANK0     10    10      0
                             ___wmul
                          _constrain
                            _pwm_set
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2961
                                             28 BANK0     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _constrain                                           12     0     12     487
                                              0 BANK0     12     0     12
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     676
                                              6 BANK0      6     2      4
                    _getServoCommand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  6     6      0      23
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetMotor
     ___wmul
       _getServoCommand (ARG)
     _constrain
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
   _SetPoint
     ___wmul (ARG)
       _getServoCommand (ARG)
     _getServoCommand (ARG)
   ___wmul
     _getServoCommand (ARG)
   _encoders_init
   _getServoCommand
   _getServoState
   _motor_reset
     _SetPoint
       ___wmul (ARG)
         _getServoCommand (ARG)
       _getServoCommand (ARG)
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _serial_init

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      53       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     35      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      53      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Jun 06 17:21:32 2019

                       pc 0002               __CFG_CP$OFF 0000                        fsr 0004  
     ___wmul@multiplicand 0028           ??_getServoState 0022                       l170 0484  
                     l182 038E                       l278 00C5                       l474 04C7  
                     l539 0291                       _GIE 005F                       _RA5 002D  
                     _RA6 002E                       _RB5 0035                       _RC3 003B  
                     _RC4 003C                       _RC5 003D                       _PR2 0092  
            __CFG_CPD$OFF 0000                       _RX9 00C6                       _TX9 04C6  
                     _ab1 0077                       _isr 0114                       fsr0 0004  
                     indf 0000              __CFG_IESO$ON 0000              __CFG_FOSC$EC 0000  
        _encoder1_counter 0058              __CFG_LVP$OFF 0000                      l2102 037B  
                    l2104 037E                      l2122 03EF                      l2042 0399  
                    l2108 0381                      l2204 00A2                      l2134 04BF  
                    l2046 03AF                      l2072 02B2                      l2064 02A2  
                    l2208 00F1                      l2232 0469                      l2090 0305  
                    l2082 02EA                      l2074 02C2                      l2086 02F7  
                    l2098 0324                      l2362 024E                      l2364 0271  
                    l2356 022D                      l2390 0386                      l2358 023D  
                    ?_isr 0070                      STR_1 04EE                      _ANS4 0C44  
                    _ANS8 0C48                      _ANS9 0C49                      _BRGH 04C2  
                    _T0IE 005D                      _CREN 00C4                      _T0IF 005A  
                    _FERR 00C2                      u2020 023A                      u1055 04AF  
                    _IOCB 0096                      u1810 0367                      u1715 02B6  
                    u1811 0368                      u1812 036D                      u1813 036E  
                    u1823 03E4                      u1735 02C4                      u1655 03B1  
                    u1833 0401                      u1745 02D9                      u1665 03B9  
                    u1930 044D                      u1755 02EB                      u1915 051B  
                    u1940 044E                      u1855 04C8                      u1865 04CF  
                    u1793 0322                      _PEIE 005E                      u1893 00A0  
                    _RBIE 005B                      _RBIF 0058                      _RCIE 0465  
                    _RCIF 0065                      _OERR 00C1                      _TMR0 0001  
                    _SPEN 00C7                      _SREN 00C5                      _TXIE 0464  
                    _TXEN 04C5                      _TXIF 0064                      _SYNC 04C4  
       ??_getServoCommand 0022              __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000  
                    _main 01D5                      btemp 007E                      start 000E  
           __CFG_MCLRE$ON 0000                     ??_isr 0070           __end_of___aldiv 030E  
                   ?_main 0070                     _ANS10 0C4A                     _ANS11 0C4B  
                   _ANS13 0C4D             __CFG_WDTE$OFF 0000                     i1l321 01CC  
                   _RCREG 001A                     _SPBRG 0099                     _PORTB 0006  
                   _TXREG 0019       ___lmul@multiplicand 0024           ??_encoders_init 0020  
                   _lStep 0076           __end_of_dpowers 04EE                     _dummy 0079  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_pwm_set 038F  
                   status 0003                     wtemp0 007E           __initialization 0011  
            __end_of_main 027F                    ??_main 0050          __end_of_SetMotor 0114  
        __end_of_SetPoint 04BB                    _CCPR1L 0015                    _CCPR2L 001B  
                  i1l1860 013A                    i1l1870 0155                    i1l1880 016E  
                  i1l1864 0143                    i1l1856 0135                    i1l1848 011E  
                  i1l1874 0169                    i1l1884 0184                    i1l1868 0147  
                  i1l1894 01AE                    i1l1888 0198                    i1l1896 01BC  
                  u137_25 012A                    _TMR1IE 0460                    _TRISB1 0431  
                  _TRISB2 0432                    _TRISC1 0439                    _TRISA5 042D  
                  _TRISB3 0433                    _TRISC2 043A                    _TRISA6 042E  
                  _TRISB4 0434                    _TRISB5 0435                    _TRISC3 043B  
                  _TRISC4 043C                    _TRISB7 0437                    _TRISC5 043D  
          __CFG_PWRTE$OFF 0000              ?_serial_init 0070                    ___lmul 038F  
               ??___aldiv 0035                    ___wmul 04BB                    _state1 0078  
            ?_motor_reset 0070                    saved_w 007E          __end_of_pwm_init 0496  
               ??_pwm_set 0042   __end_of__initialization 001D            __pcstackCOMMON 0070  
         _getServoCommand 0440            _OPTION_REGbits 0081               SetMotor@err 004A  
              __pbssBANK0 0050        __size_of_constrain 003C                 ?_SetMotor 0070  
               ?_SetPoint 002C                __pmaintext 01D5                   ?___lmul 0020  
                 ?___wmul 0026                __pintentry 0004            ___lmul@product 0029  
   __end_of_getServoState 0550             ?_resetCounter 0070                __stringtab 04DE  
              ??_SetMotor 0046                ??_SetPoint 002E                   ___aldiv 027F  
         __size_of___lmul 0041           __size_of___wmul 0023                 ?_pwm_init 0070  
 __end_of_getServoCommand 046C      __size_of_serial_init 0018         __end_of_constrain 040C  
                 __ptext1 04FE                   __ptext2 046C                   __ptext3 040C  
                 __ptext4 052E                   __ptext5 0496                   __ptext6 0541  
                 __ptext7 0440                   __ptext8 0516                   __ptext9 0021  
                 _dpowers 04E4                 _T2CONbits 0012              __size_of_isr 00C1  
        ___aldiv@dividend 0031      __size_of_motor_reset 0034            ??_resetCounter 0020  
                 _pwm_set 030E                   clrloop0 0551      end_of_initialization 001D  
   __end_of_encoders_init 052E                   isr@tick 005C          ___aldiv@quotient 0038  
              ??_pwm_init 0020          SetMotor@last_err 005E        SetMotor@D_Response 0048  
             _CCP1CONbits 0017               _CCP2CONbits 001D            __end_of___lmul 03D0  
          _set_motor_flag 0060          ?_getServoCommand 0020            __end_of___wmul 04DE  
        _delayus_variable 007A       start_initialization 0011               __end_of_isr 01D5  
            SetMotor@resp 004C      __end_of_resetCounter 0541                  ??___lmul 0028  
       __size_of_SetMotor 00F3         __size_of_SetPoint 0025                  ??___wmul 002A  
      SetMotor@P_Response 0046         pwm_set@duty_cycle 003E               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 0020                  ?___aldiv 002D  
               __pstrings 04DE         __size_of_pwm_init 002A            pwm_set@channel 003C  
               _constrain 03D0                  ?_pwm_set 003C           ___aldiv@divisor 002D  
       interrupt_function 0004           ___aldiv@counter 0036            ___wmul@product 002A  
               clear_ram0 0550    __size_of_getServoState 000F                  _PIR1bits 000C  
           ??_serial_init 0020                 _set_point 0050                 _motor_pos 0054  
           ??_motor_reset 0046               __stringbase 04E3         ___wmul@multiplier 0026  
              ?_constrain 0020           SetPoint@new_val 002C         ___lmul@multiplier 0020  
   __size_of_resetCounter 0013                  _SetMotor 0021                  _SetPoint 0496  
        __size_of___aldiv 008F    __size_of_encoders_init 0018       __end_of_serial_init 0516  
      __end_of__stringtab 04E4             _getServoState 0541                  __ptext10 030E  
                __ptext11 038F                  __ptext12 027F                  __ptext13 03D0  
                __ptext14 04BB                  __ptext15 0114              _resetCounter 052E  
     __end_of_motor_reset 0440         __CFG_BOR4V$BOR21V 0000          __size_of_pwm_set 0081  
           __size_of_main 00AA        SetMotor@derivative 0061                  _pwm_init 046C  
          ?_getServoState 0020               ??_constrain 002C  __size_of_getServoCommand 002C  
                isr@portB 0075           constrain@lLimit 0024           constrain@uLimit 0028  
                intlevel1 0000             _encoders_init 0516                 stringcode 04DE  
             _serial_init 04FE               _motor_reset 040C            constrain@value 0020  
                stringdir 04DE                  stringtab 04DE              ___aldiv@sign 0037  
          ?_encoders_init 0070  
