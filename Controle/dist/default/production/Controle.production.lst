

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 31 08:45:39 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F886 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  008F                     	;# 
   268  0090                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0094                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  0105                     	;# 
   287  0107                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0187                     	;# 
   297  0188                     	;# 
   298  0189                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  000E                     	;# 
   392  000F                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0014                     	;# 
   398  0015                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  001D                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  0081                     	;# 
   412  0085                     	;# 
   413  0086                     	;# 
   414  0087                     	;# 
   415  0089                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  008F                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0093                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0094                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0098                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  009F                     	;# 
   438  0105                     	;# 
   439  0107                     	;# 
   440  0108                     	;# 
   441  0109                     	;# 
   442  010C                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  0185                     	;# 
   448  0187                     	;# 
   449  0188                     	;# 
   450  0189                     	;# 
   451  018C                     	;# 
   452  018D                     	;# 
   453  0000                     	;# 
   454  0001                     	;# 
   455  0002                     	;# 
   456  0003                     	;# 
   457  0004                     	;# 
   458  0005                     	;# 
   459  0006                     	;# 
   460  0007                     	;# 
   461  0009                     	;# 
   462  000A                     	;# 
   463  000B                     	;# 
   464  000C                     	;# 
   465  000D                     	;# 
   466  000E                     	;# 
   467  000E                     	;# 
   468  000F                     	;# 
   469  0010                     	;# 
   470  0011                     	;# 
   471  0012                     	;# 
   472  0013                     	;# 
   473  0014                     	;# 
   474  0015                     	;# 
   475  0015                     	;# 
   476  0016                     	;# 
   477  0017                     	;# 
   478  0018                     	;# 
   479  0019                     	;# 
   480  001A                     	;# 
   481  001B                     	;# 
   482  001B                     	;# 
   483  001C                     	;# 
   484  001D                     	;# 
   485  001E                     	;# 
   486  001F                     	;# 
   487  0081                     	;# 
   488  0085                     	;# 
   489  0086                     	;# 
   490  0087                     	;# 
   491  0089                     	;# 
   492  008C                     	;# 
   493  008D                     	;# 
   494  008E                     	;# 
   495  008F                     	;# 
   496  0090                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0093                     	;# 
   501  0093                     	;# 
   502  0094                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0098                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  0105                     	;# 
   515  0107                     	;# 
   516  0108                     	;# 
   517  0109                     	;# 
   518  010C                     	;# 
   519  010C                     	;# 
   520  010D                     	;# 
   521  010E                     	;# 
   522  010F                     	;# 
   523  0185                     	;# 
   524  0187                     	;# 
   525  0188                     	;# 
   526  0189                     	;# 
   527  018C                     	;# 
   528  018D                     	;# 
   529                           
   530                           	psect	strings
   531  062E                     __pstrings:	
   532  062E                     stringtab:	
   533  062E                     __stringtab:	
   534  062E                     stringcode:	
   535                           ;	String table - string pointers are 1 byte each
   536                           
   537  062E                     stringdir:	
   538  062E  3006               	movlw	high stringdir
   539  062F  008A               	movwf	10
   540  0630  0804               	movf	4,w
   541  0631  0A84               	incf	4,f
   542  0632  0782               	addwf	2,f
   543  0633                     __stringbase:	
   544  0633  3400               	retlw	0
   545  0634                     __end_of__stringtab:	
   546  0634                     _dpowers:	
   547  0634  3401               	retlw	1
   548  0635  3400               	retlw	0
   549  0636  340A               	retlw	10
   550  0637  3400               	retlw	0
   551  0638  3464               	retlw	100
   552  0639  3400               	retlw	0
   553  063A  34E8               	retlw	232
   554  063B  3403               	retlw	3
   555  063C  3410               	retlw	16
   556  063D  3427               	retlw	39
   557  063E                     __end_of_dpowers:	
   558  0006                     _PORTB	set	6
   559  0001                     _TMR0	set	1
   560  0012                     _T2CONbits	set	18
   561  000C                     _PIR1bits	set	12
   562  001B                     _CCPR2L	set	27
   563  0015                     _CCPR1L	set	21
   564  001D                     _CCP2CONbits	set	29
   565  0017                     _CCP1CONbits	set	23
   566  0019                     _TXREG	set	25
   567  001A                     _RCREG	set	26
   568  003D                     _RC5	set	61
   569  003C                     _RC4	set	60
   570  003B                     _RC3	set	59
   571  005F                     _GIE	set	95
   572  005E                     _PEIE	set	94
   573  0035                     _RB5	set	53
   574  0058                     _RBIF	set	88
   575  005B                     _RBIE	set	91
   576  005A                     _T0IF	set	90
   577  005D                     _T0IE	set	93
   578  002E                     _RA6	set	46
   579  002D                     _RA5	set	45
   580  0065                     _RCIF	set	101
   581  0064                     _TXIF	set	100
   582  00C2                     _FERR	set	194
   583  00C1                     _OERR	set	193
   584  00C6                     _RX9	set	198
   585  00C5                     _SREN	set	197
   586  00C4                     _CREN	set	196
   587  00C7                     _SPEN	set	199
   588  0096                     _IOCB	set	150
   589  0081                     _OPTION_REGbits	set	129
   590  0092                     _PR2	set	146
   591  0099                     _SPBRG	set	153
   592  043D                     _TRISC5	set	1085
   593  043C                     _TRISC4	set	1084
   594  043B                     _TRISC3	set	1083
   595  0460                     _TMR1IE	set	1120
   596  0434                     _TRISB4	set	1076
   597  0433                     _TRISB3	set	1075
   598  0432                     _TRISB2	set	1074
   599  0431                     _TRISB1	set	1073
   600  0437                     _TRISB7	set	1079
   601  0435                     _TRISB5	set	1077
   602  042E                     _TRISA6	set	1070
   603  042D                     _TRISA5	set	1069
   604  043A                     _TRISC2	set	1082
   605  0439                     _TRISC1	set	1081
   606  04C5                     _TXEN	set	1221
   607  04C6                     _TX9	set	1222
   608  0465                     _RCIE	set	1125
   609  0464                     _TXIE	set	1124
   610  04C4                     _SYNC	set	1220
   611  04C2                     _BRGH	set	1218
   612  0C4B                     _ANS11	set	3147
   613  0C48                     _ANS8	set	3144
   614  0C49                     _ANS9	set	3145
   615  0C4A                     _ANS10	set	3146
   616  0C4D                     _ANS13	set	3149
   617  0C44                     _ANS4	set	3140
   618  063E                     STR_1:	
   619  063E  3453               	retlw	83	;'S'
   620  063F  3465               	retlw	101	;'e'
   621  0640  3474               	retlw	116	;'t'
   622  0641  3450               	retlw	80	;'P'
   623  0642  346F               	retlw	111	;'o'
   624  0643  3469               	retlw	105	;'i'
   625  0644  346E               	retlw	110	;'n'
   626  0645  3474               	retlw	116	;'t'
   627  0646  343A               	retlw	58	;':'
   628  0647  3420               	retlw	32	;' '
   629  0648  3425               	retlw	37	;'%'
   630  0649  3464               	retlw	100	;'d'
   631  064A  3420               	retlw	32	;' '
   632  064B  340D               	retlw	13
   633  064C  340A               	retlw	10
   634  064D  3400               	retlw	0
   635  064E                     STR_5:	
   636  064E  3446               	retlw	70	;'F'
   637  064F  3469               	retlw	105	;'i'
   638  0650  346D               	retlw	109	;'m'
   639  0651  3420               	retlw	32	;' '
   640  0652  3464               	retlw	100	;'d'
   641  0653  346F               	retlw	111	;'o'
   642  0654  3420               	retlw	32	;' '
   643  0655  3474               	retlw	116	;'t'
   644  0656  3465               	retlw	101	;'e'
   645  0657  3473               	retlw	115	;'s'
   646  0658  3474               	retlw	116	;'t'
   647  0659  3465               	retlw	101	;'e'
   648  065A  3420               	retlw	32	;' '
   649  065B  3400               	retlw	0
   650  065C                     STR_2:	
   651  065C  344B               	retlw	75	;'K'
   652  065D  3470               	retlw	112	;'p'
   653  065E  343A               	retlw	58	;':'
   654  065F  3420               	retlw	32	;' '
   655  0660  3425               	retlw	37	;'%'
   656  0661  3464               	retlw	100	;'d'
   657  0662  3420               	retlw	32	;' '
   658  0663  342D               	retlw	45	;'-'
   659  0664  343E               	retlw	62	;'>'
   660  0665  3420               	retlw	32	;' '
   661  0666  3400               	retlw	0
   662  0667                     STR_3:	
   663  0667  3425               	retlw	37	;'%'
   664  0668  3464               	retlw	100	;'d'
   665  0669  3420               	retlw	32	;' '
   666  066A  3400               	retlw	0
   667  0667                     
   668                           ; #config settings
   669  0000                     
   670                           	psect	cinit
   671  0015                     start_initialization:	
   672  0015                     __initialization:	
   673                           
   674                           ; Clear objects allocated to COMMON
   675  0015  01F0               	clrf	__pbssCOMMON& (0+127)
   676  0016  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   677  0017  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   678  0018  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   679  0019  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   680  001A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   681  001B  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   682                           
   683                           ; Clear objects allocated to BANK0
   684  001C  1283               	bcf	3,5	;RP0=0, select bank0
   685  001D  1303               	bcf	3,6	;RP1=0, select bank0
   686  001E  01E9               	clrf	__pbssBANK0& (0+127)
   687  001F  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   688  0020  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   689  0021  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   690  0022  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   691  0023  01EE               	clrf	(__pbssBANK0+5)& (0+127)
   692                           
   693                           ; Clear objects allocated to BANK1
   694  0024  1383               	bcf	3,7	;select IRP bank0
   695  0025  30A0               	movlw	low __pbssBANK1
   696  0026  0084               	movwf	4
   697  0027  30EB               	movlw	low (__pbssBANK1+75)
   698  0028  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   699                           
   700                           ; Clear objects allocated to BANK3
   701  002D  1783               	bsf	3,7	;select IRP bank2
   702  002E  3090               	movlw	low __pbssBANK3
   703  002F  0084               	movwf	4
   704  0030  30BE               	movlw	low (__pbssBANK3+46)
   705  0031  120A  118A  27F8   	fcall	clear_ram0
   706  0034                     end_of_initialization:	
   707                           ;End of C runtime variable initialization code
   708                           
   709  0034                     __end_of__initialization:	
   710  0034  0183               	clrf	3
   711  0035  120A  118A  2C48   	ljmp	_main	;jump to C main() function
   712                           
   713                           	psect	bssCOMMON
   714  0070                     __pbssCOMMON:	
   715  0070                     _motor_pos:	
   716  0070                     	ds	4
   717  0074                     _samples:	
   718  0074                     	ds	2
   719  0076                     _ab1:	
   720  0076                     	ds	1
   721                           
   722                           	psect	bssBANK0
   723  0069                     __pbssBANK0:	
   724  0069                     _set_point:	
   725  0069                     	ds	4
   726  006D                     _sampling:	
   727  006D                     	ds	1
   728  006E                     _state1:	
   729  006E                     	ds	1
   730                           
   731                           	psect	bssBANK1
   732  00A0                     __pbssBANK1:	
   733  00A0                     _pos_log1:	
   734  00A0                     	ds	46
   735  00CE                     _last_pos:	
   736  00CE                     	ds	4
   737  00D2                     _encoder1_counter:	
   738  00D2                     	ds	4
   739  00D6                     isr@tick:	
   740  00D6                     	ds	2
   741  00D8                     _nSPIData:	
   742  00D8                     	ds	2
   743  00DA                     SetMotor@last_err:	
   744  00DA                     	ds	2
   745  00DC                     _onlyK:	
   746  00DC                     	ds	2
   747  00DE                     _com_time:	
   748  00DE                     	ds	2
   749  00E0                     getServoCommand@lStep:	
   750  00E0                     	ds	1
   751  00E1                     _set_motor_flag:	
   752  00E1                     	ds	1
   753  00E2                     _SPIData:	
   754  00E2                     	ds	1
   755  00E3                     _dummy:	
   756  00E3                     	ds	1
   757  00E4                     _delayus_variable:	
   758  00E4                     	ds	1
   759  00E5                     SetMotor@integral:	
   760  00E5                     	ds	4
   761  00E9                     SetMotor@derivative:	
   762  00E9                     	ds	2
   763                           
   764                           	psect	bssBANK3
   765  0190                     __pbssBANK3:	
   766  0190                     _pos_log2:	
   767  0190                     	ds	46
   768                           
   769                           	psect	clrtext
   770  07F8                     clear_ram0:	
   771                           ;	Called with FSR containing the base address, and
   772                           ;	W with the last address+1
   773                           
   774  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   775  07F9                     clrloop0:	
   776  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   777  07FA  0A84               	incf	4,f	;increment pointer
   778  07FB  0604               	xorwf	4,w	;XOR with final address
   779  07FC  1903               	btfsc	3,2	;have we reached the end yet?
   780  07FD  3400               	retlw	0	;all done for this memory range, return
   781  07FE  0604               	xorwf	4,w	;XOR again to restore value
   782  07FF  2FF9               	goto	clrloop0	;do the next byte
   783                           
   784                           	psect	cstackCOMMON
   785  0077                     __pcstackCOMMON:	
   786  0077                     ?_serial_init:	
   787  0077                     ?_putch:	
   788                           ; 1 bytes @ 0x0
   789                           
   790  0077                     ?_chkchr:	
   791                           ; 1 bytes @ 0x0
   792                           
   793  0077                     ?_putst:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0077                     ?_pwm_init:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0077                     ?_SetMotor:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0077                     ?_resetCounter:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0077                     ?_motor_reset:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0077                     ?_isr:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0077                     ??_isr:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0077                     ?_encoders_init:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0077                     ?_main:	
   818                           ; 1 bytes @ 0x0
   819                           
   820                           
   821                           ; 1 bytes @ 0x0
   822  0077                     	ds	6
   823  007D                     isr@portB:	
   824                           
   825                           ; 1 bytes @ 0x6
   826  007D                     	ds	1
   827                           
   828                           	psect	cstackBANK0
   829  0020                     __pcstackBANK0:	
   830  0020                     ??_serial_init:	
   831  0020                     ??_putch:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  0020                     ??_chkchr:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  0020                     ??_pwm_init:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  0020                     ??_resetCounter:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0020                     ??_encoders_init:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0020                     ?_getServoState:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0020                     ?_getServoCommand:	
   850                           ; 2 bytes @ 0x0
   851                           
   852  0020                     ?___wmul:	
   853                           ; 2 bytes @ 0x0
   854                           
   855  0020                     ?___awdiv:	
   856                           ; 2 bytes @ 0x0
   857                           
   858  0020                     ?___lwdiv:	
   859                           ; 2 bytes @ 0x0
   860                           
   861  0020                     ?_constrain:	
   862                           ; 2 bytes @ 0x0
   863                           
   864  0020                     ?___lmul:	
   865                           ; 4 bytes @ 0x0
   866                           
   867  0020                     ___wmul@multiplier:	
   868                           ; 4 bytes @ 0x0
   869                           
   870  0020                     ___awdiv@divisor:	
   871                           ; 2 bytes @ 0x0
   872                           
   873  0020                     ___lwdiv@divisor:	
   874                           ; 2 bytes @ 0x0
   875                           
   876  0020                     constrain@value:	
   877                           ; 2 bytes @ 0x0
   878                           
   879  0020                     ___lmul@multiplier:	
   880                           ; 4 bytes @ 0x0
   881                           
   882                           
   883                           ; 4 bytes @ 0x0
   884  0020                     	ds	1
   885  0021                     putch@c:	
   886                           
   887                           ; 1 bytes @ 0x1
   888  0021                     	ds	1
   889  0022                     ??_getServoState:	
   890  0022                     ??_getServoCommand:	
   891                           ; 1 bytes @ 0x2
   892                           
   893  0022                     ??_putst:	
   894                           ; 1 bytes @ 0x2
   895                           
   896  0022                     ___wmul@multiplicand:	
   897                           ; 1 bytes @ 0x2
   898                           
   899  0022                     ___awdiv@dividend:	
   900                           ; 2 bytes @ 0x2
   901                           
   902  0022                     ___lwdiv@dividend:	
   903                           ; 2 bytes @ 0x2
   904                           
   905                           
   906                           ; 2 bytes @ 0x2
   907  0022                     	ds	1
   908  0023                     putst@str:	
   909                           
   910                           ; 1 bytes @ 0x3
   911  0023                     	ds	1
   912  0024                     ??___wmul:	
   913  0024                     ??___awdiv:	
   914                           ; 1 bytes @ 0x4
   915                           
   916  0024                     ??___lwdiv:	
   917                           ; 1 bytes @ 0x4
   918                           
   919  0024                     ___wmul@product:	
   920                           ; 1 bytes @ 0x4
   921                           
   922  0024                     constrain@lLimit:	
   923                           ; 2 bytes @ 0x4
   924                           
   925  0024                     ___lmul@multiplicand:	
   926                           ; 4 bytes @ 0x4
   927                           
   928                           
   929                           ; 4 bytes @ 0x4
   930  0024                     	ds	1
   931  0025                     ___awdiv@counter:	
   932  0025                     ___lwdiv@quotient:	
   933                           ; 1 bytes @ 0x5
   934                           
   935                           
   936                           ; 2 bytes @ 0x5
   937  0025                     	ds	1
   938  0026                     ___awdiv@sign:	
   939                           
   940                           ; 1 bytes @ 0x6
   941  0026                     	ds	1
   942  0027                     ___lwdiv@counter:	
   943  0027                     ___awdiv@quotient:	
   944                           ; 1 bytes @ 0x7
   945                           
   946                           
   947                           ; 2 bytes @ 0x7
   948  0027                     	ds	1
   949  0028                     ??___lmul:	
   950  0028                     ?___lwmod:	
   951                           ; 1 bytes @ 0x8
   952                           
   953  0028                     ___lwmod@divisor:	
   954                           ; 2 bytes @ 0x8
   955                           
   956  0028                     constrain@uLimit:	
   957                           ; 2 bytes @ 0x8
   958                           
   959                           
   960                           ; 4 bytes @ 0x8
   961  0028                     	ds	1
   962  0029                     ___lmul@product:	
   963                           
   964                           ; 4 bytes @ 0x9
   965  0029                     	ds	1
   966  002A                     ___lwmod@dividend:	
   967                           
   968                           ; 2 bytes @ 0xA
   969  002A                     	ds	2
   970  002C                     ??_constrain:	
   971  002C                     ??___lwmod:	
   972                           ; 1 bytes @ 0xC
   973                           
   974                           
   975                           ; 1 bytes @ 0xC
   976  002C                     	ds	1
   977  002D                     ?___aldiv:	
   978  002D                     ___lwmod@counter:	
   979                           ; 4 bytes @ 0xD
   980                           
   981  002D                     ___aldiv@divisor:	
   982                           ; 1 bytes @ 0xD
   983                           
   984                           
   985                           ; 4 bytes @ 0xD
   986  002D                     	ds	1
   987  002E                     ?_sprintf:	
   988  002E                     sprintf@f:	
   989                           ; 2 bytes @ 0xE
   990                           
   991                           
   992                           ; 1 bytes @ 0xE
   993  002E                     	ds	3
   994  0031                     ??_sprintf:	
   995  0031                     ___aldiv@dividend:	
   996                           ; 1 bytes @ 0x11
   997                           
   998                           
   999                           ; 4 bytes @ 0x11
  1000  0031                     	ds	3
  1001  0034                     sprintf@ap:	
  1002                           
  1003                           ; 1 bytes @ 0x14
  1004  0034                     	ds	1
  1005  0035                     ??___aldiv:	
  1006  0035                     sprintf@flag:	
  1007                           ; 1 bytes @ 0x15
  1008                           
  1009                           
  1010                           ; 1 bytes @ 0x15
  1011  0035                     	ds	1
  1012  0036                     sprintf@prec:	
  1013  0036                     ___aldiv@counter:	
  1014                           ; 1 bytes @ 0x16
  1015                           
  1016                           
  1017                           ; 1 bytes @ 0x16
  1018  0036                     	ds	1
  1019  0037                     ___aldiv@sign:	
  1020  0037                     sprintf@val:	
  1021                           ; 1 bytes @ 0x17
  1022                           
  1023                           
  1024                           ; 2 bytes @ 0x17
  1025  0037                     	ds	1
  1026  0038                     ___aldiv@quotient:	
  1027                           
  1028                           ; 4 bytes @ 0x18
  1029  0038                     	ds	1
  1030  0039                     sprintf@sp:	
  1031                           
  1032                           ; 1 bytes @ 0x19
  1033  0039                     	ds	1
  1034  003A                     sprintf@c:	
  1035                           
  1036                           ; 1 bytes @ 0x1A
  1037  003A                     	ds	1
  1038  003B                     ?_SetPoint:	
  1039  003B                     SetPoint@new_val:	
  1040                           ; 1 bytes @ 0x1B
  1041                           
  1042                           
  1043                           ; 2 bytes @ 0x1B
  1044  003B                     	ds	1
  1045  003C                     ?_pwm_set:	
  1046  003C                     pwm_set@channel:	
  1047                           ; 1 bytes @ 0x1C
  1048                           
  1049                           
  1050                           ; 2 bytes @ 0x1C
  1051  003C                     	ds	1
  1052  003D                     ??_SetPoint:	
  1053                           
  1054                           ; 1 bytes @ 0x1D
  1055  003D                     	ds	1
  1056  003E                     pwm_set@duty_cycle:	
  1057                           
  1058                           ; 4 bytes @ 0x1E
  1059  003E                     	ds	3
  1060  0041                     SetPoint@sVar:	
  1061                           
  1062                           ; 20 bytes @ 0x21
  1063  0041                     	ds	1
  1064  0042                     ??_pwm_set:	
  1065                           
  1066                           ; 1 bytes @ 0x22
  1067  0042                     	ds	4
  1068  0046                     ??_SetMotor:	
  1069                           
  1070                           ; 1 bytes @ 0x26
  1071  0046                     	ds	8
  1072  004E                     SetMotor@P_Response:	
  1073                           
  1074                           ; 2 bytes @ 0x2E
  1075  004E                     	ds	2
  1076  0050                     SetMotor@D_Response:	
  1077                           
  1078                           ; 2 bytes @ 0x30
  1079  0050                     	ds	2
  1080  0052                     SetMotor@I_Response:	
  1081                           
  1082                           ; 2 bytes @ 0x32
  1083  0052                     	ds	2
  1084  0054                     SetMotor@resp:	
  1085                           
  1086                           ; 4 bytes @ 0x34
  1087  0054                     	ds	1
  1088  0055                     ??_motor_reset:	
  1089                           
  1090                           ; 1 bytes @ 0x35
  1091  0055                     	ds	3
  1092  0058                     SetMotor@err:	
  1093                           
  1094                           ; 2 bytes @ 0x38
  1095  0058                     	ds	2
  1096  005A                     ??_main:	
  1097                           
  1098                           ; 1 bytes @ 0x3A
  1099  005A                     	ds	5
  1100  005F                     main@sVar:	
  1101                           
  1102                           ; 10 bytes @ 0x3F
  1103  005F                     	ds	10
  1104                           
  1105                           	psect	maintext
  1106  0448                     __pmaintext:	
  1107 ;;
  1108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1109 ;;
  1110 ;; *************** function _main *****************
  1111 ;; Defined at:
  1112 ;;		line 290 in file "main.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  sVar           10   63[BANK0 ] unsigned char [10]
  1117 ;;  serialIn        1    0        unsigned char 
  1118 ;;  i               2    0        int 
  1119 ;;  enc1            2    0        int 
  1120 ;;  serialIn        1    0        unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : B00/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1130 ;;      Params:         0       0       0       0       0
  1131 ;;      Locals:         0      16       0       0       0
  1132 ;;      Temps:          0       0       0       0       0
  1133 ;;      Totals:         0      16       0       0       0
  1134 ;;Total ram usage:       16 bytes
  1135 ;; Hardware stack levels required when called:    5
  1136 ;; This function calls:
  1137 ;;		_SetMotor
  1138 ;;		_SetPoint
  1139 ;;		_chkchr
  1140 ;;		_encoders_init
  1141 ;;		_getServoCommand
  1142 ;;		_getServoState
  1143 ;;		_motor_reset
  1144 ;;		_putst
  1145 ;;		_pwm_init
  1146 ;;		_pwm_set
  1147 ;;		_resetCounter
  1148 ;;		_serial_init
  1149 ;;		_sprintf
  1150 ;; This function is called by:
  1151 ;;		Startup code after reset
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           
  1156                           ;psect for function _main
  1157  0448                     _main:	
  1158                           
  1159                           ;main.c: 299: OPTION_REGbits.T0CS = 0;
  1160                           
  1161                           ;incstack = 0
  1162                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1163  0448  1683               	bsf	3,5	;RP0=1, select bank1
  1164  0449  1303               	bcf	3,6	;RP1=0, select bank1
  1165  044A  1281               	bcf	1,5	;volatile
  1166                           
  1167                           ;main.c: 300: OPTION_REGbits.PSA = 0;
  1168  044B  1181               	bcf	1,3	;volatile
  1169                           
  1170                           ;main.c: 301: OPTION_REGbits.PS = 7;
  1171  044C  3007               	movlw	7
  1172  044D  0481               	iorwf	1,f	;volatile
  1173                           
  1174                           ;main.c: 304: TRISB5 = 0;
  1175  044E  1286               	bcf	6,5	;volatile
  1176                           
  1177                           ;main.c: 305: ANS13 = 0;
  1178  044F  1683               	bsf	3,5	;RP0=1, select bank3
  1179  0450  1703               	bsf	3,6	;RP1=1, select bank3
  1180  0451  1289               	bcf	9,5	;volatile
  1181                           
  1182                           ;main.c: 306: TRISB7 = 0;
  1183  0452  1683               	bsf	3,5	;RP0=1, select bank1
  1184  0453  1303               	bcf	3,6	;RP1=0, select bank1
  1185  0454  1386               	bcf	6,7	;volatile
  1186                           
  1187                           ;main.c: 307: TRISB1 = 1;
  1188  0455  1486               	bsf	6,1	;volatile
  1189                           
  1190                           ;main.c: 308: TRISB2 = 1;
  1191  0456  1506               	bsf	6,2	;volatile
  1192                           
  1193                           ;main.c: 309: TRISB3 = 1;
  1194  0457  1586               	bsf	6,3	;volatile
  1195                           
  1196                           ;main.c: 310: TRISB4 = 1;
  1197  0458  1606               	bsf	6,4	;volatile
  1198                           
  1199                           ;main.c: 311: ANS10 = 0;
  1200  0459  1683               	bsf	3,5	;RP0=1, select bank3
  1201  045A  1703               	bsf	3,6	;RP1=1, select bank3
  1202  045B  1109               	bcf	9,2	;volatile
  1203                           
  1204                           ;main.c: 312: ANS9 = 0;
  1205  045C  1089               	bcf	9,1	;volatile
  1206                           
  1207                           ;main.c: 313: ANS8 = 0;
  1208  045D  1009               	bcf	9,0	;volatile
  1209                           
  1210                           ;main.c: 314: ANS11 = 0;
  1211  045E  1189               	bcf	9,3	;volatile
  1212                           
  1213                           ;main.c: 315: RB5=1;
  1214  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1215  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1216  0461  1686               	bsf	6,5	;volatile
  1217                           
  1218                           ;main.c: 318: T0IE = 1;
  1219  0462  168B               	bsf	11,5	;volatile
  1220                           
  1221                           ;main.c: 319: TMR1IE = 0;
  1222  0463  1683               	bsf	3,5	;RP0=1, select bank1
  1223  0464  1303               	bcf	3,6	;RP1=0, select bank1
  1224  0465  100C               	bcf	12,0	;volatile
  1225                           
  1226                           ;main.c: 320: PEIE = 1;
  1227  0466  170B               	bsf	11,6	;volatile
  1228                           
  1229                           ;main.c: 321: GIE = 1;
  1230  0467  178B               	bsf	11,7	;volatile
  1231                           
  1232                           ;main.c: 322: IOCB=0b00011000;
  1233  0468  3018               	movlw	24
  1234  0469  0096               	movwf	22	;volatile
  1235                           
  1236                           ;main.c: 323: RBIE = 1;
  1237  046A  158B               	bsf	11,3	;volatile
  1238                           
  1239                           ;main.c: 327: serial_init();
  1240  046B  120A  158A  279B  120A  118A  	fcall	_serial_init
  1241                           
  1242                           ;main.c: 332: pwm_init();
  1243  0470  120A  118A  27B4  120A  118A  	fcall	_pwm_init
  1244                           
  1245                           ;main.c: 339: encoders_init();
  1246  0475  120A  118A  27DE  120A  118A  	fcall	_encoders_init
  1247                           
  1248                           ;main.c: 347: pwm_set(1, 0);
  1249  047A  3001               	movlw	1
  1250  047B  1283               	bcf	3,5	;RP0=0, select bank0
  1251  047C  1303               	bcf	3,6	;RP1=0, select bank0
  1252  047D  00BC               	movwf	pwm_set@channel
  1253  047E  3000               	movlw	0
  1254  047F  00BD               	movwf	pwm_set@channel+1
  1255  0480  3000               	movlw	0
  1256  0481  00C1               	movwf	pwm_set@duty_cycle+3
  1257  0482  3000               	movlw	0
  1258  0483  00C0               	movwf	pwm_set@duty_cycle+2
  1259  0484  3000               	movlw	0
  1260  0485  00BF               	movwf	pwm_set@duty_cycle+1
  1261  0486  3000               	movlw	0
  1262  0487  00BE               	movwf	pwm_set@duty_cycle
  1263  0488  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  1264                           
  1265                           ;main.c: 348: pwm_set(2, 0);
  1266  048D  3002               	movlw	2
  1267  048E  1283               	bcf	3,5	;RP0=0, select bank0
  1268  048F  1303               	bcf	3,6	;RP1=0, select bank0
  1269  0490  00BC               	movwf	pwm_set@channel
  1270  0491  3000               	movlw	0
  1271  0492  00BD               	movwf	pwm_set@channel+1
  1272  0493  3000               	movlw	0
  1273  0494  00C1               	movwf	pwm_set@duty_cycle+3
  1274  0495  3000               	movlw	0
  1275  0496  00C0               	movwf	pwm_set@duty_cycle+2
  1276  0497  3000               	movlw	0
  1277  0498  00BF               	movwf	pwm_set@duty_cycle+1
  1278  0499  3000               	movlw	0
  1279  049A  00BE               	movwf	pwm_set@duty_cycle
  1280  049B  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  1281  04A0                     l2750:	
  1282                           
  1283                           ;main.c: 352: if (!getServoState()){
  1284  04A0  120A  158A  2779  120A  118A  	fcall	_getServoState
  1285  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  1286  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  1287  04A7  0820               	movf	?_getServoState,w
  1288  04A8  0421               	iorwf	?_getServoState+1,w
  1289  04A9  1D03               	btfss	3,2
  1290  04AA  2CB1               	goto	l2754
  1291                           
  1292                           ;main.c: 353: motor_reset();
  1293  04AB  120A  118A  274C  120A  118A  	fcall	_motor_reset
  1294                           
  1295                           ;main.c: 354: }else{
  1296  04B0  2CC5               	goto	l2756
  1297  04B1                     l2754:	
  1298                           
  1299                           ;main.c: 355: SetPoint(set_point + getServoCommand());
  1300  04B1  120A  118A  2716  120A  118A  	fcall	_getServoCommand
  1301  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  1302  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  1303  04B8  0869               	movf	_set_point,w	;volatile
  1304  04B9  0720               	addwf	?_getServoCommand,w
  1305  04BA  00BB               	movwf	SetPoint@new_val
  1306  04BB  086A               	movf	_set_point+1,w	;volatile
  1307  04BC  1803               	skipnc
  1308  04BD  0A6A               	incf	_set_point+1,w	;volatile
  1309  04BE  0721               	addwf	?_getServoCommand+1,w
  1310  04BF  00BC               	movwf	SetPoint@new_val+1
  1311  04C0  120A  118A  26A7  120A  118A  	fcall	_SetPoint
  1312  04C5                     l2756:	
  1313                           
  1314                           ;main.c: 356: };main.c: 357: if (set_motor_flag){
  1315  04C5  1683               	bsf	3,5	;RP0=1, select bank1
  1316  04C6  1303               	bcf	3,6	;RP1=0, select bank1
  1317  04C7  0861               	movf	_set_motor_flag^(0+128),w
  1318  04C8  1903               	btfsc	3,2
  1319  04C9  2CA0               	goto	l2750
  1320                           
  1321                           ;main.c: 358: SetMotor();
  1322  04CA  120A  118A  2038  120A  118A  	fcall	_SetMotor
  1323                           
  1324                           ;main.c: 359: set_motor_flag = 0;
  1325  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  1326  04D0  1303               	bcf	3,6	;RP1=0, select bank1
  1327  04D1  01E1               	clrf	_set_motor_flag^(0+128)
  1328  04D2  2CA0               	goto	l2750
  1329  04D3                     __end_of_main:	
  1330                           
  1331                           	psect	text1
  1332  0F9B                     __ptext1:	
  1333 ;; *************** function _serial_init *****************
  1334 ;; Defined at:
  1335 ;;		line 29 in file "serial.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;		None
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;		None
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  1    wreg      void 
  1342 ;; Registers used:
  1343 ;;		wreg
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1349 ;;      Params:         0       0       0       0       0
  1350 ;;      Locals:         0       0       0       0       0
  1351 ;;      Temps:          0       0       0       0       0
  1352 ;;      Totals:         0       0       0       0       0
  1353 ;;Total ram usage:        0 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           
  1364                           ;psect for function _serial_init
  1365  0F9B                     _serial_init:	
  1366                           
  1367                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  1368                           
  1369                           ;incstack = 0
  1370                           ; Regs used in _serial_init: [wreg]
  1371  0F9B  3040               	movlw	64
  1372  0F9C  1683               	bsf	3,5	;RP0=1, select bank1
  1373  0F9D  1303               	bcf	3,6	;RP1=0, select bank1
  1374  0F9E  0099               	movwf	25	;volatile
  1375                           
  1376                           ;serial.c: 66: BRGH=1;
  1377  0F9F  1518               	bsf	24,2	;volatile
  1378                           
  1379                           ;serial.c: 67: SYNC=0;
  1380  0FA0  1218               	bcf	24,4	;volatile
  1381                           
  1382                           ;serial.c: 68: SPEN=1;
  1383  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  1384  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  1385  0FA3  1798               	bsf	24,7	;volatile
  1386                           
  1387                           ;serial.c: 69: CREN=1;
  1388  0FA4  1618               	bsf	24,4	;volatile
  1389                           
  1390                           ;serial.c: 70: SREN=0;
  1391  0FA5  1298               	bcf	24,5	;volatile
  1392                           
  1393                           ;serial.c: 71: TXIE=0;
  1394  0FA6  1683               	bsf	3,5	;RP0=1, select bank1
  1395  0FA7  1303               	bcf	3,6	;RP1=0, select bank1
  1396  0FA8  120C               	bcf	12,4	;volatile
  1397                           
  1398                           ;serial.c: 72: RCIE=0;
  1399  0FA9  128C               	bcf	12,5	;volatile
  1400                           
  1401                           ;serial.c: 73: TX9=0;
  1402  0FAA  1318               	bcf	24,6	;volatile
  1403                           
  1404                           ;serial.c: 74: RX9=0;
  1405  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  1406  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  1407  0FAD  1318               	bcf	24,6	;volatile
  1408                           
  1409                           ;serial.c: 75: TXEN=0;
  1410  0FAE  1683               	bsf	3,5	;RP0=1, select bank1
  1411  0FAF  1303               	bcf	3,6	;RP1=0, select bank1
  1412  0FB0  1298               	bcf	24,5	;volatile
  1413                           
  1414                           ;serial.c: 76: TXEN=1;
  1415  0FB1  1698               	bsf	24,5	;volatile
  1416  0FB2  0008               	return
  1417  0FB3                     __end_of_serial_init:	
  1418                           
  1419                           	psect	text2
  1420  07B4                     __ptext2:	
  1421 ;; *************** function _pwm_init *****************
  1422 ;; Defined at:
  1423 ;;		line 25 in file "pwm.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1437 ;;      Params:         0       0       0       0       0
  1438 ;;      Locals:         0       0       0       0       0
  1439 ;;      Temps:          0       0       0       0       0
  1440 ;;      Totals:         0       0       0       0       0
  1441 ;;Total ram usage:        0 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    1
  1444 ;; This function calls:
  1445 ;;		Nothing
  1446 ;; This function is called by:
  1447 ;;		_main
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _pwm_init
  1453  07B4                     _pwm_init:	
  1454                           
  1455                           ;pwm.c: 28: TRISC1 = 1;
  1456                           
  1457                           ;incstack = 0
  1458                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  1459  07B4  1683               	bsf	3,5	;RP0=1, select bank1
  1460  07B5  1303               	bcf	3,6	;RP1=0, select bank1
  1461  07B6  1487               	bsf	7,1	;volatile
  1462                           
  1463                           ;pwm.c: 29: TRISC2 = 1;
  1464  07B7  1507               	bsf	7,2	;volatile
  1465                           
  1466                           ;pwm.c: 32: PR2 = 0xFF;
  1467  07B8  30FF               	movlw	255
  1468  07B9  0092               	movwf	18	;volatile
  1469                           
  1470                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  1471  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  1472  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  1473  07BC  0817               	movf	23,w	;volatile
  1474  07BD  39F0               	andlw	-16
  1475  07BE  380C               	iorlw	12
  1476  07BF  0097               	movwf	23	;volatile
  1477                           
  1478                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  1479  07C0  081D               	movf	29,w	;volatile
  1480  07C1  39F0               	andlw	-16
  1481  07C2  380C               	iorlw	12
  1482  07C3  009D               	movwf	29	;volatile
  1483                           
  1484                           ;pwm.c: 39: CCPR1L = 0;
  1485  07C4  0195               	clrf	21	;volatile
  1486                           
  1487                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  1488  07C5  30CF               	movlw	-49
  1489  07C6  0597               	andwf	23,f	;volatile
  1490                           
  1491                           ;pwm.c: 41: CCPR2L = 0;
  1492  07C7  019B               	clrf	27	;volatile
  1493                           
  1494                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  1495  07C8  108C               	bcf	12,1	;volatile
  1496                           
  1497                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  1498  07C9  30FC               	movlw	-4
  1499  07CA  0592               	andwf	18,f	;volatile
  1500                           
  1501                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  1502  07CB  1512               	bsf	18,2	;volatile
  1503  07CC                     l170:	
  1504                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  1505                           
  1506  07CC  1C8C               	btfss	12,1	;volatile
  1507  07CD  2FCC               	goto	l170
  1508                           
  1509                           ;pwm.c: 53: TRISC1 = 0;
  1510  07CE  1683               	bsf	3,5	;RP0=1, select bank1
  1511  07CF  1303               	bcf	3,6	;RP1=0, select bank1
  1512  07D0  1087               	bcf	7,1	;volatile
  1513                           
  1514                           ;pwm.c: 54: TRISC2 = 0;
  1515  07D1  1107               	bcf	7,2	;volatile
  1516                           
  1517                           ;pwm.c: 59: ANS4 = 0;
  1518  07D2  1683               	bsf	3,5	;RP0=1, select bank3
  1519  07D3  1703               	bsf	3,6	;RP1=1, select bank3
  1520  07D4  1208               	bcf	8,4	;volatile
  1521                           
  1522                           ;pwm.c: 60: TRISA5 = 0;
  1523  07D5  1683               	bsf	3,5	;RP0=1, select bank1
  1524  07D6  1303               	bcf	3,6	;RP1=0, select bank1
  1525  07D7  1285               	bcf	5,5	;volatile
  1526                           
  1527                           ;pwm.c: 61: TRISA6 = 0;
  1528  07D8  1305               	bcf	5,6	;volatile
  1529                           
  1530                           ;pwm.c: 62: RA5 = 0;
  1531  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  1532  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  1533  07DB  1285               	bcf	5,5	;volatile
  1534                           
  1535                           ;pwm.c: 63: RA6 = 0;
  1536  07DC  1305               	bcf	5,6	;volatile
  1537  07DD  0008               	return
  1538  07DE                     __end_of_pwm_init:	
  1539                           
  1540                           	psect	text3
  1541  074C                     __ptext3:	
  1542 ;; *************** function _motor_reset *****************
  1543 ;; Defined at:
  1544 ;;		line 163 in file "main.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1558 ;;      Params:         0       0       0       0       0
  1559 ;;      Locals:         0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0
  1561 ;;      Totals:         0       0       0       0       0
  1562 ;;Total ram usage:        0 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    4
  1565 ;; This function calls:
  1566 ;;		_SetPoint
  1567 ;;		_pwm_set
  1568 ;;		_resetCounter
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           
  1575                           ;psect for function _motor_reset
  1576  074C                     _motor_reset:	
  1577                           
  1578                           ;main.c: 164: pwm_set(1, 0);
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1582  074C  3001               	movlw	1
  1583  074D  1283               	bcf	3,5	;RP0=0, select bank0
  1584  074E  1303               	bcf	3,6	;RP1=0, select bank0
  1585  074F  00BC               	movwf	pwm_set@channel
  1586  0750  3000               	movlw	0
  1587  0751  00BD               	movwf	pwm_set@channel+1
  1588  0752  3000               	movlw	0
  1589  0753  00C1               	movwf	pwm_set@duty_cycle+3
  1590  0754  3000               	movlw	0
  1591  0755  00C0               	movwf	pwm_set@duty_cycle+2
  1592  0756  3000               	movlw	0
  1593  0757  00BF               	movwf	pwm_set@duty_cycle+1
  1594  0758  3000               	movlw	0
  1595  0759  00BE               	movwf	pwm_set@duty_cycle
  1596  075A  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  1597                           
  1598                           ;main.c: 165: pwm_set(2, 0);
  1599  075F  3002               	movlw	2
  1600  0760  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0761  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0762  00BC               	movwf	pwm_set@channel
  1603  0763  3000               	movlw	0
  1604  0764  00BD               	movwf	pwm_set@channel+1
  1605  0765  3000               	movlw	0
  1606  0766  00C1               	movwf	pwm_set@duty_cycle+3
  1607  0767  3000               	movlw	0
  1608  0768  00C0               	movwf	pwm_set@duty_cycle+2
  1609  0769  3000               	movlw	0
  1610  076A  00BF               	movwf	pwm_set@duty_cycle+1
  1611  076B  3000               	movlw	0
  1612  076C  00BE               	movwf	pwm_set@duty_cycle
  1613  076D  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  1614                           
  1615                           ;main.c: 166: resetCounter();
  1616  0772  120A  158A  2788  120A  118A  	fcall	_resetCounter
  1617                           
  1618                           ;main.c: 167: SetPoint(0);
  1619  0777  3000               	movlw	0
  1620  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1621  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1622  077A  00BB               	movwf	SetPoint@new_val
  1623  077B  00BC               	movwf	SetPoint@new_val+1
  1624  077C  120A  118A  26A7   	fcall	_SetPoint
  1625  077F  0008               	return
  1626  0780                     __end_of_motor_reset:	
  1627                           
  1628                           	psect	text4
  1629  0F88                     __ptext4:	
  1630 ;; *************** function _resetCounter *****************
  1631 ;; Defined at:
  1632 ;;		line 158 in file "main.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;		None
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1646 ;;      Params:         0       0       0       0       0
  1647 ;;      Locals:         0       0       0       0       0
  1648 ;;      Temps:          0       0       0       0       0
  1649 ;;      Totals:         0       0       0       0       0
  1650 ;;Total ram usage:        0 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    1
  1653 ;; This function calls:
  1654 ;;		Nothing
  1655 ;; This function is called by:
  1656 ;;		_motor_reset
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           
  1662                           ;psect for function _resetCounter
  1663  0F88                     _resetCounter:	
  1664                           
  1665                           ;main.c: 159: encoder1_counter = 0;
  1666                           
  1667                           ;incstack = 0
  1668                           ; Regs used in _resetCounter: [wreg]
  1669  0F88  3000               	movlw	0
  1670  0F89  1683               	bsf	3,5	;RP0=1, select bank1
  1671  0F8A  1303               	bcf	3,6	;RP1=0, select bank1
  1672  0F8B  00D5               	movwf	(_encoder1_counter+3)^(0+128)	;volatile
  1673  0F8C  3000               	movlw	0
  1674  0F8D  00D4               	movwf	(_encoder1_counter+2)^(0+128)	;volatile
  1675  0F8E  3000               	movlw	0
  1676  0F8F  00D3               	movwf	(_encoder1_counter+1)^(0+128)	;volatile
  1677  0F90  3000               	movlw	0
  1678  0F91  00D2               	movwf	_encoder1_counter^(0+128)	;volatile
  1679                           
  1680                           ;main.c: 160: motor_pos = 0;
  1681  0F92  3000               	movlw	0
  1682  0F93  00F3               	movwf	_motor_pos+3	;volatile
  1683  0F94  3000               	movlw	0
  1684  0F95  00F2               	movwf	_motor_pos+2	;volatile
  1685  0F96  3000               	movlw	0
  1686  0F97  00F1               	movwf	_motor_pos+1	;volatile
  1687  0F98  3000               	movlw	0
  1688  0F99  00F0               	movwf	_motor_pos	;volatile
  1689  0F9A  0008               	return
  1690  0F9B                     __end_of_resetCounter:	
  1691                           
  1692                           	psect	text5
  1693  06A7                     __ptext5:	
  1694 ;; *************** function _SetPoint *****************
  1695 ;; Defined at:
  1696 ;;		line 149 in file "main.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;  new_val         2   27[BANK0 ] int 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  sVar           20   33[BANK0 ] unsigned char [20]
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1710 ;;      Params:         0       2       0       0       0
  1711 ;;      Locals:         0      20       0       0       0
  1712 ;;      Temps:          0       4       0       0       0
  1713 ;;      Totals:         0      26       0       0       0
  1714 ;;Total ram usage:       26 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    3
  1717 ;; This function calls:
  1718 ;;		_putst
  1719 ;;		_sprintf
  1720 ;; This function is called by:
  1721 ;;		_motor_reset
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           
  1727                           ;psect for function _SetPoint
  1728  06A7                     _SetPoint:	
  1729                           
  1730                           ;main.c: 150: if (new_val != set_point){
  1731                           
  1732                           ;incstack = 0
  1733                           ; Regs used in _SetPoint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1734  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  1735  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  1736  06A9  083B               	movf	SetPoint@new_val,w
  1737  06AA  00BD               	movwf	??_SetPoint
  1738  06AB  083C               	movf	SetPoint@new_val+1,w
  1739  06AC  00BE               	movwf	??_SetPoint+1
  1740  06AD  3000               	movlw	0
  1741  06AE  1BBE               	btfsc	??_SetPoint+1,7
  1742  06AF  30FF               	movlw	255
  1743  06B0  00BF               	movwf	??_SetPoint+2
  1744  06B1  00C0               	movwf	??_SetPoint+3
  1745  06B2  086C               	movf	_set_point+3,w	;volatile
  1746  06B3  0640               	xorwf	??_SetPoint+3,w
  1747  06B4  1D03               	skipz
  1748  06B5  2EC0               	goto	u1615
  1749  06B6  086B               	movf	_set_point+2,w	;volatile
  1750  06B7  063F               	xorwf	??_SetPoint+2,w
  1751  06B8  1D03               	skipz
  1752  06B9  2EC0               	goto	u1615
  1753  06BA  086A               	movf	_set_point+1,w	;volatile
  1754  06BB  063E               	xorwf	??_SetPoint+1,w
  1755  06BC  1D03               	skipz
  1756  06BD  2EC0               	goto	u1615
  1757  06BE  0869               	movf	_set_point,w	;volatile
  1758  06BF  063D               	xorwf	??_SetPoint,w
  1759  06C0                     u1615:	
  1760  06C0  1903               	skipnz
  1761  06C1  0008               	return
  1762                           
  1763                           ;main.c: 151: char sVar[20];;main.c: 152: sprintf(sVar, "SetPoint: %d \r\n", new_val);
  1764  06C2  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1765  06C3  00BD               	movwf	??_SetPoint
  1766  06C4  083D               	movf	??_SetPoint,w
  1767  06C5  00AE               	movwf	sprintf@f
  1768  06C6  083C               	movf	SetPoint@new_val+1,w
  1769  06C7  00B0               	movwf	?_sprintf+2
  1770  06C8  083B               	movf	SetPoint@new_val,w
  1771  06C9  00AF               	movwf	?_sprintf+1
  1772  06CA  3041               	movlw	(low (SetPoint@sVar| 0))& (0+255)
  1773  06CB  120A  118A  22E7  120A  118A  	fcall	_sprintf
  1774                           
  1775                           ;main.c: 153: putst(sVar);
  1776  06D0  3041               	movlw	(low (SetPoint@sVar| 0))& (0+255)
  1777  06D1  120A  118A  26E0   	fcall	_putst
  1778                           
  1779                           ;main.c: 154: set_point = new_val;
  1780  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  1781  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  1782  06D6  083B               	movf	SetPoint@new_val,w
  1783  06D7  00E9               	movwf	_set_point	;volatile
  1784  06D8  083C               	movf	SetPoint@new_val+1,w
  1785  06D9  00EA               	movwf	_set_point+1	;volatile
  1786  06DA  3000               	movlw	0
  1787  06DB  1BEA               	btfsc	_set_point+1,7	;volatile
  1788  06DC  30FF               	movlw	255
  1789  06DD  00EB               	movwf	_set_point+2	;volatile
  1790  06DE  00EC               	movwf	_set_point+3	;volatile
  1791  06DF  0008               	return
  1792  06E0                     __end_of_SetPoint:	
  1793                           
  1794                           	psect	text6
  1795  02E7                     __ptext6:	
  1796 ;; *************** function _sprintf *****************
  1797 ;; Defined at:
  1798 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  sp              1    wreg     PTR unsigned char 
  1801 ;;		 -> main@sVar(10), SetPoint@sVar(20), 
  1802 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1803 ;;		 -> STR_5(14), STR_4(4), STR_3(4), STR_2(11), 
  1804 ;;		 -> STR_1(16), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  sp              1   25[BANK0 ] PTR unsigned char 
  1807 ;;		 -> main@sVar(10), SetPoint@sVar(20), 
  1808 ;;  tmpval          4    0        struct .
  1809 ;;  val             2   23[BANK0 ] unsigned int 
  1810 ;;  cp              2    0        PTR const unsigned char 
  1811 ;;  len             2    0        unsigned int 
  1812 ;;  c               1   26[BANK0 ] unsigned char 
  1813 ;;  prec            1   22[BANK0 ] char 
  1814 ;;  flag            1   21[BANK0 ] unsigned char 
  1815 ;;  ap              1   20[BANK0 ] PTR void [1]
  1816 ;;		 -> ?_sprintf(2), 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2   14[BANK0 ] int 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       3       0       0       0
  1827 ;;      Locals:         0       7       0       0       0
  1828 ;;      Temps:          0       3       0       0       0
  1829 ;;      Totals:         0      13       0       0       0
  1830 ;;Total ram usage:       13 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; Hardware stack levels required when called:    2
  1833 ;; This function calls:
  1834 ;;		___lwdiv
  1835 ;;		___lwmod
  1836 ;; This function is called by:
  1837 ;;		_SetPoint
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           
  1843                           ;psect for function _sprintf
  1844  02E7                     _sprintf:	
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1848                           ;sprintf@sp stored from wreg
  1849  02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1850  02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1851  02E9  00B9               	movwf	sprintf@sp
  1852                           
  1853                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1854  02EA  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1855  02EB  00B1               	movwf	??_sprintf
  1856  02EC  0831               	movf	??_sprintf,w
  1857  02ED  00B4               	movwf	sprintf@ap
  1858  02EE                     l1946:	
  1859                           ;doprnt.c: 548: while((c = *f++)) {
  1860                           
  1861  02EE  3001               	movlw	1
  1862  02EF  07AE               	addwf	sprintf@f,f
  1863  02F0  30FF               	movlw	-1
  1864  02F1  072E               	addwf	sprintf@f,w
  1865  02F2  0084               	movwf	4
  1866  02F3  120A  118A  262E  120A  118A  	fcall	stringdir
  1867  02F8  00B1               	movwf	??_sprintf
  1868  02F9  0831               	movf	??_sprintf,w
  1869  02FA  00BA               	movwf	sprintf@c
  1870  02FB  083A               	movf	sprintf@c,w
  1871  02FC  1903               	btfsc	3,2
  1872  02FD  2BB4               	goto	l1948
  1873                           
  1874                           ;doprnt.c: 550: if(c != '%')
  1875  02FE  3025               	movlw	37
  1876  02FF  063A               	xorwf	sprintf@c,w
  1877  0300  1903               	btfsc	3,2
  1878  0301  2B0E               	goto	l1902
  1879                           
  1880                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1881  0302  083A               	movf	sprintf@c,w
  1882  0303  00B1               	movwf	??_sprintf
  1883  0304  0839               	movf	sprintf@sp,w
  1884  0305  0084               	movwf	4
  1885  0306  0831               	movf	??_sprintf,w
  1886  0307  1383               	bcf	3,7	;select IRP bank0
  1887  0308  0080               	movwf	0
  1888  0309  3001               	movlw	1
  1889  030A  00B1               	movwf	??_sprintf
  1890  030B  0831               	movf	??_sprintf,w
  1891  030C  07B9               	addwf	sprintf@sp,f
  1892                           
  1893                           ;doprnt.c: 554: continue;
  1894  030D  2AEE               	goto	l1946
  1895  030E                     l1902:	
  1896                           
  1897                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1898  030E  01B5               	clrf	sprintf@flag
  1899                           
  1900                           ;doprnt.c: 654: switch(c = *f++) {
  1901  030F  3001               	movlw	1
  1902  0310  07AE               	addwf	sprintf@f,f
  1903  0311  30FF               	movlw	-1
  1904  0312  072E               	addwf	sprintf@f,w
  1905  0313  0084               	movwf	4
  1906  0314  120A  118A  262E  120A  118A  	fcall	stringdir
  1907  0319  00BA               	movwf	sprintf@c
  1908                           
  1909                           ; Switch size 1, requested type "simple"
  1910                           ; Number of cases is 3, Range of values is 0 to 105
  1911                           ; switch strategies available:
  1912                           ; Name         Instructions Cycles
  1913                           ; simple_byte           10     6 (average)
  1914                           ; jumptable            260     6 (fixed)
  1915                           ;	Chosen strategy is simple_byte
  1916  031A  3A00               	xorlw	0	; case 0
  1917  031B  1903               	skipnz
  1918  031C  2BB4               	goto	l1948
  1919  031D  3A64               	xorlw	100	; case 100
  1920  031E  1903               	skipnz
  1921  031F  2B24               	goto	l1908
  1922  0320  3A0D               	xorlw	13	; case 105
  1923  0321  1903               	skipnz
  1924  0322  2B24               	goto	l1908
  1925  0323  2AEE               	goto	l1946
  1926  0324                     l1908:	
  1927                           
  1928                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1929  0324  0834               	movf	sprintf@ap,w
  1930  0325  0084               	movwf	4
  1931  0326  1383               	bcf	3,7	;select IRP bank0
  1932  0327  0800               	movf	0,w
  1933  0328  00B7               	movwf	sprintf@val
  1934  0329  0A84               	incf	4,f
  1935  032A  0800               	movf	0,w
  1936  032B  00B8               	movwf	sprintf@val+1
  1937  032C  3002               	movlw	2
  1938  032D  00B1               	movwf	??_sprintf
  1939  032E  0831               	movf	??_sprintf,w
  1940  032F  07B4               	addwf	sprintf@ap,f
  1941                           
  1942                           ;doprnt.c: 1280: if((int)val < 0) {
  1943  0330  1FB8               	btfss	sprintf@val+1,7
  1944  0331  2B3B               	goto	l1918
  1945                           
  1946                           ;doprnt.c: 1281: flag |= 0x03;
  1947  0332  3003               	movlw	3
  1948  0333  00B1               	movwf	??_sprintf
  1949  0334  0831               	movf	??_sprintf,w
  1950  0335  04B5               	iorwf	sprintf@flag,f
  1951                           
  1952                           ;doprnt.c: 1282: val = -val;
  1953  0336  09B7               	comf	sprintf@val,f
  1954  0337  09B8               	comf	sprintf@val+1,f
  1955  0338  0AB7               	incf	sprintf@val,f
  1956  0339  1903               	skipnz
  1957  033A  0AB8               	incf	sprintf@val+1,f
  1958  033B                     l1918:	
  1959                           
  1960                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1961  033B  01BA               	clrf	sprintf@c
  1962  033C  0ABA               	incf	sprintf@c,f
  1963  033D                     l1924:	
  1964                           
  1965                           ;doprnt.c: 1325: if(val < dpowers[c])
  1966  033D  083A               	movf	sprintf@c,w
  1967  033E  00B1               	movwf	??_sprintf
  1968  033F  0731               	addwf	??_sprintf,w
  1969  0340  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1970  0341  0084               	movwf	4
  1971  0342  120A  118A  262E  120A  118A  	fcall	stringdir
  1972  0347  00B2               	movwf	??_sprintf+1
  1973  0348  120A  118A  262E  120A  118A  	fcall	stringdir
  1974  034D  00B3               	movwf	??_sprintf+2
  1975  034E  0833               	movf	??_sprintf+2,w
  1976  034F  0238               	subwf	sprintf@val+1,w
  1977  0350  1D03               	skipz
  1978  0351  2B54               	goto	u1355
  1979  0352  0832               	movf	??_sprintf+1,w
  1980  0353  0237               	subwf	sprintf@val,w
  1981  0354                     u1355:	
  1982  0354  1C03               	btfss	3,0
  1983  0355  2B5E               	goto	l1930
  1984  0356  3001               	movlw	1
  1985  0357  00B1               	movwf	??_sprintf
  1986  0358  0831               	movf	??_sprintf,w
  1987  0359  07BA               	addwf	sprintf@c,f
  1988  035A  3005               	movlw	5
  1989  035B  063A               	xorwf	sprintf@c,w
  1990  035C  1D03               	btfss	3,2
  1991  035D  2B3D               	goto	l1924
  1992  035E                     l1930:	
  1993                           
  1994                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1995  035E  0835               	movf	sprintf@flag,w
  1996  035F  3903               	andlw	3
  1997  0360  1903               	btfsc	3,2
  1998  0361  2B6D               	goto	l1936
  1999                           
  2000                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2001  0362  302D               	movlw	45
  2002  0363  00B1               	movwf	??_sprintf
  2003  0364  0839               	movf	sprintf@sp,w
  2004  0365  0084               	movwf	4
  2005  0366  0831               	movf	??_sprintf,w
  2006  0367  1383               	bcf	3,7	;select IRP bank0
  2007  0368  0080               	movwf	0
  2008  0369  3001               	movlw	1
  2009  036A  00B1               	movwf	??_sprintf
  2010  036B  0831               	movf	??_sprintf,w
  2011  036C  07B9               	addwf	sprintf@sp,f
  2012  036D                     l1936:	
  2013                           
  2014                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2015  036D  083A               	movf	sprintf@c,w
  2016  036E  00B1               	movwf	??_sprintf
  2017  036F  0831               	movf	??_sprintf,w
  2018  0370  00B6               	movwf	sprintf@prec
  2019  0371                     l1944:	
  2020                           ;doprnt.c: 1493: while(prec--) {
  2021                           
  2022  0371  30FF               	movlw	255
  2023  0372  00B1               	movwf	??_sprintf
  2024  0373  0831               	movf	??_sprintf,w
  2025  0374  07B6               	addwf	sprintf@prec,f
  2026  0375  0A36               	incf	sprintf@prec,w
  2027  0376  1903               	btfsc	3,2
  2028  0377  2AEE               	goto	l1946
  2029                           
  2030                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2031  0378  300A               	movlw	10
  2032  0379  00A8               	movwf	___lwmod@divisor
  2033  037A  3000               	movlw	0
  2034  037B  00A9               	movwf	___lwmod@divisor+1
  2035  037C  0836               	movf	sprintf@prec,w
  2036  037D  00B1               	movwf	??_sprintf
  2037  037E  0731               	addwf	??_sprintf,w
  2038  037F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2039  0380  0084               	movwf	4
  2040  0381  120A  118A  262E  120A  118A  	fcall	stringdir
  2041  0386  00A0               	movwf	___lwdiv@divisor
  2042  0387  120A  118A  262E  120A  118A  	fcall	stringdir
  2043  038C  00A1               	movwf	___lwdiv@divisor+1
  2044  038D  0838               	movf	sprintf@val+1,w
  2045  038E  00A3               	movwf	___lwdiv@dividend+1
  2046  038F  0837               	movf	sprintf@val,w
  2047  0390  00A2               	movwf	___lwdiv@dividend
  2048  0391  120A  118A  25F0  120A  118A  	fcall	___lwdiv
  2049  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0398  0821               	movf	?___lwdiv+1,w
  2052  0399  00AB               	movwf	___lwmod@dividend+1
  2053  039A  0820               	movf	?___lwdiv,w
  2054  039B  00AA               	movwf	___lwmod@dividend
  2055  039C  120A  118A  2780  120A  118A  	fcall	___lwmod
  2056  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2057  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2058  03A3  0828               	movf	?___lwmod,w
  2059  03A4  3E30               	addlw	48
  2060  03A5  00B2               	movwf	??_sprintf+1
  2061  03A6  0832               	movf	??_sprintf+1,w
  2062  03A7  00BA               	movwf	sprintf@c
  2063                           
  2064                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  2065  03A8  083A               	movf	sprintf@c,w
  2066  03A9  00B1               	movwf	??_sprintf
  2067  03AA  0839               	movf	sprintf@sp,w
  2068  03AB  0084               	movwf	4
  2069  03AC  0831               	movf	??_sprintf,w
  2070  03AD  1383               	bcf	3,7	;select IRP bank0
  2071  03AE  0080               	movwf	0
  2072  03AF  3001               	movlw	1
  2073  03B0  00B1               	movwf	??_sprintf
  2074  03B1  0831               	movf	??_sprintf,w
  2075  03B2  07B9               	addwf	sprintf@sp,f
  2076  03B3  2B71               	goto	l1944
  2077  03B4                     l1948:	
  2078                           
  2079                           ;doprnt.c: 1557: *sp = 0;
  2080  03B4  0839               	movf	sprintf@sp,w
  2081  03B5  0084               	movwf	4
  2082  03B6  1383               	bcf	3,7	;select IRP bank0
  2083  03B7  0180               	clrf	0
  2084  03B8  0008               	return
  2085  03B9                     __end_of_sprintf:	
  2086                           
  2087                           	psect	text7
  2088  0780                     __ptext7:	
  2089 ;; *************** function ___lwmod *****************
  2090 ;; Defined at:
  2091 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;  divisor         2    8[BANK0 ] unsigned int 
  2094 ;;  dividend        2   10[BANK0 ] unsigned int 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  counter         1   13[BANK0 ] unsigned char 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  2    8[BANK0 ] unsigned int 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2106 ;;      Params:         0       4       0       0       0
  2107 ;;      Locals:         0       1       0       0       0
  2108 ;;      Temps:          0       1       0       0       0
  2109 ;;      Totals:         0       6       0       0       0
  2110 ;;Total ram usage:        6 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    1
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_sprintf
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function ___lwmod
  2122  0780                     ___lwmod:	
  2123                           
  2124                           ;incstack = 0
  2125                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2126  0780  1283               	bcf	3,5	;RP0=0, select bank0
  2127  0781  1303               	bcf	3,6	;RP1=0, select bank0
  2128  0782  0828               	movf	___lwmod@divisor,w
  2129  0783  0429               	iorwf	___lwmod@divisor+1,w
  2130  0784  1903               	btfsc	3,2
  2131  0785  2FAF               	goto	l1874
  2132  0786  01AD               	clrf	___lwmod@counter
  2133  0787  0AAD               	incf	___lwmod@counter,f
  2134  0788                     l1864:	
  2135  0788  1BA9               	btfsc	___lwmod@divisor+1,7
  2136  0789  2F96               	goto	l1866
  2137  078A  3001               	movlw	1
  2138  078B                     u1255:	
  2139  078B  1003               	clrc
  2140  078C  0DA8               	rlf	___lwmod@divisor,f
  2141  078D  0DA9               	rlf	___lwmod@divisor+1,f
  2142  078E  3EFF               	addlw	-1
  2143  078F  1D03               	skipz
  2144  0790  2F8B               	goto	u1255
  2145  0791  3001               	movlw	1
  2146  0792  00AC               	movwf	??___lwmod
  2147  0793  082C               	movf	??___lwmod,w
  2148  0794  07AD               	addwf	___lwmod@counter,f
  2149  0795  2F88               	goto	l1864
  2150  0796                     l1866:	
  2151  0796  0829               	movf	___lwmod@divisor+1,w
  2152  0797  022B               	subwf	___lwmod@dividend+1,w
  2153  0798  1D03               	skipz
  2154  0799  2F9C               	goto	u1275
  2155  079A  0828               	movf	___lwmod@divisor,w
  2156  079B  022A               	subwf	___lwmod@dividend,w
  2157  079C                     u1275:	
  2158  079C  1C03               	skipc
  2159  079D  2FA4               	goto	l1870
  2160  079E  0828               	movf	___lwmod@divisor,w
  2161  079F  02AA               	subwf	___lwmod@dividend,f
  2162  07A0  0829               	movf	___lwmod@divisor+1,w
  2163  07A1  1C03               	skipc
  2164  07A2  03AB               	decf	___lwmod@dividend+1,f
  2165  07A3  02AB               	subwf	___lwmod@dividend+1,f
  2166  07A4                     l1870:	
  2167  07A4  3001               	movlw	1
  2168  07A5                     u1285:	
  2169  07A5  1003               	clrc
  2170  07A6  0CA9               	rrf	___lwmod@divisor+1,f
  2171  07A7  0CA8               	rrf	___lwmod@divisor,f
  2172  07A8  3EFF               	addlw	-1
  2173  07A9  1D03               	skipz
  2174  07AA  2FA5               	goto	u1285
  2175  07AB  3001               	movlw	1
  2176  07AC  02AD               	subwf	___lwmod@counter,f
  2177  07AD  1D03               	btfss	3,2
  2178  07AE  2F96               	goto	l1866
  2179  07AF                     l1874:	
  2180  07AF  082B               	movf	___lwmod@dividend+1,w
  2181  07B0  00A9               	movwf	?___lwmod+1
  2182  07B1  082A               	movf	___lwmod@dividend,w
  2183  07B2  00A8               	movwf	?___lwmod
  2184  07B3  0008               	return
  2185  07B4                     __end_of___lwmod:	
  2186                           
  2187                           	psect	text8
  2188  05F0                     __ptext8:	
  2189 ;; *************** function ___lwdiv *****************
  2190 ;; Defined at:
  2191 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  divisor         2    0[BANK0 ] unsigned int 
  2194 ;;  dividend        2    2[BANK0 ] unsigned int 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  quotient        2    5[BANK0 ] unsigned int 
  2197 ;;  counter         1    7[BANK0 ] unsigned char 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    0[BANK0 ] unsigned int 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2207 ;;      Params:         0       4       0       0       0
  2208 ;;      Locals:         0       3       0       0       0
  2209 ;;      Temps:          0       1       0       0       0
  2210 ;;      Totals:         0       8       0       0       0
  2211 ;;Total ram usage:        8 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    1
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_sprintf
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           
  2222                           ;psect for function ___lwdiv
  2223  05F0                     ___lwdiv:	
  2224                           
  2225                           ;incstack = 0
  2226                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2227  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2228  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2229  05F2  01A5               	clrf	___lwdiv@quotient
  2230  05F3  01A6               	clrf	___lwdiv@quotient+1
  2231  05F4  0820               	movf	___lwdiv@divisor,w
  2232  05F5  0421               	iorwf	___lwdiv@divisor+1,w
  2233  05F6  1903               	btfsc	3,2
  2234  05F7  2E29               	goto	l1852
  2235  05F8  01A7               	clrf	___lwdiv@counter
  2236  05F9  0AA7               	incf	___lwdiv@counter,f
  2237  05FA                     l1840:	
  2238  05FA  1BA1               	btfsc	___lwdiv@divisor+1,7
  2239  05FB  2E08               	goto	l1842
  2240  05FC  3001               	movlw	1
  2241  05FD                     u1185:	
  2242  05FD  1003               	clrc
  2243  05FE  0DA0               	rlf	___lwdiv@divisor,f
  2244  05FF  0DA1               	rlf	___lwdiv@divisor+1,f
  2245  0600  3EFF               	addlw	-1
  2246  0601  1D03               	skipz
  2247  0602  2DFD               	goto	u1185
  2248  0603  3001               	movlw	1
  2249  0604  00A4               	movwf	??___lwdiv
  2250  0605  0824               	movf	??___lwdiv,w
  2251  0606  07A7               	addwf	___lwdiv@counter,f
  2252  0607  2DFA               	goto	l1840
  2253  0608                     l1842:	
  2254  0608  3001               	movlw	1
  2255  0609                     u1205:	
  2256  0609  1003               	clrc
  2257  060A  0DA5               	rlf	___lwdiv@quotient,f
  2258  060B  0DA6               	rlf	___lwdiv@quotient+1,f
  2259  060C  3EFF               	addlw	-1
  2260  060D  1D03               	skipz
  2261  060E  2E09               	goto	u1205
  2262  060F  0821               	movf	___lwdiv@divisor+1,w
  2263  0610  0223               	subwf	___lwdiv@dividend+1,w
  2264  0611  1D03               	skipz
  2265  0612  2E15               	goto	u1215
  2266  0613  0820               	movf	___lwdiv@divisor,w
  2267  0614  0222               	subwf	___lwdiv@dividend,w
  2268  0615                     u1215:	
  2269  0615  1C03               	skipc
  2270  0616  2E1E               	goto	l1848
  2271  0617  0820               	movf	___lwdiv@divisor,w
  2272  0618  02A2               	subwf	___lwdiv@dividend,f
  2273  0619  0821               	movf	___lwdiv@divisor+1,w
  2274  061A  1C03               	skipc
  2275  061B  03A3               	decf	___lwdiv@dividend+1,f
  2276  061C  02A3               	subwf	___lwdiv@dividend+1,f
  2277  061D  1425               	bsf	___lwdiv@quotient,0
  2278  061E                     l1848:	
  2279  061E  3001               	movlw	1
  2280  061F                     u1225:	
  2281  061F  1003               	clrc
  2282  0620  0CA1               	rrf	___lwdiv@divisor+1,f
  2283  0621  0CA0               	rrf	___lwdiv@divisor,f
  2284  0622  3EFF               	addlw	-1
  2285  0623  1D03               	skipz
  2286  0624  2E1F               	goto	u1225
  2287  0625  3001               	movlw	1
  2288  0626  02A7               	subwf	___lwdiv@counter,f
  2289  0627  1D03               	btfss	3,2
  2290  0628  2E08               	goto	l1842
  2291  0629                     l1852:	
  2292  0629  0826               	movf	___lwdiv@quotient+1,w
  2293  062A  00A1               	movwf	?___lwdiv+1
  2294  062B  0825               	movf	___lwdiv@quotient,w
  2295  062C  00A0               	movwf	?___lwdiv
  2296  062D  0008               	return
  2297  062E                     __end_of___lwdiv:	
  2298                           
  2299                           	psect	text9
  2300  06E0                     __ptext9:	
  2301 ;; *************** function _putst *****************
  2302 ;; Defined at:
  2303 ;;		line 211 in file "serial.c"
  2304 ;; Parameters:    Size  Location     Type
  2305 ;;  str             1    wreg     PTR const unsigned char 
  2306 ;;		 -> main@sVar(10), SetPoint@sVar(20), 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  str             1    3[BANK0 ] PTR const unsigned char 
  2309 ;;		 -> main@sVar(10), SetPoint@sVar(20), 
  2310 ;; Return value:  Size  Location     Type
  2311 ;;                  1    wreg      void 
  2312 ;; Registers used:
  2313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2314 ;; Tracked objects:
  2315 ;;		On entry : 0/0
  2316 ;;		On exit  : 0/0
  2317 ;;		Unchanged: 0/0
  2318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2319 ;;      Params:         0       0       0       0       0
  2320 ;;      Locals:         0       1       0       0       0
  2321 ;;      Temps:          0       1       0       0       0
  2322 ;;      Totals:         0       2       0       0       0
  2323 ;;Total ram usage:        2 bytes
  2324 ;; Hardware stack levels used:    1
  2325 ;; Hardware stack levels required when called:    2
  2326 ;; This function calls:
  2327 ;;		_putch
  2328 ;; This function is called by:
  2329 ;;		_SetPoint
  2330 ;;		_main
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           
  2335                           ;psect for function _putst
  2336  06E0                     _putst:	
  2337                           
  2338                           ;incstack = 0
  2339                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2340                           ;putst@str stored from wreg
  2341  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  2342  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  2343  06E2  00A3               	movwf	putst@str
  2344  06E3                     l1892:	
  2345                           ;serial.c: 212: while((*str)!=0) {
  2346                           
  2347  06E3  0823               	movf	putst@str,w
  2348  06E4  0084               	movwf	4
  2349  06E5  1383               	bcf	3,7	;select IRP bank0
  2350  06E6  0800               	movf	0,w
  2351  06E7  1903               	btfsc	3,2
  2352  06E8  0008               	return
  2353                           
  2354                           ;serial.c: 213: putch(*str);
  2355  06E9  0823               	movf	putst@str,w
  2356  06EA  0084               	movwf	4
  2357  06EB  0800               	movf	0,w
  2358  06EC  120A  158A  27D6  120A  118A  	fcall	_putch
  2359                           
  2360                           ;serial.c: 214: if (*str==13) putch(10);
  2361  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  2362  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  2363  06F3  0823               	movf	putst@str,w
  2364  06F4  0084               	movwf	4
  2365  06F5  300D               	movlw	13
  2366  06F6  1383               	bcf	3,7	;select IRP bank0
  2367  06F7  0600               	xorwf	0,w
  2368  06F8  1D03               	btfss	3,2
  2369  06F9  2F00               	goto	l1886
  2370  06FA  300A               	movlw	10
  2371  06FB  120A  158A  27D6  120A  118A  	fcall	_putch
  2372  0700                     l1886:	
  2373                           
  2374                           ;serial.c: 215: if (*str==10) putch(13);
  2375  0700  1283               	bcf	3,5	;RP0=0, select bank0
  2376  0701  1303               	bcf	3,6	;RP1=0, select bank0
  2377  0702  0823               	movf	putst@str,w
  2378  0703  0084               	movwf	4
  2379  0704  300A               	movlw	10
  2380  0705  1383               	bcf	3,7	;select IRP bank0
  2381  0706  0600               	xorwf	0,w
  2382  0707  1D03               	btfss	3,2
  2383  0708  2F0F               	goto	l1890
  2384  0709  300D               	movlw	13
  2385  070A  120A  158A  27D6  120A  118A  	fcall	_putch
  2386  070F                     l1890:	
  2387                           
  2388                           ;serial.c: 216: str++;
  2389  070F  3001               	movlw	1
  2390  0710  1283               	bcf	3,5	;RP0=0, select bank0
  2391  0711  1303               	bcf	3,6	;RP1=0, select bank0
  2392  0712  00A2               	movwf	??_putst
  2393  0713  0822               	movf	??_putst,w
  2394  0714  07A3               	addwf	putst@str,f
  2395  0715  2EE3               	goto	l1892
  2396  0716                     __end_of_putst:	
  2397                           
  2398                           	psect	text10
  2399  0FD6                     __ptext10:	
  2400 ;; *************** function _putch *****************
  2401 ;; Defined at:
  2402 ;;		line 95 in file "serial.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  c               1    wreg     unsigned char 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  c               1    1[BANK0 ] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		wreg
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       0       0       0       0
  2417 ;;      Locals:         0       1       0       0       0
  2418 ;;      Temps:          0       1       0       0       0
  2419 ;;      Totals:         0       2       0       0       0
  2420 ;;Total ram usage:        2 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    1
  2423 ;; This function calls:
  2424 ;;		Nothing
  2425 ;; This function is called by:
  2426 ;;		_putst
  2427 ;;		_putchhex
  2428 ;;		_putchdec
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           
  2433                           ;psect for function _putch
  2434  0FD6                     _putch:	
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in _putch: [wreg]
  2438                           ;putch@c stored from wreg
  2439  0FD6  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0FD7  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0FD8  00A1               	movwf	putch@c
  2442  0FD9                     l1826:	
  2443                           ;serial.c: 96: while(!TXIF) {
  2444                           
  2445  0FD9  1283               	bcf	3,5	;RP0=0, select bank0
  2446  0FDA  1303               	bcf	3,6	;RP1=0, select bank0
  2447  0FDB  1A0C               	btfsc	12,4	;volatile
  2448  0FDC  2FF3               	goto	l1828
  2449                           
  2450                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  2451  0FDD  1C98               	btfss	24,1	;volatile
  2452  0FDE  2FE7               	goto	l82
  2453  0FDF  1683               	bsf	3,5	;RP0=1, select bank1
  2454  0FE0  1303               	bcf	3,6	;RP1=0, select bank1
  2455  0FE1  1298               	bcf	24,5	;volatile
  2456  0FE2  1698               	bsf	24,5	;volatile
  2457  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
  2459  0FE5  1218               	bcf	24,4	;volatile
  2460  0FE6  1618               	bsf	24,4	;volatile
  2461  0FE7                     l82:	
  2462  0FE7  1D18               	btfss	24,2	;volatile
  2463  0FE8  2FF1               	goto	l83
  2464  0FE9  081A               	movf	26,w	;volatile
  2465  0FEA  00A0               	movwf	??_putch
  2466  0FEB  0820               	movf	??_putch,w
  2467  0FEC  1683               	bsf	3,5	;RP0=1, select bank1
  2468  0FED  1303               	bcf	3,6	;RP1=0, select bank1
  2469  0FEE  00E3               	movwf	_dummy^(0+128)
  2470  0FEF  1298               	bcf	24,5	;volatile
  2471  0FF0  1698               	bsf	24,5	;volatile
  2472  0FF1                     l83:	
  2473  0FF1  0064               	clrwdt	;# 
  2474  0FF2  2FD9               	goto	l1826
  2475  0FF3                     l1828:	
  2476                           
  2477                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  2478  0FF3  0821               	movf	putch@c,w
  2479  0FF4  0099               	movwf	25	;volatile
  2480                           
  2481                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  2482  0FF5  303C               	movlw	60
  2483  0FF6  00A0               	movwf	??_putch
  2484  0FF7  0820               	movf	??_putch,w
  2485  0FF8  1683               	bsf	3,5	;RP0=1, select bank1
  2486  0FF9  1303               	bcf	3,6	;RP1=0, select bank1
  2487  0FFA  00E4               	movwf	_delayus_variable^(0+128)
  2488  0FFB  0000               	nop	;# 
  2489  0FFC  0000               	nop	;# 
  2490  0FFD  0BE4               	decfsz	_delayus_variable,f	;# 
  2491  0FFE  2FD3               	goto	($+-3)	;# 
  2492  0FFF  0008               	return
  2493  1000                     __end_of_putch:	
  2494                           
  2495                           	psect	text11
  2496  0F79                     __ptext11:	
  2497 ;; *************** function _getServoState *****************
  2498 ;; Defined at:
  2499 ;;		line 18 in file "servoController.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  2    0[BANK0 ] int 
  2506 ;; Registers used:
  2507 ;;		wreg, status,0
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/0
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2513 ;;      Params:         0       2       0       0       0
  2514 ;;      Locals:         0       0       0       0       0
  2515 ;;      Temps:          0       2       0       0       0
  2516 ;;      Totals:         0       4       0       0       0
  2517 ;;Total ram usage:        4 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    1
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           
  2528                           ;psect for function _getServoState
  2529  0F79                     _getServoState:	
  2530                           
  2531                           ;servoController.c: 19: return RC3;
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in _getServoState: [wreg+status,0]
  2535  0F79  1003               	clrc
  2536  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0F7C  1987               	btfsc	7,3	;volatile
  2539  0F7D  1403               	setc
  2540  0F7E  3000               	movlw	0
  2541  0F7F  1803               	skipnc
  2542  0F80  3001               	movlw	1
  2543  0F81  00A2               	movwf	??_getServoState
  2544  0F82  01A3               	clrf	??_getServoState+1
  2545  0F83  0822               	movf	??_getServoState,w
  2546  0F84  00A0               	movwf	?_getServoState
  2547  0F85  0823               	movf	??_getServoState+1,w
  2548  0F86  00A1               	movwf	?_getServoState+1
  2549  0F87  0008               	return
  2550  0F88                     __end_of_getServoState:	
  2551                           
  2552                           	psect	text12
  2553  0716                     __ptext12:	
  2554 ;; *************** function _getServoCommand *****************
  2555 ;; Defined at:
  2556 ;;		line 22 in file "servoController.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  2    0[BANK0 ] int 
  2563 ;; Registers used:
  2564 ;;		wreg, status,2, status,0
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2570 ;;      Params:         0       2       0       0       0
  2571 ;;      Locals:         0       0       0       0       0
  2572 ;;      Temps:          0       4       0       0       0
  2573 ;;      Totals:         0       6       0       0       0
  2574 ;;Total ram usage:        6 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_main
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _getServoCommand
  2586  0716                     _getServoCommand:	
  2587                           
  2588                           ;servoController.c: 23: static char lStep;;servoController.c: 24: if (RC4 != lStep){
  2589                           
  2590                           ;incstack = 0
  2591                           ; Regs used in _getServoCommand: [wreg+status,2+status,0]
  2592  0716  3000               	movlw	0
  2593  0717  1283               	bcf	3,5	;RP0=0, select bank0
  2594  0718  1303               	bcf	3,6	;RP1=0, select bank0
  2595  0719  1A07               	btfsc	7,4	;volatile
  2596  071A  3001               	movlw	1
  2597  071B  1683               	bsf	3,5	;RP0=1, select bank1
  2598  071C  1303               	bcf	3,6	;RP1=0, select bank1
  2599  071D  0660               	xorwf	getServoCommand@lStep^(0+128),w
  2600  071E  1903               	skipnz
  2601  071F  2F47               	goto	l2248
  2602                           
  2603                           ;servoController.c: 25: lStep = !lStep;
  2604  0720  0860               	movf	getServoCommand@lStep^(0+128),w
  2605  0721  1D03               	btfss	3,2
  2606  0722  2F25               	goto	u1900
  2607  0723  3001               	movlw	1
  2608  0724  2F26               	goto	u1910
  2609  0725                     u1900:	
  2610  0725  3000               	movlw	0
  2611  0726                     u1910:	
  2612  0726  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0727  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0728  00A2               	movwf	??_getServoCommand
  2615  0729  0822               	movf	??_getServoCommand,w
  2616  072A  1683               	bsf	3,5	;RP0=1, select bank1
  2617  072B  1303               	bcf	3,6	;RP1=0, select bank1
  2618  072C  00E0               	movwf	getServoCommand@lStep^(0+128)
  2619                           
  2620                           ;servoController.c: 26: return ((2*RC5) - 1);
  2621  072D  1003               	clrc
  2622  072E  1283               	bcf	3,5	;RP0=0, select bank0
  2623  072F  1303               	bcf	3,6	;RP1=0, select bank0
  2624  0730  1A87               	btfsc	7,5	;volatile
  2625  0731  1403               	setc
  2626  0732  3000               	movlw	0
  2627  0733  1803               	skipnc
  2628  0734  3001               	movlw	1
  2629  0735  00A2               	movwf	??_getServoCommand
  2630  0736  01A3               	clrf	??_getServoCommand+1
  2631  0737  1003               	clrc
  2632  0738  0DA2               	rlf	??_getServoCommand,f
  2633  0739  0DA3               	rlf	??_getServoCommand+1,f
  2634  073A  0822               	movf	??_getServoCommand,w
  2635  073B  3EFF               	addlw	255
  2636  073C  00A4               	movwf	??_getServoCommand+2
  2637  073D  0823               	movf	??_getServoCommand+1,w
  2638  073E  1803               	skipnc
  2639  073F  3E01               	addlw	1
  2640  0740  3EFF               	addlw	255
  2641  0741  00A5               	movwf	??_getServoCommand+3
  2642  0742  0824               	movf	??_getServoCommand+2,w
  2643  0743  00A0               	movwf	?_getServoCommand
  2644  0744  0825               	movf	??_getServoCommand+3,w
  2645  0745  00A1               	movwf	?_getServoCommand+1
  2646  0746  0008               	return
  2647  0747                     l2248:	
  2648                           
  2649                           ;servoController.c: 28: return 0;
  2650  0747  1283               	bcf	3,5	;RP0=0, select bank0
  2651  0748  1303               	bcf	3,6	;RP1=0, select bank0
  2652  0749  01A0               	clrf	?_getServoCommand
  2653  074A  01A1               	clrf	?_getServoCommand+1
  2654  074B  0008               	return
  2655  074C                     __end_of_getServoCommand:	
  2656                           
  2657                           	psect	text13
  2658  07DE                     __ptext13:	
  2659 ;; *************** function _encoders_init *****************
  2660 ;; Defined at:
  2661 ;;		line 253 in file "main.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;		None
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  1    wreg      void 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2675 ;;      Params:         0       0       0       0       0
  2676 ;;      Locals:         0       0       0       0       0
  2677 ;;      Temps:          0       2       0       0       0
  2678 ;;      Totals:         0       2       0       0       0
  2679 ;;Total ram usage:        2 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    1
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function _encoders_init
  2691  07DE                     _encoders_init:	
  2692                           
  2693                           ;main.c: 256: state1 = (PORTB & 0b00011000) >>3;
  2694                           
  2695                           ;incstack = 0
  2696                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  2697  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  2698  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  2699  07E0  0806               	movf	6,w	;volatile
  2700  07E1  00A0               	movwf	??_encoders_init
  2701  07E2  3003               	movlw	3
  2702  07E3                     u1885:	
  2703  07E3  1003               	clrc
  2704  07E4  0CA0               	rrf	??_encoders_init,f
  2705  07E5  3EFF               	addlw	-1
  2706  07E6  1D03               	skipz
  2707  07E7  2FE3               	goto	u1885
  2708  07E8  0820               	movf	??_encoders_init,w
  2709  07E9  3903               	andlw	3
  2710  07EA  00A1               	movwf	??_encoders_init+1
  2711  07EB  0821               	movf	??_encoders_init+1,w
  2712  07EC  00EE               	movwf	_state1	;volatile
  2713                           
  2714                           ;main.c: 257: encoder1_counter = 0;
  2715  07ED  3000               	movlw	0
  2716  07EE  1683               	bsf	3,5	;RP0=1, select bank1
  2717  07EF  1303               	bcf	3,6	;RP1=0, select bank1
  2718  07F0  00D5               	movwf	(_encoder1_counter+3)^(0+128)	;volatile
  2719  07F1  3000               	movlw	0
  2720  07F2  00D4               	movwf	(_encoder1_counter+2)^(0+128)	;volatile
  2721  07F3  3000               	movlw	0
  2722  07F4  00D3               	movwf	(_encoder1_counter+1)^(0+128)	;volatile
  2723  07F5  3000               	movlw	0
  2724  07F6  00D2               	movwf	_encoder1_counter^(0+128)	;volatile
  2725  07F7  0008               	return
  2726  07F8                     __end_of_encoders_init:	
  2727                           
  2728                           	psect	text14
  2729  0F71                     __ptext14:	
  2730 ;; *************** function _chkchr *****************
  2731 ;; Defined at:
  2732 ;;		line 142 in file "serial.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      unsigned char 
  2739 ;; Registers used:
  2740 ;;		wreg
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2746 ;;      Params:         0       0       0       0       0
  2747 ;;      Locals:         0       0       0       0       0
  2748 ;;      Temps:          0       0       0       0       0
  2749 ;;      Totals:         0       0       0       0       0
  2750 ;;Total ram usage:        0 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    1
  2753 ;; This function calls:
  2754 ;;		Nothing
  2755 ;; This function is called by:
  2756 ;;		_main
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           
  2761                           ;psect for function _chkchr
  2762  0F71                     _chkchr:	
  2763                           
  2764                           ;serial.c: 143: if (RCIF) {
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _chkchr: [wreg]
  2768  0F71  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0F72  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0F73  1E8C               	btfss	12,5	;volatile
  2771  0F74  2F77               	goto	l2630
  2772                           
  2773                           ;serial.c: 144: return RCREG;
  2774  0F75  081A               	movf	26,w	;volatile
  2775  0F76  0008               	return
  2776  0F77                     l2630:	
  2777                           
  2778                           ;serial.c: 145: };serial.c: 146: return 255;
  2779  0F77  30FF               	movlw	255
  2780  0F78  0008               	return
  2781  0F79                     __end_of_chkchr:	
  2782                           
  2783                           	psect	text15
  2784  0038                     __ptext15:	
  2785 ;; *************** function _SetMotor *****************
  2786 ;; Defined at:
  2787 ;;		line 110 in file "main.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  I_Response      2   50[BANK0 ] int 
  2792 ;;  D_Response      2   48[BANK0 ] int 
  2793 ;;  P_Response      2   46[BANK0 ] int 
  2794 ;;  resp            4   52[BANK0 ] long 
  2795 ;;  err             2   56[BANK0 ] int 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2805 ;;      Params:         0       0       0       0       0
  2806 ;;      Locals:         0      12       0       0       0
  2807 ;;      Temps:          0       8       0       0       0
  2808 ;;      Totals:         0      20       0       0       0
  2809 ;;Total ram usage:       20 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    3
  2812 ;; This function calls:
  2813 ;;		___awdiv
  2814 ;;		___wmul
  2815 ;;		_constrain
  2816 ;;		_pwm_set
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           
  2823                           ;psect for function _SetMotor
  2824  0038                     _SetMotor:	
  2825                           
  2826                           ;main.c: 111: static long integral;;main.c: 112: static int derivative;;main.c: 113: sta
      +                          tic int last_err;;main.c: 114: long resp;;main.c: 115: int err = set_point - motor_pos;
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2830  0038  0870               	movf	_motor_pos,w	;volatile
  2831  0039  1283               	bcf	3,5	;RP0=0, select bank0
  2832  003A  1303               	bcf	3,6	;RP1=0, select bank0
  2833  003B  0269               	subwf	_set_point,w	;volatile
  2834  003C  00D8               	movwf	SetMotor@err
  2835  003D  0871               	movf	_motor_pos+1,w	;volatile
  2836  003E  1C03               	skipc
  2837  003F  0A71               	incf	_motor_pos+1,w	;volatile
  2838  0040  026A               	subwf	_set_point+1,w	;volatile
  2839  0041  00D9               	movwf	SetMotor@err+1
  2840                           
  2841                           ;main.c: 117: if (onlyK){
  2842  0042  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0043  1303               	bcf	3,6	;RP1=0, select bank1
  2844  0044  085C               	movf	_onlyK^(0+128),w
  2845  0045  045D               	iorwf	(_onlyK+1)^(0+128),w
  2846  0046  1903               	btfsc	3,2
  2847  0047  2862               	goto	l2658
  2848                           
  2849                           ;main.c: 118: resp = (err)/5;
  2850  0048  3005               	movlw	5
  2851  0049  1283               	bcf	3,5	;RP0=0, select bank0
  2852  004A  1303               	bcf	3,6	;RP1=0, select bank0
  2853  004B  00A0               	movwf	___awdiv@divisor
  2854  004C  3000               	movlw	0
  2855  004D  00A1               	movwf	___awdiv@divisor+1
  2856  004E  0859               	movf	SetMotor@err+1,w
  2857  004F  00A3               	movwf	___awdiv@dividend+1
  2858  0050  0858               	movf	SetMotor@err,w
  2859  0051  00A2               	movwf	___awdiv@dividend
  2860  0052  120A  118A  2554  120A  118A  	fcall	___awdiv
  2861  0057  1283               	bcf	3,5	;RP0=0, select bank0
  2862  0058  1303               	bcf	3,6	;RP1=0, select bank0
  2863  0059  0820               	movf	?___awdiv,w
  2864  005A  00D4               	movwf	SetMotor@resp
  2865  005B  0821               	movf	?___awdiv+1,w
  2866  005C  00D5               	movwf	SetMotor@resp+1
  2867  005D  3000               	movlw	0
  2868  005E  1BD5               	btfsc	SetMotor@resp+1,7
  2869  005F  30FF               	movlw	255
  2870  0060  00D6               	movwf	SetMotor@resp+2
  2871  0061  2930               	goto	L1
  2872  0062                     l2658:	
  2873                           ;main.c: 119: }else{
  2874                           
  2875                           
  2876                           ;main.c: 121: derivative = (err - last_err);
  2877  0062  085A               	movf	SetMotor@last_err^(0+128),w
  2878  0063  1283               	bcf	3,5	;RP0=0, select bank0
  2879  0064  1303               	bcf	3,6	;RP1=0, select bank0
  2880  0065  0258               	subwf	SetMotor@err,w
  2881  0066  1683               	bsf	3,5	;RP0=1, select bank1
  2882  0067  1303               	bcf	3,6	;RP1=0, select bank1
  2883  0068  00E9               	movwf	SetMotor@derivative^(0+128)
  2884  0069  085B               	movf	(SetMotor@last_err+1)^(0+128),w
  2885  006A  1C03               	skipc
  2886  006B  0A5B               	incf	(SetMotor@last_err+1)^(0+128),w
  2887  006C  1283               	bcf	3,5	;RP0=0, select bank0
  2888  006D  1303               	bcf	3,6	;RP1=0, select bank0
  2889  006E  0259               	subwf	SetMotor@err+1,w
  2890  006F  1683               	bsf	3,5	;RP0=1, select bank1
  2891  0070  1303               	bcf	3,6	;RP1=0, select bank1
  2892  0071  00EA               	movwf	(SetMotor@derivative+1)^(0+128)
  2893                           
  2894                           ;main.c: 122: last_err = err;
  2895  0072  1283               	bcf	3,5	;RP0=0, select bank0
  2896  0073  1303               	bcf	3,6	;RP1=0, select bank0
  2897  0074  0859               	movf	SetMotor@err+1,w
  2898  0075  1683               	bsf	3,5	;RP0=1, select bank1
  2899  0076  1303               	bcf	3,6	;RP1=0, select bank1
  2900  0077  00DB               	movwf	(SetMotor@last_err+1)^(0+128)
  2901  0078  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0079  1303               	bcf	3,6	;RP1=0, select bank0
  2903  007A  0858               	movf	SetMotor@err,w
  2904  007B  1683               	bsf	3,5	;RP0=1, select bank1
  2905  007C  1303               	bcf	3,6	;RP1=0, select bank1
  2906  007D  00DA               	movwf	SetMotor@last_err^(0+128)
  2907                           
  2908                           ;main.c: 123: if (err == 0){
  2909  007E  1283               	bcf	3,5	;RP0=0, select bank0
  2910  007F  1303               	bcf	3,6	;RP1=0, select bank0
  2911  0080  0858               	movf	SetMotor@err,w
  2912  0081  0459               	iorwf	SetMotor@err+1,w
  2913  0082  1D03               	btfss	3,2
  2914  0083  288E               	goto	l2666
  2915                           
  2916                           ;main.c: 124: integral = 0;
  2917  0084  3000               	movlw	0
  2918  0085  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0086  1303               	bcf	3,6	;RP1=0, select bank1
  2920  0087  00E8               	movwf	(SetMotor@integral+3)^(0+128)
  2921  0088  3000               	movlw	0
  2922  0089  00E7               	movwf	(SetMotor@integral+2)^(0+128)
  2923  008A  3000               	movlw	0
  2924  008B  00E6               	movwf	(SetMotor@integral+1)^(0+128)
  2925  008C  3000               	movlw	0
  2926  008D  28D6               	goto	L2
  2927  008E                     l2666:	
  2928                           ;main.c: 125: }else{
  2929                           
  2930                           
  2931                           ;main.c: 126: integral = integral + err;
  2932  008E  1683               	bsf	3,5	;RP0=1, select bank1
  2933  008F  1303               	bcf	3,6	;RP1=0, select bank1
  2934  0090  0865               	movf	SetMotor@integral^(0+128),w
  2935  0091  1283               	bcf	3,5	;RP0=0, select bank0
  2936  0092  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0093  00C6               	movwf	??_SetMotor
  2938  0094  1683               	bsf	3,5	;RP0=1, select bank1
  2939  0095  1303               	bcf	3,6	;RP1=0, select bank1
  2940  0096  0866               	movf	(SetMotor@integral+1)^(0+128),w
  2941  0097  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0098  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0099  00C7               	movwf	??_SetMotor+1
  2944  009A  1683               	bsf	3,5	;RP0=1, select bank1
  2945  009B  1303               	bcf	3,6	;RP1=0, select bank1
  2946  009C  0867               	movf	(SetMotor@integral+2)^(0+128),w
  2947  009D  1283               	bcf	3,5	;RP0=0, select bank0
  2948  009E  1303               	bcf	3,6	;RP1=0, select bank0
  2949  009F  00C8               	movwf	??_SetMotor+2
  2950  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  2951  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  2952  00A2  0868               	movf	(SetMotor@integral+3)^(0+128),w
  2953  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  2954  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  2955  00A5  00C9               	movwf	??_SetMotor+3
  2956  00A6  0858               	movf	SetMotor@err,w
  2957  00A7  00CA               	movwf	??_SetMotor+4
  2958  00A8  0859               	movf	SetMotor@err+1,w
  2959  00A9  00CB               	movwf	??_SetMotor+5
  2960  00AA  3000               	movlw	0
  2961  00AB  1BCB               	btfsc	??_SetMotor+5,7
  2962  00AC  30FF               	movlw	255
  2963  00AD  00CC               	movwf	??_SetMotor+6
  2964  00AE  00CD               	movwf	??_SetMotor+7
  2965  00AF  084A               	movf	??_SetMotor+4,w
  2966  00B0  07C6               	addwf	??_SetMotor,f
  2967  00B1  084B               	movf	??_SetMotor+5,w
  2968  00B2  1803               	skipnc
  2969  00B3  0F4B               	incfsz	??_SetMotor+5,w
  2970  00B4  28B6               	goto	u2340
  2971  00B5  28B7               	goto	u2341
  2972  00B6                     u2340:	
  2973  00B6  07C7               	addwf	??_SetMotor+1,f
  2974  00B7                     u2341:	
  2975  00B7  084C               	movf	??_SetMotor+6,w
  2976  00B8  1803               	skipnc
  2977  00B9  0F4C               	incfsz	??_SetMotor+6,w
  2978  00BA  28BC               	goto	u2342
  2979  00BB  28BD               	goto	u2343
  2980  00BC                     u2342:	
  2981  00BC  07C8               	addwf	??_SetMotor+2,f
  2982  00BD                     u2343:	
  2983  00BD  084D               	movf	??_SetMotor+7,w
  2984  00BE  1803               	skipnc
  2985  00BF  0A4D               	incf	??_SetMotor+7,w
  2986  00C0  07C9               	addwf	??_SetMotor+3,f
  2987  00C1  0849               	movf	??_SetMotor+3,w
  2988  00C2  1683               	bsf	3,5	;RP0=1, select bank1
  2989  00C3  1303               	bcf	3,6	;RP1=0, select bank1
  2990  00C4  00E8               	movwf	(SetMotor@integral+3)^(0+128)
  2991  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  2992  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  2993  00C7  0848               	movf	??_SetMotor+2,w
  2994  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  2995  00C9  1303               	bcf	3,6	;RP1=0, select bank1
  2996  00CA  00E7               	movwf	(SetMotor@integral+2)^(0+128)
  2997  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  2998  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  2999  00CD  0847               	movf	??_SetMotor+1,w
  3000  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  3001  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  3002  00D0  00E6               	movwf	(SetMotor@integral+1)^(0+128)
  3003  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  3004  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  3005  00D3  0846               	movf	??_SetMotor,w
  3006  00D4  1683               	bsf	3,5	;RP0=1, select bank1
  3007  00D5  1303               	bcf	3,6	;RP1=0, select bank1
  3008  00D6                     L2:	
  3009  00D6  00E5               	movwf	SetMotor@integral^(0+128)
  3010                           
  3011                           ;main.c: 127: };main.c: 129: int P_Response = 4 * err;
  3012  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  3013  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  3014  00D9  0859               	movf	SetMotor@err+1,w
  3015  00DA  00C7               	movwf	??_SetMotor+1
  3016  00DB  0858               	movf	SetMotor@err,w
  3017  00DC  00C6               	movwf	??_SetMotor
  3018  00DD  1003               	clrc
  3019  00DE  0DC6               	rlf	??_SetMotor,f
  3020  00DF  0DC7               	rlf	??_SetMotor+1,f
  3021  00E0  1003               	clrc
  3022  00E1  0DC6               	rlf	??_SetMotor,f
  3023  00E2  0DC7               	rlf	??_SetMotor+1,f
  3024  00E3  0846               	movf	??_SetMotor,w
  3025  00E4  00CE               	movwf	SetMotor@P_Response
  3026  00E5  0847               	movf	??_SetMotor+1,w
  3027  00E6  00CF               	movwf	SetMotor@P_Response+1
  3028                           
  3029                           ;main.c: 130: int D_Response = (13 * derivative);
  3030  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  3031  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  3032  00E9  086A               	movf	(SetMotor@derivative+1)^(0+128),w
  3033  00EA  1283               	bcf	3,5	;RP0=0, select bank0
  3034  00EB  1303               	bcf	3,6	;RP1=0, select bank0
  3035  00EC  00A1               	movwf	___wmul@multiplier+1
  3036  00ED  1683               	bsf	3,5	;RP0=1, select bank1
  3037  00EE  1303               	bcf	3,6	;RP1=0, select bank1
  3038  00EF  0869               	movf	SetMotor@derivative^(0+128),w
  3039  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  3040  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  3041  00F2  00A0               	movwf	___wmul@multiplier
  3042  00F3  300D               	movlw	13
  3043  00F4  00A2               	movwf	___wmul@multiplicand
  3044  00F5  3000               	movlw	0
  3045  00F6  00A3               	movwf	___wmul@multiplicand+1
  3046  00F7  120A  158A  27B3  120A  118A  	fcall	___wmul
  3047  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  3048  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  3049  00FE  0821               	movf	?___wmul+1,w
  3050  00FF  00D1               	movwf	SetMotor@D_Response+1
  3051  0100  0820               	movf	?___wmul,w
  3052  0101  00D0               	movwf	SetMotor@D_Response
  3053                           
  3054                           ;main.c: 132: int I_Response = 0 * integral;
  3055  0102  1683               	bsf	3,5	;RP0=1, select bank1
  3056  0103  1303               	bcf	3,6	;RP1=0, select bank1
  3057  0104  0866               	movf	(SetMotor@integral+1)^(0+128),w
  3058  0105  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0106  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0107  00A1               	movwf	___wmul@multiplier+1
  3061  0108  1683               	bsf	3,5	;RP0=1, select bank1
  3062  0109  1303               	bcf	3,6	;RP1=0, select bank1
  3063  010A  0865               	movf	SetMotor@integral^(0+128),w
  3064  010B  1283               	bcf	3,5	;RP0=0, select bank0
  3065  010C  1303               	bcf	3,6	;RP1=0, select bank0
  3066  010D  00A0               	movwf	___wmul@multiplier
  3067  010E  3000               	movlw	0
  3068  010F  00A2               	movwf	___wmul@multiplicand
  3069  0110  00A3               	movwf	___wmul@multiplicand+1
  3070  0111  120A  158A  27B3  120A  118A  	fcall	___wmul
  3071  0116  1283               	bcf	3,5	;RP0=0, select bank0
  3072  0117  1303               	bcf	3,6	;RP1=0, select bank0
  3073  0118  0821               	movf	?___wmul+1,w
  3074  0119  00D3               	movwf	SetMotor@I_Response+1
  3075  011A  0820               	movf	?___wmul,w
  3076  011B  00D2               	movwf	SetMotor@I_Response
  3077                           
  3078                           ;main.c: 133: resp = P_Response + D_Response + I_Response;
  3079  011C  0850               	movf	SetMotor@D_Response,w
  3080  011D  074E               	addwf	SetMotor@P_Response,w
  3081  011E  00C6               	movwf	??_SetMotor
  3082  011F  0851               	movf	SetMotor@D_Response+1,w
  3083  0120  1803               	skipnc
  3084  0121  0A51               	incf	SetMotor@D_Response+1,w
  3085  0122  074F               	addwf	SetMotor@P_Response+1,w
  3086  0123  00C7               	movwf	??_SetMotor+1
  3087  0124  0852               	movf	SetMotor@I_Response,w
  3088  0125  0746               	addwf	??_SetMotor,w
  3089  0126  00D4               	movwf	SetMotor@resp
  3090  0127  0853               	movf	SetMotor@I_Response+1,w
  3091  0128  1803               	skipnc
  3092  0129  0A53               	incf	SetMotor@I_Response+1,w
  3093  012A  0747               	addwf	??_SetMotor+1,w
  3094  012B  00D5               	movwf	SetMotor@resp+1
  3095  012C  01D6               	clrf	SetMotor@resp+2
  3096  012D  1BD5               	btfsc	SetMotor@resp+1,7
  3097  012E  03D6               	decf	SetMotor@resp+2,f
  3098  012F  0856               	movf	SetMotor@resp+2,w
  3099  0130                     L1:	
  3100  0130  00D7               	movwf	SetMotor@resp+3
  3101                           
  3102                           ;main.c: 134: };main.c: 136: resp = constrain(resp, -255,255 );
  3103  0131  0857               	movf	SetMotor@resp+3,w
  3104  0132  00A3               	movwf	constrain@value+3
  3105  0133  0856               	movf	SetMotor@resp+2,w
  3106  0134  00A2               	movwf	constrain@value+2
  3107  0135  0855               	movf	SetMotor@resp+1,w
  3108  0136  00A1               	movwf	constrain@value+1
  3109  0137  0854               	movf	SetMotor@resp,w
  3110  0138  00A0               	movwf	constrain@value
  3111  0139  30FF               	movlw	255
  3112  013A  00A7               	movwf	constrain@lLimit+3
  3113  013B  30FF               	movlw	255
  3114  013C  00A6               	movwf	constrain@lLimit+2
  3115  013D  30FF               	movlw	255
  3116  013E  00A5               	movwf	constrain@lLimit+1
  3117  013F  3001               	movlw	1
  3118  0140  00A4               	movwf	constrain@lLimit
  3119  0141  3000               	movlw	0
  3120  0142  00AB               	movwf	constrain@uLimit+3
  3121  0143  3000               	movlw	0
  3122  0144  00AA               	movwf	constrain@uLimit+2
  3123  0145  3000               	movlw	0
  3124  0146  00A9               	movwf	constrain@uLimit+1
  3125  0147  30FF               	movlw	255
  3126  0148  00A8               	movwf	constrain@uLimit
  3127  0149  120A  118A  266B  120A  118A  	fcall	_constrain
  3128  014E  1283               	bcf	3,5	;RP0=0, select bank0
  3129  014F  1303               	bcf	3,6	;RP1=0, select bank0
  3130  0150  0823               	movf	?_constrain+3,w
  3131  0151  00D7               	movwf	SetMotor@resp+3
  3132  0152  0822               	movf	?_constrain+2,w
  3133  0153  00D6               	movwf	SetMotor@resp+2
  3134  0154  0821               	movf	?_constrain+1,w
  3135  0155  00D5               	movwf	SetMotor@resp+1
  3136  0156  0820               	movf	?_constrain,w
  3137  0157  00D4               	movwf	SetMotor@resp
  3138                           
  3139                           ;main.c: 137: if (resp > 0){
  3140  0158  1BD7               	btfsc	SetMotor@resp+3,7
  3141  0159  298C               	goto	l297
  3142  015A  0857               	movf	SetMotor@resp+3,w
  3143  015B  1D03               	btfss	3,2
  3144  015C  2969               	goto	l2680
  3145  015D  0856               	movf	SetMotor@resp+2,w
  3146  015E  1D03               	btfss	3,2
  3147  015F  2969               	goto	l2680
  3148  0160  0855               	movf	SetMotor@resp+1,w
  3149  0161  1D03               	btfss	3,2
  3150  0162  2969               	goto	l2680
  3151  0163  3001               	movlw	1
  3152  0164  0254               	subwf	SetMotor@resp,w
  3153  0165  1D03               	skipz
  3154  0166  2967               	goto	u2353
  3155  0167                     u2353:	
  3156  0167  1C03               	btfss	3,0
  3157  0168  298C               	goto	l297
  3158  0169                     l2680:	
  3159                           
  3160                           ;main.c: 138: pwm_set(1, resp );
  3161  0169  3001               	movlw	1
  3162  016A  00BC               	movwf	pwm_set@channel
  3163  016B  3000               	movlw	0
  3164  016C  00BD               	movwf	pwm_set@channel+1
  3165  016D  0857               	movf	SetMotor@resp+3,w
  3166  016E  00C1               	movwf	pwm_set@duty_cycle+3
  3167  016F  0856               	movf	SetMotor@resp+2,w
  3168  0170  00C0               	movwf	pwm_set@duty_cycle+2
  3169  0171  0855               	movf	SetMotor@resp+1,w
  3170  0172  00BF               	movwf	pwm_set@duty_cycle+1
  3171  0173  0854               	movf	SetMotor@resp,w
  3172  0174  00BE               	movwf	pwm_set@duty_cycle
  3173  0175  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  3174                           
  3175                           ;main.c: 139: pwm_set(2, 0 );
  3176  017A  3002               	movlw	2
  3177  017B  1283               	bcf	3,5	;RP0=0, select bank0
  3178  017C  1303               	bcf	3,6	;RP1=0, select bank0
  3179  017D  00BC               	movwf	pwm_set@channel
  3180  017E  3000               	movlw	0
  3181  017F  00BD               	movwf	pwm_set@channel+1
  3182  0180  3000               	movlw	0
  3183  0181  00C1               	movwf	pwm_set@duty_cycle+3
  3184  0182  3000               	movlw	0
  3185  0183  00C0               	movwf	pwm_set@duty_cycle+2
  3186  0184  3000               	movlw	0
  3187  0185  00BF               	movwf	pwm_set@duty_cycle+1
  3188  0186  3000               	movlw	0
  3189  0187  00BE               	movwf	pwm_set@duty_cycle
  3190  0188  120A  118A  24D3   	fcall	_pwm_set
  3191                           
  3192                           ;main.c: 140: }else if(resp < 0){
  3193  018B  0008               	return
  3194  018C                     l297:	
  3195  018C  1FD7               	btfss	SetMotor@resp+3,7
  3196  018D  29B8               	goto	l2684
  3197                           
  3198                           ;main.c: 141: pwm_set(1, 0 );
  3199  018E  3001               	movlw	1
  3200  018F  00BC               	movwf	pwm_set@channel
  3201  0190  3000               	movlw	0
  3202  0191  00BD               	movwf	pwm_set@channel+1
  3203  0192  3000               	movlw	0
  3204  0193  00C1               	movwf	pwm_set@duty_cycle+3
  3205  0194  3000               	movlw	0
  3206  0195  00C0               	movwf	pwm_set@duty_cycle+2
  3207  0196  3000               	movlw	0
  3208  0197  00BF               	movwf	pwm_set@duty_cycle+1
  3209  0198  3000               	movlw	0
  3210  0199  00BE               	movwf	pwm_set@duty_cycle
  3211  019A  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  3212                           
  3213                           ;main.c: 142: pwm_set(2, -resp );
  3214  019F  3002               	movlw	2
  3215  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3216  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  3217  01A2  00BC               	movwf	pwm_set@channel
  3218  01A3  3000               	movlw	0
  3219  01A4  00BD               	movwf	pwm_set@channel+1
  3220  01A5  0954               	comf	SetMotor@resp,w
  3221  01A6  00BE               	movwf	pwm_set@duty_cycle
  3222  01A7  0955               	comf	SetMotor@resp+1,w
  3223  01A8  00BF               	movwf	pwm_set@duty_cycle+1
  3224  01A9  0956               	comf	SetMotor@resp+2,w
  3225  01AA  00C0               	movwf	pwm_set@duty_cycle+2
  3226  01AB  0957               	comf	SetMotor@resp+3,w
  3227  01AC  00C1               	movwf	pwm_set@duty_cycle+3
  3228  01AD  0ABE               	incf	pwm_set@duty_cycle,f
  3229  01AE  1903               	skipnz
  3230  01AF  0ABF               	incf	pwm_set@duty_cycle+1,f
  3231  01B0  1903               	skipnz
  3232  01B1  0AC0               	incf	pwm_set@duty_cycle+2,f
  3233  01B2  1903               	skipnz
  3234  01B3  0AC1               	incf	pwm_set@duty_cycle+3,f
  3235  01B4  120A  118A  24D3   	fcall	_pwm_set
  3236                           
  3237                           ;main.c: 143: }else{
  3238  01B7  0008               	return
  3239  01B8                     l2684:	
  3240                           
  3241                           ;main.c: 144: pwm_set(1, 0 );
  3242  01B8  3001               	movlw	1
  3243  01B9  00BC               	movwf	pwm_set@channel
  3244  01BA  3000               	movlw	0
  3245  01BB  00BD               	movwf	pwm_set@channel+1
  3246  01BC  3000               	movlw	0
  3247  01BD  00C1               	movwf	pwm_set@duty_cycle+3
  3248  01BE  3000               	movlw	0
  3249  01BF  00C0               	movwf	pwm_set@duty_cycle+2
  3250  01C0  3000               	movlw	0
  3251  01C1  00BF               	movwf	pwm_set@duty_cycle+1
  3252  01C2  3000               	movlw	0
  3253  01C3  00BE               	movwf	pwm_set@duty_cycle
  3254  01C4  120A  118A  24D3  120A  118A  	fcall	_pwm_set
  3255                           
  3256                           ;main.c: 145: pwm_set(2, 0 );
  3257  01C9  3002               	movlw	2
  3258  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  3259  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  3260  01CC  00BC               	movwf	pwm_set@channel
  3261  01CD  3000               	movlw	0
  3262  01CE  00BD               	movwf	pwm_set@channel+1
  3263  01CF  3000               	movlw	0
  3264  01D0  00C1               	movwf	pwm_set@duty_cycle+3
  3265  01D1  3000               	movlw	0
  3266  01D2  00C0               	movwf	pwm_set@duty_cycle+2
  3267  01D3  3000               	movlw	0
  3268  01D4  00BF               	movwf	pwm_set@duty_cycle+1
  3269  01D5  3000               	movlw	0
  3270  01D6  00BE               	movwf	pwm_set@duty_cycle
  3271  01D7  120A  118A  24D3   	fcall	_pwm_set
  3272  01DA  0008               	return
  3273  01DB                     __end_of_SetMotor:	
  3274                           
  3275                           	psect	text16
  3276  04D3                     __ptext16:	
  3277 ;; *************** function _pwm_set *****************
  3278 ;; Defined at:
  3279 ;;		line 72 in file "pwm.c"
  3280 ;; Parameters:    Size  Location     Type
  3281 ;;  channel         2   28[BANK0 ] int 
  3282 ;;  duty_cycle      4   30[BANK0 ] long 
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  1    wreg      void 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3294 ;;      Params:         0       6       0       0       0
  3295 ;;      Locals:         0       0       0       0       0
  3296 ;;      Temps:          0       4       0       0       0
  3297 ;;      Totals:         0      10       0       0       0
  3298 ;;Total ram usage:       10 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    2
  3301 ;; This function calls:
  3302 ;;		___aldiv
  3303 ;;		___lmul
  3304 ;; This function is called by:
  3305 ;;		_SetMotor
  3306 ;;		_motor_reset
  3307 ;;		_main
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           
  3312                           ;psect for function _pwm_set
  3313  04D3                     _pwm_set:	
  3314                           
  3315                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  3316                           
  3317                           ;incstack = 0
  3318                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3319  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3320  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3321  04D5  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  3322  04D6  0008               	return
  3323  04D7  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  3324  04D8  2CE9               	goto	l2010
  3325  04D9  0841               	movf	pwm_set@duty_cycle+3,w
  3326  04DA  1D03               	btfss	3,2
  3327  04DB  0008               	return
  3328  04DC  0840               	movf	pwm_set@duty_cycle+2,w
  3329  04DD  1D03               	btfss	3,2
  3330  04DE  0008               	return
  3331  04DF  3001               	movlw	1
  3332  04E0  023F               	subwf	pwm_set@duty_cycle+1,w
  3333  04E1  1D03               	skipz
  3334  04E2  2CE7               	goto	u1563
  3335  04E3  3000               	movlw	0
  3336  04E4  023E               	subwf	pwm_set@duty_cycle,w
  3337  04E5  1D03               	skipz
  3338  04E6  2CE7               	goto	u1563
  3339  04E7                     u1563:	
  3340  04E7  1803               	btfsc	3,0
  3341  04E8  0008               	return
  3342  04E9                     l2010:	
  3343                           
  3344                           ;pwm.c: 77: if (duty_cycle !=0){
  3345  04E9  0841               	movf	pwm_set@duty_cycle+3,w
  3346  04EA  0440               	iorwf	pwm_set@duty_cycle+2,w
  3347  04EB  043F               	iorwf	pwm_set@duty_cycle+1,w
  3348  04EC  043E               	iorwf	pwm_set@duty_cycle,w
  3349  04ED  1903               	skipnz
  3350  04EE  2D46               	goto	l2020
  3351                           
  3352                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  3353  04EF  3020               	movlw	32
  3354  04F0  00C2               	movwf	??_pwm_set
  3355  04F1  3000               	movlw	0
  3356  04F2  00C3               	movwf	??_pwm_set+1
  3357  04F3  3000               	movlw	0
  3358  04F4  00C4               	movwf	??_pwm_set+2
  3359  04F5  3000               	movlw	0
  3360  04F6  00C5               	movwf	??_pwm_set+3
  3361  04F7  3000               	movlw	0
  3362  04F8  00B0               	movwf	___aldiv@divisor+3
  3363  04F9  3000               	movlw	0
  3364  04FA  00AF               	movwf	___aldiv@divisor+2
  3365  04FB  3000               	movlw	0
  3366  04FC  00AE               	movwf	___aldiv@divisor+1
  3367  04FD  30FF               	movlw	255
  3368  04FE  00AD               	movwf	___aldiv@divisor
  3369  04FF  0841               	movf	pwm_set@duty_cycle+3,w
  3370  0500  00A3               	movwf	___lmul@multiplier+3
  3371  0501  0840               	movf	pwm_set@duty_cycle+2,w
  3372  0502  00A2               	movwf	___lmul@multiplier+2
  3373  0503  083F               	movf	pwm_set@duty_cycle+1,w
  3374  0504  00A1               	movwf	___lmul@multiplier+1
  3375  0505  083E               	movf	pwm_set@duty_cycle,w
  3376  0506  00A0               	movwf	___lmul@multiplier
  3377  0507  3000               	movlw	0
  3378  0508  00A7               	movwf	___lmul@multiplicand+3
  3379  0509  3000               	movlw	0
  3380  050A  00A6               	movwf	___lmul@multiplicand+2
  3381  050B  3000               	movlw	0
  3382  050C  00A5               	movwf	___lmul@multiplicand+1
  3383  050D  30DF               	movlw	223
  3384  050E  00A4               	movwf	___lmul@multiplicand
  3385  050F  120A  118A  25AF  120A  118A  	fcall	___lmul
  3386  0514  1283               	bcf	3,5	;RP0=0, select bank0
  3387  0515  1303               	bcf	3,6	;RP1=0, select bank0
  3388  0516  0823               	movf	?___lmul+3,w
  3389  0517  00B4               	movwf	___aldiv@dividend+3
  3390  0518  0822               	movf	?___lmul+2,w
  3391  0519  00B3               	movwf	___aldiv@dividend+2
  3392  051A  0821               	movf	?___lmul+1,w
  3393  051B  00B2               	movwf	___aldiv@dividend+1
  3394  051C  0820               	movf	?___lmul,w
  3395  051D  00B1               	movwf	___aldiv@dividend
  3396  051E  120A  118A  23B9  120A  118A  	fcall	___aldiv
  3397  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0525  082D               	movf	?___aldiv,w
  3400  0526  07C2               	addwf	??_pwm_set,f
  3401  0527  082E               	movf	?___aldiv+1,w
  3402  0528  1803               	skipnc
  3403  0529  0F2E               	incfsz	?___aldiv+1,w
  3404  052A  2D2C               	goto	u1580
  3405  052B  2D2D               	goto	u1581
  3406  052C                     u1580:	
  3407  052C  07C3               	addwf	??_pwm_set+1,f
  3408  052D                     u1581:	
  3409  052D  082F               	movf	?___aldiv+2,w
  3410  052E  1803               	skipnc
  3411  052F  0F2F               	incfsz	?___aldiv+2,w
  3412  0530  2D32               	goto	u1582
  3413  0531  2D33               	goto	u1583
  3414  0532                     u1582:	
  3415  0532  07C4               	addwf	??_pwm_set+2,f
  3416  0533                     u1583:	
  3417  0533  0830               	movf	?___aldiv+3,w
  3418  0534  1803               	skipnc
  3419  0535  0A30               	incf	?___aldiv+3,w
  3420  0536  07C5               	addwf	??_pwm_set+3,f
  3421  0537  0845               	movf	??_pwm_set+3,w
  3422  0538  00C1               	movwf	pwm_set@duty_cycle+3
  3423  0539  0844               	movf	??_pwm_set+2,w
  3424  053A  00C0               	movwf	pwm_set@duty_cycle+2
  3425  053B  0843               	movf	??_pwm_set+1,w
  3426  053C  00BF               	movwf	pwm_set@duty_cycle+1
  3427  053D  0842               	movf	??_pwm_set,w
  3428  053E  00BE               	movwf	pwm_set@duty_cycle
  3429  053F  2D46               	goto	l2020
  3430  0540                     l2014:	
  3431                           
  3432                           ;pwm.c: 82: CCPR1L = duty_cycle;
  3433  0540  083E               	movf	pwm_set@duty_cycle,w
  3434  0541  0095               	movwf	21	;volatile
  3435                           
  3436                           ;pwm.c: 83: break;
  3437  0542  0008               	return
  3438  0543                     l2016:	
  3439                           
  3440                           ;pwm.c: 85: CCPR2L = duty_cycle;
  3441  0543  083E               	movf	pwm_set@duty_cycle,w
  3442  0544  009B               	movwf	27	;volatile
  3443                           
  3444                           ;pwm.c: 86: break;
  3445  0545  0008               	return
  3446  0546                     l2020:	
  3447                           
  3448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3449                           ; Switch size 1, requested type "simple"
  3450                           ; Number of cases is 1, Range of values is 0 to 0
  3451                           ; switch strategies available:
  3452                           ; Name         Instructions Cycles
  3453                           ; simple_byte            4     3 (average)
  3454                           ; direct_byte           11     8 (fixed)
  3455                           ; jumptable            260     6 (fixed)
  3456                           ;	Chosen strategy is simple_byte
  3457  0546  083D               	movf	pwm_set@channel+1,w
  3458  0547  3A00               	xorlw	0	; case 0
  3459  0548  1903               	skipnz
  3460  0549  2D4B               	goto	l2856
  3461  054A  2D53               	goto	l182
  3462  054B                     l2856:	
  3463                           
  3464                           ; Switch size 1, requested type "simple"
  3465                           ; Number of cases is 2, Range of values is 1 to 2
  3466                           ; switch strategies available:
  3467                           ; Name         Instructions Cycles
  3468                           ; simple_byte            7     4 (average)
  3469                           ; direct_byte           17    11 (fixed)
  3470                           ; jumptable            263     9 (fixed)
  3471                           ;	Chosen strategy is simple_byte
  3472  054B  083C               	movf	pwm_set@channel,w
  3473  054C  3A01               	xorlw	1	; case 1
  3474  054D  1903               	skipnz
  3475  054E  2D40               	goto	l2014
  3476  054F  3A03               	xorlw	3	; case 2
  3477  0550  1903               	skipnz
  3478  0551  2D43               	goto	l2016
  3479  0552  2D53               	goto	l182
  3480  0553                     l182:	
  3481  0553  0008               	return
  3482  0554                     __end_of_pwm_set:	
  3483                           
  3484                           	psect	text17
  3485  05AF                     __ptext17:	
  3486 ;; *************** function ___lmul *****************
  3487 ;; Defined at:
  3488 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3491 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  product         4    9[BANK0 ] unsigned long 
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  4    0[BANK0 ] unsigned long 
  3496 ;; Registers used:
  3497 ;;		wreg, status,2, status,0
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3503 ;;      Params:         0       8       0       0       0
  3504 ;;      Locals:         0       4       0       0       0
  3505 ;;      Temps:          0       1       0       0       0
  3506 ;;      Totals:         0      13       0       0       0
  3507 ;;Total ram usage:       13 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    1
  3510 ;; This function calls:
  3511 ;;		Nothing
  3512 ;; This function is called by:
  3513 ;;		_pwm_set
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           
  3518                           ;psect for function ___lmul
  3519  05AF                     ___lmul:	
  3520                           
  3521                           ;incstack = 0
  3522                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3523  05AF  3000               	movlw	0
  3524  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3525  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3526  05B2  00AC               	movwf	___lmul@product+3
  3527  05B3  3000               	movlw	0
  3528  05B4  00AB               	movwf	___lmul@product+2
  3529  05B5  3000               	movlw	0
  3530  05B6  00AA               	movwf	___lmul@product+1
  3531  05B7  3000               	movlw	0
  3532  05B8  00A9               	movwf	___lmul@product
  3533  05B9                     l1954:	
  3534  05B9  1C20               	btfss	___lmul@multiplier,0
  3535  05BA  2DCF               	goto	l1958
  3536  05BB  0824               	movf	___lmul@multiplicand,w
  3537  05BC  07A9               	addwf	___lmul@product,f
  3538  05BD  0825               	movf	___lmul@multiplicand+1,w
  3539  05BE  1103               	clrz
  3540  05BF  1803               	skipnc
  3541  05C0  3E01               	addlw	1
  3542  05C1  1D03               	btfss	3,2
  3543  05C2  07AA               	addwf	___lmul@product+1,f
  3544  05C3  0826               	movf	___lmul@multiplicand+2,w
  3545  05C4  1103               	clrz
  3546  05C5  1803               	skipnc
  3547  05C6  3E01               	addlw	1
  3548  05C7  1D03               	btfss	3,2
  3549  05C8  07AB               	addwf	___lmul@product+2,f
  3550  05C9  0827               	movf	___lmul@multiplicand+3,w
  3551  05CA  1103               	clrz
  3552  05CB  1803               	skipnc
  3553  05CC  3E01               	addlw	1
  3554  05CD  1D03               	btfss	3,2
  3555  05CE  07AC               	addwf	___lmul@product+3,f
  3556  05CF                     l1958:	
  3557  05CF  3001               	movlw	1
  3558  05D0  00A8               	movwf	??___lmul
  3559  05D1                     u1425:	
  3560  05D1  1003               	clrc
  3561  05D2  0DA4               	rlf	___lmul@multiplicand,f
  3562  05D3  0DA5               	rlf	___lmul@multiplicand+1,f
  3563  05D4  0DA6               	rlf	___lmul@multiplicand+2,f
  3564  05D5  0DA7               	rlf	___lmul@multiplicand+3,f
  3565  05D6  0BA8               	decfsz	??___lmul,f
  3566  05D7  2DD1               	goto	u1425
  3567  05D8  3001               	movlw	1
  3568  05D9                     u1435:	
  3569  05D9  1003               	clrc
  3570  05DA  0CA3               	rrf	___lmul@multiplier+3,f
  3571  05DB  0CA2               	rrf	___lmul@multiplier+2,f
  3572  05DC  0CA1               	rrf	___lmul@multiplier+1,f
  3573  05DD  0CA0               	rrf	___lmul@multiplier,f
  3574  05DE  3EFF               	addlw	-1
  3575  05DF  1D03               	skipz
  3576  05E0  2DD9               	goto	u1435
  3577  05E1  0823               	movf	___lmul@multiplier+3,w
  3578  05E2  0422               	iorwf	___lmul@multiplier+2,w
  3579  05E3  0421               	iorwf	___lmul@multiplier+1,w
  3580  05E4  0420               	iorwf	___lmul@multiplier,w
  3581  05E5  1D03               	skipz
  3582  05E6  2DB9               	goto	l1954
  3583  05E7  082C               	movf	___lmul@product+3,w
  3584  05E8  00A3               	movwf	?___lmul+3
  3585  05E9  082B               	movf	___lmul@product+2,w
  3586  05EA  00A2               	movwf	?___lmul+2
  3587  05EB  082A               	movf	___lmul@product+1,w
  3588  05EC  00A1               	movwf	?___lmul+1
  3589  05ED  0829               	movf	___lmul@product,w
  3590  05EE  00A0               	movwf	?___lmul
  3591  05EF  0008               	return
  3592  05F0                     __end_of___lmul:	
  3593                           
  3594                           	psect	text18
  3595  03B9                     __ptext18:	
  3596 ;; *************** function ___aldiv *****************
  3597 ;; Defined at:
  3598 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  divisor         4   13[BANK0 ] long 
  3601 ;;  dividend        4   17[BANK0 ] long 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  quotient        4   24[BANK0 ] long 
  3604 ;;  sign            1   23[BANK0 ] unsigned char 
  3605 ;;  counter         1   22[BANK0 ] unsigned char 
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  4   13[BANK0 ] long 
  3608 ;; Registers used:
  3609 ;;		wreg, status,2, status,0
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3615 ;;      Params:         0       8       0       0       0
  3616 ;;      Locals:         0       6       0       0       0
  3617 ;;      Temps:          0       1       0       0       0
  3618 ;;      Totals:         0      15       0       0       0
  3619 ;;Total ram usage:       15 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    1
  3622 ;; This function calls:
  3623 ;;		Nothing
  3624 ;; This function is called by:
  3625 ;;		_pwm_set
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function ___aldiv
  3631  03B9                     ___aldiv:	
  3632                           
  3633                           ;incstack = 0
  3634                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3635  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  3636  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  3637  03BB  01B7               	clrf	___aldiv@sign
  3638  03BC  1FB0               	btfss	___aldiv@divisor+3,7
  3639  03BD  2BCB               	goto	l591
  3640  03BE  09AD               	comf	___aldiv@divisor,f
  3641  03BF  09AE               	comf	___aldiv@divisor+1,f
  3642  03C0  09AF               	comf	___aldiv@divisor+2,f
  3643  03C1  09B0               	comf	___aldiv@divisor+3,f
  3644  03C2  0AAD               	incf	___aldiv@divisor,f
  3645  03C3  1903               	skipnz
  3646  03C4  0AAE               	incf	___aldiv@divisor+1,f
  3647  03C5  1903               	skipnz
  3648  03C6  0AAF               	incf	___aldiv@divisor+2,f
  3649  03C7  1903               	skipnz
  3650  03C8  0AB0               	incf	___aldiv@divisor+3,f
  3651  03C9  01B7               	clrf	___aldiv@sign
  3652  03CA  0AB7               	incf	___aldiv@sign,f
  3653  03CB                     l591:	
  3654  03CB  1FB4               	btfss	___aldiv@dividend+3,7
  3655  03CC  2BDC               	goto	l1976
  3656  03CD  09B1               	comf	___aldiv@dividend,f
  3657  03CE  09B2               	comf	___aldiv@dividend+1,f
  3658  03CF  09B3               	comf	___aldiv@dividend+2,f
  3659  03D0  09B4               	comf	___aldiv@dividend+3,f
  3660  03D1  0AB1               	incf	___aldiv@dividend,f
  3661  03D2  1903               	skipnz
  3662  03D3  0AB2               	incf	___aldiv@dividend+1,f
  3663  03D4  1903               	skipnz
  3664  03D5  0AB3               	incf	___aldiv@dividend+2,f
  3665  03D6  1903               	skipnz
  3666  03D7  0AB4               	incf	___aldiv@dividend+3,f
  3667  03D8  3001               	movlw	1
  3668  03D9  00B5               	movwf	??___aldiv
  3669  03DA  0835               	movf	??___aldiv,w
  3670  03DB  06B7               	xorwf	___aldiv@sign,f
  3671  03DC                     l1976:	
  3672  03DC  3000               	movlw	0
  3673  03DD  00BB               	movwf	___aldiv@quotient+3
  3674  03DE  3000               	movlw	0
  3675  03DF  00BA               	movwf	___aldiv@quotient+2
  3676  03E0  3000               	movlw	0
  3677  03E1  00B9               	movwf	___aldiv@quotient+1
  3678  03E2  3000               	movlw	0
  3679  03E3  00B8               	movwf	___aldiv@quotient
  3680  03E4  0830               	movf	___aldiv@divisor+3,w
  3681  03E5  042F               	iorwf	___aldiv@divisor+2,w
  3682  03E6  042E               	iorwf	___aldiv@divisor+1,w
  3683  03E7  042D               	iorwf	___aldiv@divisor,w
  3684  03E8  1903               	skipnz
  3685  03E9  2C31               	goto	l1998
  3686  03EA  01B6               	clrf	___aldiv@counter
  3687  03EB  0AB6               	incf	___aldiv@counter,f
  3688  03EC                     l1984:	
  3689  03EC  1BB0               	btfsc	___aldiv@divisor+3,7
  3690  03ED  2BFC               	goto	l1986
  3691  03EE  3001               	movlw	1
  3692  03EF  00B5               	movwf	??___aldiv
  3693  03F0                     u1485:	
  3694  03F0  1003               	clrc
  3695  03F1  0DAD               	rlf	___aldiv@divisor,f
  3696  03F2  0DAE               	rlf	___aldiv@divisor+1,f
  3697  03F3  0DAF               	rlf	___aldiv@divisor+2,f
  3698  03F4  0DB0               	rlf	___aldiv@divisor+3,f
  3699  03F5  0BB5               	decfsz	??___aldiv,f
  3700  03F6  2BF0               	goto	u1485
  3701  03F7  3001               	movlw	1
  3702  03F8  00B5               	movwf	??___aldiv
  3703  03F9  0835               	movf	??___aldiv,w
  3704  03FA  07B6               	addwf	___aldiv@counter,f
  3705  03FB  2BEC               	goto	l1984
  3706  03FC                     l1986:	
  3707  03FC  3001               	movlw	1
  3708  03FD  00B5               	movwf	??___aldiv
  3709  03FE                     u1505:	
  3710  03FE  1003               	clrc
  3711  03FF  0DB8               	rlf	___aldiv@quotient,f
  3712  0400  0DB9               	rlf	___aldiv@quotient+1,f
  3713  0401  0DBA               	rlf	___aldiv@quotient+2,f
  3714  0402  0DBB               	rlf	___aldiv@quotient+3,f
  3715  0403  0BB5               	decfsz	??___aldiv,f
  3716  0404  2BFE               	goto	u1505
  3717  0405  0830               	movf	___aldiv@divisor+3,w
  3718  0406  0234               	subwf	___aldiv@dividend+3,w
  3719  0407  1D03               	skipz
  3720  0408  2C13               	goto	u1515
  3721  0409  082F               	movf	___aldiv@divisor+2,w
  3722  040A  0233               	subwf	___aldiv@dividend+2,w
  3723  040B  1D03               	skipz
  3724  040C  2C13               	goto	u1515
  3725  040D  082E               	movf	___aldiv@divisor+1,w
  3726  040E  0232               	subwf	___aldiv@dividend+1,w
  3727  040F  1D03               	skipz
  3728  0410  2C13               	goto	u1515
  3729  0411  082D               	movf	___aldiv@divisor,w
  3730  0412  0231               	subwf	___aldiv@dividend,w
  3731  0413                     u1515:	
  3732  0413  1C03               	skipc
  3733  0414  2C24               	goto	l1994
  3734  0415  082D               	movf	___aldiv@divisor,w
  3735  0416  02B1               	subwf	___aldiv@dividend,f
  3736  0417  082E               	movf	___aldiv@divisor+1,w
  3737  0418  1C03               	skipc
  3738  0419  0F2E               	incfsz	___aldiv@divisor+1,w
  3739  041A  02B2               	subwf	___aldiv@dividend+1,f
  3740  041B  082F               	movf	___aldiv@divisor+2,w
  3741  041C  1C03               	skipc
  3742  041D  0F2F               	incfsz	___aldiv@divisor+2,w
  3743  041E  02B3               	subwf	___aldiv@dividend+2,f
  3744  041F  0830               	movf	___aldiv@divisor+3,w
  3745  0420  1C03               	skipc
  3746  0421  0F30               	incfsz	___aldiv@divisor+3,w
  3747  0422  02B4               	subwf	___aldiv@dividend+3,f
  3748  0423  1438               	bsf	___aldiv@quotient,0
  3749  0424                     l1994:	
  3750  0424  3001               	movlw	1
  3751  0425                     u1525:	
  3752  0425  1003               	clrc
  3753  0426  0CB0               	rrf	___aldiv@divisor+3,f
  3754  0427  0CAF               	rrf	___aldiv@divisor+2,f
  3755  0428  0CAE               	rrf	___aldiv@divisor+1,f
  3756  0429  0CAD               	rrf	___aldiv@divisor,f
  3757  042A  3EFF               	addlw	-1
  3758  042B  1D03               	skipz
  3759  042C  2C25               	goto	u1525
  3760  042D  3001               	movlw	1
  3761  042E  02B6               	subwf	___aldiv@counter,f
  3762  042F  1D03               	btfss	3,2
  3763  0430  2BFC               	goto	l1986
  3764  0431                     l1998:	
  3765  0431  0837               	movf	___aldiv@sign,w
  3766  0432  1903               	btfsc	3,2
  3767  0433  2C3F               	goto	l2002
  3768  0434  09B8               	comf	___aldiv@quotient,f
  3769  0435  09B9               	comf	___aldiv@quotient+1,f
  3770  0436  09BA               	comf	___aldiv@quotient+2,f
  3771  0437  09BB               	comf	___aldiv@quotient+3,f
  3772  0438  0AB8               	incf	___aldiv@quotient,f
  3773  0439  1903               	skipnz
  3774  043A  0AB9               	incf	___aldiv@quotient+1,f
  3775  043B  1903               	skipnz
  3776  043C  0ABA               	incf	___aldiv@quotient+2,f
  3777  043D  1903               	skipnz
  3778  043E  0ABB               	incf	___aldiv@quotient+3,f
  3779  043F                     l2002:	
  3780  043F  083B               	movf	___aldiv@quotient+3,w
  3781  0440  00B0               	movwf	?___aldiv+3
  3782  0441  083A               	movf	___aldiv@quotient+2,w
  3783  0442  00AF               	movwf	?___aldiv+2
  3784  0443  0839               	movf	___aldiv@quotient+1,w
  3785  0444  00AE               	movwf	?___aldiv+1
  3786  0445  0838               	movf	___aldiv@quotient,w
  3787  0446  00AD               	movwf	?___aldiv
  3788  0447  0008               	return
  3789  0448                     __end_of___aldiv:	
  3790                           
  3791                           	psect	text19
  3792  066B                     __ptext19:	
  3793 ;; *************** function _constrain *****************
  3794 ;; Defined at:
  3795 ;;		line 98 in file "main.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  value           4    0[BANK0 ] long 
  3798 ;;  lLimit          4    4[BANK0 ] long 
  3799 ;;  uLimit          4    8[BANK0 ] long 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  4    0[BANK0 ] long 
  3804 ;; Registers used:
  3805 ;;		wreg, btemp+1
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3811 ;;      Params:         0      12       0       0       0
  3812 ;;      Locals:         0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0
  3814 ;;      Totals:         0      12       0       0       0
  3815 ;;Total ram usage:       12 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    1
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_SetMotor
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _constrain
  3827  066B                     _constrain:	
  3828                           
  3829                           ;main.c: 99: if (value > uLimit){
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _constrain: [wreg+btemp+1]
  3833  066B  1283               	bcf	3,5	;RP0=0, select bank0
  3834  066C  1303               	bcf	3,6	;RP1=0, select bank0
  3835  066D  082B               	movf	constrain@uLimit+3,w
  3836  066E  3A80               	xorlw	128
  3837  066F  00FF               	movwf	127
  3838  0670  0823               	movf	constrain@value+3,w
  3839  0671  3A80               	xorlw	128
  3840  0672  027F               	subwf	127,w
  3841  0673  1D03               	skipz
  3842  0674  2E7F               	goto	u2243
  3843  0675  0822               	movf	constrain@value+2,w
  3844  0676  022A               	subwf	constrain@uLimit+2,w
  3845  0677  1D03               	skipz
  3846  0678  2E7F               	goto	u2243
  3847  0679  0821               	movf	constrain@value+1,w
  3848  067A  0229               	subwf	constrain@uLimit+1,w
  3849  067B  1D03               	skipz
  3850  067C  2E7F               	goto	u2243
  3851  067D  0820               	movf	constrain@value,w
  3852  067E  0228               	subwf	constrain@uLimit,w
  3853  067F                     u2243:	
  3854  067F  1803               	skipnc
  3855  0680  2E8A               	goto	l2576
  3856                           
  3857                           ;main.c: 100: return(uLimit);
  3858  0681  082B               	movf	constrain@uLimit+3,w
  3859  0682  00A3               	movwf	?_constrain+3
  3860  0683  082A               	movf	constrain@uLimit+2,w
  3861  0684  00A2               	movwf	?_constrain+2
  3862  0685  0829               	movf	constrain@uLimit+1,w
  3863  0686  00A1               	movwf	?_constrain+1
  3864  0687  0828               	movf	constrain@uLimit,w
  3865  0688  00A0               	movwf	?_constrain
  3866  0689  0008               	return
  3867  068A                     l2576:	
  3868  068A  0823               	movf	constrain@value+3,w
  3869  068B  3A80               	xorlw	128
  3870  068C  00FF               	movwf	127
  3871  068D  0827               	movf	constrain@lLimit+3,w
  3872  068E  3A80               	xorlw	128
  3873  068F  027F               	subwf	127,w
  3874  0690  1D03               	skipz
  3875  0691  2E9C               	goto	u2253
  3876  0692  0826               	movf	constrain@lLimit+2,w
  3877  0693  0222               	subwf	constrain@value+2,w
  3878  0694  1D03               	skipz
  3879  0695  2E9C               	goto	u2253
  3880  0696  0825               	movf	constrain@lLimit+1,w
  3881  0697  0221               	subwf	constrain@value+1,w
  3882  0698  1D03               	skipz
  3883  0699  2E9C               	goto	u2253
  3884  069A  0824               	movf	constrain@lLimit,w
  3885  069B  0220               	subwf	constrain@value,w
  3886  069C                     u2253:	
  3887  069C  1803               	skipnc
  3888  069D  0008               	return
  3889                           
  3890                           ;main.c: 102: return(lLimit);
  3891  069E  0827               	movf	constrain@lLimit+3,w
  3892  069F  00A3               	movwf	?_constrain+3
  3893  06A0  0826               	movf	constrain@lLimit+2,w
  3894  06A1  00A2               	movwf	?_constrain+2
  3895  06A2  0825               	movf	constrain@lLimit+1,w
  3896  06A3  00A1               	movwf	?_constrain+1
  3897  06A4  0824               	movf	constrain@lLimit,w
  3898  06A5  00A0               	movwf	?_constrain
  3899  06A6  0008               	return
  3900  06A7                     __end_of_constrain:	
  3901                           ;main.c: 104: return(value);
  3902                           
  3903                           
  3904                           	psect	text20
  3905  0FB3                     __ptext20:	
  3906 ;; *************** function ___wmul *****************
  3907 ;; Defined at:
  3908 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3911 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  product         2    4[BANK0 ] unsigned int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  2    0[BANK0 ] unsigned int 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3923 ;;      Params:         0       4       0       0       0
  3924 ;;      Locals:         0       2       0       0       0
  3925 ;;      Temps:          0       0       0       0       0
  3926 ;;      Totals:         0       6       0       0       0
  3927 ;;Total ram usage:        6 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    1
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_SetMotor
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           
  3938                           ;psect for function ___wmul
  3939  0FB3                     ___wmul:	
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3943  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  3945  0FB5  01A4               	clrf	___wmul@product
  3946  0FB6  01A5               	clrf	___wmul@product+1
  3947  0FB7                     l2588:	
  3948  0FB7  1C20               	btfss	___wmul@multiplier,0
  3949  0FB8  2FBF               	goto	l526
  3950  0FB9  0822               	movf	___wmul@multiplicand,w
  3951  0FBA  07A4               	addwf	___wmul@product,f
  3952  0FBB  1803               	skipnc
  3953  0FBC  0AA5               	incf	___wmul@product+1,f
  3954  0FBD  0823               	movf	___wmul@multiplicand+1,w
  3955  0FBE  07A5               	addwf	___wmul@product+1,f
  3956  0FBF                     l526:	
  3957  0FBF  3001               	movlw	1
  3958  0FC0                     u2275:	
  3959  0FC0  1003               	clrc
  3960  0FC1  0DA2               	rlf	___wmul@multiplicand,f
  3961  0FC2  0DA3               	rlf	___wmul@multiplicand+1,f
  3962  0FC3  3EFF               	addlw	-1
  3963  0FC4  1D03               	skipz
  3964  0FC5  2FC0               	goto	u2275
  3965  0FC6  3001               	movlw	1
  3966  0FC7                     u2285:	
  3967  0FC7  1003               	clrc
  3968  0FC8  0CA1               	rrf	___wmul@multiplier+1,f
  3969  0FC9  0CA0               	rrf	___wmul@multiplier,f
  3970  0FCA  3EFF               	addlw	-1
  3971  0FCB  1D03               	skipz
  3972  0FCC  2FC7               	goto	u2285
  3973  0FCD  0820               	movf	___wmul@multiplier,w
  3974  0FCE  0421               	iorwf	___wmul@multiplier+1,w
  3975  0FCF  1D03               	btfss	3,2
  3976  0FD0  2FB7               	goto	l2588
  3977  0FD1  0825               	movf	___wmul@product+1,w
  3978  0FD2  00A1               	movwf	?___wmul+1
  3979  0FD3  0824               	movf	___wmul@product,w
  3980  0FD4  00A0               	movwf	?___wmul
  3981  0FD5  0008               	return
  3982  0FD6                     __end_of___wmul:	
  3983                           
  3984                           	psect	text21
  3985  0554                     __ptext21:	
  3986 ;; *************** function ___awdiv *****************
  3987 ;; Defined at:
  3988 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;  divisor         2    0[BANK0 ] int 
  3991 ;;  dividend        2    2[BANK0 ] int 
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  quotient        2    7[BANK0 ] int 
  3994 ;;  sign            1    6[BANK0 ] unsigned char 
  3995 ;;  counter         1    5[BANK0 ] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  2    0[BANK0 ] int 
  3998 ;; Registers used:
  3999 ;;		wreg, status,2, status,0
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4005 ;;      Params:         0       4       0       0       0
  4006 ;;      Locals:         0       4       0       0       0
  4007 ;;      Temps:          0       1       0       0       0
  4008 ;;      Totals:         0       9       0       0       0
  4009 ;;Total ram usage:        9 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    1
  4012 ;; This function calls:
  4013 ;;		Nothing
  4014 ;; This function is called by:
  4015 ;;		_SetMotor
  4016 ;;		_putchdec
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           
  4021                           ;psect for function ___awdiv
  4022  0554                     ___awdiv:	
  4023                           
  4024                           ;incstack = 0
  4025                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4026  0554  1283               	bcf	3,5	;RP0=0, select bank0
  4027  0555  1303               	bcf	3,6	;RP1=0, select bank0
  4028  0556  01A6               	clrf	___awdiv@sign
  4029  0557  1FA1               	btfss	___awdiv@divisor+1,7
  4030  0558  2D60               	goto	l2074
  4031  0559  09A0               	comf	___awdiv@divisor,f
  4032  055A  09A1               	comf	___awdiv@divisor+1,f
  4033  055B  0AA0               	incf	___awdiv@divisor,f
  4034  055C  1903               	skipnz
  4035  055D  0AA1               	incf	___awdiv@divisor+1,f
  4036  055E  01A6               	clrf	___awdiv@sign
  4037  055F  0AA6               	incf	___awdiv@sign,f
  4038  0560                     l2074:	
  4039  0560  1FA3               	btfss	___awdiv@dividend+1,7
  4040  0561  2D6B               	goto	l2080
  4041  0562  09A2               	comf	___awdiv@dividend,f
  4042  0563  09A3               	comf	___awdiv@dividend+1,f
  4043  0564  0AA2               	incf	___awdiv@dividend,f
  4044  0565  1903               	skipnz
  4045  0566  0AA3               	incf	___awdiv@dividend+1,f
  4046  0567  3001               	movlw	1
  4047  0568  00A4               	movwf	??___awdiv
  4048  0569  0824               	movf	??___awdiv,w
  4049  056A  06A6               	xorwf	___awdiv@sign,f
  4050  056B                     l2080:	
  4051  056B  01A7               	clrf	___awdiv@quotient
  4052  056C  01A8               	clrf	___awdiv@quotient+1
  4053  056D  0820               	movf	___awdiv@divisor,w
  4054  056E  0421               	iorwf	___awdiv@divisor+1,w
  4055  056F  1903               	btfsc	3,2
  4056  0570  2DA2               	goto	l2102
  4057  0571  01A5               	clrf	___awdiv@counter
  4058  0572  0AA5               	incf	___awdiv@counter,f
  4059  0573                     l2090:	
  4060  0573  1BA1               	btfsc	___awdiv@divisor+1,7
  4061  0574  2D81               	goto	l2092
  4062  0575  3001               	movlw	1
  4063  0576                     u1695:	
  4064  0576  1003               	clrc
  4065  0577  0DA0               	rlf	___awdiv@divisor,f
  4066  0578  0DA1               	rlf	___awdiv@divisor+1,f
  4067  0579  3EFF               	addlw	-1
  4068  057A  1D03               	skipz
  4069  057B  2D76               	goto	u1695
  4070  057C  3001               	movlw	1
  4071  057D  00A4               	movwf	??___awdiv
  4072  057E  0824               	movf	??___awdiv,w
  4073  057F  07A5               	addwf	___awdiv@counter,f
  4074  0580  2D73               	goto	l2090
  4075  0581                     l2092:	
  4076  0581  3001               	movlw	1
  4077  0582                     u1715:	
  4078  0582  1003               	clrc
  4079  0583  0DA7               	rlf	___awdiv@quotient,f
  4080  0584  0DA8               	rlf	___awdiv@quotient+1,f
  4081  0585  3EFF               	addlw	-1
  4082  0586  1D03               	skipz
  4083  0587  2D82               	goto	u1715
  4084  0588  0821               	movf	___awdiv@divisor+1,w
  4085  0589  0223               	subwf	___awdiv@dividend+1,w
  4086  058A  1D03               	skipz
  4087  058B  2D8E               	goto	u1725
  4088  058C  0820               	movf	___awdiv@divisor,w
  4089  058D  0222               	subwf	___awdiv@dividend,w
  4090  058E                     u1725:	
  4091  058E  1C03               	skipc
  4092  058F  2D97               	goto	l2098
  4093  0590  0820               	movf	___awdiv@divisor,w
  4094  0591  02A2               	subwf	___awdiv@dividend,f
  4095  0592  0821               	movf	___awdiv@divisor+1,w
  4096  0593  1C03               	skipc
  4097  0594  03A3               	decf	___awdiv@dividend+1,f
  4098  0595  02A3               	subwf	___awdiv@dividend+1,f
  4099  0596  1427               	bsf	___awdiv@quotient,0
  4100  0597                     l2098:	
  4101  0597  3001               	movlw	1
  4102  0598                     u1735:	
  4103  0598  1003               	clrc
  4104  0599  0CA1               	rrf	___awdiv@divisor+1,f
  4105  059A  0CA0               	rrf	___awdiv@divisor,f
  4106  059B  3EFF               	addlw	-1
  4107  059C  1D03               	skipz
  4108  059D  2D98               	goto	u1735
  4109  059E  3001               	movlw	1
  4110  059F  02A5               	subwf	___awdiv@counter,f
  4111  05A0  1D03               	btfss	3,2
  4112  05A1  2D81               	goto	l2092
  4113  05A2                     l2102:	
  4114  05A2  0826               	movf	___awdiv@sign,w
  4115  05A3  1903               	btfsc	3,2
  4116  05A4  2DAA               	goto	l2106
  4117  05A5  09A7               	comf	___awdiv@quotient,f
  4118  05A6  09A8               	comf	___awdiv@quotient+1,f
  4119  05A7  0AA7               	incf	___awdiv@quotient,f
  4120  05A8  1903               	skipnz
  4121  05A9  0AA8               	incf	___awdiv@quotient+1,f
  4122  05AA                     l2106:	
  4123  05AA  0828               	movf	___awdiv@quotient+1,w
  4124  05AB  00A1               	movwf	?___awdiv+1
  4125  05AC  0827               	movf	___awdiv@quotient,w
  4126  05AD  00A0               	movwf	?___awdiv
  4127  05AE  0008               	return
  4128  05AF                     __end_of___awdiv:	
  4129                           
  4130                           	psect	text22
  4131  01DB                     __ptext22:	
  4132 ;; *************** function _isr *****************
  4133 ;; Defined at:
  4134 ;;		line 173 in file "main.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  portB           1    6[COMMON] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4148 ;;      Params:         0       0       0       0       0
  4149 ;;      Locals:         1       0       0       0       0
  4150 ;;      Temps:          6       0       0       0       0
  4151 ;;      Totals:         7       0       0       0       0
  4152 ;;Total ram usage:        7 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		Interrupt level 1
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function _isr
  4163  01DB                     _isr:	
  4164                           
  4165                           ;main.c: 174: static int tick;;main.c: 178: if (T0IE && T0IF) {
  4166  01DB  1A8B               	btfsc	11,5	;volatile
  4167  01DC  1D0B               	btfss	11,2	;volatile
  4168  01DD  2A23               	goto	i1l2352
  4169                           
  4170                           ;main.c: 179: set_motor_flag = 1;
  4171  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  4172  01DF  1303               	bcf	3,6	;RP1=0, select bank1
  4173  01E0  01E1               	clrf	_set_motor_flag^(0+128)
  4174  01E1  0AE1               	incf	_set_motor_flag^(0+128),f
  4175                           
  4176                           ;main.c: 181: if (sampling){
  4177  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  4178  01E3  1303               	bcf	3,6	;RP1=0, select bank0
  4179  01E4  086D               	movf	_sampling,w	;volatile
  4180  01E5  1903               	btfsc	3,2
  4181  01E6  2A16               	goto	i1l2346
  4182                           
  4183                           ;main.c: 182: if (samples < 90/2){
  4184  01E7  0875               	movf	_samples+1,w	;volatile
  4185  01E8  3A80               	xorlw	128
  4186  01E9  00FF               	movwf	127
  4187  01EA  3080               	movlw	128
  4188  01EB  027F               	subwf	127,w
  4189  01EC  1D03               	skipz
  4190  01ED  29F0               	goto	u210_25
  4191  01EE  302D               	movlw	45
  4192  01EF  0274               	subwf	_samples,w	;volatile
  4193  01F0                     u210_25:	
  4194  01F0  1803               	skipnc
  4195  01F1  29FD               	goto	i1l2340
  4196                           
  4197                           ;main.c: 183: pos_log1[samples] = motor_pos-last_pos;
  4198  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  4199  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  4200  01F4  084E               	movf	_last_pos^(0+128),w	;volatile
  4201  01F5  0270               	subwf	_motor_pos,w	;volatile
  4202  01F6  00F7               	movwf	??_isr
  4203  01F7  0874               	movf	_samples,w	;volatile
  4204  01F8  3EA0               	addlw	(low (_pos_log1| 0))& (0+255)
  4205  01F9  0084               	movwf	4
  4206  01FA  0877               	movf	??_isr,w
  4207  01FB  1383               	bcf	3,7	;select IRP bank1
  4208  01FC  2A07               	goto	L3
  4209  01FD                     i1l2340:	
  4210                           ;main.c: 184: }else{
  4211                           
  4212                           
  4213                           ;main.c: 185: pos_log2[samples-(90/2)] = motor_pos-last_pos;
  4214  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  4215  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  4216  01FF  084E               	movf	_last_pos^(0+128),w	;volatile
  4217  0200  0270               	subwf	_motor_pos,w	;volatile
  4218  0201  00F7               	movwf	??_isr
  4219  0202  0874               	movf	_samples,w	;volatile
  4220  0203  3E63               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  4221  0204  0084               	movwf	4
  4222  0205  0877               	movf	??_isr,w
  4223  0206  1783               	bsf	3,7	;select IRP bank3
  4224  0207                     L3:	
  4225  0207  0080               	movwf	0
  4226                           
  4227                           ;main.c: 186: };main.c: 187: last_pos = motor_pos;
  4228  0208  0873               	movf	_motor_pos+3,w	;volatile
  4229  0209  00D1               	movwf	(_last_pos+3)^(0+128)	;volatile
  4230  020A  0872               	movf	_motor_pos+2,w	;volatile
  4231  020B  00D0               	movwf	(_last_pos+2)^(0+128)	;volatile
  4232  020C  0871               	movf	_motor_pos+1,w	;volatile
  4233  020D  00CF               	movwf	(_last_pos+1)^(0+128)	;volatile
  4234  020E  0870               	movf	_motor_pos,w	;volatile
  4235  020F  00CE               	movwf	_last_pos^(0+128)	;volatile
  4236                           
  4237                           ;main.c: 188: samples++;
  4238  0210  3001               	movlw	1
  4239  0211  07F4               	addwf	_samples,f	;volatile
  4240  0212  1803               	skipnc
  4241  0213  0AF5               	incf	_samples+1,f	;volatile
  4242  0214  3000               	movlw	0
  4243  0215  07F5               	addwf	_samples+1,f	;volatile
  4244  0216                     i1l2346:	
  4245                           
  4246                           ;main.c: 189: };main.c: 191: com_time++;
  4247  0216  3001               	movlw	1
  4248  0217  1683               	bsf	3,5	;RP0=1, select bank1
  4249  0218  1303               	bcf	3,6	;RP1=0, select bank1
  4250  0219  07DE               	addwf	_com_time^(0+128),f	;volatile
  4251  021A  1803               	skipnc
  4252  021B  0ADF               	incf	(_com_time+1)^(0+128),f	;volatile
  4253  021C  3000               	movlw	0
  4254  021D  07DF               	addwf	(_com_time+1)^(0+128),f	;volatile
  4255                           
  4256                           ;main.c: 193: TMR0 = (0xff - 195);
  4257  021E  303C               	movlw	60
  4258  021F  1283               	bcf	3,5	;RP0=0, select bank0
  4259  0220  1303               	bcf	3,6	;RP1=0, select bank0
  4260  0221  0081               	movwf	1	;volatile
  4261                           
  4262                           ;main.c: 194: T0IF = 0;
  4263  0222  110B               	bcf	11,2	;volatile
  4264  0223                     i1l2352:	
  4265                           
  4266                           ;main.c: 195: };main.c: 198: if (RBIE && RBIF) {
  4267  0223  198B               	btfsc	11,3	;volatile
  4268  0224  1C0B               	btfss	11,0	;volatile
  4269  0225  2ADB               	goto	i1l347
  4270                           
  4271                           ;main.c: 199: char portB = PORTB;
  4272  0226  0806               	movf	6,w	;volatile
  4273  0227  00F7               	movwf	??_isr
  4274  0228  0877               	movf	??_isr,w
  4275  0229  00FD               	movwf	isr@portB
  4276                           
  4277                           ;main.c: 201: ab1 = (portB & 0b00011000) >>3;
  4278  022A  087D               	movf	isr@portB,w
  4279  022B  00F7               	movwf	??_isr
  4280  022C  3003               	movlw	3
  4281  022D                     u213_25:	
  4282  022D  1003               	clrc
  4283  022E  0CF7               	rrf	??_isr,f
  4284  022F  3EFF               	addlw	-1
  4285  0230  1D03               	skipz
  4286  0231  2A2D               	goto	u213_25
  4287  0232  0877               	movf	??_isr,w
  4288  0233  3903               	andlw	3
  4289  0234  00F8               	movwf	??_isr+1
  4290  0235  0878               	movf	??_isr+1,w
  4291  0236  00F6               	movwf	_ab1	;volatile
  4292                           
  4293                           ;main.c: 202: switch(state1)
  4294  0237  2ABB               	goto	i1l2398
  4295  0238                     i1l2360:	
  4296                           
  4297                           ;main.c: 205: if(ab1 == 1){
  4298  0238  0376               	decf	_ab1,w	;volatile
  4299  0239  1D03               	btfss	3,2
  4300  023A  2A3D               	goto	i1l2364
  4301                           
  4302                           ;main.c: 206: state1 = 1;
  4303  023B  3001               	movlw	1
  4304  023C  2A5F               	goto	L4
  4305  023D                     i1l2364:	
  4306                           ;main.c: 208: }
  4307                           
  4308                           ;main.c: 207: encoder1_counter--;
  4309                           
  4310                           
  4311                           ;main.c: 209: else if(ab1 == 2){
  4312  023D  3002               	movlw	2
  4313  023E  0676               	xorwf	_ab1,w	;volatile
  4314  023F  1D03               	btfss	3,2
  4315  0240  2AC9               	goto	i1l2400
  4316                           
  4317                           ;main.c: 210: state1 = 2;
  4318  0241  3002               	movlw	2
  4319  0242  00F7               	movwf	??_isr
  4320  0243  0877               	movf	??_isr,w
  4321  0244  00EE               	movwf	_state1	;volatile
  4322  0245  2A4A               	goto	i1l2372
  4323  0246                     i1l2368:	
  4324                           ;main.c: 211: encoder1_counter++;
  4325                           
  4326                           
  4327                           ;main.c: 215: if(ab1 == 0){
  4328  0246  0876               	movf	_ab1,w	;volatile
  4329  0247  1D03               	btfss	3,2
  4330  0248  2A5A               	goto	i1l2374
  4331                           
  4332                           ;main.c: 216: state1 = 0;
  4333  0249  01EE               	clrf	_state1	;volatile
  4334  024A                     i1l2372:	
  4335                           
  4336                           ;main.c: 217: encoder1_counter++;
  4337  024A  3001               	movlw	1
  4338  024B  1683               	bsf	3,5	;RP0=1, select bank1
  4339  024C  1303               	bcf	3,6	;RP1=0, select bank1
  4340  024D  07D2               	addwf	_encoder1_counter^(0+128),f	;volatile
  4341  024E  3000               	movlw	0
  4342  024F  1803               	skipnc
  4343  0250  3001               	movlw	1
  4344  0251  07D3               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  4345  0252  3000               	movlw	0
  4346  0253  1803               	skipnc
  4347  0254  3001               	movlw	1
  4348  0255  07D4               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  4349  0256  3000               	movlw	0
  4350  0257  1803               	skipnc
  4351  0258  3001               	movlw	1
  4352  0259  2A6E               	goto	L5
  4353  025A                     i1l2374:	
  4354                           ;main.c: 218: }
  4355                           
  4356                           
  4357                           ;main.c: 219: else if (ab1 == 3){
  4358  025A  3003               	movlw	3
  4359  025B  0676               	xorwf	_ab1,w	;volatile
  4360  025C  1D03               	btfss	3,2
  4361  025D  2AC9               	goto	i1l2400
  4362                           
  4363                           ;main.c: 220: state1 = 3;
  4364  025E  3003               	movlw	3
  4365  025F                     L4:	
  4366  025F  00F7               	movwf	??_isr
  4367  0260  0877               	movf	??_isr,w
  4368  0261  00EE               	movwf	_state1	;volatile
  4369                           
  4370                           ;main.c: 221: encoder1_counter--;
  4371  0262  30FF               	movlw	255
  4372  0263  1683               	bsf	3,5	;RP0=1, select bank1
  4373  0264  1303               	bcf	3,6	;RP1=0, select bank1
  4374  0265  07D2               	addwf	_encoder1_counter^(0+128),f	;volatile
  4375  0266  30FF               	movlw	255
  4376  0267  1C03               	skipc
  4377  0268  07D3               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  4378  0269  30FF               	movlw	255
  4379  026A  1C03               	skipc
  4380  026B  07D4               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  4381  026C  30FF               	movlw	255
  4382  026D  1C03               	skipc
  4383  026E                     L5:	
  4384  026E  07D5               	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  4385  026F  2AC9               	goto	i1l2400
  4386  0270                     i1l2378:	
  4387                           
  4388                           ;main.c: 225: if(ab1 == 0){
  4389  0270  0876               	movf	_ab1,w	;volatile
  4390  0271  1D03               	btfss	3,2
  4391  0272  2A75               	goto	i1l2384
  4392                           
  4393                           ;main.c: 226: state1 = 0;
  4394  0273  01EE               	clrf	_state1	;volatile
  4395  0274  2A95               	goto	L6
  4396  0275                     i1l2384:	
  4397                           ;main.c: 228: }
  4398                           
  4399                           ;main.c: 227: encoder1_counter--;
  4400                           
  4401                           
  4402                           ;main.c: 229: else if(ab1 == 3){
  4403  0275  3003               	movlw	3
  4404  0276  0676               	xorwf	_ab1,w	;volatile
  4405  0277  1D03               	btfss	3,2
  4406  0278  2AC9               	goto	i1l2400
  4407                           
  4408                           ;main.c: 230: state1 = 3;
  4409  0279  3003               	movlw	3
  4410  027A  00F7               	movwf	??_isr
  4411  027B  0877               	movf	??_isr,w
  4412  027C  00EE               	movwf	_state1	;volatile
  4413                           
  4414                           ;main.c: 231: encoder1_counter++;
  4415  027D  3001               	movlw	1
  4416  027E  1683               	bsf	3,5	;RP0=1, select bank1
  4417  027F  1303               	bcf	3,6	;RP1=0, select bank1
  4418  0280  07D2               	addwf	_encoder1_counter^(0+128),f	;volatile
  4419  0281  3000               	movlw	0
  4420  0282  1803               	skipnc
  4421  0283  3001               	movlw	1
  4422  0284  07D3               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  4423  0285  3000               	movlw	0
  4424  0286  1803               	skipnc
  4425  0287  3001               	movlw	1
  4426  0288  07D4               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  4427  0289  3000               	movlw	0
  4428  028A  1803               	skipnc
  4429  028B  3001               	movlw	1
  4430  028C  2AA1               	goto	L7
  4431  028D                     i1l2388:	
  4432                           
  4433                           ;main.c: 235: if(ab1 == 2){
  4434  028D  3002               	movlw	2
  4435  028E  0676               	xorwf	_ab1,w	;volatile
  4436  028F  1D03               	btfss	3,2
  4437  0290  2AA3               	goto	i1l2392
  4438                           
  4439                           ;main.c: 236: state1 = 2;
  4440  0291  3002               	movlw	2
  4441  0292  00F7               	movwf	??_isr
  4442  0293  0877               	movf	??_isr,w
  4443  0294  00EE               	movwf	_state1	;volatile
  4444  0295                     L6:	
  4445                           
  4446                           ;main.c: 237: encoder1_counter--;
  4447  0295  30FF               	movlw	255
  4448  0296  1683               	bsf	3,5	;RP0=1, select bank1
  4449  0297  1303               	bcf	3,6	;RP1=0, select bank1
  4450  0298  07D2               	addwf	_encoder1_counter^(0+128),f	;volatile
  4451  0299  30FF               	movlw	255
  4452  029A  1C03               	skipc
  4453  029B  07D3               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  4454  029C  30FF               	movlw	255
  4455  029D  1C03               	skipc
  4456  029E  07D4               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  4457  029F  30FF               	movlw	255
  4458  02A0  1C03               	skipc
  4459  02A1                     L7:	
  4460  02A1  07D5               	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  4461                           
  4462                           ;main.c: 238: }
  4463  02A2  2AC9               	goto	i1l2400
  4464  02A3                     i1l2392:	
  4465                           
  4466                           ;main.c: 239: else if (ab1 == 1){
  4467  02A3  0376               	decf	_ab1,w	;volatile
  4468  02A4  1D03               	btfss	3,2
  4469  02A5  2AC9               	goto	i1l2400
  4470                           
  4471                           ;main.c: 240: state1 = 1;
  4472  02A6  3001               	movlw	1
  4473  02A7  00F7               	movwf	??_isr
  4474  02A8  0877               	movf	??_isr,w
  4475  02A9  00EE               	movwf	_state1	;volatile
  4476                           
  4477                           ;main.c: 241: encoder1_counter++;
  4478  02AA  3001               	movlw	1
  4479  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  4480  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  4481  02AD  07D2               	addwf	_encoder1_counter^(0+128),f	;volatile
  4482  02AE  3000               	movlw	0
  4483  02AF  1803               	skipnc
  4484  02B0  3001               	movlw	1
  4485  02B1  07D3               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  4486  02B2  3000               	movlw	0
  4487  02B3  1803               	skipnc
  4488  02B4  3001               	movlw	1
  4489  02B5  07D4               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  4490  02B6  3000               	movlw	0
  4491  02B7  1803               	skipnc
  4492  02B8  3001               	movlw	1
  4493  02B9  07D5               	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  4494  02BA  2AC9               	goto	i1l2400
  4495  02BB                     i1l2398:	
  4496  02BB  086E               	movf	_state1,w	;volatile
  4497                           
  4498                           ; Switch size 1, requested type "simple"
  4499                           ; Number of cases is 4, Range of values is 0 to 3
  4500                           ; switch strategies available:
  4501                           ; Name         Instructions Cycles
  4502                           ; simple_byte           13     7 (average)
  4503                           ; direct_byte           20     8 (fixed)
  4504                           ; jumptable            260     6 (fixed)
  4505                           ;	Chosen strategy is simple_byte
  4506  02BC  3A00               	xorlw	0	; case 0
  4507  02BD  1903               	skipnz
  4508  02BE  2A38               	goto	i1l2360
  4509  02BF  3A01               	xorlw	1	; case 1
  4510  02C0  1903               	skipnz
  4511  02C1  2A46               	goto	i1l2368
  4512  02C2  3A03               	xorlw	3	; case 2
  4513  02C3  1903               	skipnz
  4514  02C4  2A70               	goto	i1l2378
  4515  02C5  3A01               	xorlw	1	; case 3
  4516  02C6  1903               	skipnz
  4517  02C7  2A8D               	goto	i1l2388
  4518  02C8  2AC9               	goto	i1l2400
  4519  02C9                     i1l2400:	
  4520                           
  4521                           ;main.c: 246: motor_pos = -encoder1_counter;
  4522  02C9  1683               	bsf	3,5	;RP0=1, select bank1
  4523  02CA  1303               	bcf	3,6	;RP1=0, select bank1
  4524  02CB  0952               	comf	_encoder1_counter^(0+128),w	;volatile
  4525  02CC  00F0               	movwf	_motor_pos	;volatile
  4526  02CD  0953               	comf	(_encoder1_counter^(0+128)+1),w	;volatile
  4527  02CE  00F1               	movwf	_motor_pos+1	;volatile
  4528  02CF  0954               	comf	(_encoder1_counter^(0+128)+2),w	;volatile
  4529  02D0  00F2               	movwf	_motor_pos+2	;volatile
  4530  02D1  0955               	comf	(_encoder1_counter^(0+128)+3),w	;volatile
  4531  02D2  00F3               	movwf	_motor_pos+3	;volatile
  4532  02D3  0AF0               	incf	_motor_pos,f	;volatile
  4533  02D4  1903               	skipnz
  4534  02D5  0AF1               	incf	_motor_pos+1,f	;volatile
  4535  02D6  1903               	skipnz
  4536  02D7  0AF2               	incf	_motor_pos+2,f	;volatile
  4537  02D8  1903               	skipnz
  4538  02D9  0AF3               	incf	_motor_pos+3,f	;volatile
  4539                           
  4540                           ;main.c: 247: RBIF = 0;
  4541  02DA  100B               	bcf	11,0	;volatile
  4542  02DB                     i1l347:	
  4543  02DB  087C               	movf	??_isr+5,w
  4544  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  4545  02DD  00FF               	movwf	127
  4546  02DE  087B               	movf	??_isr+4,w
  4547  02DF  008A               	movwf	10
  4548  02E0  087A               	movf	??_isr+3,w
  4549  02E1  0084               	movwf	4
  4550  02E2  0E79               	swapf	(??_isr+2)^(0+4294967168),w
  4551  02E3  0083               	movwf	3
  4552  02E4  0EFE               	swapf	126,f
  4553  02E5  0E7E               	swapf	126,w
  4554  02E6  0009               	retfie
  4555  02E7                     __end_of_isr:	
  4556  007E                     btemp	set	126	;btemp
  4557  007E                     wtemp0	set	126
  4558                           
  4559                           	psect	intentry
  4560  0004                     __pintentry:	
  4561                           ;incstack = 0
  4562                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1]
  4563                           
  4564  0004                     interrupt_function:	
  4565  007E                     saved_w	set	btemp
  4566  0004  00FE               	movwf	btemp
  4567  0005  0E03               	swapf	3,w
  4568  0006  00F9               	movwf	??_isr+2
  4569  0007  0804               	movf	4,w
  4570  0008  00FA               	movwf	??_isr+3
  4571  0009  080A               	movf	10,w
  4572  000A  00FB               	movwf	??_isr+4
  4573  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4574  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4575  000D  087F               	movf	btemp+1,w
  4576  000E  00FC               	movwf	??_isr+5
  4577  000F  120A  118A  29DB   	ljmp	_isr


Data Sizes:
    Strings     45
    Constant    10
    Data        0
    BSS         134
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     74      80
    BANK1            80      0      75
    BANK3            96      0      46
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[14]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[11]), 
		 -> STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@sVar(BANK0[10]), SetPoint@sVar(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 20
		 -> main@sVar(BANK0[10]), SetPoint@sVar(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetMotor
    _motor_reset->_SetPoint
    _SetPoint->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putst->_putch
    _SetMotor->_pwm_set
    _pwm_set->___aldiv
    ___aldiv->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   17871
                                             58 BANK0     16    16      0
                           _SetMotor
                           _SetPoint
                             _chkchr
                      _encoders_init
                    _getServoCommand
                      _getServoState
                        _motor_reset
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    5024
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                            26    24      2    2653
                                             27 BANK0     26    24      2
                    _getServoCommand (ARG)
                              _putst
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1647
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     276
                                              2 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getServoState                                        4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _getServoCommand                                      6     4      2       0
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotor                                            20    20      0    5325
                                             38 BANK0     20    20      0
                            ___awdiv
                             ___wmul
                          _constrain
                            _pwm_set
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2371
                                             28 BANK0     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _constrain                                           12     0     12     487
                                              0 BANK0     12     0     12
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     496
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1516
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  7     7      0      23
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetMotor
     ___awdiv
     ___wmul
     _constrain
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
   _SetPoint
     _getServoCommand (ARG)
     _putst (ARG)
       _putch
     _sprintf (ARG)
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _chkchr
   _encoders_init
   _getServoCommand
   _getServoState
   _motor_reset
     _SetPoint
       _getServoCommand (ARG)
       _putst (ARG)
         _putch
       _sprintf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      D7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4A      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      2E       9       47.9%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      D7      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 31 08:45:39 2019

                       pc 0002               __CFG_CP$OFF 0000                        l82 0FE7  
                      l83 0FF1              ___awdiv@sign 0026                        fsr 0004  
     ___wmul@multiplicand 0022           ??_getServoState 0022                       l170 07CC  
                     l182 0553                       l526 0FBF                       l297 018C  
                     l591 03CB                       _GIE 005F                       _RA5 002D  
                     _RA6 002E                       _RB5 0035                       _RC3 003B  
                     _RC4 003C                       _RC5 003D                       _PR2 0092  
            __CFG_CPD$OFF 0000                       _RX9 00C6                       _TX9 04C6  
                     _ab1 0076                       _isr 01DB                       fsr0 0004  
                     indf 0000              __CFG_IESO$ON 0000              __CFG_FOSC$EC 0000  
        _encoder1_counter 00D2              __CFG_LVP$OFF 0000                      l2002 043F  
                    l2010 04E9                      l2020 0546                      l2102 05A2  
                    l2014 0540                      l2016 0543                      l2106 05AA  
                    l2080 056B                      l2090 0573                      l2074 0560  
                    l2092 0581                      l2248 0747                      l2098 0597  
                    l2630 0F77                      l1902 030E                      l1840 05FA  
                    l1826 0FD9                      l1842 0608                      l1930 035E  
                    l1828 0FF3                      l1852 0629                      l1924 033D  
                    l1908 0324                      l1870 07A4                      l1918 033B  
                    l2750 04A0                      l2576 068A                      l2680 0169  
                    l1848 061E                      l1864 0788                      l1944 0371  
                    l1936 036D                      l1954 05B9                      l2666 008E  
                    l2658 0062                      l1890 070F                      l1866 0796  
                    l1874 07AF                      l1946 02EE                      l2754 04B1  
                    l2588 0FB7                      l2684 01B8                      l1892 06E3  
                    l1948 03B4                      l2756 04C5                      l1958 05CF  
                    l1886 0700                      l1984 03EC                      l1976 03DC  
                    l2856 054B                      l1994 0424                      l1986 03FC  
                    l1998 0431                      ?_isr 0077                      STR_1 063E  
                    STR_2 065C                      STR_3 0667                      _ANS4 0C44  
                    STR_5 064E                      _ANS8 0C48                      _ANS9 0C49  
                    _BRGH 04C2                      _T0IE 005D                      _CREN 00C4  
                    _T0IF 005A                      _FERR 00C2                      u1205 0609  
                    u1215 0615                      u1225 061F                      _IOCB 0096  
                    u1255 078B                      u1505 03FE                      u1425 05D1  
                    u1185 05FD                      u2243 067F                      u1515 0413  
                    u1435 05D9                      u1275 079C                      u1355 0354  
                    u2340 00B6                      u2253 069C                      u1525 0425  
                    u2341 00B7                      u1285 07A5                      u2342 00BC  
                    u2343 00BD                      u1615 06C0                      u2353 0167  
                    u1715 0582                      u2275 0FC0                      u1563 04E7  
                    u1580 052C                      u1900 0725                      u1725 058E  
                    u2285 0FC7                      u1485 03F0                      u1581 052D  
                    u1582 0532                      u1910 0726                      u1735 0598  
                    u1583 0533                      u1695 0576                      _PEIE 005E  
                    u1885 07E3                      _RBIE 005B                      _RBIF 0058  
                    _RCIE 0465                      _RCIF 0065                      _OERR 00C1  
                    _TMR0 0001                      _SPEN 00C7                      _SREN 00C5  
                    _TXIE 0464                      _TXEN 04C5                      _TXIF 0064  
                    _SYNC 04C4         ??_getServoCommand 0022              __CFG_WRT$OFF 0000  
           __CFG_FCMEN$ON 0000                      _main 0448                      btemp 007E  
                    start 0012             __CFG_MCLRE$ON 0000                     ??_isr 0077  
         __end_of___aldiv 0448                     ?_main 0077           __end_of___awdiv 05AF  
                   _ANS10 0C4A                     _ANS11 0C4B                     _ANS13 0C4D  
           __CFG_WDTE$OFF 0000           ___awdiv@divisor 0020           __end_of___lwdiv 062E  
         __end_of___lwmod 07B4                     i1l347 02DB           ___awdiv@counter 0025  
                   _RCREG 001A                     _SPBRG 0099                     _PORTB 0006  
                   _TXREG 0019       ___lmul@multiplicand 0024           ??_encoders_init 0020  
         __end_of_dpowers 063E                     _dummy 00E3                     _onlyK 00DC  
                   _putch 0FD6                     _putst 06E0            __CFG_BOREN$OFF 0000  
                   pclath 000A           __end_of_pwm_set 0554                     status 0003  
                   wtemp0 007E           __end_of_sprintf 03B9           __initialization 0015  
            __end_of_main 04D3                    ??_main 005A          __end_of_SetMotor 01DB  
        __end_of_SetPoint 06E0                    _CCPR1L 0015                    _CCPR2L 001B  
        ___awdiv@dividend 0022                    ?_putch 0077                    ?_putst 0077  
                  i1l2400 02C9                    i1l2340 01FD                    i1l2360 0238  
                  i1l2352 0223                    i1l2346 0216                    i1l2372 024A  
                  i1l2364 023D                    i1l2374 025A                    i1l2392 02A3  
                  i1l2384 0275                    i1l2368 0246                    i1l2378 0270  
                  i1l2388 028D                    u210_25 01F0                    i1l2398 02BB  
                  u213_25 022D                    _TMR1IE 0460                    _TRISB1 0431  
                  _TRISB2 0432                    _TRISC1 0439                    _TRISA5 042D  
                  _TRISB3 0433                    _TRISC2 043A                    _TRISA6 042E  
                  _TRISB4 0434                    _TRISB5 0435                    _TRISC3 043B  
                  _TRISC4 043C                    _TRISB7 0437                    _TRISC5 043D  
          __CFG_PWRTE$OFF 0000              ?_serial_init 0077                    ___lmul 05AF  
               ??___aldiv 0035                    ___wmul 0FB3                 ??___awdiv 0024  
                  _chkchr 0F71                 ??___lwdiv 0024                 ??___lwmod 002C  
        ___awdiv@quotient 0027                    _state1 006E              ?_motor_reset 0077  
                  saved_w 007E          __end_of_pwm_init 07DE                    putch@c 0021  
               ??_pwm_set 0042                 ??_sprintf 0031   __end_of__initialization 0034  
          __pcstackCOMMON 0077             __end_of_putch 1000             __end_of_putst 0716  
         _getServoCommand 0716            _OPTION_REGbits 0081               SetMotor@err 0058  
                 ??_putch 0020                   ??_putst 0022                __pbssBANK0 0069  
              __pbssBANK1 00A0                __pbssBANK3 0190        __size_of_constrain 003C  
    getServoCommand@lStep 00E0                 ?_SetMotor 0077                 ?_SetPoint 003B  
              __pmaintext 0448                   ?___lmul 0020                   ?___wmul 0020  
                 ?_chkchr 0077                __pintentry 0004            ___lmul@product 0029  
   __end_of_getServoState 0F88             ?_resetCounter 0077                   _SPIData 00E2  
              __stringtab 062E                ??_SetMotor 0046                ??_SetPoint 003D  
                 ___aldiv 03B9                   ___awdiv 0554           __size_of___lmul 0041  
         __size_of___wmul 0023                 ?_pwm_init 0077                   ___lwdiv 05F0  
                 ___lwmod 0780           __size_of_chkchr 0008   __end_of_getServoCommand 074C  
    __size_of_serial_init 0018         __end_of_constrain 06A7                   __ptext1 0F9B  
                 __ptext2 07B4                   __ptext3 074C                   __ptext4 0F88  
                 __ptext5 06A7                   __ptext6 02E7                   __ptext7 0780  
                 __ptext8 05F0                   __ptext9 06E0                   _dpowers 0634  
               _T2CONbits 0012              __size_of_isr 010C          ___aldiv@dividend 0031  
    __size_of_motor_reset 0034                   _samples 0074            ??_resetCounter 0020  
                 _pwm_set 04D3                   _sprintf 02E7                   clrloop0 07F9  
    end_of_initialization 0034     __end_of_encoders_init 07F8                   isr@tick 00D6  
        ___aldiv@quotient 0038                ??_pwm_init 0020          SetMotor@last_err 00DA  
        SetMotor@integral 00E5        SetMotor@D_Response 0050               _CCP1CONbits 0017  
             _CCP2CONbits 001D            __end_of___lmul 05F0            _set_motor_flag 00E1  
        ?_getServoCommand 0020            __end_of___wmul 0FD6        SetMotor@I_Response 0052  
          __end_of_chkchr 0F79          _delayus_variable 00E4       start_initialization 0015  
             __end_of_isr 02E7              SetMotor@resp 0054              SetPoint@sVar 0041  
    __end_of_resetCounter 0F9B                  ??___lmul 0028         __size_of_SetMotor 01A3  
       __size_of_SetPoint 0039                  ??___wmul 0024        SetMotor@P_Response 004E  
                ??_chkchr 0020         pwm_set@duty_cycle 003E               __pbssCOMMON 0070  
               ___latbits 0002             __pcstackBANK0 0020               sprintf@flag 0035  
             sprintf@prec 0036          ___lwdiv@dividend 0022                  ?___aldiv 002D  
                ?___awdiv 0020                  ?___lwdiv 0020                  ?___lwmod 0028  
               __pstrings 062E         __size_of_pwm_init 002A            pwm_set@channel 003C  
               _constrain 066B          ___lwdiv@quotient 0025                  ?_pwm_set 003C  
                ?_sprintf 002E            __size_of_putch 002A            __size_of_putst 0036  
         ___aldiv@divisor 002D         interrupt_function 0004           ___aldiv@counter 0036  
          ___wmul@product 0024                 clear_ram0 07F8    __size_of_getServoState 000F  
                _PIR1bits 000C             ??_serial_init 0020                 _set_point 0069  
               _motor_pos 0070             ??_motor_reset 0055               __stringbase 0633  
       ___wmul@multiplier 0020                ?_constrain 0020           SetPoint@new_val 003B  
       ___lmul@multiplier 0020     __size_of_resetCounter 0013                  _SetMotor 0038  
                _SetPoint 06A7                  _nSPIData 00D8          __size_of___aldiv 008F  
        __size_of___awdiv 005B          __size_of___lwdiv 003E          __size_of___lwmod 0034  
  __size_of_encoders_init 001A       __end_of_serial_init 0FB3        __end_of__stringtab 0634  
              sprintf@val 0037             _getServoState 0F79           ___lwdiv@divisor 0020  
         ___lwdiv@counter 0027                  __ptext10 0FD6                  __ptext11 0F79  
                __ptext20 0FB3                  __ptext12 0716                  __ptext21 0554  
                __ptext13 07DE                  __ptext22 01DB                  __ptext14 0F71  
                __ptext15 0038                  __ptext16 04D3                  __ptext17 05AF  
                __ptext18 03B9                  __ptext19 066B              _resetCounter 0F88  
     __end_of_motor_reset 0780         __CFG_BOR4V$BOR21V 0000                  _com_time 00DE  
        __size_of_pwm_set 0081          __size_of_sprintf 00D2                  _last_pos 00CE  
           __size_of_main 008B                  _sampling 006D                  _pos_log1 00A0  
                _pos_log2 0190        SetMotor@derivative 00E9                  _pwm_init 07B4  
                main@sVar 005F            ?_getServoState 0020               ??_constrain 002C  
__size_of_getServoCommand 0036                  isr@portB 007D           constrain@lLimit 0024  
         constrain@uLimit 0028                  intlevel1 0000                 sprintf@ap 0034  
               sprintf@sp 0039             _encoders_init 07DE          ___lwmod@dividend 002A  
               stringcode 062E               _serial_init 0F9B               _motor_reset 074C  
          constrain@value 0020                  sprintf@c 003A                  sprintf@f 002E  
                putst@str 0023           ___lwmod@divisor 0028           ___lwmod@counter 002D  
                stringdir 062E                  stringtab 062E              ___aldiv@sign 0037  
          ?_encoders_init 0077  
