

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 17 18:14:43 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.05
    38                           ; Generated 20/12/2018 GMT
    39                           ; 
    40                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F886 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  009F                     	;# 
   360  0105                     	;# 
   361  0107                     	;# 
   362  0108                     	;# 
   363  0109                     	;# 
   364  010C                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0185                     	;# 
   370  0187                     	;# 
   371  0188                     	;# 
   372  0189                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  000E                     	;# 
   390  000F                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0014                     	;# 
   396  0015                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001D                     	;# 
   407  001E                     	;# 
   408  001F                     	;# 
   409  0081                     	;# 
   410  0085                     	;# 
   411  0086                     	;# 
   412  0087                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  008F                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0094                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  0105                     	;# 
   437  0107                     	;# 
   438  0108                     	;# 
   439  0109                     	;# 
   440  010C                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  0185                     	;# 
   446  0187                     	;# 
   447  0188                     	;# 
   448  0189                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451                           
   452                           	psect	idataBANK0
   453  0718                     __pidataBANK0:	
   454                           
   455                           ;initializer for _Kp
   456  0718  341A               	retlw	26
   457  0719  3400               	retlw	0
   458                           
   459                           	psect	strings
   460  0616                     __pstrings:	
   461  0616                     stringtab:	
   462  0616                     __stringtab:	
   463  0616                     stringcode:	
   464                           ;	String table - string pointers are 1 byte each
   465                           
   466  0616                     stringdir:	
   467  0616  3006               	movlw	high stringdir
   468  0617  008A               	movwf	10
   469  0618  0804               	movf	4,w
   470  0619  0A84               	incf	4,f
   471  061A  0782               	addwf	2,f
   472  061B                     __stringbase:	
   473  061B  3400               	retlw	0
   474  061C                     __end_of__stringtab:	
   475  061C                     _dpowers:	
   476  061C  3401               	retlw	1
   477  061D  3400               	retlw	0
   478  061E  340A               	retlw	10
   479  061F  3400               	retlw	0
   480  0620  3464               	retlw	100
   481  0621  3400               	retlw	0
   482  0622  34E8               	retlw	232
   483  0623  3403               	retlw	3
   484  0624  3410               	retlw	16
   485  0625  3427               	retlw	39
   486  0626                     __end_of_dpowers:	
   487  0006                     _PORTB	set	6
   488  0001                     _TMR0	set	1
   489  0012                     _T2CONbits	set	18
   490  000C                     _PIR1bits	set	12
   491  001B                     _CCPR2L	set	27
   492  0015                     _CCPR1L	set	21
   493  001D                     _CCP2CONbits	set	29
   494  0017                     _CCP1CONbits	set	23
   495  0019                     _TXREG	set	25
   496  001A                     _RCREG	set	26
   497  005F                     _GIE	set	95
   498  005E                     _PEIE	set	94
   499  0035                     _RB5	set	53
   500  0058                     _RBIF	set	88
   501  005B                     _RBIE	set	91
   502  005A                     _T0IF	set	90
   503  005D                     _T0IE	set	93
   504  002E                     _RA6	set	46
   505  002D                     _RA5	set	45
   506  0065                     _RCIF	set	101
   507  0064                     _TXIF	set	100
   508  00C2                     _FERR	set	194
   509  00C1                     _OERR	set	193
   510  00C6                     _RX9	set	198
   511  00C5                     _SREN	set	197
   512  00C4                     _CREN	set	196
   513  00C7                     _SPEN	set	199
   514  0096                     _IOCB	set	150
   515  0081                     _OPTION_REGbits	set	129
   516  0092                     _PR2	set	146
   517  0099                     _SPBRG	set	153
   518  0460                     _TMR1IE	set	1120
   519  0434                     _TRISB4	set	1076
   520  0433                     _TRISB3	set	1075
   521  0432                     _TRISB2	set	1074
   522  0431                     _TRISB1	set	1073
   523  0437                     _TRISB7	set	1079
   524  0435                     _TRISB5	set	1077
   525  042E                     _TRISA6	set	1070
   526  042D                     _TRISA5	set	1069
   527  043A                     _TRISC2	set	1082
   528  0439                     _TRISC1	set	1081
   529  04C5                     _TXEN	set	1221
   530  04C6                     _TX9	set	1222
   531  0465                     _RCIE	set	1125
   532  0464                     _TXIE	set	1124
   533  04C4                     _SYNC	set	1220
   534  04C2                     _BRGH	set	1218
   535  0C4B                     _ANS11	set	3147
   536  0C48                     _ANS8	set	3144
   537  0C49                     _ANS9	set	3145
   538  0C4A                     _ANS10	set	3146
   539  0C4D                     _ANS13	set	3149
   540  0C44                     _ANS4	set	3140
   541  0626                     STR_4:	
   542  0626  3446               	retlw	70	;'F'
   543  0627  3469               	retlw	105	;'i'
   544  0628  346D               	retlw	109	;'m'
   545  0629  3420               	retlw	32	;' '
   546  062A  3464               	retlw	100	;'d'
   547  062B  346F               	retlw	111	;'o'
   548  062C  3420               	retlw	32	;' '
   549  062D  3474               	retlw	116	;'t'
   550  062E  3465               	retlw	101	;'e'
   551  062F  3473               	retlw	115	;'s'
   552  0630  3474               	retlw	116	;'t'
   553  0631  3465               	retlw	101	;'e'
   554  0632  3420               	retlw	32	;' '
   555  0633  3400               	retlw	0
   556  0634                     STR_1:	
   557  0634  344B               	retlw	75	;'K'
   558  0635  3470               	retlw	112	;'p'
   559  0636  343A               	retlw	58	;':'
   560  0637  3420               	retlw	32	;' '
   561  0638  3425               	retlw	37	;'%'
   562  0639  3464               	retlw	100	;'d'
   563  063A  3420               	retlw	32	;' '
   564  063B  342D               	retlw	45	;'-'
   565  063C  343E               	retlw	62	;'>'
   566  063D  3420               	retlw	32	;' '
   567  063E  3400               	retlw	0
   568  063F                     STR_2:	
   569  063F  3425               	retlw	37	;'%'
   570  0640  3464               	retlw	100	;'d'
   571  0641  3420               	retlw	32	;' '
   572  0642  3400               	retlw	0
   573  063F                     
   574                           ; #config settings
   575  0000                     
   576                           	psect	cinit
   577  0015                     start_initialization:	
   578  0015                     __initialization:	
   579                           
   580                           ; Initialize objects allocated to BANK0
   581  0015  120A  118A  2718  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   582  001A  00DA               	movwf	__pdataBANK0& (0+127)
   583  001B  120A  118A  2719  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   584  0020  00DB               	movwf	(__pdataBANK0+1)& (0+127)
   585                           
   586                           ; Clear objects allocated to BANK3
   587  0021  1783               	bsf	3,7	;select IRP bank2
   588  0022  3090               	movlw	low __pbssBANK3
   589  0023  0084               	movwf	4
   590  0024  30D7               	movlw	low (__pbssBANK3+71)
   591  0025  120A  118A  2708  120A  118A  	fcall	clear_ram0
   592                           
   593                           ; Clear objects allocated to BANK2
   594  002A  3010               	movlw	low __pbssBANK2
   595  002B  0084               	movwf	4
   596  002C  3057               	movlw	low (__pbssBANK2+71)
   597  002D  120A  118A  2708  120A  118A  	fcall	clear_ram0
   598                           
   599                           ; Clear objects allocated to BANK0
   600  0032  1383               	bcf	3,7	;select IRP bank0
   601  0033  3041               	movlw	low __pbssBANK0
   602  0034  0084               	movwf	4
   603  0035  305A               	movlw	low (__pbssBANK0+25)
   604  0036  120A  118A  2708   	fcall	clear_ram0
   605  0039                     end_of_initialization:	
   606                           ;End of C runtime variable initialization code
   607                           
   608  0039                     __end_of__initialization:	
   609  0039  0183               	clrf	3
   610  003A  120A  118A  283D   	ljmp	_main	;jump to C main() function
   611                           
   612                           	psect	bssBANK0
   613  0041                     __pbssBANK0:	
   614  0041                     _last_pos:	
   615  0041                     	ds	4
   616  0045                     _set_point:	
   617  0045                     	ds	4
   618  0049                     _motor_pos:	
   619  0049                     	ds	4
   620  004D                     _encoder1_counter:	
   621  004D                     	ds	4
   622  0051                     isr@tick:	
   623  0051                     	ds	2
   624  0053                     _samples:	
   625  0053                     	ds	2
   626  0055                     _sampling:	
   627  0055                     	ds	1
   628  0056                     _ab1:	
   629  0056                     	ds	1
   630  0057                     _state1:	
   631  0057                     	ds	1
   632  0058                     _dummy:	
   633  0058                     	ds	1
   634  0059                     _delayus_variable:	
   635  0059                     	ds	1
   636                           
   637                           	psect	dataBANK0
   638  005A                     __pdataBANK0:	
   639  005A                     _Kp:	
   640  005A                     	ds	2
   641                           
   642                           	psect	bssBANK3
   643  0190                     __pbssBANK3:	
   644  0190                     _pos_log1:	
   645  0190                     	ds	71
   646                           
   647                           	psect	bssBANK2
   648  0110                     __pbssBANK2:	
   649  0110                     _pos_log2:	
   650  0110                     	ds	71
   651                           
   652                           	psect	clrtext
   653  0708                     clear_ram0:	
   654                           ;	Called with FSR containing the base address, and
   655                           ;	W with the last address+1
   656                           
   657  0708  0064               	clrwdt	;clear the watchdog before getting into this loop
   658  0709                     clrloop0:	
   659  0709  0180               	clrf	0	;clear RAM location pointed to by FSR
   660  070A  0A84               	incf	4,f	;increment pointer
   661  070B  0604               	xorwf	4,w	;XOR with final address
   662  070C  1903               	btfsc	3,2	;have we reached the end yet?
   663  070D  3400               	retlw	0	;all done for this memory range, return
   664  070E  0604               	xorwf	4,w	;XOR again to restore value
   665  070F  2F09               	goto	clrloop0	;do the next byte
   666                           
   667                           	psect	cstackBANK1
   668  00A0                     __pcstackBANK1:	
   669  00A0                     ??_serial_init:	
   670  00A0                     ??_putch:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  00A0                     ??_chkchr:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  00A0                     ??_pwm_init:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  00A0                     ?_pwm_set:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  00A0                     ?_SetPoint:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  00A0                     ??_resetCounter:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  00A0                     ??_encoders_init:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  00A0                     ?___lwdiv:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  00A0                     pwm_set@channel:	
   695                           ; 2 bytes @ 0x0
   696                           
   697  00A0                     SetPoint@new_val:	
   698                           ; 2 bytes @ 0x0
   699                           
   700  00A0                     ___lwdiv@divisor:	
   701                           ; 2 bytes @ 0x0
   702                           
   703                           
   704                           ; 2 bytes @ 0x0
   705  00A0                     	ds	1
   706  00A1                     putch@c:	
   707                           
   708                           ; 1 bytes @ 0x1
   709  00A1                     	ds	1
   710  00A2                     ??_putst:	
   711  00A2                     ??_SetPoint:	
   712                           ; 1 bytes @ 0x2
   713                           
   714  00A2                     ___lwdiv@dividend:	
   715                           ; 1 bytes @ 0x2
   716                           
   717  00A2                     pwm_set@duty_cycle:	
   718                           ; 2 bytes @ 0x2
   719                           
   720                           
   721                           ; 4 bytes @ 0x2
   722  00A2                     	ds	1
   723  00A3                     putst@str:	
   724                           
   725                           ; 1 bytes @ 0x3
   726  00A3                     	ds	1
   727  00A4                     ??___lwdiv:	
   728                           
   729                           ; 1 bytes @ 0x4
   730  00A4                     	ds	1
   731  00A5                     ___lwdiv@counter:	
   732                           
   733                           ; 1 bytes @ 0x5
   734  00A5                     	ds	1
   735  00A6                     ??_pwm_set:	
   736  00A6                     ___lwdiv@quotient:	
   737                           ; 1 bytes @ 0x6
   738                           
   739                           
   740                           ; 2 bytes @ 0x6
   741  00A6                     	ds	2
   742  00A8                     ?___lwmod:	
   743  00A8                     ___lwmod@divisor:	
   744                           ; 2 bytes @ 0x8
   745                           
   746                           
   747                           ; 2 bytes @ 0x8
   748  00A8                     	ds	2
   749  00AA                     ___lwmod@dividend:	
   750                           
   751                           ; 2 bytes @ 0xA
   752  00AA                     	ds	2
   753  00AC                     ??___lwmod:	
   754                           
   755                           ; 1 bytes @ 0xC
   756  00AC                     	ds	1
   757  00AD                     ___lwmod@counter:	
   758                           
   759                           ; 1 bytes @ 0xD
   760  00AD                     	ds	1
   761  00AE                     ?_sprintf:	
   762  00AE                     sprintf@f:	
   763                           ; 2 bytes @ 0xE
   764                           
   765                           
   766                           ; 1 bytes @ 0xE
   767  00AE                     	ds	3
   768  00B1                     ??_sprintf:	
   769                           
   770                           ; 1 bytes @ 0x11
   771  00B1                     	ds	3
   772  00B4                     sprintf@ap:	
   773                           
   774                           ; 1 bytes @ 0x14
   775  00B4                     	ds	1
   776  00B5                     sprintf@flag:	
   777                           
   778                           ; 1 bytes @ 0x15
   779  00B5                     	ds	1
   780  00B6                     sprintf@prec:	
   781                           
   782                           ; 1 bytes @ 0x16
   783  00B6                     	ds	1
   784  00B7                     sprintf@val:	
   785                           
   786                           ; 2 bytes @ 0x17
   787  00B7                     	ds	2
   788  00B9                     sprintf@sp:	
   789                           
   790                           ; 1 bytes @ 0x19
   791  00B9                     	ds	1
   792  00BA                     sprintf@c:	
   793                           
   794                           ; 1 bytes @ 0x1A
   795  00BA                     	ds	1
   796  00BB                     ??_main:	
   797                           
   798                           ; 1 bytes @ 0x1B
   799  00BB                     	ds	6
   800  00C1                     main@sVar:	
   801                           
   802                           ; 10 bytes @ 0x21
   803  00C1                     	ds	10
   804  00CB                     main@serialIn_333:	
   805                           
   806                           ; 1 bytes @ 0x2B
   807  00CB                     	ds	1
   808                           
   809                           	psect	cstackCOMMON
   810  0070                     __pcstackCOMMON:	
   811  0070                     ?_serial_init:	
   812  0070                     ?_putch:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_chkchr:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0070                     ?_putst:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0070                     ?_pwm_init:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0070                     ?_SetMotor:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_resetCounter:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_isr:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_encoders_init:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_main:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?i1_pwm_set:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_constrain:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ?___lmul:	
   846                           ; 4 bytes @ 0x0
   847                           
   848  0070                     i1pwm_set@channel:	
   849                           ; 4 bytes @ 0x0
   850                           
   851  0070                     constrain@value:	
   852                           ; 2 bytes @ 0x0
   853                           
   854  0070                     ___lmul@multiplier:	
   855                           ; 4 bytes @ 0x0
   856                           
   857                           
   858                           ; 4 bytes @ 0x0
   859  0070                     	ds	2
   860  0072                     i1pwm_set@duty_cycle:	
   861                           
   862                           ; 4 bytes @ 0x2
   863  0072                     	ds	2
   864  0074                     constrain@lLimit:	
   865  0074                     ___lmul@multiplicand:	
   866                           ; 4 bytes @ 0x4
   867                           
   868                           
   869                           ; 4 bytes @ 0x4
   870  0074                     	ds	2
   871  0076                     ??i1_pwm_set:	
   872                           
   873                           ; 1 bytes @ 0x6
   874  0076                     	ds	2
   875  0078                     ??___lmul:	
   876  0078                     constrain@uLimit:	
   877                           ; 1 bytes @ 0x8
   878                           
   879                           
   880                           ; 4 bytes @ 0x8
   881  0078                     	ds	1
   882  0079                     ___lmul@product:	
   883                           
   884                           ; 4 bytes @ 0x9
   885  0079                     	ds	3
   886  007C                     ??_constrain:	
   887                           
   888                           ; 1 bytes @ 0xC
   889  007C                     	ds	1
   890  007D                     ??___aldiv:	
   891                           
   892                           ; 1 bytes @ 0xD
   893  007D                     	ds	1
   894                           
   895                           	psect	cstackBANK0
   896  0020                     __pcstackBANK0:	
   897  0020                     ?___aldiv:	
   898  0020                     ___aldiv@divisor:	
   899                           ; 4 bytes @ 0x0
   900                           
   901                           
   902                           ; 4 bytes @ 0x0
   903  0020                     	ds	4
   904  0024                     ___aldiv@dividend:	
   905                           
   906                           ; 4 bytes @ 0x4
   907  0024                     	ds	4
   908  0028                     ___aldiv@counter:	
   909                           
   910                           ; 1 bytes @ 0x8
   911  0028                     	ds	1
   912  0029                     ___aldiv@sign:	
   913                           
   914                           ; 1 bytes @ 0x9
   915  0029                     	ds	1
   916  002A                     ___aldiv@quotient:	
   917                           
   918                           ; 4 bytes @ 0xA
   919  002A                     	ds	4
   920  002E                     ??_SetMotor:	
   921                           
   922                           ; 1 bytes @ 0xE
   923  002E                     	ds	4
   924  0032                     SetMotor@err:	
   925                           
   926                           ; 4 bytes @ 0x12
   927  0032                     	ds	4
   928  0036                     SetMotor@resp:	
   929                           
   930                           ; 4 bytes @ 0x16
   931  0036                     	ds	4
   932  003A                     ??_isr:	
   933                           
   934                           ; 1 bytes @ 0x1A
   935  003A                     	ds	6
   936  0040                     isr@portB:	
   937                           
   938                           ; 1 bytes @ 0x20
   939  0040                     	ds	1
   940                           
   941                           	psect	maintext
   942  003D                     __pmaintext:	
   943 ;;
   944 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   945 ;;
   946 ;; *************** function _main *****************
   947 ;; Defined at:
   948 ;;		line 197 in file "main.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;		None
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  sVar           10   33[BANK1 ] unsigned char [10]
   953 ;;  serialIn        1   43[BANK1 ] unsigned char 
   954 ;;  i               2    0        int 
   955 ;;  enc1            2    0        int 
   956 ;;  serialIn        1    0        unsigned char 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : B00/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   966 ;;      Params:         0       0       0       0       0
   967 ;;      Locals:         0       0      16       0       0
   968 ;;      Temps:          0       0       1       0       0
   969 ;;      Totals:         0       0      17       0       0
   970 ;;Total ram usage:       17 bytes
   971 ;; Hardware stack levels required when called:    5
   972 ;; This function calls:
   973 ;;		_SetPoint
   974 ;;		_chkchr
   975 ;;		_encoders_init
   976 ;;		_putst
   977 ;;		_pwm_init
   978 ;;		_pwm_set
   979 ;;		_resetCounter
   980 ;;		_serial_init
   981 ;;		_sprintf
   982 ;; This function is called by:
   983 ;;		Startup code after reset
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _main
   989  003D                     _main:	
   990                           
   991                           ;main.c: 206: OPTION_REGbits.T0CS = 0;
   992                           
   993                           ;incstack = 0
   994                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   995  003D  1683               	bsf	3,5	;RP0=1, select bank1
   996  003E  1303               	bcf	3,6	;RP1=0, select bank1
   997  003F  1281               	bcf	1,5	;volatile
   998                           
   999                           ;main.c: 207: OPTION_REGbits.PSA = 0;
  1000  0040  1181               	bcf	1,3	;volatile
  1001                           
  1002                           ;main.c: 208: OPTION_REGbits.PS = 7;
  1003  0041  3007               	movlw	7
  1004  0042  0481               	iorwf	1,f	;volatile
  1005                           
  1006                           ;main.c: 211: TRISB5 = 0;
  1007  0043  1286               	bcf	6,5	;volatile
  1008                           
  1009                           ;main.c: 212: ANS13 = 0;
  1010  0044  1683               	bsf	3,5	;RP0=1, select bank3
  1011  0045  1703               	bsf	3,6	;RP1=1, select bank3
  1012  0046  1289               	bcf	9,5	;volatile
  1013                           
  1014                           ;main.c: 213: TRISB7 = 0;
  1015  0047  1683               	bsf	3,5	;RP0=1, select bank1
  1016  0048  1303               	bcf	3,6	;RP1=0, select bank1
  1017  0049  1386               	bcf	6,7	;volatile
  1018                           
  1019                           ;main.c: 214: TRISB1 = 1;
  1020  004A  1486               	bsf	6,1	;volatile
  1021                           
  1022                           ;main.c: 215: TRISB2 = 1;
  1023  004B  1506               	bsf	6,2	;volatile
  1024                           
  1025                           ;main.c: 216: TRISB3 = 1;
  1026  004C  1586               	bsf	6,3	;volatile
  1027                           
  1028                           ;main.c: 217: TRISB4 = 1;
  1029  004D  1606               	bsf	6,4	;volatile
  1030                           
  1031                           ;main.c: 218: ANS10 = 0;
  1032  004E  1683               	bsf	3,5	;RP0=1, select bank3
  1033  004F  1703               	bsf	3,6	;RP1=1, select bank3
  1034  0050  1109               	bcf	9,2	;volatile
  1035                           
  1036                           ;main.c: 219: ANS9 = 0;
  1037  0051  1089               	bcf	9,1	;volatile
  1038                           
  1039                           ;main.c: 220: ANS8 = 0;
  1040  0052  1009               	bcf	9,0	;volatile
  1041                           
  1042                           ;main.c: 221: ANS11 = 0;
  1043  0053  1189               	bcf	9,3	;volatile
  1044                           
  1045                           ;main.c: 222: RB5=1;
  1046  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1047  0055  1303               	bcf	3,6	;RP1=0, select bank0
  1048  0056  1686               	bsf	6,5	;volatile
  1049                           
  1050                           ;main.c: 225: T0IE = 1;
  1051  0057  168B               	bsf	11,5	;volatile
  1052                           
  1053                           ;main.c: 226: TMR1IE = 0;
  1054  0058  1683               	bsf	3,5	;RP0=1, select bank1
  1055  0059  1303               	bcf	3,6	;RP1=0, select bank1
  1056  005A  100C               	bcf	12,0	;volatile
  1057                           
  1058                           ;main.c: 227: PEIE = 1;
  1059  005B  170B               	bsf	11,6	;volatile
  1060                           
  1061                           ;main.c: 228: GIE = 1;
  1062  005C  178B               	bsf	11,7	;volatile
  1063                           
  1064                           ;main.c: 229: IOCB=0b00011000;
  1065  005D  3018               	movlw	24
  1066  005E  0096               	movwf	22	;volatile
  1067                           
  1068                           ;main.c: 230: RBIE = 1;
  1069  005F  158B               	bsf	11,3	;volatile
  1070                           
  1071                           ;main.c: 234: serial_init();
  1072  0060  120A  118A  26B6  120A  118A  	fcall	_serial_init
  1073                           
  1074                           ;main.c: 237: pwm_init();
  1075  0065  120A  118A  2670  120A  118A  	fcall	_pwm_init
  1076                           
  1077                           ;main.c: 244: encoders_init();
  1078  006A  120A  118A  269A  120A  118A  	fcall	_encoders_init
  1079                           
  1080                           ;main.c: 252: pwm_set(1, 0);
  1081  006F  3001               	movlw	1
  1082  0070  1683               	bsf	3,5	;RP0=1, select bank1
  1083  0071  1303               	bcf	3,6	;RP1=0, select bank1
  1084  0072  00A0               	movwf	pwm_set@channel^(0+128)
  1085  0073  3000               	movlw	0
  1086  0074  00A1               	movwf	(pwm_set@channel^(0+128)+1)
  1087  0075  3000               	movlw	0
  1088  0076  00A5               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1089  0077  3000               	movlw	0
  1090  0078  00A4               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1091  0079  3000               	movlw	0
  1092  007A  00A3               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1093  007B  3000               	movlw	0
  1094  007C  00A2               	movwf	pwm_set@duty_cycle^(0+128)
  1095  007D  120A  118A  25E7  120A  118A  	fcall	_pwm_set
  1096                           
  1097                           ;main.c: 253: pwm_set(2, 0);
  1098  0082  3002               	movlw	2
  1099  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1100  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1101  0085  00A0               	movwf	pwm_set@channel^(0+128)
  1102  0086  3000               	movlw	0
  1103  0087  00A1               	movwf	(pwm_set@channel^(0+128)+1)
  1104  0088  3000               	movlw	0
  1105  0089  00A5               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1106  008A  3000               	movlw	0
  1107  008B  00A4               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1108  008C  3000               	movlw	0
  1109  008D  00A3               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1110  008E  3000               	movlw	0
  1111  008F  00A2               	movwf	pwm_set@duty_cycle^(0+128)
  1112  0090  120A  118A  25E7  120A  118A  	fcall	_pwm_set
  1113  0095                     l2563:	
  1114                           
  1115                           ;main.c: 258: char serialIn = chkchr();
  1116  0095  120A  118A  2710  120A  118A  	fcall	_chkchr
  1117  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1118  009B  1303               	bcf	3,6	;RP1=0, select bank1
  1119  009C  00BB               	movwf	??_main^(0+128)
  1120  009D  083B               	movf	??_main^(0+128),w
  1121  009E  00CB               	movwf	main@serialIn_333^(0+128)
  1122                           
  1123                           ;main.c: 259: if (serialIn == 'a'){
  1124  009F  3061               	movlw	97
  1125  00A0  064B               	xorwf	main@serialIn_333^(0+128),w
  1126  00A1  1D03               	btfss	3,2
  1127  00A2  2895               	goto	l2563
  1128                           
  1129                           ;main.c: 260: resetCounter();
  1130  00A3  120A  118A  26E3  120A  118A  	fcall	_resetCounter
  1131                           
  1132                           ;main.c: 262: last_pos = 0;
  1133  00A8  3000               	movlw	0
  1134  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  1135  00AA  1303               	bcf	3,6	;RP1=0, select bank0
  1136  00AB  00C4               	movwf	_last_pos+3	;volatile
  1137  00AC  3000               	movlw	0
  1138  00AD  00C3               	movwf	_last_pos+2	;volatile
  1139  00AE  3000               	movlw	0
  1140  00AF  00C2               	movwf	_last_pos+1	;volatile
  1141  00B0  3000               	movlw	0
  1142  00B1  00C1               	movwf	_last_pos	;volatile
  1143                           
  1144                           ;main.c: 263: samples = 0;
  1145  00B2  01D3               	clrf	_samples	;volatile
  1146  00B3  01D4               	clrf	_samples+1	;volatile
  1147                           
  1148                           ;main.c: 264: sampling = 1;
  1149  00B4  3001               	movlw	1
  1150  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1151  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  1152  00B7  00BB               	movwf	??_main^(0+128)
  1153  00B8  083B               	movf	??_main^(0+128),w
  1154  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  1155  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  1156  00BB  00D5               	movwf	_sampling	;volatile
  1157                           
  1158                           ;main.c: 265: Kp++;
  1159  00BC  3001               	movlw	1
  1160  00BD  07DA               	addwf	_Kp,f
  1161  00BE  1803               	skipnc
  1162  00BF  0ADB               	incf	_Kp+1,f
  1163  00C0  3000               	movlw	0
  1164  00C1  07DB               	addwf	_Kp+1,f
  1165                           
  1166                           ;main.c: 266: SetPoint(1000);
  1167  00C2  30E8               	movlw	232
  1168  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1169  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  1170  00C5  00A0               	movwf	SetPoint@new_val^(0+128)
  1171  00C6  3003               	movlw	3
  1172  00C7  00A1               	movwf	(SetPoint@new_val^(0+128)+1)
  1173  00C8  120A  118A  26F6  120A  118A  	fcall	_SetPoint
  1174                           
  1175                           ;main.c: 267: RB5=0;
  1176  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1177  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1178  00CF  1286               	bcf	6,5	;volatile
  1179  00D0                     l2581:	
  1180                           ;main.c: 268: while (samples < 140){
  1181                           
  1182  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  1183  00D1  1303               	bcf	3,6	;RP1=0, select bank0
  1184  00D2  0854               	movf	_samples+1,w	;volatile
  1185  00D3  3A80               	xorlw	128
  1186  00D4  00FF               	movwf	127
  1187  00D5  3080               	movlw	128
  1188  00D6  027F               	subwf	127,w
  1189  00D7  1D03               	skipz
  1190  00D8  28DB               	goto	u2245
  1191  00D9  308C               	movlw	140
  1192  00DA  0253               	subwf	_samples,w	;volatile
  1193  00DB                     u2245:	
  1194  00DB  1C03               	skipc
  1195  00DC  28D0               	goto	l2581
  1196                           
  1197                           ;main.c: 270: };main.c: 271: sampling = 0;
  1198  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1199  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1200  00DF  01D5               	clrf	_sampling	;volatile
  1201                           
  1202                           ;main.c: 272: RB5=1;
  1203  00E0  1686               	bsf	6,5	;volatile
  1204                           
  1205                           ;main.c: 274: char sVar[10];;main.c: 275: samples = 0;
  1206  00E1  01D3               	clrf	_samples	;volatile
  1207  00E2  01D4               	clrf	_samples+1	;volatile
  1208                           
  1209                           ;main.c: 276: sprintf(sVar, "Kp: %d -> ", Kp);
  1210  00E3  3019               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1211  00E4  1683               	bsf	3,5	;RP0=1, select bank1
  1212  00E5  1303               	bcf	3,6	;RP1=0, select bank1
  1213  00E6  00BB               	movwf	??_main^(0+128)
  1214  00E7  083B               	movf	??_main^(0+128),w
  1215  00E8  00AE               	movwf	sprintf@f^(0+128)
  1216  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1217  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1218  00EB  085B               	movf	_Kp+1,w
  1219  00EC  1683               	bsf	3,5	;RP0=1, select bank1
  1220  00ED  1303               	bcf	3,6	;RP1=0, select bank1
  1221  00EE  00B0               	movwf	((?_sprintf+1)^(0+128)+1)
  1222  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1223  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1224  00F1  085A               	movf	_Kp,w
  1225  00F2  1683               	bsf	3,5	;RP0=1, select bank1
  1226  00F3  1303               	bcf	3,6	;RP1=0, select bank1
  1227  00F4  00AF               	movwf	(?_sprintf^(0+128)+1)
  1228  00F5  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1229  00F6  120A  118A  236B  120A  118A  	fcall	_sprintf
  1230                           
  1231                           ;main.c: 277: putst(sVar);
  1232  00FB  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1233  00FC  120A  118A  2549  120A  118A  	fcall	_putst
  1234  0101                     l333:	
  1235                           ;main.c: 278: while (samples <= 140 /2){
  1236                           
  1237  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1238  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1239  0103  0854               	movf	_samples+1,w	;volatile
  1240  0104  3A80               	xorlw	128
  1241  0105  00FF               	movwf	127
  1242  0106  3080               	movlw	128
  1243  0107  027F               	subwf	127,w
  1244  0108  1D03               	skipz
  1245  0109  290C               	goto	u2255
  1246  010A  3047               	movlw	71
  1247  010B  0253               	subwf	_samples,w	;volatile
  1248  010C                     u2255:	
  1249  010C  1803               	btfsc	3,0
  1250  010D  295D               	goto	l336
  1251                           
  1252                           ;main.c: 279: sprintf(sVar, "%d ", pos_log1[samples]);
  1253  010E  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1254  010F  1683               	bsf	3,5	;RP0=1, select bank1
  1255  0110  1303               	bcf	3,6	;RP1=0, select bank1
  1256  0111  00BB               	movwf	??_main^(0+128)
  1257  0112  083B               	movf	??_main^(0+128),w
  1258  0113  00AE               	movwf	sprintf@f^(0+128)
  1259  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1260  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0116  0853               	movf	_samples,w	;volatile
  1262  0117  3E90               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  1263  0118  0084               	movwf	4
  1264  0119  1783               	bsf	3,7	;select IRP bank3
  1265  011A  0800               	movf	0,w
  1266  011B  1683               	bsf	3,5	;RP0=1, select bank1
  1267  011C  1303               	bcf	3,6	;RP1=0, select bank1
  1268  011D  00AF               	movwf	(?_sprintf^(0+128)+1)
  1269  011E  01B0               	clrf	((?_sprintf+1)^(0+128)+1)
  1270  011F  1BAF               	btfsc	(?_sprintf^(0+128)+1),7
  1271  0120  03B0               	decf	((?_sprintf+1)^(0+128)+1),f
  1272  0121  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1273  0122  120A  118A  236B  120A  118A  	fcall	_sprintf
  1274                           
  1275                           ;main.c: 280: putst(sVar);
  1276  0127  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1277  0128  120A  118A  2549  120A  118A  	fcall	_putst
  1278                           
  1279                           ;main.c: 281: samples++;
  1280  012D  3001               	movlw	1
  1281  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1282  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0130  07D3               	addwf	_samples,f	;volatile
  1284  0131  1803               	skipnc
  1285  0132  0AD4               	incf	_samples+1,f	;volatile
  1286  0133  3000               	movlw	0
  1287  0134  07D4               	addwf	_samples+1,f	;volatile
  1288  0135  2901               	goto	l333
  1289  0136                     l2597:	
  1290                           
  1291                           ;main.c: 284: sprintf(sVar, "%d ", pos_log2[samples - 140 / 2]);
  1292  0136  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1293  0137  1683               	bsf	3,5	;RP0=1, select bank1
  1294  0138  1303               	bcf	3,6	;RP1=0, select bank1
  1295  0139  00BB               	movwf	??_main^(0+128)
  1296  013A  083B               	movf	??_main^(0+128),w
  1297  013B  00AE               	movwf	sprintf@f^(0+128)
  1298  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1299  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1300  013E  0853               	movf	_samples,w	;volatile
  1301  013F  3ECA               	addlw	(low ((_pos_log2| (0+256)+186)))& (0+255)
  1302  0140  0084               	movwf	4
  1303  0141  1783               	bsf	3,7	;select IRP bank2
  1304  0142  0800               	movf	0,w
  1305  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1306  0144  1303               	bcf	3,6	;RP1=0, select bank1
  1307  0145  00AF               	movwf	(?_sprintf^(0+128)+1)
  1308  0146  01B0               	clrf	((?_sprintf+1)^(0+128)+1)
  1309  0147  1BAF               	btfsc	(?_sprintf^(0+128)+1),7
  1310  0148  03B0               	decf	((?_sprintf+1)^(0+128)+1),f
  1311  0149  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1312  014A  120A  118A  236B  120A  118A  	fcall	_sprintf
  1313                           
  1314                           ;main.c: 285: putst(sVar);
  1315  014F  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1316  0150  120A  118A  2549  120A  118A  	fcall	_putst
  1317                           
  1318                           ;main.c: 286: samples++;
  1319  0155  3001               	movlw	1
  1320  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1321  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1322  0158  07D3               	addwf	_samples,f	;volatile
  1323  0159  1803               	skipnc
  1324  015A  0AD4               	incf	_samples+1,f	;volatile
  1325  015B  3000               	movlw	0
  1326  015C  07D4               	addwf	_samples+1,f	;volatile
  1327  015D                     l336:	
  1328  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1329  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1330  015F  0854               	movf	_samples+1,w	;volatile
  1331  0160  3A80               	xorlw	128
  1332  0161  00FF               	movwf	127
  1333  0162  3080               	movlw	128
  1334  0163  027F               	subwf	127,w
  1335  0164  1D03               	skipz
  1336  0165  2968               	goto	u2265
  1337  0166  308C               	movlw	140
  1338  0167  0253               	subwf	_samples,w	;volatile
  1339  0168                     u2265:	
  1340  0168  1C03               	skipc
  1341  0169  2936               	goto	l2597
  1342                           
  1343                           ;main.c: 287: };main.c: 288: sprintf(sVar, "Fim do teste ");
  1344  016A  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1345  016B  1683               	bsf	3,5	;RP0=1, select bank1
  1346  016C  1303               	bcf	3,6	;RP1=0, select bank1
  1347  016D  00BB               	movwf	??_main^(0+128)
  1348  016E  083B               	movf	??_main^(0+128),w
  1349  016F  00AE               	movwf	sprintf@f^(0+128)
  1350  0170  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1351  0171  120A  118A  236B  120A  118A  	fcall	_sprintf
  1352                           
  1353                           ;main.c: 289: putst(sVar);
  1354  0176  30C1               	movlw	(low (main@sVar| 0))& (0+255)
  1355  0177  120A  118A  2549  120A  118A  	fcall	_putst
  1356  017C  2895               	goto	l2563
  1357  017D                     __end_of_main:	
  1358                           
  1359                           	psect	text1
  1360  036B                     __ptext1:	
  1361 ;; *************** function _sprintf *****************
  1362 ;; Defined at:
  1363 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  sp              1    wreg     PTR unsigned char 
  1366 ;;		 -> main@sVar(10), 
  1367 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  1368 ;;		 -> STR_4(14), STR_3(4), STR_2(4), STR_1(11), 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  sp              1   25[BANK1 ] PTR unsigned char 
  1371 ;;		 -> main@sVar(10), 
  1372 ;;  tmpval          4    0        struct .
  1373 ;;  val             2   23[BANK1 ] unsigned int 
  1374 ;;  cp              2    0        PTR const unsigned char 
  1375 ;;  len             2    0        unsigned int 
  1376 ;;  c               1   26[BANK1 ] unsigned char 
  1377 ;;  prec            1   22[BANK1 ] char 
  1378 ;;  flag            1   21[BANK1 ] unsigned char 
  1379 ;;  ap              1   20[BANK1 ] PTR void [1]
  1380 ;;		 -> ?_sprintf(2), 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2   14[BANK1 ] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       3       0       0
  1391 ;;      Locals:         0       0       7       0       0
  1392 ;;      Temps:          0       0       3       0       0
  1393 ;;      Totals:         0       0      13       0       0
  1394 ;;Total ram usage:       13 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    4
  1397 ;; This function calls:
  1398 ;;		___lwdiv
  1399 ;;		___lwmod
  1400 ;; This function is called by:
  1401 ;;		_main
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           
  1406                           ;psect for function _sprintf
  1407  036B                     _sprintf:	
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1411                           ;sprintf@sp stored from wreg
  1412  036B  1683               	bsf	3,5	;RP0=1, select bank1
  1413  036C  1303               	bcf	3,6	;RP1=0, select bank1
  1414  036D  00B9               	movwf	sprintf@sp^(0+128)
  1415                           
  1416                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1417  036E  30AF               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1418  036F  00B1               	movwf	??_sprintf^(0+128)
  1419  0370  0831               	movf	??_sprintf^(0+128),w
  1420  0371  00B4               	movwf	sprintf@ap^(0+128)
  1421  0372                     l2485:	
  1422                           ;doprnt.c: 548: while((c = *f++)) {
  1423                           
  1424  0372  3001               	movlw	1
  1425  0373  07AE               	addwf	sprintf@f^(0+128),f
  1426  0374  30FF               	movlw	-1
  1427  0375  072E               	addwf	sprintf@f^(0+128),w
  1428  0376  0084               	movwf	4
  1429  0377  120A  118A  2616  120A  118A  	fcall	stringdir
  1430  037C  00B1               	movwf	??_sprintf^(0+128)
  1431  037D  0831               	movf	??_sprintf^(0+128),w
  1432  037E  00BA               	movwf	sprintf@c^(0+128)
  1433  037F  083A               	movf	sprintf@c^(0+128),w
  1434  0380  1903               	btfsc	3,2
  1435  0381  2C38               	goto	l2487
  1436                           
  1437                           ;doprnt.c: 550: if(c != '%')
  1438  0382  3025               	movlw	37
  1439  0383  063A               	xorwf	sprintf@c^(0+128),w
  1440  0384  1903               	btfsc	3,2
  1441  0385  2B92               	goto	l2441
  1442                           
  1443                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1444  0386  083A               	movf	sprintf@c^(0+128),w
  1445  0387  00B1               	movwf	??_sprintf^(0+128)
  1446  0388  0839               	movf	sprintf@sp^(0+128),w
  1447  0389  0084               	movwf	4
  1448  038A  0831               	movf	??_sprintf^(0+128),w
  1449  038B  1383               	bcf	3,7	;select IRP bank0
  1450  038C  0080               	movwf	0
  1451  038D  3001               	movlw	1
  1452  038E  00B1               	movwf	??_sprintf^(0+128)
  1453  038F  0831               	movf	??_sprintf^(0+128),w
  1454  0390  07B9               	addwf	sprintf@sp^(0+128),f
  1455                           
  1456                           ;doprnt.c: 554: continue;
  1457  0391  2B72               	goto	l2485
  1458  0392                     l2441:	
  1459                           
  1460                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1461  0392  01B5               	clrf	sprintf@flag^(0+128)
  1462                           
  1463                           ;doprnt.c: 654: switch(c = *f++) {
  1464  0393  3001               	movlw	1
  1465  0394  07AE               	addwf	sprintf@f^(0+128),f
  1466  0395  30FF               	movlw	-1
  1467  0396  072E               	addwf	sprintf@f^(0+128),w
  1468  0397  0084               	movwf	4
  1469  0398  120A  118A  2616  120A  118A  	fcall	stringdir
  1470  039D  00BA               	movwf	sprintf@c^(0+128)
  1471                           
  1472                           ; Switch size 1, requested type "simple"
  1473                           ; Number of cases is 3, Range of values is 0 to 105
  1474                           ; switch strategies available:
  1475                           ; Name         Instructions Cycles
  1476                           ; simple_byte           10     6 (average)
  1477                           ; jumptable            260     6 (fixed)
  1478                           ;	Chosen strategy is simple_byte
  1479  039E  3A00               	xorlw	0	; case 0
  1480  039F  1903               	skipnz
  1481  03A0  2C38               	goto	l2487
  1482  03A1  3A64               	xorlw	100	; case 100
  1483  03A2  1903               	skipnz
  1484  03A3  2BA8               	goto	l2447
  1485  03A4  3A0D               	xorlw	13	; case 105
  1486  03A5  1903               	skipnz
  1487  03A6  2BA8               	goto	l2447
  1488  03A7  2B72               	goto	l2485
  1489  03A8                     l2447:	
  1490                           
  1491                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1492  03A8  0834               	movf	sprintf@ap^(0+128),w
  1493  03A9  0084               	movwf	4
  1494  03AA  1383               	bcf	3,7	;select IRP bank0
  1495  03AB  0800               	movf	0,w
  1496  03AC  00B7               	movwf	sprintf@val^(0+128)
  1497  03AD  0A84               	incf	4,f
  1498  03AE  0800               	movf	0,w
  1499  03AF  00B8               	movwf	(sprintf@val+1)^(0+128)
  1500  03B0  3002               	movlw	2
  1501  03B1  00B1               	movwf	??_sprintf^(0+128)
  1502  03B2  0831               	movf	??_sprintf^(0+128),w
  1503  03B3  07B4               	addwf	sprintf@ap^(0+128),f
  1504                           
  1505                           ;doprnt.c: 1280: if((int)val < 0) {
  1506  03B4  1FB8               	btfss	(sprintf@val+1)^(0+128),7
  1507  03B5  2BBF               	goto	l2457
  1508                           
  1509                           ;doprnt.c: 1281: flag |= 0x03;
  1510  03B6  3003               	movlw	3
  1511  03B7  00B1               	movwf	??_sprintf^(0+128)
  1512  03B8  0831               	movf	??_sprintf^(0+128),w
  1513  03B9  04B5               	iorwf	sprintf@flag^(0+128),f
  1514                           
  1515                           ;doprnt.c: 1282: val = -val;
  1516  03BA  09B7               	comf	sprintf@val^(0+128),f
  1517  03BB  09B8               	comf	(sprintf@val+1)^(0+128),f
  1518  03BC  0AB7               	incf	sprintf@val^(0+128),f
  1519  03BD  1903               	skipnz
  1520  03BE  0AB8               	incf	(sprintf@val+1)^(0+128),f
  1521  03BF                     l2457:	
  1522                           
  1523                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1524  03BF  01BA               	clrf	sprintf@c^(0+128)
  1525  03C0  0ABA               	incf	sprintf@c^(0+128),f
  1526  03C1                     l2463:	
  1527                           
  1528                           ;doprnt.c: 1325: if(val < dpowers[c])
  1529  03C1  083A               	movf	sprintf@c^(0+128),w
  1530  03C2  00B1               	movwf	??_sprintf^(0+128)
  1531  03C3  0731               	addwf	??_sprintf^(0+128),w
  1532  03C4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1533  03C5  0084               	movwf	4
  1534  03C6  120A  118A  2616  120A  118A  	fcall	stringdir
  1535  03CB  00B2               	movwf	(??_sprintf+1)^(0+128)
  1536  03CC  120A  118A  2616  120A  118A  	fcall	stringdir
  1537  03D1  00B3               	movwf	((??_sprintf+1)^(0+128)+1)
  1538  03D2  0833               	movf	(??_sprintf+2)^(0+128),w
  1539  03D3  0238               	subwf	(sprintf@val+1)^(0+128),w
  1540  03D4  1D03               	skipz
  1541  03D5  2BD8               	goto	u2155
  1542  03D6  0832               	movf	(??_sprintf+1)^(0+128),w
  1543  03D7  0237               	subwf	sprintf@val^(0+128),w
  1544  03D8                     u2155:	
  1545  03D8  1C03               	btfss	3,0
  1546  03D9  2BE2               	goto	l2469
  1547  03DA  3001               	movlw	1
  1548  03DB  00B1               	movwf	??_sprintf^(0+128)
  1549  03DC  0831               	movf	??_sprintf^(0+128),w
  1550  03DD  07BA               	addwf	sprintf@c^(0+128),f
  1551  03DE  3005               	movlw	5
  1552  03DF  063A               	xorwf	sprintf@c^(0+128),w
  1553  03E0  1D03               	btfss	3,2
  1554  03E1  2BC1               	goto	l2463
  1555  03E2                     l2469:	
  1556                           
  1557                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1558  03E2  0835               	movf	sprintf@flag^(0+128),w
  1559  03E3  3903               	andlw	3
  1560  03E4  1903               	btfsc	3,2
  1561  03E5  2BF1               	goto	l2475
  1562                           
  1563                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  1564  03E6  302D               	movlw	45
  1565  03E7  00B1               	movwf	??_sprintf^(0+128)
  1566  03E8  0839               	movf	sprintf@sp^(0+128),w
  1567  03E9  0084               	movwf	4
  1568  03EA  0831               	movf	??_sprintf^(0+128),w
  1569  03EB  1383               	bcf	3,7	;select IRP bank0
  1570  03EC  0080               	movwf	0
  1571  03ED  3001               	movlw	1
  1572  03EE  00B1               	movwf	??_sprintf^(0+128)
  1573  03EF  0831               	movf	??_sprintf^(0+128),w
  1574  03F0  07B9               	addwf	sprintf@sp^(0+128),f
  1575  03F1                     l2475:	
  1576                           
  1577                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1578  03F1  083A               	movf	sprintf@c^(0+128),w
  1579  03F2  00B1               	movwf	??_sprintf^(0+128)
  1580  03F3  0831               	movf	??_sprintf^(0+128),w
  1581  03F4  00B6               	movwf	sprintf@prec^(0+128)
  1582  03F5                     l2483:	
  1583                           ;doprnt.c: 1493: while(prec--) {
  1584                           
  1585  03F5  30FF               	movlw	255
  1586  03F6  00B1               	movwf	??_sprintf^(0+128)
  1587  03F7  0831               	movf	??_sprintf^(0+128),w
  1588  03F8  07B6               	addwf	sprintf@prec^(0+128),f
  1589  03F9  0A36               	incf	sprintf@prec^(0+128),w
  1590  03FA  1903               	btfsc	3,2
  1591  03FB  2B72               	goto	l2485
  1592                           
  1593                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1594  03FC  300A               	movlw	10
  1595  03FD  00A8               	movwf	___lwmod@divisor^(0+128)
  1596  03FE  3000               	movlw	0
  1597  03FF  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  1598  0400  0836               	movf	sprintf@prec^(0+128),w
  1599  0401  00B1               	movwf	??_sprintf^(0+128)
  1600  0402  0731               	addwf	??_sprintf^(0+128),w
  1601  0403  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1602  0404  0084               	movwf	4
  1603  0405  120A  118A  2616  120A  118A  	fcall	stringdir
  1604  040A  00A0               	movwf	___lwdiv@divisor^(0+128)
  1605  040B  120A  118A  2616  120A  118A  	fcall	stringdir
  1606  0410  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  1607  0411  0838               	movf	(sprintf@val+1)^(0+128),w
  1608  0412  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  1609  0413  0837               	movf	sprintf@val^(0+128),w
  1610  0414  00A2               	movwf	___lwdiv@dividend^(0+128)
  1611  0415  120A  118A  250B  120A  118A  	fcall	___lwdiv
  1612  041A  1683               	bsf	3,5	;RP0=1, select bank1
  1613  041B  1303               	bcf	3,6	;RP1=0, select bank1
  1614  041C  0821               	movf	(?___lwdiv+1)^(0+128),w
  1615  041D  00AB               	movwf	(___lwmod@dividend+1)^(0+128)
  1616  041E  0820               	movf	?___lwdiv^(0+128),w
  1617  041F  00AA               	movwf	___lwmod@dividend^(0+128)
  1618  0420  120A  118A  257F  120A  118A  	fcall	___lwmod
  1619  0425  1683               	bsf	3,5	;RP0=1, select bank1
  1620  0426  1303               	bcf	3,6	;RP1=0, select bank1
  1621  0427  0828               	movf	?___lwmod^(0+128),w
  1622  0428  3E30               	addlw	48
  1623  0429  00B2               	movwf	(??_sprintf+1)^(0+128)
  1624  042A  0832               	movf	(??_sprintf+1)^(0+128),w
  1625  042B  00BA               	movwf	sprintf@c^(0+128)
  1626                           
  1627                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1628  042C  083A               	movf	sprintf@c^(0+128),w
  1629  042D  00B1               	movwf	??_sprintf^(0+128)
  1630  042E  0839               	movf	sprintf@sp^(0+128),w
  1631  042F  0084               	movwf	4
  1632  0430  0831               	movf	??_sprintf^(0+128),w
  1633  0431  1383               	bcf	3,7	;select IRP bank0
  1634  0432  0080               	movwf	0
  1635  0433  3001               	movlw	1
  1636  0434  00B1               	movwf	??_sprintf^(0+128)
  1637  0435  0831               	movf	??_sprintf^(0+128),w
  1638  0436  07B9               	addwf	sprintf@sp^(0+128),f
  1639  0437  2BF5               	goto	l2483
  1640  0438                     l2487:	
  1641                           
  1642                           ;doprnt.c: 1557: *sp = 0;
  1643  0438  0839               	movf	sprintf@sp^(0+128),w
  1644  0439  0084               	movwf	4
  1645  043A  1383               	bcf	3,7	;select IRP bank0
  1646  043B  0180               	clrf	0
  1647  043C  0008               	return
  1648  043D                     __end_of_sprintf:	
  1649                           
  1650                           	psect	text2
  1651  057F                     __ptext2:	
  1652 ;; *************** function ___lwmod *****************
  1653 ;; Defined at:
  1654 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  divisor         2    8[BANK1 ] unsigned int 
  1657 ;;  dividend        2   10[BANK1 ] unsigned int 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  counter         1   13[BANK1 ] unsigned char 
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  2    8[BANK1 ] unsigned int 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2, status,0
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1669 ;;      Params:         0       0       4       0       0
  1670 ;;      Locals:         0       0       1       0       0
  1671 ;;      Temps:          0       0       1       0       0
  1672 ;;      Totals:         0       0       6       0       0
  1673 ;;Total ram usage:        6 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    3
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_sprintf
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           
  1684                           ;psect for function ___lwmod
  1685  057F                     ___lwmod:	
  1686                           
  1687                           ;incstack = 0
  1688                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1689  057F  1683               	bsf	3,5	;RP0=1, select bank1
  1690  0580  1303               	bcf	3,6	;RP1=0, select bank1
  1691  0581  0828               	movf	___lwmod@divisor^(0+128),w
  1692  0582  0429               	iorwf	(___lwmod@divisor+1)^(0+128),w
  1693  0583  1903               	btfsc	3,2
  1694  0584  2DAE               	goto	l2309
  1695  0585  01AD               	clrf	___lwmod@counter^(0+128)
  1696  0586  0AAD               	incf	___lwmod@counter^(0+128),f
  1697  0587                     l2299:	
  1698  0587  1BA9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  1699  0588  2D95               	goto	l2301
  1700  0589  3001               	movlw	1
  1701  058A                     u1975:	
  1702  058A  1003               	clrc
  1703  058B  0DA8               	rlf	___lwmod@divisor^(0+128),f
  1704  058C  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  1705  058D  3EFF               	addlw	-1
  1706  058E  1D03               	skipz
  1707  058F  2D8A               	goto	u1975
  1708  0590  3001               	movlw	1
  1709  0591  00AC               	movwf	??___lwmod^(0+128)
  1710  0592  082C               	movf	??___lwmod^(0+128),w
  1711  0593  07AD               	addwf	___lwmod@counter^(0+128),f
  1712  0594  2D87               	goto	l2299
  1713  0595                     l2301:	
  1714  0595  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  1715  0596  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  1716  0597  1D03               	skipz
  1717  0598  2D9B               	goto	u1995
  1718  0599  0828               	movf	___lwmod@divisor^(0+128),w
  1719  059A  022A               	subwf	___lwmod@dividend^(0+128),w
  1720  059B                     u1995:	
  1721  059B  1C03               	skipc
  1722  059C  2DA3               	goto	l2305
  1723  059D  0828               	movf	___lwmod@divisor^(0+128),w
  1724  059E  02AA               	subwf	___lwmod@dividend^(0+128),f
  1725  059F  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  1726  05A0  1C03               	skipc
  1727  05A1  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  1728  05A2  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  1729  05A3                     l2305:	
  1730  05A3  3001               	movlw	1
  1731  05A4                     u2005:	
  1732  05A4  1003               	clrc
  1733  05A5  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  1734  05A6  0CA8               	rrf	___lwmod@divisor^(0+128),f
  1735  05A7  3EFF               	addlw	-1
  1736  05A8  1D03               	skipz
  1737  05A9  2DA4               	goto	u2005
  1738  05AA  3001               	movlw	1
  1739  05AB  02AD               	subwf	___lwmod@counter^(0+128),f
  1740  05AC  1D03               	btfss	3,2
  1741  05AD  2D95               	goto	l2301
  1742  05AE                     l2309:	
  1743  05AE  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  1744  05AF  00A9               	movwf	(?___lwmod+1)^(0+128)
  1745  05B0  082A               	movf	___lwmod@dividend^(0+128),w
  1746  05B1  00A8               	movwf	?___lwmod^(0+128)
  1747  05B2  0008               	return
  1748  05B3                     __end_of___lwmod:	
  1749                           
  1750                           	psect	text3
  1751  050B                     __ptext3:	
  1752 ;; *************** function ___lwdiv *****************
  1753 ;; Defined at:
  1754 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  divisor         2    0[BANK1 ] unsigned int 
  1757 ;;  dividend        2    2[BANK1 ] unsigned int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  quotient        2    6[BANK1 ] unsigned int 
  1760 ;;  counter         1    5[BANK1 ] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  2    0[BANK1 ] unsigned int 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         0       0       4       0       0
  1771 ;;      Locals:         0       0       3       0       0
  1772 ;;      Temps:          0       0       1       0       0
  1773 ;;      Totals:         0       0       8       0       0
  1774 ;;Total ram usage:        8 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    3
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_sprintf
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           
  1785                           ;psect for function ___lwdiv
  1786  050B                     ___lwdiv:	
  1787                           
  1788                           ;incstack = 0
  1789                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1790  050B  1683               	bsf	3,5	;RP0=1, select bank1
  1791  050C  1303               	bcf	3,6	;RP1=0, select bank1
  1792  050D  01A6               	clrf	___lwdiv@quotient^(0+128)
  1793  050E  01A7               	clrf	(___lwdiv@quotient+1)^(0+128)
  1794  050F  0820               	movf	___lwdiv@divisor^(0+128),w
  1795  0510  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  1796  0511  1903               	btfsc	3,2
  1797  0512  2D44               	goto	l2287
  1798  0513  01A5               	clrf	___lwdiv@counter^(0+128)
  1799  0514  0AA5               	incf	___lwdiv@counter^(0+128),f
  1800  0515                     l2275:	
  1801  0515  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  1802  0516  2D23               	goto	l2277
  1803  0517  3001               	movlw	1
  1804  0518                     u1905:	
  1805  0518  1003               	clrc
  1806  0519  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  1807  051A  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  1808  051B  3EFF               	addlw	-1
  1809  051C  1D03               	skipz
  1810  051D  2D18               	goto	u1905
  1811  051E  3001               	movlw	1
  1812  051F  00A4               	movwf	??___lwdiv^(0+128)
  1813  0520  0824               	movf	??___lwdiv^(0+128),w
  1814  0521  07A5               	addwf	___lwdiv@counter^(0+128),f
  1815  0522  2D15               	goto	l2275
  1816  0523                     l2277:	
  1817  0523  3001               	movlw	1
  1818  0524                     u1925:	
  1819  0524  1003               	clrc
  1820  0525  0DA6               	rlf	___lwdiv@quotient^(0+128),f
  1821  0526  0DA7               	rlf	(___lwdiv@quotient+1)^(0+128),f
  1822  0527  3EFF               	addlw	-1
  1823  0528  1D03               	skipz
  1824  0529  2D24               	goto	u1925
  1825  052A  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  1826  052B  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  1827  052C  1D03               	skipz
  1828  052D  2D30               	goto	u1935
  1829  052E  0820               	movf	___lwdiv@divisor^(0+128),w
  1830  052F  0222               	subwf	___lwdiv@dividend^(0+128),w
  1831  0530                     u1935:	
  1832  0530  1C03               	skipc
  1833  0531  2D39               	goto	l2283
  1834  0532  0820               	movf	___lwdiv@divisor^(0+128),w
  1835  0533  02A2               	subwf	___lwdiv@dividend^(0+128),f
  1836  0534  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  1837  0535  1C03               	skipc
  1838  0536  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  1839  0537  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  1840  0538  1426               	bsf	___lwdiv@quotient^(0+128),0
  1841  0539                     l2283:	
  1842  0539  3001               	movlw	1
  1843  053A                     u1945:	
  1844  053A  1003               	clrc
  1845  053B  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  1846  053C  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  1847  053D  3EFF               	addlw	-1
  1848  053E  1D03               	skipz
  1849  053F  2D3A               	goto	u1945
  1850  0540  3001               	movlw	1
  1851  0541  02A5               	subwf	___lwdiv@counter^(0+128),f
  1852  0542  1D03               	btfss	3,2
  1853  0543  2D23               	goto	l2277
  1854  0544                     l2287:	
  1855  0544  0827               	movf	(___lwdiv@quotient+1)^(0+128),w
  1856  0545  00A1               	movwf	(?___lwdiv+1)^(0+128)
  1857  0546  0826               	movf	___lwdiv@quotient^(0+128),w
  1858  0547  00A0               	movwf	?___lwdiv^(0+128)
  1859  0548  0008               	return
  1860  0549                     __end_of___lwdiv:	
  1861                           
  1862                           	psect	text4
  1863  06B6                     __ptext4:	
  1864 ;; *************** function _serial_init *****************
  1865 ;; Defined at:
  1866 ;;		line 29 in file "serial.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1880 ;;      Params:         0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0
  1883 ;;      Totals:         0       0       0       0       0
  1884 ;;Total ram usage:        0 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    3
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_main
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           
  1895                           ;psect for function _serial_init
  1896  06B6                     _serial_init:	
  1897                           
  1898                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _serial_init: [wreg]
  1902  06B6  3040               	movlw	64
  1903  06B7  1683               	bsf	3,5	;RP0=1, select bank1
  1904  06B8  1303               	bcf	3,6	;RP1=0, select bank1
  1905  06B9  0099               	movwf	25	;volatile
  1906                           
  1907                           ;serial.c: 66: BRGH=1;
  1908  06BA  1518               	bsf	24,2	;volatile
  1909                           
  1910                           ;serial.c: 67: SYNC=0;
  1911  06BB  1218               	bcf	24,4	;volatile
  1912                           
  1913                           ;serial.c: 68: SPEN=1;
  1914  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1915  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  1916  06BE  1798               	bsf	24,7	;volatile
  1917                           
  1918                           ;serial.c: 69: CREN=1;
  1919  06BF  1618               	bsf	24,4	;volatile
  1920                           
  1921                           ;serial.c: 70: SREN=0;
  1922  06C0  1298               	bcf	24,5	;volatile
  1923                           
  1924                           ;serial.c: 71: TXIE=0;
  1925  06C1  1683               	bsf	3,5	;RP0=1, select bank1
  1926  06C2  1303               	bcf	3,6	;RP1=0, select bank1
  1927  06C3  120C               	bcf	12,4	;volatile
  1928                           
  1929                           ;serial.c: 72: RCIE=0;
  1930  06C4  128C               	bcf	12,5	;volatile
  1931                           
  1932                           ;serial.c: 73: TX9=0;
  1933  06C5  1318               	bcf	24,6	;volatile
  1934                           
  1935                           ;serial.c: 74: RX9=0;
  1936  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1937  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1938  06C8  1318               	bcf	24,6	;volatile
  1939                           
  1940                           ;serial.c: 75: TXEN=0;
  1941  06C9  1683               	bsf	3,5	;RP0=1, select bank1
  1942  06CA  1303               	bcf	3,6	;RP1=0, select bank1
  1943  06CB  1298               	bcf	24,5	;volatile
  1944                           
  1945                           ;serial.c: 76: TXEN=1;
  1946  06CC  1698               	bsf	24,5	;volatile
  1947  06CD  0008               	return
  1948  06CE                     __end_of_serial_init:	
  1949                           
  1950                           	psect	text5
  1951  06E3                     __ptext5:	
  1952 ;; *************** function _resetCounter *****************
  1953 ;; Defined at:
  1954 ;;		line 104 in file "main.c"
  1955 ;; Parameters:    Size  Location     Type
  1956 ;;		None
  1957 ;; Auto vars:     Size  Location     Type
  1958 ;;		None
  1959 ;; Return value:  Size  Location     Type
  1960 ;;                  1    wreg      void 
  1961 ;; Registers used:
  1962 ;;		wreg
  1963 ;; Tracked objects:
  1964 ;;		On entry : 0/0
  1965 ;;		On exit  : 0/0
  1966 ;;		Unchanged: 0/0
  1967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1968 ;;      Params:         0       0       0       0       0
  1969 ;;      Locals:         0       0       0       0       0
  1970 ;;      Temps:          0       0       0       0       0
  1971 ;;      Totals:         0       0       0       0       0
  1972 ;;Total ram usage:        0 bytes
  1973 ;; Hardware stack levels used:    1
  1974 ;; Hardware stack levels required when called:    3
  1975 ;; This function calls:
  1976 ;;		Nothing
  1977 ;; This function is called by:
  1978 ;;		_main
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           
  1983                           ;psect for function _resetCounter
  1984  06E3                     _resetCounter:	
  1985                           
  1986                           ;main.c: 105: encoder1_counter = 0;
  1987                           
  1988                           ;incstack = 0
  1989                           ; Regs used in _resetCounter: [wreg]
  1990  06E3  3000               	movlw	0
  1991  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  1992  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  1993  06E6  00D0               	movwf	_encoder1_counter+3	;volatile
  1994  06E7  3000               	movlw	0
  1995  06E8  00CF               	movwf	_encoder1_counter+2	;volatile
  1996  06E9  3000               	movlw	0
  1997  06EA  00CE               	movwf	_encoder1_counter+1	;volatile
  1998  06EB  3000               	movlw	0
  1999  06EC  00CD               	movwf	_encoder1_counter	;volatile
  2000                           
  2001                           ;main.c: 106: motor_pos = 0;
  2002  06ED  3000               	movlw	0
  2003  06EE  00CC               	movwf	_motor_pos+3	;volatile
  2004  06EF  3000               	movlw	0
  2005  06F0  00CB               	movwf	_motor_pos+2	;volatile
  2006  06F1  3000               	movlw	0
  2007  06F2  00CA               	movwf	_motor_pos+1	;volatile
  2008  06F3  3000               	movlw	0
  2009  06F4  00C9               	movwf	_motor_pos	;volatile
  2010  06F5  0008               	return
  2011  06F6                     __end_of_resetCounter:	
  2012                           
  2013                           	psect	text6
  2014  05E7                     __ptext6:	
  2015 ;; *************** function _pwm_set *****************
  2016 ;; Defined at:
  2017 ;;		line 72 in file "pwm.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;  channel         2    0[BANK1 ] int 
  2020 ;;  duty_cycle      4    2[BANK1 ] long 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2032 ;;      Params:         0       0       6       0       0
  2033 ;;      Locals:         0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0
  2035 ;;      Totals:         0       0       6       0       0
  2036 ;;Total ram usage:        6 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    3
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           
  2047                           ;psect for function _pwm_set
  2048  05E7                     _pwm_set:	
  2049                           
  2050                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2051                           
  2052                           ;incstack = 0
  2053                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0]
  2054  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  2055  05E8  1303               	bcf	3,6	;RP1=0, select bank1
  2056  05E9  1BA5               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2057  05EA  0008               	return
  2058  05EB  1BA5               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2059  05EC  2E08               	goto	l2419
  2060  05ED  0825               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2061  05EE  1D03               	btfss	3,2
  2062  05EF  0008               	return
  2063  05F0  0824               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2064  05F1  1D03               	btfss	3,2
  2065  05F2  0008               	return
  2066  05F3  3001               	movlw	1
  2067  05F4  0223               	subwf	(pwm_set@duty_cycle+1)^(0+128),w
  2068  05F5  1D03               	skipz
  2069  05F6  2DFB               	goto	u2113
  2070  05F7  3000               	movlw	0
  2071  05F8  0222               	subwf	pwm_set@duty_cycle^(0+128),w
  2072  05F9  1D03               	skipz
  2073  05FA  2DFB               	goto	u2113
  2074  05FB                     u2113:	
  2075  05FB  1803               	btfsc	3,0
  2076  05FC  0008               	return
  2077  05FD  2E08               	goto	l2419
  2078  05FE                     l2413:	
  2079                           
  2080                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2081  05FE  0822               	movf	pwm_set@duty_cycle^(0+128),w
  2082  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0600  1303               	bcf	3,6	;RP1=0, select bank0
  2084  0601  0095               	movwf	21	;volatile
  2085                           
  2086                           ;pwm.c: 83: break;
  2087  0602  0008               	return
  2088  0603                     l2415:	
  2089                           
  2090                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2091  0603  0822               	movf	pwm_set@duty_cycle^(0+128),w
  2092  0604  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0605  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0606  009B               	movwf	27	;volatile
  2095                           
  2096                           ;pwm.c: 86: break;
  2097  0607  0008               	return
  2098  0608                     l2419:	
  2099                           
  2100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2101                           ; Switch size 1, requested type "simple"
  2102                           ; Number of cases is 1, Range of values is 0 to 0
  2103                           ; switch strategies available:
  2104                           ; Name         Instructions Cycles
  2105                           ; simple_byte            4     3 (average)
  2106                           ; direct_byte           11     8 (fixed)
  2107                           ; jumptable            260     6 (fixed)
  2108                           ;	Chosen strategy is simple_byte
  2109  0608  0821               	movf	(pwm_set@channel+1)^(0+128),w
  2110  0609  3A00               	xorlw	0	; case 0
  2111  060A  1903               	skipnz
  2112  060B  2E0D               	goto	l2647
  2113  060C  2E15               	goto	l181
  2114  060D                     l2647:	
  2115                           
  2116                           ; Switch size 1, requested type "simple"
  2117                           ; Number of cases is 2, Range of values is 1 to 2
  2118                           ; switch strategies available:
  2119                           ; Name         Instructions Cycles
  2120                           ; simple_byte            7     4 (average)
  2121                           ; direct_byte           17    11 (fixed)
  2122                           ; jumptable            263     9 (fixed)
  2123                           ;	Chosen strategy is simple_byte
  2124  060D  0820               	movf	pwm_set@channel^(0+128),w
  2125  060E  3A01               	xorlw	1	; case 1
  2126  060F  1903               	skipnz
  2127  0610  2DFE               	goto	l2413
  2128  0611  3A03               	xorlw	3	; case 2
  2129  0612  1903               	skipnz
  2130  0613  2E03               	goto	l2415
  2131  0614  2E15               	goto	l181
  2132  0615                     l181:	
  2133  0615  0008               	return
  2134  0616                     __end_of_pwm_set:	
  2135                           
  2136                           	psect	text7
  2137  0670                     __ptext7:	
  2138 ;; *************** function _pwm_init *****************
  2139 ;; Defined at:
  2140 ;;		line 25 in file "pwm.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;		None
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2154 ;;      Params:         0       0       0       0       0
  2155 ;;      Locals:         0       0       0       0       0
  2156 ;;      Temps:          0       0       0       0       0
  2157 ;;      Totals:         0       0       0       0       0
  2158 ;;Total ram usage:        0 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    3
  2161 ;; This function calls:
  2162 ;;		Nothing
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _pwm_init
  2170  0670                     _pwm_init:	
  2171                           
  2172                           ;pwm.c: 28: TRISC1 = 1;
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2176  0670  1683               	bsf	3,5	;RP0=1, select bank1
  2177  0671  1303               	bcf	3,6	;RP1=0, select bank1
  2178  0672  1487               	bsf	7,1	;volatile
  2179                           
  2180                           ;pwm.c: 29: TRISC2 = 1;
  2181  0673  1507               	bsf	7,2	;volatile
  2182                           
  2183                           ;pwm.c: 32: PR2 = 0xFF;
  2184  0674  30FF               	movlw	255
  2185  0675  0092               	movwf	18	;volatile
  2186                           
  2187                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  2188  0676  1283               	bcf	3,5	;RP0=0, select bank0
  2189  0677  1303               	bcf	3,6	;RP1=0, select bank0
  2190  0678  0817               	movf	23,w	;volatile
  2191  0679  39F0               	andlw	-16
  2192  067A  380C               	iorlw	12
  2193  067B  0097               	movwf	23	;volatile
  2194                           
  2195                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  2196  067C  081D               	movf	29,w	;volatile
  2197  067D  39F0               	andlw	-16
  2198  067E  380C               	iorlw	12
  2199  067F  009D               	movwf	29	;volatile
  2200                           
  2201                           ;pwm.c: 39: CCPR1L = 0;
  2202  0680  0195               	clrf	21	;volatile
  2203                           
  2204                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  2205  0681  30CF               	movlw	-49
  2206  0682  0597               	andwf	23,f	;volatile
  2207                           
  2208                           ;pwm.c: 41: CCPR2L = 0;
  2209  0683  019B               	clrf	27	;volatile
  2210                           
  2211                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  2212  0684  108C               	bcf	12,1	;volatile
  2213                           
  2214                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  2215  0685  30FC               	movlw	-4
  2216  0686  0592               	andwf	18,f	;volatile
  2217                           
  2218                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  2219  0687  1512               	bsf	18,2	;volatile
  2220  0688                     l170:	
  2221                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  2222                           
  2223  0688  1C8C               	btfss	12,1	;volatile
  2224  0689  2E88               	goto	l170
  2225                           
  2226                           ;pwm.c: 53: TRISC1 = 0;
  2227  068A  1683               	bsf	3,5	;RP0=1, select bank1
  2228  068B  1303               	bcf	3,6	;RP1=0, select bank1
  2229  068C  1087               	bcf	7,1	;volatile
  2230                           
  2231                           ;pwm.c: 54: TRISC2 = 0;
  2232  068D  1107               	bcf	7,2	;volatile
  2233                           
  2234                           ;pwm.c: 59: ANS4 = 0;
  2235  068E  1683               	bsf	3,5	;RP0=1, select bank3
  2236  068F  1703               	bsf	3,6	;RP1=1, select bank3
  2237  0690  1208               	bcf	8,4	;volatile
  2238                           
  2239                           ;pwm.c: 60: TRISA5 = 0;
  2240  0691  1683               	bsf	3,5	;RP0=1, select bank1
  2241  0692  1303               	bcf	3,6	;RP1=0, select bank1
  2242  0693  1285               	bcf	5,5	;volatile
  2243                           
  2244                           ;pwm.c: 61: TRISA6 = 0;
  2245  0694  1305               	bcf	5,6	;volatile
  2246                           
  2247                           ;pwm.c: 62: RA5 = 0;
  2248  0695  1283               	bcf	3,5	;RP0=0, select bank0
  2249  0696  1303               	bcf	3,6	;RP1=0, select bank0
  2250  0697  1285               	bcf	5,5	;volatile
  2251                           
  2252                           ;pwm.c: 63: RA6 = 0;
  2253  0698  1305               	bcf	5,6	;volatile
  2254  0699  0008               	return
  2255  069A                     __end_of_pwm_init:	
  2256                           
  2257                           	psect	text8
  2258  0549                     __ptext8:	
  2259 ;; *************** function _putst *****************
  2260 ;; Defined at:
  2261 ;;		line 211 in file "serial.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  str             1    wreg     PTR const unsigned char 
  2264 ;;		 -> main@sVar(10), 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  str             1    3[BANK1 ] PTR const unsigned char 
  2267 ;;		 -> main@sVar(10), 
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2277 ;;      Params:         0       0       0       0       0
  2278 ;;      Locals:         0       0       1       0       0
  2279 ;;      Temps:          0       0       1       0       0
  2280 ;;      Totals:         0       0       2       0       0
  2281 ;;Total ram usage:        2 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; Hardware stack levels required when called:    4
  2284 ;; This function calls:
  2285 ;;		_putch
  2286 ;; This function is called by:
  2287 ;;		_main
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           
  2292                           ;psect for function _putst
  2293  0549                     _putst:	
  2294                           
  2295                           ;incstack = 0
  2296                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2297                           ;putst@str stored from wreg
  2298  0549  1683               	bsf	3,5	;RP0=1, select bank1
  2299  054A  1303               	bcf	3,6	;RP1=0, select bank1
  2300  054B  00A3               	movwf	putst@str^(0+128)
  2301  054C                     l2385:	
  2302                           ;serial.c: 212: while((*str)!=0) {
  2303                           
  2304  054C  0823               	movf	putst@str^(0+128),w
  2305  054D  0084               	movwf	4
  2306  054E  1383               	bcf	3,7	;select IRP bank0
  2307  054F  0800               	movf	0,w
  2308  0550  1903               	btfsc	3,2
  2309  0551  0008               	return
  2310                           
  2311                           ;serial.c: 213: putch(*str);
  2312  0552  0823               	movf	putst@str^(0+128),w
  2313  0553  0084               	movwf	4
  2314  0554  0800               	movf	0,w
  2315  0555  120A  118A  25B3  120A  118A  	fcall	_putch
  2316                           
  2317                           ;serial.c: 214: if (*str==13) putch(10);
  2318  055A  1683               	bsf	3,5	;RP0=1, select bank1
  2319  055B  1303               	bcf	3,6	;RP1=0, select bank1
  2320  055C  0823               	movf	putst@str^(0+128),w
  2321  055D  0084               	movwf	4
  2322  055E  300D               	movlw	13
  2323  055F  1383               	bcf	3,7	;select IRP bank0
  2324  0560  0600               	xorwf	0,w
  2325  0561  1D03               	btfss	3,2
  2326  0562  2D69               	goto	l2379
  2327  0563  300A               	movlw	10
  2328  0564  120A  118A  25B3  120A  118A  	fcall	_putch
  2329  0569                     l2379:	
  2330                           
  2331                           ;serial.c: 215: if (*str==10) putch(13);
  2332  0569  1683               	bsf	3,5	;RP0=1, select bank1
  2333  056A  1303               	bcf	3,6	;RP1=0, select bank1
  2334  056B  0823               	movf	putst@str^(0+128),w
  2335  056C  0084               	movwf	4
  2336  056D  300A               	movlw	10
  2337  056E  1383               	bcf	3,7	;select IRP bank0
  2338  056F  0600               	xorwf	0,w
  2339  0570  1D03               	btfss	3,2
  2340  0571  2D78               	goto	l2383
  2341  0572  300D               	movlw	13
  2342  0573  120A  118A  25B3  120A  118A  	fcall	_putch
  2343  0578                     l2383:	
  2344                           
  2345                           ;serial.c: 216: str++;
  2346  0578  3001               	movlw	1
  2347  0579  1683               	bsf	3,5	;RP0=1, select bank1
  2348  057A  1303               	bcf	3,6	;RP1=0, select bank1
  2349  057B  00A2               	movwf	??_putst^(0+128)
  2350  057C  0822               	movf	??_putst^(0+128),w
  2351  057D  07A3               	addwf	putst@str^(0+128),f
  2352  057E  2D4C               	goto	l2385
  2353  057F                     __end_of_putst:	
  2354                           
  2355                           	psect	text9
  2356  05B3                     __ptext9:	
  2357 ;; *************** function _putch *****************
  2358 ;; Defined at:
  2359 ;;		line 95 in file "serial.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  c               1    wreg     unsigned char 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  c               1    1[BANK1 ] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         0       0       0       0       0
  2374 ;;      Locals:         0       0       1       0       0
  2375 ;;      Temps:          0       0       1       0       0
  2376 ;;      Totals:         0       0       2       0       0
  2377 ;;Total ram usage:        2 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    3
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_putst
  2384 ;;		_putchhex
  2385 ;;		_putchdec
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           
  2390                           ;psect for function _putch
  2391  05B3                     _putch:	
  2392                           
  2393                           ;incstack = 0
  2394                           ; Regs used in _putch: [wreg]
  2395                           ;putch@c stored from wreg
  2396  05B3  1683               	bsf	3,5	;RP0=1, select bank1
  2397  05B4  1303               	bcf	3,6	;RP1=0, select bank1
  2398  05B5  00A1               	movwf	putch@c^(0+128)
  2399  05B6                     l2261:	
  2400                           ;serial.c: 96: while(!TXIF) {
  2401                           
  2402  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2403  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2404  05B8  1A0C               	btfsc	12,4	;volatile
  2405  05B9  2DD4               	goto	l2263
  2406                           
  2407                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  2408  05BA  1C98               	btfss	24,1	;volatile
  2409  05BB  2DC4               	goto	l82
  2410  05BC  1683               	bsf	3,5	;RP0=1, select bank1
  2411  05BD  1303               	bcf	3,6	;RP1=0, select bank1
  2412  05BE  1298               	bcf	24,5	;volatile
  2413  05BF  1698               	bsf	24,5	;volatile
  2414  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  2415  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  2416  05C2  1218               	bcf	24,4	;volatile
  2417  05C3  1618               	bsf	24,4	;volatile
  2418  05C4                     l82:	
  2419  05C4  1D18               	btfss	24,2	;volatile
  2420  05C5  2DD2               	goto	l83
  2421  05C6  081A               	movf	26,w	;volatile
  2422  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  2423  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  2424  05C9  00A0               	movwf	??_putch^(0+128)
  2425  05CA  0820               	movf	??_putch^(0+128),w
  2426  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  2427  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  2428  05CD  00D8               	movwf	_dummy
  2429  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  2430  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  2431  05D0  1298               	bcf	24,5	;volatile
  2432  05D1  1698               	bsf	24,5	;volatile
  2433  05D2                     l83:	
  2434  05D2  0064               	clrwdt	;# 
  2435  05D3  2DB6               	goto	l2261
  2436  05D4                     l2263:	
  2437                           
  2438                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  2439  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  2440  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  2441  05D6  0821               	movf	putch@c^(0+128),w
  2442  05D7  1283               	bcf	3,5	;RP0=0, select bank0
  2443  05D8  1303               	bcf	3,6	;RP1=0, select bank0
  2444  05D9  0099               	movwf	25	;volatile
  2445                           
  2446                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  2447  05DA  303C               	movlw	60
  2448  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  2449  05DC  1303               	bcf	3,6	;RP1=0, select bank1
  2450  05DD  00A0               	movwf	??_putch^(0+128)
  2451  05DE  0820               	movf	??_putch^(0+128),w
  2452  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  2453  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  2454  05E1  00D9               	movwf	_delayus_variable
  2455  05E2  0000               	nop	;# 
  2456  05E3  0000               	nop	;# 
  2457  05E4  0BD9               	decfsz	_delayus_variable,f	;# 
  2458  05E5  2DB0               	goto	($+-3)	;# 
  2459  05E6  0008               	return
  2460  05E7                     __end_of_putch:	
  2461                           
  2462                           	psect	text10
  2463  069A                     __ptext10:	
  2464 ;; *************** function _encoders_init *****************
  2465 ;; Defined at:
  2466 ;;		line 189 in file "main.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2480 ;;      Params:         0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0
  2482 ;;      Temps:          0       0       2       0       0
  2483 ;;      Totals:         0       0       2       0       0
  2484 ;;Total ram usage:        2 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    3
  2487 ;; This function calls:
  2488 ;;		Nothing
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           
  2495                           ;psect for function _encoders_init
  2496  069A                     _encoders_init:	
  2497                           
  2498                           ;main.c: 192: state1 = (PORTB & 0b00011000) >>3;
  2499                           
  2500                           ;incstack = 0
  2501                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  2502  069A  1283               	bcf	3,5	;RP0=0, select bank0
  2503  069B  1303               	bcf	3,6	;RP1=0, select bank0
  2504  069C  0806               	movf	6,w	;volatile
  2505  069D  1683               	bsf	3,5	;RP0=1, select bank1
  2506  069E  1303               	bcf	3,6	;RP1=0, select bank1
  2507  069F  00A0               	movwf	??_encoders_init^(0+128)
  2508  06A0  3003               	movlw	3
  2509  06A1                     u2125:	
  2510  06A1  1003               	clrc
  2511  06A2  0CA0               	rrf	??_encoders_init^(0+128),f
  2512  06A3  3EFF               	addlw	-1
  2513  06A4  1D03               	skipz
  2514  06A5  2EA1               	goto	u2125
  2515  06A6  0820               	movf	??_encoders_init^(0+128),w
  2516  06A7  3903               	andlw	3
  2517  06A8  00A1               	movwf	(??_encoders_init+1)^(0+128)
  2518  06A9  0821               	movf	(??_encoders_init+1)^(0+128),w
  2519  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  2520  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  2521  06AC  00D7               	movwf	_state1	;volatile
  2522                           
  2523                           ;main.c: 193: encoder1_counter = 0;
  2524  06AD  3000               	movlw	0
  2525  06AE  00D0               	movwf	_encoder1_counter+3	;volatile
  2526  06AF  3000               	movlw	0
  2527  06B0  00CF               	movwf	_encoder1_counter+2	;volatile
  2528  06B1  3000               	movlw	0
  2529  06B2  00CE               	movwf	_encoder1_counter+1	;volatile
  2530  06B3  3000               	movlw	0
  2531  06B4  00CD               	movwf	_encoder1_counter	;volatile
  2532  06B5  0008               	return
  2533  06B6                     __end_of_encoders_init:	
  2534                           
  2535                           	psect	text11
  2536  0710                     __ptext11:	
  2537 ;; *************** function _chkchr *****************
  2538 ;; Defined at:
  2539 ;;		line 142 in file "serial.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;		None
  2544 ;; Return value:  Size  Location     Type
  2545 ;;                  1    wreg      unsigned char 
  2546 ;; Registers used:
  2547 ;;		wreg
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2553 ;;      Params:         0       0       0       0       0
  2554 ;;      Locals:         0       0       0       0       0
  2555 ;;      Temps:          0       0       0       0       0
  2556 ;;      Totals:         0       0       0       0       0
  2557 ;;Total ram usage:        0 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    3
  2560 ;; This function calls:
  2561 ;;		Nothing
  2562 ;; This function is called by:
  2563 ;;		_main
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _chkchr
  2569  0710                     _chkchr:	
  2570                           
  2571                           ;serial.c: 143: if (RCIF) {
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in _chkchr: [wreg]
  2575  0710  1283               	bcf	3,5	;RP0=0, select bank0
  2576  0711  1303               	bcf	3,6	;RP1=0, select bank0
  2577  0712  1E8C               	btfss	12,5	;volatile
  2578  0713  2F16               	goto	l2343
  2579                           
  2580                           ;serial.c: 144: return RCREG;
  2581  0714  081A               	movf	26,w	;volatile
  2582  0715  0008               	return
  2583  0716                     l2343:	
  2584                           
  2585                           ;serial.c: 145: };serial.c: 146: return 255;
  2586  0716  30FF               	movlw	255
  2587  0717  0008               	return
  2588  0718                     __end_of_chkchr:	
  2589                           
  2590                           	psect	text12
  2591  06F6                     __ptext12:	
  2592 ;; *************** function _SetPoint *****************
  2593 ;; Defined at:
  2594 ;;		line 100 in file "main.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  new_val         2    0[BANK1 ] int 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;		None
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2608 ;;      Params:         0       0       2       0       0
  2609 ;;      Locals:         0       0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0
  2611 ;;      Totals:         0       0       2       0       0
  2612 ;;Total ram usage:        2 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    3
  2615 ;; This function calls:
  2616 ;;		Nothing
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           
  2623                           ;psect for function _SetPoint
  2624  06F6                     _SetPoint:	
  2625                           
  2626                           ;main.c: 101: set_point = new_val;
  2627                           
  2628                           ;incstack = 0
  2629                           ; Regs used in _SetPoint: [wreg]
  2630  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  2631  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  2632  06F8  0820               	movf	SetPoint@new_val^(0+128),w
  2633  06F9  1283               	bcf	3,5	;RP0=0, select bank0
  2634  06FA  1303               	bcf	3,6	;RP1=0, select bank0
  2635  06FB  00C5               	movwf	_set_point	;volatile
  2636  06FC  1683               	bsf	3,5	;RP0=1, select bank1
  2637  06FD  1303               	bcf	3,6	;RP1=0, select bank1
  2638  06FE  0821               	movf	(SetPoint@new_val+1)^(0+128),w
  2639  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  2640  0700  1303               	bcf	3,6	;RP1=0, select bank0
  2641  0701  00C6               	movwf	_set_point+1	;volatile
  2642  0702  3000               	movlw	0
  2643  0703  1BC6               	btfsc	_set_point+1,7	;volatile
  2644  0704  30FF               	movlw	255
  2645  0705  00C7               	movwf	_set_point+2	;volatile
  2646  0706  00C8               	movwf	_set_point+3	;volatile
  2647  0707  0008               	return
  2648  0708                     __end_of_SetPoint:	
  2649                           
  2650                           	psect	text13
  2651  0278                     __ptext13:	
  2652 ;; *************** function _isr *****************
  2653 ;; Defined at:
  2654 ;;		line 111 in file "main.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  portB           1   32[BANK0 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2668 ;;      Params:         0       0       0       0       0
  2669 ;;      Locals:         0       1       0       0       0
  2670 ;;      Temps:          0       6       0       0       0
  2671 ;;      Totals:         0       7       0       0       0
  2672 ;;Total ram usage:        7 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    2
  2675 ;; This function calls:
  2676 ;;		_SetMotor
  2677 ;; This function is called by:
  2678 ;;		Interrupt level 1
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function _isr
  2684  0278                     _isr:	
  2685                           
  2686                           ;main.c: 112: static int tick;;main.c: 116: if (T0IE && T0IF) {
  2687  0278  1A8B               	btfsc	11,5	;volatile
  2688  0279  1D0B               	btfss	11,2	;volatile
  2689  027A  2AB4               	goto	i1l2057
  2690                           
  2691                           ;main.c: 118: SetMotor();
  2692  027B  120A  118A  217D  120A  118A  	fcall	_SetMotor
  2693                           
  2694                           ;main.c: 119: if (sampling){
  2695  0280  1283               	bcf	3,5	;RP0=0, select bank0
  2696  0281  1303               	bcf	3,6	;RP1=0, select bank0
  2697  0282  0855               	movf	_sampling,w	;volatile
  2698  0283  1903               	btfsc	3,2
  2699  0284  2AB1               	goto	i1l2053
  2700                           
  2701                           ;main.c: 120: if (samples < 140/2){
  2702  0285  0854               	movf	_samples+1,w	;volatile
  2703  0286  3A80               	xorlw	128
  2704  0287  00FF               	movwf	127
  2705  0288  3080               	movlw	128
  2706  0289  027F               	subwf	127,w
  2707  028A  1D03               	skipz
  2708  028B  2A8E               	goto	u170_25
  2709  028C  3046               	movlw	70
  2710  028D  0253               	subwf	_samples,w	;volatile
  2711  028E                     u170_25:	
  2712  028E  1803               	skipnc
  2713  028F  2A98               	goto	i1l2047
  2714                           
  2715                           ;main.c: 121: pos_log1[samples] = motor_pos-last_pos;
  2716  0290  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0291  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0292  0841               	movf	_last_pos,w	;volatile
  2719  0293  0249               	subwf	_motor_pos,w	;volatile
  2720  0294  00BA               	movwf	??_isr
  2721  0295  0853               	movf	_samples,w	;volatile
  2722  0296  3E90               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  2723  0297  2A9F               	goto	L1
  2724  0298                     i1l2047:	
  2725                           ;main.c: 122: }else{
  2726                           
  2727                           
  2728                           ;main.c: 123: pos_log2[samples-(140/2)] = motor_pos-last_pos;
  2729  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2730  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2731  029A  0841               	movf	_last_pos,w	;volatile
  2732  029B  0249               	subwf	_motor_pos,w	;volatile
  2733  029C  00BA               	movwf	??_isr
  2734  029D  0853               	movf	_samples,w	;volatile
  2735  029E  3ECA               	addlw	(low ((_pos_log2| (0+256)+186)))& (0+255)
  2736  029F                     L1:	
  2737  029F  0084               	movwf	4
  2738  02A0  083A               	movf	??_isr,w
  2739  02A1  1783               	bsf	3,7	;select IRP bank2
  2740  02A2  0080               	movwf	0
  2741                           
  2742                           ;main.c: 124: };main.c: 125: last_pos = motor_pos;
  2743  02A3  084C               	movf	_motor_pos+3,w	;volatile
  2744  02A4  00C4               	movwf	_last_pos+3	;volatile
  2745  02A5  084B               	movf	_motor_pos+2,w	;volatile
  2746  02A6  00C3               	movwf	_last_pos+2	;volatile
  2747  02A7  084A               	movf	_motor_pos+1,w	;volatile
  2748  02A8  00C2               	movwf	_last_pos+1	;volatile
  2749  02A9  0849               	movf	_motor_pos,w	;volatile
  2750  02AA  00C1               	movwf	_last_pos	;volatile
  2751                           
  2752                           ;main.c: 126: samples++;
  2753  02AB  3001               	movlw	1
  2754  02AC  07D3               	addwf	_samples,f	;volatile
  2755  02AD  1803               	skipnc
  2756  02AE  0AD4               	incf	_samples+1,f	;volatile
  2757  02AF  3000               	movlw	0
  2758  02B0  07D4               	addwf	_samples+1,f	;volatile
  2759  02B1                     i1l2053:	
  2760                           
  2761                           ;main.c: 127: };main.c: 129: TMR0 = (0xff - 195);
  2762  02B1  303C               	movlw	60
  2763  02B2  0081               	movwf	1	;volatile
  2764                           
  2765                           ;main.c: 130: T0IF = 0;
  2766  02B3  110B               	bcf	11,2	;volatile
  2767  02B4                     i1l2057:	
  2768                           
  2769                           ;main.c: 131: };main.c: 134: if (RBIE && RBIF) {
  2770  02B4  198B               	btfsc	11,3	;volatile
  2771  02B5  1C0B               	btfss	11,0	;volatile
  2772  02B6  2B60               	goto	i1l320
  2773                           
  2774                           ;main.c: 135: char portB = PORTB;
  2775  02B7  0806               	movf	6,w	;volatile
  2776  02B8  00BA               	movwf	??_isr
  2777  02B9  083A               	movf	??_isr,w
  2778  02BA  00C0               	movwf	isr@portB
  2779                           
  2780                           ;main.c: 137: ab1 = (portB & 0b00011000) >>3;
  2781  02BB  0840               	movf	isr@portB,w
  2782  02BC  00BA               	movwf	??_isr
  2783  02BD  3003               	movlw	3
  2784  02BE                     u173_25:	
  2785  02BE  1003               	clrc
  2786  02BF  0CBA               	rrf	??_isr,f
  2787  02C0  3EFF               	addlw	-1
  2788  02C1  1D03               	skipz
  2789  02C2  2ABE               	goto	u173_25
  2790  02C3  083A               	movf	??_isr,w
  2791  02C4  3903               	andlw	3
  2792  02C5  00BB               	movwf	??_isr+1
  2793  02C6  083B               	movf	??_isr+1,w
  2794  02C7  00D6               	movwf	_ab1	;volatile
  2795                           
  2796                           ;main.c: 138: switch(state1)
  2797  02C8  2B42               	goto	i1l2103
  2798  02C9                     i1l2065:	
  2799                           
  2800                           ;main.c: 141: if(ab1 == 1){
  2801  02C9  0356               	decf	_ab1,w	;volatile
  2802  02CA  1D03               	btfss	3,2
  2803  02CB  2ACE               	goto	i1l2069
  2804                           
  2805                           ;main.c: 142: state1 = 1;
  2806  02CC  3001               	movlw	1
  2807  02CD  2AEE               	goto	L2
  2808  02CE                     i1l2069:	
  2809                           ;main.c: 144: }
  2810                           
  2811                           ;main.c: 143: encoder1_counter--;
  2812                           
  2813                           
  2814                           ;main.c: 145: else if(ab1 == 2){
  2815  02CE  3002               	movlw	2
  2816  02CF  0656               	xorwf	_ab1,w	;volatile
  2817  02D0  1D03               	btfss	3,2
  2818  02D1  2B50               	goto	i1l2105
  2819                           
  2820                           ;main.c: 146: state1 = 2;
  2821  02D2  3002               	movlw	2
  2822  02D3  00BA               	movwf	??_isr
  2823  02D4  083A               	movf	??_isr,w
  2824  02D5  00D7               	movwf	_state1	;volatile
  2825  02D6  2ADB               	goto	i1l2077
  2826  02D7                     i1l2073:	
  2827                           ;main.c: 147: encoder1_counter++;
  2828                           
  2829                           
  2830                           ;main.c: 151: if(ab1 == 0){
  2831  02D7  0856               	movf	_ab1,w	;volatile
  2832  02D8  1D03               	btfss	3,2
  2833  02D9  2AE9               	goto	i1l2079
  2834                           
  2835                           ;main.c: 152: state1 = 0;
  2836  02DA  01D7               	clrf	_state1	;volatile
  2837  02DB                     i1l2077:	
  2838                           
  2839                           ;main.c: 153: encoder1_counter++;
  2840  02DB  3001               	movlw	1
  2841  02DC  07CD               	addwf	_encoder1_counter,f	;volatile
  2842  02DD  3000               	movlw	0
  2843  02DE  1803               	skipnc
  2844  02DF  3001               	movlw	1
  2845  02E0  07CE               	addwf	_encoder1_counter+1,f	;volatile
  2846  02E1  3000               	movlw	0
  2847  02E2  1803               	skipnc
  2848  02E3  3001               	movlw	1
  2849  02E4  07CF               	addwf	_encoder1_counter+2,f	;volatile
  2850  02E5  3000               	movlw	0
  2851  02E6  1803               	skipnc
  2852  02E7  3001               	movlw	1
  2853  02E8  2AFB               	goto	L3
  2854  02E9                     i1l2079:	
  2855                           ;main.c: 154: }
  2856                           
  2857                           
  2858                           ;main.c: 155: else if (ab1 == 3){
  2859  02E9  3003               	movlw	3
  2860  02EA  0656               	xorwf	_ab1,w	;volatile
  2861  02EB  1D03               	btfss	3,2
  2862  02EC  2B50               	goto	i1l2105
  2863                           
  2864                           ;main.c: 156: state1 = 3;
  2865  02ED  3003               	movlw	3
  2866  02EE                     L2:	
  2867  02EE  00BA               	movwf	??_isr
  2868  02EF  083A               	movf	??_isr,w
  2869  02F0  00D7               	movwf	_state1	;volatile
  2870                           
  2871                           ;main.c: 157: encoder1_counter--;
  2872  02F1  30FF               	movlw	255
  2873  02F2  07CD               	addwf	_encoder1_counter,f	;volatile
  2874  02F3  30FF               	movlw	255
  2875  02F4  1C03               	skipc
  2876  02F5  07CE               	addwf	_encoder1_counter+1,f	;volatile
  2877  02F6  30FF               	movlw	255
  2878  02F7  1C03               	skipc
  2879  02F8  07CF               	addwf	_encoder1_counter+2,f	;volatile
  2880  02F9  30FF               	movlw	255
  2881  02FA  1C03               	skipc
  2882  02FB                     L3:	
  2883  02FB  07D0               	addwf	_encoder1_counter+3,f	;volatile
  2884  02FC  2B50               	goto	i1l2105
  2885  02FD                     i1l2083:	
  2886                           
  2887                           ;main.c: 161: if(ab1 == 0){
  2888  02FD  0856               	movf	_ab1,w	;volatile
  2889  02FE  1D03               	btfss	3,2
  2890  02FF  2B02               	goto	i1l2089
  2891                           
  2892                           ;main.c: 162: state1 = 0;
  2893  0300  01D7               	clrf	_state1	;volatile
  2894  0301  2B20               	goto	L4
  2895  0302                     i1l2089:	
  2896                           ;main.c: 164: }
  2897                           
  2898                           ;main.c: 163: encoder1_counter--;
  2899                           
  2900                           
  2901                           ;main.c: 165: else if(ab1 == 3){
  2902  0302  3003               	movlw	3
  2903  0303  0656               	xorwf	_ab1,w	;volatile
  2904  0304  1D03               	btfss	3,2
  2905  0305  2B50               	goto	i1l2105
  2906                           
  2907                           ;main.c: 166: state1 = 3;
  2908  0306  3003               	movlw	3
  2909  0307  00BA               	movwf	??_isr
  2910  0308  083A               	movf	??_isr,w
  2911  0309  00D7               	movwf	_state1	;volatile
  2912                           
  2913                           ;main.c: 167: encoder1_counter++;
  2914  030A  3001               	movlw	1
  2915  030B  07CD               	addwf	_encoder1_counter,f	;volatile
  2916  030C  3000               	movlw	0
  2917  030D  1803               	skipnc
  2918  030E  3001               	movlw	1
  2919  030F  07CE               	addwf	_encoder1_counter+1,f	;volatile
  2920  0310  3000               	movlw	0
  2921  0311  1803               	skipnc
  2922  0312  3001               	movlw	1
  2923  0313  07CF               	addwf	_encoder1_counter+2,f	;volatile
  2924  0314  3000               	movlw	0
  2925  0315  1803               	skipnc
  2926  0316  3001               	movlw	1
  2927  0317  2B2A               	goto	L5
  2928  0318                     i1l2093:	
  2929                           
  2930                           ;main.c: 171: if(ab1 == 2){
  2931  0318  3002               	movlw	2
  2932  0319  0656               	xorwf	_ab1,w	;volatile
  2933  031A  1D03               	btfss	3,2
  2934  031B  2B2C               	goto	i1l2097
  2935                           
  2936                           ;main.c: 172: state1 = 2;
  2937  031C  3002               	movlw	2
  2938  031D  00BA               	movwf	??_isr
  2939  031E  083A               	movf	??_isr,w
  2940  031F  00D7               	movwf	_state1	;volatile
  2941  0320                     L4:	
  2942                           
  2943                           ;main.c: 173: encoder1_counter--;
  2944  0320  30FF               	movlw	255
  2945  0321  07CD               	addwf	_encoder1_counter,f	;volatile
  2946  0322  30FF               	movlw	255
  2947  0323  1C03               	skipc
  2948  0324  07CE               	addwf	_encoder1_counter+1,f	;volatile
  2949  0325  30FF               	movlw	255
  2950  0326  1C03               	skipc
  2951  0327  07CF               	addwf	_encoder1_counter+2,f	;volatile
  2952  0328  30FF               	movlw	255
  2953  0329  1C03               	skipc
  2954  032A                     L5:	
  2955  032A  07D0               	addwf	_encoder1_counter+3,f	;volatile
  2956                           
  2957                           ;main.c: 174: }
  2958  032B  2B50               	goto	i1l2105
  2959  032C                     i1l2097:	
  2960                           
  2961                           ;main.c: 175: else if (ab1 == 1){
  2962  032C  0356               	decf	_ab1,w	;volatile
  2963  032D  1D03               	btfss	3,2
  2964  032E  2B50               	goto	i1l2105
  2965                           
  2966                           ;main.c: 176: state1 = 1;
  2967  032F  3001               	movlw	1
  2968  0330  00BA               	movwf	??_isr
  2969  0331  083A               	movf	??_isr,w
  2970  0332  00D7               	movwf	_state1	;volatile
  2971                           
  2972                           ;main.c: 177: encoder1_counter++;
  2973  0333  3001               	movlw	1
  2974  0334  07CD               	addwf	_encoder1_counter,f	;volatile
  2975  0335  3000               	movlw	0
  2976  0336  1803               	skipnc
  2977  0337  3001               	movlw	1
  2978  0338  07CE               	addwf	_encoder1_counter+1,f	;volatile
  2979  0339  3000               	movlw	0
  2980  033A  1803               	skipnc
  2981  033B  3001               	movlw	1
  2982  033C  07CF               	addwf	_encoder1_counter+2,f	;volatile
  2983  033D  3000               	movlw	0
  2984  033E  1803               	skipnc
  2985  033F  3001               	movlw	1
  2986  0340  07D0               	addwf	_encoder1_counter+3,f	;volatile
  2987  0341  2B50               	goto	i1l2105
  2988  0342                     i1l2103:	
  2989  0342  0857               	movf	_state1,w	;volatile
  2990                           
  2991                           ; Switch size 1, requested type "simple"
  2992                           ; Number of cases is 4, Range of values is 0 to 3
  2993                           ; switch strategies available:
  2994                           ; Name         Instructions Cycles
  2995                           ; simple_byte           13     7 (average)
  2996                           ; direct_byte           20     8 (fixed)
  2997                           ; jumptable            260     6 (fixed)
  2998                           ;	Chosen strategy is simple_byte
  2999  0343  3A00               	xorlw	0	; case 0
  3000  0344  1903               	skipnz
  3001  0345  2AC9               	goto	i1l2065
  3002  0346  3A01               	xorlw	1	; case 1
  3003  0347  1903               	skipnz
  3004  0348  2AD7               	goto	i1l2073
  3005  0349  3A03               	xorlw	3	; case 2
  3006  034A  1903               	skipnz
  3007  034B  2AFD               	goto	i1l2083
  3008  034C  3A01               	xorlw	1	; case 3
  3009  034D  1903               	skipnz
  3010  034E  2B18               	goto	i1l2093
  3011  034F  2B50               	goto	i1l2105
  3012  0350                     i1l2105:	
  3013                           
  3014                           ;main.c: 182: motor_pos = -encoder1_counter;
  3015  0350  094D               	comf	_encoder1_counter,w	;volatile
  3016  0351  00C9               	movwf	_motor_pos	;volatile
  3017  0352  094E               	comf	_encoder1_counter+1,w	;volatile
  3018  0353  00CA               	movwf	_motor_pos+1	;volatile
  3019  0354  094F               	comf	_encoder1_counter+2,w	;volatile
  3020  0355  00CB               	movwf	_motor_pos+2	;volatile
  3021  0356  0950               	comf	_encoder1_counter+3,w	;volatile
  3022  0357  00CC               	movwf	_motor_pos+3	;volatile
  3023  0358  0AC9               	incf	_motor_pos,f	;volatile
  3024  0359  1903               	skipnz
  3025  035A  0ACA               	incf	_motor_pos+1,f	;volatile
  3026  035B  1903               	skipnz
  3027  035C  0ACB               	incf	_motor_pos+2,f	;volatile
  3028  035D  1903               	skipnz
  3029  035E  0ACC               	incf	_motor_pos+3,f	;volatile
  3030                           
  3031                           ;main.c: 183: RBIF = 0;
  3032  035F  100B               	bcf	11,0	;volatile
  3033  0360                     i1l320:	
  3034  0360  083F               	movf	??_isr+5,w
  3035  0361  00FF               	movwf	127
  3036  0362  083E               	movf	??_isr+4,w
  3037  0363  008A               	movwf	10
  3038  0364  083D               	movf	??_isr+3,w
  3039  0365  0084               	movwf	4
  3040  0366  0E3C               	swapf	(??_isr+2)^0,w
  3041  0367  0083               	movwf	3
  3042  0368  0EFE               	swapf	126,f
  3043  0369  0E7E               	swapf	126,w
  3044  036A  0009               	retfie
  3045  036B                     __end_of_isr:	
  3046                           
  3047                           	psect	intentry
  3048  0004                     __pintentry:	
  3049                           ;incstack = 0
  3050                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3051                           
  3052  0004                     interrupt_function:	
  3053  007E                     saved_w	set	btemp
  3054  0004  00FE               	movwf	btemp
  3055  0005  0E03               	swapf	3,w
  3056  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3057  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3058  0008  00BC               	movwf	??_isr+2
  3059  0009  0804               	movf	4,w
  3060  000A  00BD               	movwf	??_isr+3
  3061  000B  080A               	movf	10,w
  3062  000C  00BE               	movwf	??_isr+4
  3063  000D  087F               	movf	btemp+1,w
  3064  000E  00BF               	movwf	??_isr+5
  3065  000F  120A  118A  2A78   	ljmp	_isr
  3066                           
  3067                           	psect	text14
  3068  017D                     __ptext14:	
  3069 ;; *************** function _SetMotor *****************
  3070 ;; Defined at:
  3071 ;;		line 83 in file "main.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  resp            4   22[BANK0 ] long 
  3076 ;;  err             4   18[BANK0 ] long 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3086 ;;      Params:         0       0       0       0       0
  3087 ;;      Locals:         0       8       0       0       0
  3088 ;;      Temps:          0       4       0       0       0
  3089 ;;      Totals:         0      12       0       0       0
  3090 ;;Total ram usage:       12 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    1
  3093 ;; This function calls:
  3094 ;;		___aldiv
  3095 ;;		___lmul
  3096 ;;		_constrain
  3097 ;;		i1_pwm_set
  3098 ;; This function is called by:
  3099 ;;		_isr
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           
  3104                           ;psect for function _SetMotor
  3105  017D                     _SetMotor:	
  3106                           
  3107                           ;main.c: 84: long err = set_point - motor_pos;
  3108                           
  3109                           ;incstack = 0
  3110                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3111  017D  1283               	bcf	3,5	;RP0=0, select bank0
  3112  017E  1303               	bcf	3,6	;RP1=0, select bank0
  3113  017F  0845               	movf	_set_point,w	;volatile
  3114  0180  00AE               	movwf	??_SetMotor
  3115  0181  0846               	movf	_set_point+1,w	;volatile
  3116  0182  00AF               	movwf	??_SetMotor+1
  3117  0183  0847               	movf	_set_point+2,w	;volatile
  3118  0184  00B0               	movwf	??_SetMotor+2
  3119  0185  0848               	movf	_set_point+3,w	;volatile
  3120  0186  00B1               	movwf	??_SetMotor+3
  3121  0187  0849               	movf	_motor_pos,w	;volatile
  3122  0188  02AE               	subwf	??_SetMotor,f
  3123  0189  084A               	movf	_motor_pos+1,w	;volatile
  3124  018A  1C03               	skipc
  3125  018B  0F4A               	incfsz	_motor_pos+1,w	;volatile
  3126  018C  298E               	goto	u141_21
  3127  018D  298F               	goto	u141_22
  3128  018E                     u141_21:	
  3129  018E  02AF               	subwf	??_SetMotor+1,f
  3130  018F                     u141_22:	
  3131  018F  084B               	movf	_motor_pos+2,w	;volatile
  3132  0190  1C03               	skipc
  3133  0191  0F4B               	incfsz	_motor_pos+2,w	;volatile
  3134  0192  2994               	goto	u141_23
  3135  0193  2995               	goto	u141_24
  3136  0194                     u141_23:	
  3137  0194  02B0               	subwf	??_SetMotor+2,f
  3138  0195                     u141_24:	
  3139  0195  084C               	movf	_motor_pos+3,w	;volatile
  3140  0196  1C03               	skipc
  3141  0197  0F4C               	incfsz	_motor_pos+3,w	;volatile
  3142  0198  299A               	goto	u141_25
  3143  0199  299B               	goto	u141_26
  3144  019A                     u141_25:	
  3145  019A  02B1               	subwf	??_SetMotor+3,f
  3146  019B                     u141_26:	
  3147  019B  0831               	movf	??_SetMotor+3,w
  3148  019C  00B5               	movwf	SetMotor@err+3
  3149  019D  0830               	movf	??_SetMotor+2,w
  3150  019E  00B4               	movwf	SetMotor@err+2
  3151  019F  082F               	movf	??_SetMotor+1,w
  3152  01A0  00B3               	movwf	SetMotor@err+1
  3153  01A1  082E               	movf	??_SetMotor,w
  3154  01A2  00B2               	movwf	SetMotor@err
  3155                           
  3156                           ;main.c: 85: long resp = (err * Kp)/306;
  3157  01A3  3000               	movlw	0
  3158  01A4  00A3               	movwf	___aldiv@divisor+3
  3159  01A5  3000               	movlw	0
  3160  01A6  00A2               	movwf	___aldiv@divisor+2
  3161  01A7  3001               	movlw	1
  3162  01A8  00A1               	movwf	___aldiv@divisor+1
  3163  01A9  3032               	movlw	50
  3164  01AA  00A0               	movwf	___aldiv@divisor
  3165  01AB  085A               	movf	_Kp,w
  3166  01AC  00F0               	movwf	___lmul@multiplier
  3167  01AD  085B               	movf	_Kp+1,w
  3168  01AE  00F1               	movwf	___lmul@multiplier+1
  3169  01AF  3000               	movlw	0
  3170  01B0  1BF1               	btfsc	___lmul@multiplier+1,7
  3171  01B1  30FF               	movlw	255
  3172  01B2  00F2               	movwf	___lmul@multiplier+2
  3173  01B3  00F3               	movwf	___lmul@multiplier+3
  3174  01B4  0835               	movf	SetMotor@err+3,w
  3175  01B5  00F7               	movwf	___lmul@multiplicand+3
  3176  01B6  0834               	movf	SetMotor@err+2,w
  3177  01B7  00F6               	movwf	___lmul@multiplicand+2
  3178  01B8  0833               	movf	SetMotor@err+1,w
  3179  01B9  00F5               	movwf	___lmul@multiplicand+1
  3180  01BA  0832               	movf	SetMotor@err,w
  3181  01BB  00F4               	movwf	___lmul@multiplicand
  3182  01BC  120A  118A  24CC  120A  118A  	fcall	___lmul
  3183  01C1  0873               	movf	?___lmul+3,w
  3184  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3185  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3186  01C4  00A7               	movwf	___aldiv@dividend+3
  3187  01C5  0872               	movf	?___lmul+2,w
  3188  01C6  00A6               	movwf	___aldiv@dividend+2
  3189  01C7  0871               	movf	?___lmul+1,w
  3190  01C8  00A5               	movwf	___aldiv@dividend+1
  3191  01C9  0870               	movf	?___lmul,w
  3192  01CA  00A4               	movwf	___aldiv@dividend
  3193  01CB  120A  118A  243D  120A  118A  	fcall	___aldiv
  3194  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  3195  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  3196  01D2  0823               	movf	?___aldiv+3,w
  3197  01D3  00B9               	movwf	SetMotor@resp+3
  3198  01D4  0822               	movf	?___aldiv+2,w
  3199  01D5  00B8               	movwf	SetMotor@resp+2
  3200  01D6  0821               	movf	?___aldiv+1,w
  3201  01D7  00B7               	movwf	SetMotor@resp+1
  3202  01D8  0820               	movf	?___aldiv,w
  3203  01D9  00B6               	movwf	SetMotor@resp
  3204                           
  3205                           ;main.c: 87: constrain(resp, -255,255 );
  3206  01DA  0839               	movf	SetMotor@resp+3,w
  3207  01DB  00F3               	movwf	constrain@value+3
  3208  01DC  0838               	movf	SetMotor@resp+2,w
  3209  01DD  00F2               	movwf	constrain@value+2
  3210  01DE  0837               	movf	SetMotor@resp+1,w
  3211  01DF  00F1               	movwf	constrain@value+1
  3212  01E0  0836               	movf	SetMotor@resp,w
  3213  01E1  00F0               	movwf	constrain@value
  3214  01E2  30FF               	movlw	255
  3215  01E3  00F7               	movwf	constrain@lLimit+3
  3216  01E4  30FF               	movlw	255
  3217  01E5  00F6               	movwf	constrain@lLimit+2
  3218  01E6  30FF               	movlw	255
  3219  01E7  00F5               	movwf	constrain@lLimit+1
  3220  01E8  3001               	movlw	1
  3221  01E9  00F4               	movwf	constrain@lLimit
  3222  01EA  3000               	movlw	0
  3223  01EB  00FB               	movwf	constrain@uLimit+3
  3224  01EC  3000               	movlw	0
  3225  01ED  00FA               	movwf	constrain@uLimit+2
  3226  01EE  3000               	movlw	0
  3227  01EF  00F9               	movwf	constrain@uLimit+1
  3228  01F0  30FF               	movlw	255
  3229  01F1  00F8               	movwf	constrain@uLimit
  3230  01F2  120A  118A  26CE  120A  118A  	fcall	_constrain
  3231                           
  3232                           ;main.c: 88: if (resp > 0){
  3233  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3234  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  3235  01F9  1BB9               	btfsc	SetMotor@resp+3,7
  3236  01FA  2A2B               	goto	i1l280
  3237  01FB  0839               	movf	SetMotor@resp+3,w
  3238  01FC  1D03               	btfss	3,2
  3239  01FD  2A0A               	goto	i1l1893
  3240  01FE  0838               	movf	SetMotor@resp+2,w
  3241  01FF  1D03               	btfss	3,2
  3242  0200  2A0A               	goto	i1l1893
  3243  0201  0837               	movf	SetMotor@resp+1,w
  3244  0202  1D03               	btfss	3,2
  3245  0203  2A0A               	goto	i1l1893
  3246  0204  3001               	movlw	1
  3247  0205  0236               	subwf	SetMotor@resp,w
  3248  0206  1D03               	skipz
  3249  0207  2A08               	goto	u142_23
  3250  0208                     u142_23:	
  3251  0208  1C03               	btfss	3,0
  3252  0209  2A2B               	goto	i1l280
  3253  020A                     i1l1893:	
  3254                           
  3255                           ;main.c: 89: pwm_set(1, resp );
  3256  020A  3001               	movlw	1
  3257  020B  00F0               	movwf	i1pwm_set@channel
  3258  020C  3000               	movlw	0
  3259  020D  00F1               	movwf	i1pwm_set@channel+1
  3260  020E  0839               	movf	SetMotor@resp+3,w
  3261  020F  00F5               	movwf	i1pwm_set@duty_cycle+3
  3262  0210  0838               	movf	SetMotor@resp+2,w
  3263  0211  00F4               	movwf	i1pwm_set@duty_cycle+2
  3264  0212  0837               	movf	SetMotor@resp+1,w
  3265  0213  00F3               	movwf	i1pwm_set@duty_cycle+1
  3266  0214  0836               	movf	SetMotor@resp,w
  3267  0215  00F2               	movwf	i1pwm_set@duty_cycle
  3268  0216  120A  118A  2643  120A  118A  	fcall	i1_pwm_set
  3269                           
  3270                           ;main.c: 90: pwm_set(2, 0 );
  3271  021B  3002               	movlw	2
  3272  021C  00F0               	movwf	i1pwm_set@channel
  3273  021D  3000               	movlw	0
  3274  021E  00F1               	movwf	i1pwm_set@channel+1
  3275  021F  3000               	movlw	0
  3276  0220  00F5               	movwf	i1pwm_set@duty_cycle+3
  3277  0221  3000               	movlw	0
  3278  0222  00F4               	movwf	i1pwm_set@duty_cycle+2
  3279  0223  3000               	movlw	0
  3280  0224  00F3               	movwf	i1pwm_set@duty_cycle+1
  3281  0225  3000               	movlw	0
  3282  0226  00F2               	movwf	i1pwm_set@duty_cycle
  3283  0227  120A  118A  2643   	fcall	i1_pwm_set
  3284                           
  3285                           ;main.c: 91: }else if(resp < 0){
  3286  022A  0008               	return
  3287  022B                     i1l280:	
  3288  022B  1FB9               	btfss	SetMotor@resp+3,7
  3289  022C  2A57               	goto	i1l1897
  3290                           
  3291                           ;main.c: 92: pwm_set(1, 0 );
  3292  022D  3001               	movlw	1
  3293  022E  00F0               	movwf	i1pwm_set@channel
  3294  022F  3000               	movlw	0
  3295  0230  00F1               	movwf	i1pwm_set@channel+1
  3296  0231  3000               	movlw	0
  3297  0232  00F5               	movwf	i1pwm_set@duty_cycle+3
  3298  0233  3000               	movlw	0
  3299  0234  00F4               	movwf	i1pwm_set@duty_cycle+2
  3300  0235  3000               	movlw	0
  3301  0236  00F3               	movwf	i1pwm_set@duty_cycle+1
  3302  0237  3000               	movlw	0
  3303  0238  00F2               	movwf	i1pwm_set@duty_cycle
  3304  0239  120A  118A  2643  120A  118A  	fcall	i1_pwm_set
  3305                           
  3306                           ;main.c: 93: pwm_set(2, -resp );
  3307  023E  3002               	movlw	2
  3308  023F  00F0               	movwf	i1pwm_set@channel
  3309  0240  3000               	movlw	0
  3310  0241  00F1               	movwf	i1pwm_set@channel+1
  3311  0242  1283               	bcf	3,5	;RP0=0, select bank0
  3312  0243  1303               	bcf	3,6	;RP1=0, select bank0
  3313  0244  0936               	comf	SetMotor@resp,w
  3314  0245  00F2               	movwf	i1pwm_set@duty_cycle
  3315  0246  0937               	comf	SetMotor@resp+1,w
  3316  0247  00F3               	movwf	i1pwm_set@duty_cycle+1
  3317  0248  0938               	comf	SetMotor@resp+2,w
  3318  0249  00F4               	movwf	i1pwm_set@duty_cycle+2
  3319  024A  0939               	comf	SetMotor@resp+3,w
  3320  024B  00F5               	movwf	i1pwm_set@duty_cycle+3
  3321  024C  0AF2               	incf	i1pwm_set@duty_cycle,f
  3322  024D  1903               	skipnz
  3323  024E  0AF3               	incf	i1pwm_set@duty_cycle+1,f
  3324  024F  1903               	skipnz
  3325  0250  0AF4               	incf	i1pwm_set@duty_cycle+2,f
  3326  0251  1903               	skipnz
  3327  0252  0AF5               	incf	i1pwm_set@duty_cycle+3,f
  3328  0253  120A  118A  2643   	fcall	i1_pwm_set
  3329                           
  3330                           ;main.c: 94: }else{
  3331  0256  0008               	return
  3332  0257                     i1l1897:	
  3333                           
  3334                           ;main.c: 95: pwm_set(1, 0 );
  3335  0257  3001               	movlw	1
  3336  0258  00F0               	movwf	i1pwm_set@channel
  3337  0259  3000               	movlw	0
  3338  025A  00F1               	movwf	i1pwm_set@channel+1
  3339  025B  3000               	movlw	0
  3340  025C  00F5               	movwf	i1pwm_set@duty_cycle+3
  3341  025D  3000               	movlw	0
  3342  025E  00F4               	movwf	i1pwm_set@duty_cycle+2
  3343  025F  3000               	movlw	0
  3344  0260  00F3               	movwf	i1pwm_set@duty_cycle+1
  3345  0261  3000               	movlw	0
  3346  0262  00F2               	movwf	i1pwm_set@duty_cycle
  3347  0263  120A  118A  2643  120A  118A  	fcall	i1_pwm_set
  3348                           
  3349                           ;main.c: 96: pwm_set(2, 0 );
  3350  0268  3002               	movlw	2
  3351  0269  00F0               	movwf	i1pwm_set@channel
  3352  026A  3000               	movlw	0
  3353  026B  00F1               	movwf	i1pwm_set@channel+1
  3354  026C  3000               	movlw	0
  3355  026D  00F5               	movwf	i1pwm_set@duty_cycle+3
  3356  026E  3000               	movlw	0
  3357  026F  00F4               	movwf	i1pwm_set@duty_cycle+2
  3358  0270  3000               	movlw	0
  3359  0271  00F3               	movwf	i1pwm_set@duty_cycle+1
  3360  0272  3000               	movlw	0
  3361  0273  00F2               	movwf	i1pwm_set@duty_cycle
  3362  0274  120A  118A  2643   	fcall	i1_pwm_set
  3363  0277  0008               	return
  3364  0278                     __end_of_SetMotor:	
  3365                           
  3366                           	psect	text15
  3367  0643                     __ptext15:	
  3368 ;; *************** function i1_pwm_set *****************
  3369 ;; Defined at:
  3370 ;;		line 72 in file "pwm.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  channel         2    0[COMMON] int 
  3373 ;;  duty_cycle      4    2[COMMON] long 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;		None
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3385 ;;      Params:         6       0       0       0       0
  3386 ;;      Locals:         0       0       0       0       0
  3387 ;;      Temps:          0       0       0       0       0
  3388 ;;      Totals:         6       0       0       0       0
  3389 ;;Total ram usage:        6 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; This function calls:
  3392 ;;		Nothing
  3393 ;; This function is called by:
  3394 ;;		_SetMotor
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           
  3399                           ;psect for function i1_pwm_set
  3400  0643                     i1_pwm_set:	
  3401                           
  3402                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in i1_pwm_set: [wreg-fsr0h+status,2+status,0]
  3406  0643  1BF5               	btfsc	i1pwm_set@duty_cycle+3,7
  3407  0644  0008               	return
  3408  0645  1BF5               	btfsc	i1pwm_set@duty_cycle+3,7
  3409  0646  2E62               	goto	i1l1761
  3410  0647  0875               	movf	i1pwm_set@duty_cycle+3,w
  3411  0648  1D03               	btfss	3,2
  3412  0649  0008               	return
  3413  064A  0874               	movf	i1pwm_set@duty_cycle+2,w
  3414  064B  1D03               	btfss	3,2
  3415  064C  0008               	return
  3416  064D  3001               	movlw	1
  3417  064E  0273               	subwf	i1pwm_set@duty_cycle+1,w
  3418  064F  1D03               	skipz
  3419  0650  2E55               	goto	u128_23
  3420  0651  3000               	movlw	0
  3421  0652  0272               	subwf	i1pwm_set@duty_cycle,w
  3422  0653  1D03               	skipz
  3423  0654  2E55               	goto	u128_23
  3424  0655                     u128_23:	
  3425  0655  1803               	btfsc	3,0
  3426  0656  0008               	return
  3427  0657  2E62               	goto	i1l1761
  3428  0658                     i1l1755:	
  3429                           
  3430                           ;pwm.c: 82: CCPR1L = duty_cycle;
  3431  0658  0872               	movf	i1pwm_set@duty_cycle,w
  3432  0659  1283               	bcf	3,5	;RP0=0, select bank0
  3433  065A  1303               	bcf	3,6	;RP1=0, select bank0
  3434  065B  0095               	movwf	21	;volatile
  3435                           
  3436                           ;pwm.c: 83: break;
  3437  065C  0008               	return
  3438  065D                     i1l1757:	
  3439                           
  3440                           ;pwm.c: 85: CCPR2L = duty_cycle;
  3441  065D  0872               	movf	i1pwm_set@duty_cycle,w
  3442  065E  1283               	bcf	3,5	;RP0=0, select bank0
  3443  065F  1303               	bcf	3,6	;RP1=0, select bank0
  3444  0660  009B               	movwf	27	;volatile
  3445                           
  3446                           ;pwm.c: 86: break;
  3447  0661  0008               	return
  3448  0662                     i1l1761:	
  3449                           
  3450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3451                           ; Switch size 1, requested type "simple"
  3452                           ; Number of cases is 1, Range of values is 0 to 0
  3453                           ; switch strategies available:
  3454                           ; Name         Instructions Cycles
  3455                           ; simple_byte            4     3 (average)
  3456                           ; direct_byte           11     8 (fixed)
  3457                           ; jumptable            260     6 (fixed)
  3458                           ;	Chosen strategy is simple_byte
  3459  0662  0871               	movf	i1pwm_set@channel+1,w
  3460  0663  3A00               	xorlw	0	; case 0
  3461  0664  1903               	skipnz
  3462  0665  2E67               	goto	i1l2649
  3463  0666  2E6F               	goto	i1l181
  3464  0667                     i1l2649:	
  3465                           
  3466                           ; Switch size 1, requested type "simple"
  3467                           ; Number of cases is 2, Range of values is 1 to 2
  3468                           ; switch strategies available:
  3469                           ; Name         Instructions Cycles
  3470                           ; simple_byte            7     4 (average)
  3471                           ; direct_byte           17    11 (fixed)
  3472                           ; jumptable            263     9 (fixed)
  3473                           ;	Chosen strategy is simple_byte
  3474  0667  0870               	movf	i1pwm_set@channel,w
  3475  0668  3A01               	xorlw	1	; case 1
  3476  0669  1903               	skipnz
  3477  066A  2E58               	goto	i1l1755
  3478  066B  3A03               	xorlw	3	; case 2
  3479  066C  1903               	skipnz
  3480  066D  2E5D               	goto	i1l1757
  3481  066E  2E6F               	goto	i1l181
  3482  066F                     i1l181:	
  3483  066F  0008               	return
  3484  0670                     __end_ofi1_pwm_set:	
  3485                           
  3486                           	psect	text16
  3487  06CE                     __ptext16:	
  3488 ;; *************** function _constrain *****************
  3489 ;; Defined at:
  3490 ;;		line 71 in file "main.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  value           4    0[COMMON] long 
  3493 ;;  lLimit          4    4[COMMON] long 
  3494 ;;  uLimit          4    8[COMMON] long 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  4    0[COMMON] long 
  3499 ;; Registers used:
  3500 ;;		wreg, btemp+1
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3506 ;;      Params:        12       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0
  3508 ;;      Temps:          0       0       0       0       0
  3509 ;;      Totals:        12       0       0       0       0
  3510 ;;Total ram usage:       12 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_SetMotor
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function _constrain
  3521  06CE                     _constrain:	
  3522                           
  3523                           ;main.c: 72: if (value > uLimit){
  3524                           
  3525                           ;incstack = 0
  3526                           ; Regs used in _constrain: [wreg+btemp+1]
  3527  06CE  087B               	movf	constrain@uLimit+3,w
  3528  06CF  3A80               	xorlw	128
  3529  06D0  00FF               	movwf	127
  3530  06D1  0873               	movf	constrain@value+3,w
  3531  06D2  3A80               	xorlw	128
  3532  06D3  027F               	subwf	127,w
  3533  06D4  1D03               	skipz
  3534  06D5  2EE0               	goto	u98_23
  3535  06D6  0872               	movf	constrain@value+2,w
  3536  06D7  027A               	subwf	constrain@uLimit+2,w
  3537  06D8  1D03               	skipz
  3538  06D9  2EE0               	goto	u98_23
  3539  06DA  0871               	movf	constrain@value+1,w
  3540  06DB  0279               	subwf	constrain@uLimit+1,w
  3541  06DC  1D03               	skipz
  3542  06DD  2EE0               	goto	u98_23
  3543  06DE  0870               	movf	constrain@value,w
  3544  06DF  0278               	subwf	constrain@uLimit,w
  3545  06E0                     u98_23:	
  3546  06E0  1803               	skipnc
  3547  06E1  0008               	return
  3548  06E2  0008               	return
  3549  06E3                     __end_of_constrain:	
  3550                           
  3551                           	psect	text17
  3552  04CC                     __ptext17:	
  3553 ;; *************** function ___lmul *****************
  3554 ;; Defined at:
  3555 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  multiplier      4    0[COMMON] unsigned long 
  3558 ;;  multiplicand    4    4[COMMON] unsigned long 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  product         4    9[COMMON] unsigned long 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;                  4    0[COMMON] unsigned long 
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3570 ;;      Params:         8       0       0       0       0
  3571 ;;      Locals:         4       0       0       0       0
  3572 ;;      Temps:          1       0       0       0       0
  3573 ;;      Totals:        13       0       0       0       0
  3574 ;;Total ram usage:       13 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_SetMotor
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           
  3584                           ;psect for function ___lmul
  3585  04CC                     ___lmul:	
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3589  04CC  3000               	movlw	0
  3590  04CD  00FC               	movwf	___lmul@product+3
  3591  04CE  3000               	movlw	0
  3592  04CF  00FB               	movwf	___lmul@product+2
  3593  04D0  3000               	movlw	0
  3594  04D1  00FA               	movwf	___lmul@product+1
  3595  04D2  3000               	movlw	0
  3596  04D3  00F9               	movwf	___lmul@product
  3597  04D4                     i1l1649:	
  3598  04D4  1C70               	btfss	___lmul@multiplier,0
  3599  04D5  2CEA               	goto	i1l1653
  3600  04D6  0874               	movf	___lmul@multiplicand,w
  3601  04D7  07F9               	addwf	___lmul@product,f
  3602  04D8  0875               	movf	___lmul@multiplicand+1,w
  3603  04D9  1103               	clrz
  3604  04DA  1803               	skipnc
  3605  04DB  3E01               	addlw	1
  3606  04DC  1D03               	btfss	3,2
  3607  04DD  07FA               	addwf	___lmul@product+1,f
  3608  04DE  0876               	movf	___lmul@multiplicand+2,w
  3609  04DF  1103               	clrz
  3610  04E0  1803               	skipnc
  3611  04E1  3E01               	addlw	1
  3612  04E2  1D03               	btfss	3,2
  3613  04E3  07FB               	addwf	___lmul@product+2,f
  3614  04E4  0877               	movf	___lmul@multiplicand+3,w
  3615  04E5  1103               	clrz
  3616  04E6  1803               	skipnc
  3617  04E7  3E01               	addlw	1
  3618  04E8  1D03               	btfss	3,2
  3619  04E9  07FC               	addwf	___lmul@product+3,f
  3620  04EA                     i1l1653:	
  3621  04EA  3001               	movlw	1
  3622  04EB  00F8               	movwf	??___lmul
  3623  04EC                     u101_25:	
  3624  04EC  1003               	clrc
  3625  04ED  0DF4               	rlf	___lmul@multiplicand,f
  3626  04EE  0DF5               	rlf	___lmul@multiplicand+1,f
  3627  04EF  0DF6               	rlf	___lmul@multiplicand+2,f
  3628  04F0  0DF7               	rlf	___lmul@multiplicand+3,f
  3629  04F1  0BF8               	decfsz	??___lmul,f
  3630  04F2  2CEC               	goto	u101_25
  3631  04F3  3001               	movlw	1
  3632  04F4                     u102_25:	
  3633  04F4  1003               	clrc
  3634  04F5  0CF3               	rrf	___lmul@multiplier+3,f
  3635  04F6  0CF2               	rrf	___lmul@multiplier+2,f
  3636  04F7  0CF1               	rrf	___lmul@multiplier+1,f
  3637  04F8  0CF0               	rrf	___lmul@multiplier,f
  3638  04F9  3EFF               	addlw	-1
  3639  04FA  1D03               	skipz
  3640  04FB  2CF4               	goto	u102_25
  3641  04FC  0873               	movf	___lmul@multiplier+3,w
  3642  04FD  0472               	iorwf	___lmul@multiplier+2,w
  3643  04FE  0471               	iorwf	___lmul@multiplier+1,w
  3644  04FF  0470               	iorwf	___lmul@multiplier,w
  3645  0500  1D03               	skipz
  3646  0501  2CD4               	goto	i1l1649
  3647  0502  087C               	movf	___lmul@product+3,w
  3648  0503  00F3               	movwf	?___lmul+3
  3649  0504  087B               	movf	___lmul@product+2,w
  3650  0505  00F2               	movwf	?___lmul+2
  3651  0506  087A               	movf	___lmul@product+1,w
  3652  0507  00F1               	movwf	?___lmul+1
  3653  0508  0879               	movf	___lmul@product,w
  3654  0509  00F0               	movwf	?___lmul
  3655  050A  0008               	return
  3656  050B                     __end_of___lmul:	
  3657                           
  3658                           	psect	text18
  3659  043D                     __ptext18:	
  3660 ;; *************** function ___aldiv *****************
  3661 ;; Defined at:
  3662 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  divisor         4    0[BANK0 ] long 
  3665 ;;  dividend        4    4[BANK0 ] long 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  quotient        4   10[BANK0 ] long 
  3668 ;;  sign            1    9[BANK0 ] unsigned char 
  3669 ;;  counter         1    8[BANK0 ] unsigned char 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  4    0[BANK0 ] long 
  3672 ;; Registers used:
  3673 ;;		wreg, status,2, status,0
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3679 ;;      Params:         0       8       0       0       0
  3680 ;;      Locals:         0       6       0       0       0
  3681 ;;      Temps:          1       0       0       0       0
  3682 ;;      Totals:         1      14       0       0       0
  3683 ;;Total ram usage:       15 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_SetMotor
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function ___aldiv
  3694  043D                     ___aldiv:	
  3695                           
  3696                           ;incstack = 0
  3697                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3698  043D  1283               	bcf	3,5	;RP0=0, select bank0
  3699  043E  1303               	bcf	3,6	;RP1=0, select bank0
  3700  043F  01A9               	clrf	___aldiv@sign
  3701  0440  1FA3               	btfss	___aldiv@divisor+3,7
  3702  0441  2C4F               	goto	i1l520
  3703  0442  09A0               	comf	___aldiv@divisor,f
  3704  0443  09A1               	comf	___aldiv@divisor+1,f
  3705  0444  09A2               	comf	___aldiv@divisor+2,f
  3706  0445  09A3               	comf	___aldiv@divisor+3,f
  3707  0446  0AA0               	incf	___aldiv@divisor,f
  3708  0447  1903               	skipnz
  3709  0448  0AA1               	incf	___aldiv@divisor+1,f
  3710  0449  1903               	skipnz
  3711  044A  0AA2               	incf	___aldiv@divisor+2,f
  3712  044B  1903               	skipnz
  3713  044C  0AA3               	incf	___aldiv@divisor+3,f
  3714  044D  01A9               	clrf	___aldiv@sign
  3715  044E  0AA9               	incf	___aldiv@sign,f
  3716  044F                     i1l520:	
  3717  044F  1FA7               	btfss	___aldiv@dividend+3,7
  3718  0450  2C60               	goto	i1l1671
  3719  0451  09A4               	comf	___aldiv@dividend,f
  3720  0452  09A5               	comf	___aldiv@dividend+1,f
  3721  0453  09A6               	comf	___aldiv@dividend+2,f
  3722  0454  09A7               	comf	___aldiv@dividend+3,f
  3723  0455  0AA4               	incf	___aldiv@dividend,f
  3724  0456  1903               	skipnz
  3725  0457  0AA5               	incf	___aldiv@dividend+1,f
  3726  0458  1903               	skipnz
  3727  0459  0AA6               	incf	___aldiv@dividend+2,f
  3728  045A  1903               	skipnz
  3729  045B  0AA7               	incf	___aldiv@dividend+3,f
  3730  045C  3001               	movlw	1
  3731  045D  00FD               	movwf	??___aldiv
  3732  045E  087D               	movf	??___aldiv,w
  3733  045F  06A9               	xorwf	___aldiv@sign,f
  3734  0460                     i1l1671:	
  3735  0460  3000               	movlw	0
  3736  0461  00AD               	movwf	___aldiv@quotient+3
  3737  0462  3000               	movlw	0
  3738  0463  00AC               	movwf	___aldiv@quotient+2
  3739  0464  3000               	movlw	0
  3740  0465  00AB               	movwf	___aldiv@quotient+1
  3741  0466  3000               	movlw	0
  3742  0467  00AA               	movwf	___aldiv@quotient
  3743  0468  0823               	movf	___aldiv@divisor+3,w
  3744  0469  0422               	iorwf	___aldiv@divisor+2,w
  3745  046A  0421               	iorwf	___aldiv@divisor+1,w
  3746  046B  0420               	iorwf	___aldiv@divisor,w
  3747  046C  1903               	skipnz
  3748  046D  2CB5               	goto	i1l1693
  3749  046E  01A8               	clrf	___aldiv@counter
  3750  046F  0AA8               	incf	___aldiv@counter,f
  3751  0470                     i1l1679:	
  3752  0470  1BA3               	btfsc	___aldiv@divisor+3,7
  3753  0471  2C80               	goto	i1l1681
  3754  0472  3001               	movlw	1
  3755  0473  00FD               	movwf	??___aldiv
  3756  0474                     u107_25:	
  3757  0474  1003               	clrc
  3758  0475  0DA0               	rlf	___aldiv@divisor,f
  3759  0476  0DA1               	rlf	___aldiv@divisor+1,f
  3760  0477  0DA2               	rlf	___aldiv@divisor+2,f
  3761  0478  0DA3               	rlf	___aldiv@divisor+3,f
  3762  0479  0BFD               	decfsz	??___aldiv,f
  3763  047A  2C74               	goto	u107_25
  3764  047B  3001               	movlw	1
  3765  047C  00FD               	movwf	??___aldiv
  3766  047D  087D               	movf	??___aldiv,w
  3767  047E  07A8               	addwf	___aldiv@counter,f
  3768  047F  2C70               	goto	i1l1679
  3769  0480                     i1l1681:	
  3770  0480  3001               	movlw	1
  3771  0481  00FD               	movwf	??___aldiv
  3772  0482                     u109_25:	
  3773  0482  1003               	clrc
  3774  0483  0DAA               	rlf	___aldiv@quotient,f
  3775  0484  0DAB               	rlf	___aldiv@quotient+1,f
  3776  0485  0DAC               	rlf	___aldiv@quotient+2,f
  3777  0486  0DAD               	rlf	___aldiv@quotient+3,f
  3778  0487  0BFD               	decfsz	??___aldiv,f
  3779  0488  2C82               	goto	u109_25
  3780  0489  0823               	movf	___aldiv@divisor+3,w
  3781  048A  0227               	subwf	___aldiv@dividend+3,w
  3782  048B  1D03               	skipz
  3783  048C  2C97               	goto	u110_25
  3784  048D  0822               	movf	___aldiv@divisor+2,w
  3785  048E  0226               	subwf	___aldiv@dividend+2,w
  3786  048F  1D03               	skipz
  3787  0490  2C97               	goto	u110_25
  3788  0491  0821               	movf	___aldiv@divisor+1,w
  3789  0492  0225               	subwf	___aldiv@dividend+1,w
  3790  0493  1D03               	skipz
  3791  0494  2C97               	goto	u110_25
  3792  0495  0820               	movf	___aldiv@divisor,w
  3793  0496  0224               	subwf	___aldiv@dividend,w
  3794  0497                     u110_25:	
  3795  0497  1C03               	skipc
  3796  0498  2CA8               	goto	i1l1689
  3797  0499  0820               	movf	___aldiv@divisor,w
  3798  049A  02A4               	subwf	___aldiv@dividend,f
  3799  049B  0821               	movf	___aldiv@divisor+1,w
  3800  049C  1C03               	skipc
  3801  049D  0F21               	incfsz	___aldiv@divisor+1,w
  3802  049E  02A5               	subwf	___aldiv@dividend+1,f
  3803  049F  0822               	movf	___aldiv@divisor+2,w
  3804  04A0  1C03               	skipc
  3805  04A1  0F22               	incfsz	___aldiv@divisor+2,w
  3806  04A2  02A6               	subwf	___aldiv@dividend+2,f
  3807  04A3  0823               	movf	___aldiv@divisor+3,w
  3808  04A4  1C03               	skipc
  3809  04A5  0F23               	incfsz	___aldiv@divisor+3,w
  3810  04A6  02A7               	subwf	___aldiv@dividend+3,f
  3811  04A7  142A               	bsf	___aldiv@quotient,0
  3812  04A8                     i1l1689:	
  3813  04A8  3001               	movlw	1
  3814  04A9                     u111_25:	
  3815  04A9  1003               	clrc
  3816  04AA  0CA3               	rrf	___aldiv@divisor+3,f
  3817  04AB  0CA2               	rrf	___aldiv@divisor+2,f
  3818  04AC  0CA1               	rrf	___aldiv@divisor+1,f
  3819  04AD  0CA0               	rrf	___aldiv@divisor,f
  3820  04AE  3EFF               	addlw	-1
  3821  04AF  1D03               	skipz
  3822  04B0  2CA9               	goto	u111_25
  3823  04B1  3001               	movlw	1
  3824  04B2  02A8               	subwf	___aldiv@counter,f
  3825  04B3  1D03               	btfss	3,2
  3826  04B4  2C80               	goto	i1l1681
  3827  04B5                     i1l1693:	
  3828  04B5  0829               	movf	___aldiv@sign,w
  3829  04B6  1903               	btfsc	3,2
  3830  04B7  2CC3               	goto	i1l1697
  3831  04B8  09AA               	comf	___aldiv@quotient,f
  3832  04B9  09AB               	comf	___aldiv@quotient+1,f
  3833  04BA  09AC               	comf	___aldiv@quotient+2,f
  3834  04BB  09AD               	comf	___aldiv@quotient+3,f
  3835  04BC  0AAA               	incf	___aldiv@quotient,f
  3836  04BD  1903               	skipnz
  3837  04BE  0AAB               	incf	___aldiv@quotient+1,f
  3838  04BF  1903               	skipnz
  3839  04C0  0AAC               	incf	___aldiv@quotient+2,f
  3840  04C1  1903               	skipnz
  3841  04C2  0AAD               	incf	___aldiv@quotient+3,f
  3842  04C3                     i1l1697:	
  3843  04C3  082D               	movf	___aldiv@quotient+3,w
  3844  04C4  00A3               	movwf	?___aldiv+3
  3845  04C5  082C               	movf	___aldiv@quotient+2,w
  3846  04C6  00A2               	movwf	?___aldiv+2
  3847  04C7  082B               	movf	___aldiv@quotient+1,w
  3848  04C8  00A1               	movwf	?___aldiv+1
  3849  04C9  082A               	movf	___aldiv@quotient,w
  3850  04CA  00A0               	movwf	?___aldiv
  3851  04CB  0008               	return
  3852  04CC                     __end_of___aldiv:	
  3853  007E                     btemp	set	126	;btemp
  3854  007E                     wtemp0	set	126


Data Sizes:
    Strings     29
    Constant    10
    Data        2
    BSS         167
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      60
    BANK1            80     44      44
    BANK3            96      0      71
    BANK2            96      0      71

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_4(CODE[14]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@sVar(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 10
		 -> main@sVar(BANK1[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _SetMotor->___aldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_SetMotor
    _SetMotor->___aldiv

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putst->_putch

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    3958
                                             27 BANK1     17    17      0
                           _SetPoint
                             _chkchr
                      _encoders_init
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    2033
                                             14 BANK1     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                              6     0      6    1175
                                              0 BANK1      6     0      6
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     302
                                              2 BANK1      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPoint                                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  7     7      0    1609
                                             26 BANK0      7     7      0
                           _SetMotor
 ---------------------------------------------------------------------------------
 (4) _SetMotor                                            12    12      0    1586
                                             14 BANK0     12    12      0
                            ___aldiv
                             ___lmul
                          _constrain
                          i1_pwm_set
 ---------------------------------------------------------------------------------
 (5) i1_pwm_set                                            6     0      6     422
                                              0 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 (5) _constrain                                           12     0     12     334
                                              0 COMMON    12     0     12
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             15     7      8     452
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetPoint
   _chkchr
   _encoders_init
   _putst
     _putch
   _pwm_init
   _pwm_set
   _resetCounter
   _serial_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _SetMotor
     ___aldiv
       ___lmul (ARG)
     ___lmul
     _constrain
     i1_pwm_set

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      47       9       74.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0      47      11       74.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     2C      2C       7       55.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      3C       5       75.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     104      12        0.0%
ABS                  0      0     104       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 17 18:14:43 2019

                      pc 0002              __CFG_CP$OFF 0000                       l82 05C4  
                     l83 05D2                       _Kp 005A                       fsr 0004  
                    l170 0688                      l181 0615                      l333 0101  
                    l336 015D                      _GIE 005F                      _RA5 002D  
                    _RA6 002E                      _RB5 0035                      _PR2 0092  
           __CFG_CPD$OFF 0000                      _RX9 00C6                      _TX9 04C6  
                    _ab1 0056                      _isr 0278                      fsr0 0004  
                    indf 0000             __CFG_IESO$ON 0000             __CFG_FOSC$EC 0000  
       _encoder1_counter 004D             __CFG_LVP$OFF 0000                     l2301 0595  
                   l2305 05A3                     l2261 05B6                     l2413 05FE  
                   l2309 05AE                     l2343 0716                     l2263 05D4  
                   l2415 0603                     l2441 0392                     l2419 0608  
                   l2283 0539                     l2275 0515                     l2277 0523  
                   l2383 0578                     l2287 0544                     l2463 03C1  
                   l2447 03A8                     l2385 054C                     l2457 03BF  
                   l2379 0569                     l2299 0587                     l2483 03F5  
                   l2475 03F1                     l2563 0095                     l2469 03E2  
                   l2485 0372                     l2581 00D0                     l2647 060D  
                   l2487 0438                     l2597 0136                     ?_isr 0070  
                   STR_1 0634                     STR_2 063F                     STR_3 063F  
                   STR_4 0626                     _ANS4 0C44                     _ANS8 0C48  
                   _ANS9 0C49                     _BRGH 04C2                     _T0IE 005D  
                   _CREN 00C4                     _T0IF 005A                     _FERR 00C2  
                   u2005 05A4                     u2113 05FB                     _IOCB 0096  
                   u2125 06A1                     u2155 03D8                     u2245 00DB  
                   u2255 010C                     u2265 0168                     u1905 0518  
                   u1925 0524                     u1935 0530                     u1945 053A  
                   _PEIE 005E                     u1975 058A                     _RBIE 005B  
                   _RBIF 0058                     u1995 059B                     _RCIE 0465  
                   _RCIF 0065                     _OERR 00C1                     _TMR0 0001  
                   _SPEN 00C7                     _SREN 00C5                     _TXIE 0464  
                   _TXEN 04C5                     _TXIF 0064                     _SYNC 04C4  
           __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000                     _main 003D  
                   btemp 007E                     start 0012            __CFG_MCLRE$ON 0000  
                  ??_isr 003A          __end_of___aldiv 04CC                    ?_main 0070  
                  _ANS10 0C4A                    _ANS11 0C4B                    _ANS13 0C4D  
          __CFG_WDTE$OFF 0000          __end_of___lwdiv 0549                    i1l320 0360  
                  i1l181 066F                    i1l520 044F                    i1l280 022B  
        __end_of___lwmod 05B3                    _RCREG 001A                    _SPBRG 0099  
                  _PORTB 0006                    _TXREG 0019                    u98_23 06E0  
    ___lmul@multiplicand 0074          ??_encoders_init 00A0          __end_of_dpowers 0626  
                  _dummy 0058                    _putch 05B3                    _putst 0549  
         __CFG_BOREN$OFF 0000                    pclath 000A          __end_of_pwm_set 0616  
                  status 0003                    wtemp0 007E          __end_of_sprintf 043D  
        __initialization 0015             __end_of_main 017D                   ??_main 00BB  
     __size_ofi1_pwm_set 002D         __end_of_SetMotor 0278         __end_of_SetPoint 0708  
                 _CCPR1L 0015                   _CCPR2L 001B                   ?_putch 0070  
                 ?_putst 0070                   u101_25 04EC                   u110_25 0497  
                 u102_25 04F4                   i1l2103 0342                   i1l2105 0350  
                 u111_25 04A9                   i1l2053 02B1                   i1l2047 0298  
                 i1l2073 02D7                   i1l2065 02C9                   i1l2057 02B4  
                 i1l2083 02FD                   i1l2093 0318                   i1l2077 02DB  
                 i1l2069 02CE                   i1l2079 02E9                   i1l2097 032C  
                 i1l2089 0302                   i1l1653 04EA                   i1l1671 0460  
                 i1l1681 0480                   i1l1649 04D4                   i1l1761 0662  
                 i1l1755 0658                   i1l1693 04B5                   i1l1757 065D  
                 i1l1679 0470                   i1l1697 04C3                   i1l1689 04A8  
                 i1l2649 0667                   u107_25 0474                   i1l1893 020A  
                 i1l1897 0257                   u141_21 018E                   u141_22 018F  
                 u141_23 0194                   u141_24 0195                   u109_25 0482  
                 u141_25 019A                   u141_26 019B                   u142_23 0208  
                 u128_23 0655                   u170_25 028E                   u173_25 02BE  
                 _TMR1IE 0460                   _TRISB1 0431                   _TRISB2 0432  
                 _TRISC1 0439                   _TRISA5 042D                   _TRISB3 0433  
                 _TRISC2 043A                   _TRISA6 042E                   _TRISB4 0434  
                 _TRISB5 0435                   _TRISB7 0437           __CFG_PWRTE$OFF 0000  
           ?_serial_init 0070                   ___lmul 04CC                ??___aldiv 007D  
                 _chkchr 0710                ??___lwdiv 00A4                ??___lwmod 00AC  
                 _state1 0057                   saved_w 007E         __end_of_pwm_init 069A  
                 putch@c 00A1                ??_pwm_set 00A6                ??_sprintf 00B1  
__end_of__initialization 0039        __end_ofi1_pwm_set 0670           __pcstackCOMMON 0070  
           __pidataBANK0 0718            __end_of_putch 05E7            __end_of_putst 057F  
         _OPTION_REGbits 0081              SetMotor@err 0032                  ??_putch 00A0  
                ??_putst 00A2               __pbssBANK0 0041               __pbssBANK2 0110  
             __pbssBANK3 0190       __size_of_constrain 0015                ?_SetMotor 0070  
              ?_SetPoint 00A0               __pmaintext 003D                  ?___lmul 0070  
                ?_chkchr 0070               __pintentry 0004           ___lmul@product 0079  
          ?_resetCounter 0070               __stringtab 0616               ??_SetMotor 002E  
             ??_SetPoint 00A2                  ___aldiv 043D          __size_of___lmul 003F  
              ?_pwm_init 0070                  ___lwdiv 050B                  ___lwmod 057F  
        __size_of_chkchr 0008     __size_of_serial_init 0018        __end_of_constrain 06E3  
                __ptext1 036B                  __ptext2 057F                  __ptext3 050B  
                __ptext4 06B6                  __ptext5 06E3                  __ptext6 05E7  
                __ptext7 0670                  __ptext8 0549                  __ptext9 05B3  
                _dpowers 061C                _T2CONbits 0012             __size_of_isr 00F3  
       ___aldiv@dividend 0024                  _samples 0053           ??_resetCounter 00A0  
                _pwm_set 05E7                  _sprintf 036B                  clrloop0 0709  
   end_of_initialization 0039    __end_of_encoders_init 06B6                  isr@tick 0051  
       ___aldiv@quotient 002A               ??_pwm_init 00A0              _CCP1CONbits 0017  
            _CCP2CONbits 001D                i1_pwm_set 0643           __end_of___lmul 050B  
         __end_of_chkchr 0718         _delayus_variable 0059      start_initialization 0015  
            __end_of_isr 036B             SetMotor@resp 0036               ?i1_pwm_set 0070  
   __end_of_resetCounter 06F6                 ??___lmul 0078        __size_of_SetMotor 00FB  
      __size_of_SetPoint 0012                 ??_chkchr 00A0              __pdataBANK0 005A  
      pwm_set@duty_cycle 00A2                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00A0              sprintf@flag 00B5              sprintf@prec 00B6  
       ___lwdiv@dividend 00A2                 ?___aldiv 0020                 ?___lwdiv 00A0  
               ?___lwmod 00A8                __pstrings 0616        __size_of_pwm_init 002A  
         pwm_set@channel 00A0                _constrain 06CE         ___lwdiv@quotient 00A6  
               ?_pwm_set 00A0                 ?_sprintf 00AE           __size_of_putch 0034  
         __size_of_putst 0036          ___aldiv@divisor 0020         main@serialIn_333 00CB  
      interrupt_function 0004          ___aldiv@counter 0028                clear_ram0 0708  
               _PIR1bits 000C            ??_serial_init 00A0              ??i1_pwm_set 0076  
              _set_point 0045                _motor_pos 0049              __stringbase 061B  
             ?_constrain 0070          SetPoint@new_val 00A0        ___lmul@multiplier 0070  
  __size_of_resetCounter 0013                 _SetMotor 017D                 _SetPoint 06F6  
       __size_of___aldiv 008F         __size_of___lwdiv 003E         __size_of___lwmod 0034  
 __size_of_encoders_init 001C      __end_of_serial_init 06CE       __end_of__stringtab 061C  
             sprintf@val 00B7          ___lwdiv@divisor 00A0          ___lwdiv@counter 00A5  
               __ptext10 069A                 __ptext11 0710                 __ptext12 06F6  
               __ptext13 0278                 __ptext14 017D                 __ptext15 0643  
               __ptext16 06CE                 __ptext17 04CC                 __ptext18 043D  
           _resetCounter 06E3        __CFG_BOR4V$BOR21V 0000         __size_of_pwm_set 002F  
       __size_of_sprintf 00D2                 _last_pos 0041            __size_of_main 0140  
               _sampling 0055                 _pos_log1 0190                 _pos_log2 0110  
               _pwm_init 0670                 main@sVar 00C1              ??_constrain 007C  
               isr@portB 0040          constrain@lLimit 0074          constrain@uLimit 0078  
               intlevel1 0000                sprintf@ap 00B4                sprintf@sp 00B9  
          _encoders_init 069A         ___lwmod@dividend 00AA                stringcode 0616  
            _serial_init 06B6           constrain@value 0070                 sprintf@c 00BA  
               sprintf@f 00AE                 putst@str 00A3          ___lwmod@divisor 00A8  
        ___lwmod@counter 00AD                 stringdir 0616                 stringtab 0616  
           ___aldiv@sign 0029      i1pwm_set@duty_cycle 0072           ?_encoders_init 0070  
       i1pwm_set@channel 0070  
