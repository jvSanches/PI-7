

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 30 18:28:04 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    45                           	dabs	1,0x7E,2
    46  0000                     
    47                           ; Version 2.05
    48                           ; Generated 20/12/2018 GMT
    49                           ; 
    50                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC16F886 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     	;# 
    82  0001                     	;# 
    83  0002                     	;# 
    84  0003                     	;# 
    85  0004                     	;# 
    86  0005                     	;# 
    87  0006                     	;# 
    88  0007                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0089                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0094                     	;# 
   131  0095                     	;# 
   132  0096                     	;# 
   133  0097                     	;# 
   134  0098                     	;# 
   135  0099                     	;# 
   136  009A                     	;# 
   137  009B                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  0105                     	;# 
   143  0107                     	;# 
   144  0108                     	;# 
   145  0109                     	;# 
   146  010C                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  0185                     	;# 
   152  0187                     	;# 
   153  0188                     	;# 
   154  0189                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  0000                     	;# 
   158  0001                     	;# 
   159  0002                     	;# 
   160  0003                     	;# 
   161  0004                     	;# 
   162  0005                     	;# 
   163  0006                     	;# 
   164  0007                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  000E                     	;# 
   172  000F                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0013                     	;# 
   177  0014                     	;# 
   178  0015                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0017                     	;# 
   182  0018                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001B                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  001D                     	;# 
   189  001E                     	;# 
   190  001F                     	;# 
   191  0081                     	;# 
   192  0085                     	;# 
   193  0086                     	;# 
   194  0087                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  008F                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0105                     	;# 
   219  0107                     	;# 
   220  0108                     	;# 
   221  0109                     	;# 
   222  010C                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0187                     	;# 
   229  0188                     	;# 
   230  0189                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0014                     	;# 
   254  0015                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001D                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  0081                     	;# 
   268  0085                     	;# 
   269  0086                     	;# 
   270  0087                     	;# 
   271  0089                     	;# 
   272  008C                     	;# 
   273  008D                     	;# 
   274  008E                     	;# 
   275  008F                     	;# 
   276  0090                     	;# 
   277  0091                     	;# 
   278  0092                     	;# 
   279  0093                     	;# 
   280  0093                     	;# 
   281  0093                     	;# 
   282  0094                     	;# 
   283  0095                     	;# 
   284  0096                     	;# 
   285  0097                     	;# 
   286  0098                     	;# 
   287  0099                     	;# 
   288  009A                     	;# 
   289  009B                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  009F                     	;# 
   294  0105                     	;# 
   295  0107                     	;# 
   296  0108                     	;# 
   297  0109                     	;# 
   298  010C                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  010E                     	;# 
   302  010F                     	;# 
   303  0185                     	;# 
   304  0187                     	;# 
   305  0188                     	;# 
   306  0189                     	;# 
   307  018C                     	;# 
   308  018D                     	;# 
   309  0000                     	;# 
   310  0001                     	;# 
   311  0002                     	;# 
   312  0003                     	;# 
   313  0004                     	;# 
   314  0005                     	;# 
   315  0006                     	;# 
   316  0007                     	;# 
   317  0009                     	;# 
   318  000A                     	;# 
   319  000B                     	;# 
   320  000C                     	;# 
   321  000D                     	;# 
   322  000E                     	;# 
   323  000E                     	;# 
   324  000F                     	;# 
   325  0010                     	;# 
   326  0011                     	;# 
   327  0012                     	;# 
   328  0013                     	;# 
   329  0014                     	;# 
   330  0015                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0017                     	;# 
   334  0018                     	;# 
   335  0019                     	;# 
   336  001A                     	;# 
   337  001B                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  001D                     	;# 
   341  001E                     	;# 
   342  001F                     	;# 
   343  0081                     	;# 
   344  0085                     	;# 
   345  0086                     	;# 
   346  0087                     	;# 
   347  0089                     	;# 
   348  008C                     	;# 
   349  008D                     	;# 
   350  008E                     	;# 
   351  008F                     	;# 
   352  0090                     	;# 
   353  0091                     	;# 
   354  0092                     	;# 
   355  0093                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0098                     	;# 
   363  0099                     	;# 
   364  009A                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  009F                     	;# 
   370  0105                     	;# 
   371  0107                     	;# 
   372  0108                     	;# 
   373  0109                     	;# 
   374  010C                     	;# 
   375  010C                     	;# 
   376  010D                     	;# 
   377  010E                     	;# 
   378  010F                     	;# 
   379  0185                     	;# 
   380  0187                     	;# 
   381  0188                     	;# 
   382  0189                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  000E                     	;# 
   400  000F                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0013                     	;# 
   405  0014                     	;# 
   406  0015                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  001D                     	;# 
   417  001E                     	;# 
   418  001F                     	;# 
   419  0081                     	;# 
   420  0085                     	;# 
   421  0086                     	;# 
   422  0087                     	;# 
   423  0089                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  008F                     	;# 
   428  0090                     	;# 
   429  0091                     	;# 
   430  0092                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0095                     	;# 
   436  0096                     	;# 
   437  0097                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009A                     	;# 
   441  009B                     	;# 
   442  009C                     	;# 
   443  009D                     	;# 
   444  009E                     	;# 
   445  009F                     	;# 
   446  0105                     	;# 
   447  0107                     	;# 
   448  0108                     	;# 
   449  0109                     	;# 
   450  010C                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  010F                     	;# 
   455  0185                     	;# 
   456  0187                     	;# 
   457  0188                     	;# 
   458  0189                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  000E                     	;# 
   476  000F                     	;# 
   477  0010                     	;# 
   478  0011                     	;# 
   479  0012                     	;# 
   480  0013                     	;# 
   481  0014                     	;# 
   482  0015                     	;# 
   483  0015                     	;# 
   484  0016                     	;# 
   485  0017                     	;# 
   486  0018                     	;# 
   487  0019                     	;# 
   488  001A                     	;# 
   489  001B                     	;# 
   490  001B                     	;# 
   491  001C                     	;# 
   492  001D                     	;# 
   493  001E                     	;# 
   494  001F                     	;# 
   495  0081                     	;# 
   496  0085                     	;# 
   497  0086                     	;# 
   498  0087                     	;# 
   499  0089                     	;# 
   500  008C                     	;# 
   501  008D                     	;# 
   502  008E                     	;# 
   503  008F                     	;# 
   504  0090                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0093                     	;# 
   508  0093                     	;# 
   509  0093                     	;# 
   510  0094                     	;# 
   511  0095                     	;# 
   512  0096                     	;# 
   513  0097                     	;# 
   514  0098                     	;# 
   515  0099                     	;# 
   516  009A                     	;# 
   517  009B                     	;# 
   518  009C                     	;# 
   519  009D                     	;# 
   520  009E                     	;# 
   521  009F                     	;# 
   522  0105                     	;# 
   523  0107                     	;# 
   524  0108                     	;# 
   525  0109                     	;# 
   526  010C                     	;# 
   527  010C                     	;# 
   528  010D                     	;# 
   529  010E                     	;# 
   530  010F                     	;# 
   531  0185                     	;# 
   532  0187                     	;# 
   533  0188                     	;# 
   534  0189                     	;# 
   535  018C                     	;# 
   536  018D                     	;# 
   537                           
   538                           	psect	strings
   539  0800                     __pstrings:	
   540  0800                     stringtab:	
   541  0800                     __stringtab:	
   542  0800                     stringcode:	
   543                           ;	String table - string pointers are 1 byte each
   544                           
   545  0800                     stringdir:	
   546  0800  3008               	movlw	high stringdir
   547  0801  008A               	movwf	10
   548  0802  0804               	movf	4,w
   549  0803  0A84               	incf	4,f
   550  0804  0782               	addwf	2,f
   551  0805                     __stringbase:	
   552  0805  3400               	retlw	0
   553  0806                     __end_of__stringtab:	
   554  0806                     _dpowers:	
   555  0806  3401               	retlw	1
   556  0807  3400               	retlw	0
   557  0808  340A               	retlw	10
   558  0809  3400               	retlw	0
   559  080A  3464               	retlw	100
   560  080B  3400               	retlw	0
   561  080C  34E8               	retlw	232
   562  080D  3403               	retlw	3
   563  080E  3410               	retlw	16
   564  080F  3427               	retlw	39
   565  0810                     __end_of_dpowers:	
   566  0013                     _SSPBUF	set	19
   567  0014                     _SSPCON	set	20
   568  0006                     _PORTB	set	6
   569  0001                     _TMR0	set	1
   570  0012                     _T2CONbits	set	18
   571  000C                     _PIR1bits	set	12
   572  001B                     _CCPR2L	set	27
   573  0015                     _CCPR1L	set	21
   574  001D                     _CCP2CONbits	set	29
   575  0017                     _CCP1CONbits	set	23
   576  0019                     _TXREG	set	25
   577  001A                     _RCREG	set	26
   578  005F                     _GIE	set	95
   579  005E                     _PEIE	set	94
   580  0035                     _RB5	set	53
   581  0058                     _RBIF	set	88
   582  005B                     _RBIE	set	91
   583  005A                     _T0IF	set	90
   584  005D                     _T0IE	set	93
   585  002E                     _RA6	set	46
   586  002D                     _RA5	set	45
   587  0065                     _RCIF	set	101
   588  0064                     _TXIF	set	100
   589  00C2                     _FERR	set	194
   590  00C1                     _OERR	set	193
   591  00C6                     _RX9	set	198
   592  00C5                     _SREN	set	197
   593  00C4                     _CREN	set	196
   594  00C7                     _SPEN	set	199
   595  0094                     _SSPSTATbits	set	148
   596  0094                     _SSPSTAT	set	148
   597  0096                     _IOCB	set	150
   598  0081                     _OPTION_REGbits	set	129
   599  0092                     _PR2	set	146
   600  0099                     _SPBRG	set	153
   601  043B                     _TRISC3	set	1083
   602  043D                     _TRISC5	set	1085
   603  0460                     _TMR1IE	set	1120
   604  0434                     _TRISB4	set	1076
   605  0433                     _TRISB3	set	1075
   606  0432                     _TRISB2	set	1074
   607  0431                     _TRISB1	set	1073
   608  0437                     _TRISB7	set	1079
   609  0435                     _TRISB5	set	1077
   610  042E                     _TRISA6	set	1070
   611  042D                     _TRISA5	set	1069
   612  043A                     _TRISC2	set	1082
   613  0439                     _TRISC1	set	1081
   614  04C5                     _TXEN	set	1221
   615  04C6                     _TX9	set	1222
   616  0465                     _RCIE	set	1125
   617  0464                     _TXIE	set	1124
   618  04C4                     _SYNC	set	1220
   619  04C2                     _BRGH	set	1218
   620  0C4B                     _ANS11	set	3147
   621  0C48                     _ANS8	set	3144
   622  0C49                     _ANS9	set	3145
   623  0C4A                     _ANS10	set	3146
   624  0C4D                     _ANS13	set	3149
   625  0C44                     _ANS4	set	3140
   626  0810                     STR_1:	
   627  0810  3453               	retlw	83	;'S'
   628  0811  3465               	retlw	101	;'e'
   629  0812  3474               	retlw	116	;'t'
   630  0813  3450               	retlw	80	;'P'
   631  0814  346F               	retlw	111	;'o'
   632  0815  3469               	retlw	105	;'i'
   633  0816  346E               	retlw	110	;'n'
   634  0817  3474               	retlw	116	;'t'
   635  0818  343A               	retlw	58	;':'
   636  0819  3420               	retlw	32	;' '
   637  081A  3425               	retlw	37	;'%'
   638  081B  3464               	retlw	100	;'d'
   639  081C  3420               	retlw	32	;' '
   640  081D  340D               	retlw	13
   641  081E  340A               	retlw	10
   642  081F  3400               	retlw	0
   643  0820                     STR_6:	
   644  0820  3446               	retlw	70	;'F'
   645  0821  3469               	retlw	105	;'i'
   646  0822  346D               	retlw	109	;'m'
   647  0823  3420               	retlw	32	;' '
   648  0824  3464               	retlw	100	;'d'
   649  0825  346F               	retlw	111	;'o'
   650  0826  3420               	retlw	32	;' '
   651  0827  3474               	retlw	116	;'t'
   652  0828  3465               	retlw	101	;'e'
   653  0829  3473               	retlw	115	;'s'
   654  082A  3474               	retlw	116	;'t'
   655  082B  3465               	retlw	101	;'e'
   656  082C  3420               	retlw	32	;' '
   657  082D  3400               	retlw	0
   658  082E                     STR_2:	
   659  082E  3453               	retlw	83	;'S'
   660  082F  3450               	retlw	80	;'P'
   661  0830  3449               	retlw	73	;'I'
   662  0831  3452               	retlw	82	;'R'
   663  0832  3478               	retlw	120	;'x'
   664  0833  343A               	retlw	58	;':'
   665  0834  3420               	retlw	32	;' '
   666  0835  3425               	retlw	37	;'%'
   667  0836  3464               	retlw	100	;'d'
   668  0837  3420               	retlw	32	;' '
   669  0838  340D               	retlw	13
   670  0839  340A               	retlw	10
   671  083A  3400               	retlw	0
   672  083B                     STR_3:	
   673  083B  344B               	retlw	75	;'K'
   674  083C  3470               	retlw	112	;'p'
   675  083D  343A               	retlw	58	;':'
   676  083E  3420               	retlw	32	;' '
   677  083F  3425               	retlw	37	;'%'
   678  0840  3464               	retlw	100	;'d'
   679  0841  3420               	retlw	32	;' '
   680  0842  342D               	retlw	45	;'-'
   681  0843  343E               	retlw	62	;'>'
   682  0844  3420               	retlw	32	;' '
   683  0845  3400               	retlw	0
   684  0846                     STR_4:	
   685  0846  3425               	retlw	37	;'%'
   686  0847  3464               	retlw	100	;'d'
   687  0848  3420               	retlw	32	;' '
   688  0849  3400               	retlw	0
   689  0846                     
   690                           ; #config settings
   691  0000                     
   692                           	psect	cinit
   693  0015                     start_initialization:	
   694  0015                     __initialization:	
   695                           
   696                           ; Clear objects allocated to BANK0
   697  0015  1383               	bcf	3,7	;select IRP bank0
   698  0016  3053               	movlw	low __pbssBANK0
   699  0017  0084               	movwf	4
   700  0018  3070               	movlw	low (__pbssBANK0+29)
   701  0019  120A  118A  27F5  120A  118A  	fcall	clear_ram0
   702                           
   703                           ; Clear objects allocated to BANK1
   704  001E  30D6               	movlw	low __pbssBANK1
   705  001F  0084               	movwf	4
   706  0020  30E0               	movlw	low (__pbssBANK1+10)
   707  0021  120A  118A  27F5  120A  118A  	fcall	clear_ram0
   708                           
   709                           ; Clear objects allocated to BANK3
   710  0026  1783               	bsf	3,7	;select IRP bank2
   711  0027  3090               	movlw	low __pbssBANK3
   712  0028  0084               	movwf	4
   713  0029  30BF               	movlw	low (__pbssBANK3+47)
   714  002A  120A  118A  27F5  120A  118A  	fcall	clear_ram0
   715                           
   716                           ; Clear objects allocated to BANK2
   717  002F  3010               	movlw	low __pbssBANK2
   718  0030  0084               	movwf	4
   719  0031  303E               	movlw	low (__pbssBANK2+46)
   720  0032  120A  118A  27F5   	fcall	clear_ram0
   721  0035                     end_of_initialization:	
   722                           ;End of C runtime variable initialization code
   723                           
   724  0035                     __end_of__initialization:	
   725  0035  0183               	clrf	3
   726  0036  120A  118A  2839   	ljmp	_main	;jump to C main() function
   727                           
   728                           	psect	bssBANK0
   729  0053                     __pbssBANK0:	
   730  0053                     _last_pos:	
   731  0053                     	ds	4
   732  0057                     _set_point:	
   733  0057                     	ds	4
   734  005B                     _motor_pos:	
   735  005B                     	ds	4
   736  005F                     _encoder1_counter:	
   737  005F                     	ds	4
   738  0063                     SetMotor@last_err:	
   739  0063                     	ds	2
   740  0065                     _onlyK:	
   741  0065                     	ds	2
   742  0067                     _samples:	
   743  0067                     	ds	2
   744  0069                     _sampling:	
   745  0069                     	ds	1
   746  006A                     _ab1:	
   747  006A                     	ds	1
   748  006B                     _state1:	
   749  006B                     	ds	1
   750  006C                     _dummy:	
   751  006C                     	ds	1
   752  006D                     _delayus_variable:	
   753  006D                     	ds	1
   754  006E                     SetMotor@derivative:	
   755  006E                     	ds	2
   756                           
   757                           	psect	bssBANK1
   758  00D6                     __pbssBANK1:	
   759  00D6                     isr@tick:	
   760  00D6                     	ds	2
   761  00D8                     _nSPIData:	
   762  00D8                     	ds	2
   763  00DA                     _com_time:	
   764  00DA                     	ds	2
   765  00DC                     SetMotor@integral:	
   766  00DC                     	ds	4
   767                           
   768                           	psect	bssBANK3
   769  0190                     __pbssBANK3:	
   770  0190                     _pos_log1:	
   771  0190                     	ds	46
   772  01BE                     _SPIData:	
   773  01BE                     	ds	1
   774                           
   775                           	psect	bssBANK2
   776  0110                     __pbssBANK2:	
   777  0110                     _pos_log2:	
   778  0110                     	ds	46
   779                           
   780                           	psect	clrtext
   781  07F5                     clear_ram0:	
   782                           ;	Called with FSR containing the base address, and
   783                           ;	W with the last address+1
   784                           
   785  07F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   786  07F6                     clrloop0:	
   787  07F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   788  07F7  0A84               	incf	4,f	;increment pointer
   789  07F8  0604               	xorwf	4,w	;XOR with final address
   790  07F9  1903               	btfsc	3,2	;have we reached the end yet?
   791  07FA  3400               	retlw	0	;all done for this memory range, return
   792  07FB  0604               	xorwf	4,w	;XOR again to restore value
   793  07FC  2FF6               	goto	clrloop0	;do the next byte
   794                           
   795                           	psect	cstackBANK3
   796  01BF                     __pcstackBANK3:	
   797  01BF                     main@sVar:	
   798                           
   799                           ; 20 bytes @ 0x0
   800  01BF                     	ds	25
   801  01D8                     main@sVar_394:	
   802                           
   803                           ; 10 bytes @ 0x19
   804  01D8                     	ds	10
   805  01E2                     main@serialIn_392:	
   806                           
   807                           ; 1 bytes @ 0x23
   808  01E2                     	ds	1
   809                           
   810                           	psect	cstackBANK1
   811  00A0                     __pcstackBANK1:	
   812  00A0                     ??_spiRead:	
   813  00A0                     ?_spiInit:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  00A0                     ??_spiWrite:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  00A0                     ??_serial_init:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  00A0                     ??_putch:	
   823                           ; 1 bytes @ 0x0
   824                           
   825  00A0                     ??_chkchr:	
   826                           ; 1 bytes @ 0x0
   827                           
   828  00A0                     ??_pwm_init:	
   829                           ; 1 bytes @ 0x0
   830                           
   831  00A0                     ??_resetCounter:	
   832                           ; 1 bytes @ 0x0
   833                           
   834  00A0                     ??_encoders_init:	
   835                           ; 1 bytes @ 0x0
   836                           
   837  00A0                     ??_spiReceiveWait:	
   838                           ; 1 bytes @ 0x0
   839                           
   840  00A0                     ?_spiDataReady:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  00A0                     ?___lwdiv:	
   844                           ; 2 bytes @ 0x0
   845                           
   846  00A0                     ?___lmul:	
   847                           ; 2 bytes @ 0x0
   848                           
   849  00A0                     spiInit@sDataSample:	
   850                           ; 4 bytes @ 0x0
   851                           
   852  00A0                     spiWrite@dat:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  00A0                     ___lwdiv@divisor:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  00A0                     ___lmul@multiplier:	
   859                           ; 2 bytes @ 0x0
   860                           
   861                           
   862                           ; 4 bytes @ 0x0
   863  00A0                     	ds	1
   864  00A1                     putch@c:	
   865  00A1                     spiInit@sClockIdle:	
   866                           ; 1 bytes @ 0x1
   867                           
   868                           
   869                           ; 1 bytes @ 0x1
   870  00A1                     	ds	1
   871  00A2                     ??_spiDataReady:	
   872  00A2                     ?_putst:	
   873                           ; 1 bytes @ 0x2
   874                           
   875  00A2                     spiInit@sTransmitEdge:	
   876                           ; 1 bytes @ 0x2
   877                           
   878  00A2                     putst@str:	
   879                           ; 1 bytes @ 0x2
   880                           
   881  00A2                     ___lwdiv@dividend:	
   882                           ; 2 bytes @ 0x2
   883                           
   884                           
   885                           ; 2 bytes @ 0x2
   886  00A2                     	ds	1
   887  00A3                     ??_spiInit:	
   888  00A3                     spiInit@sType:	
   889                           ; 1 bytes @ 0x3
   890                           
   891                           
   892                           ; 1 bytes @ 0x3
   893  00A3                     	ds	1
   894  00A4                     ??_putst:	
   895  00A4                     ??___lwdiv:	
   896                           ; 1 bytes @ 0x4
   897                           
   898  00A4                     ___lmul@multiplicand:	
   899                           ; 1 bytes @ 0x4
   900                           
   901                           
   902                           ; 4 bytes @ 0x4
   903  00A4                     	ds	1
   904  00A5                     ___lwdiv@quotient:	
   905                           
   906                           ; 2 bytes @ 0x5
   907  00A5                     	ds	2
   908  00A7                     ___lwdiv@counter:	
   909                           
   910                           ; 1 bytes @ 0x7
   911  00A7                     	ds	1
   912  00A8                     ??___lmul:	
   913  00A8                     ?___lwmod:	
   914                           ; 1 bytes @ 0x8
   915                           
   916  00A8                     ___lwmod@divisor:	
   917                           ; 2 bytes @ 0x8
   918                           
   919                           
   920                           ; 2 bytes @ 0x8
   921  00A8                     	ds	1
   922  00A9                     ___lmul@product:	
   923                           
   924                           ; 4 bytes @ 0x9
   925  00A9                     	ds	1
   926  00AA                     ___lwmod@dividend:	
   927                           
   928                           ; 2 bytes @ 0xA
   929  00AA                     	ds	2
   930  00AC                     ??___lwmod:	
   931                           
   932                           ; 1 bytes @ 0xC
   933  00AC                     	ds	1
   934  00AD                     ?___aldiv:	
   935  00AD                     ___lwmod@counter:	
   936                           ; 4 bytes @ 0xD
   937                           
   938  00AD                     ___aldiv@divisor:	
   939                           ; 1 bytes @ 0xD
   940                           
   941                           
   942                           ; 4 bytes @ 0xD
   943  00AD                     	ds	1
   944  00AE                     ?_sprintf:	
   945  00AE                     sprintf@sp:	
   946                           ; 2 bytes @ 0xE
   947                           
   948                           
   949                           ; 2 bytes @ 0xE
   950  00AE                     	ds	2
   951  00B0                     sprintf@f:	
   952                           
   953                           ; 1 bytes @ 0x10
   954  00B0                     	ds	1
   955  00B1                     ___aldiv@dividend:	
   956                           
   957                           ; 4 bytes @ 0x11
   958  00B1                     	ds	2
   959  00B3                     ??_sprintf:	
   960                           
   961                           ; 1 bytes @ 0x13
   962  00B3                     	ds	2
   963  00B5                     ??___aldiv:	
   964                           
   965                           ; 1 bytes @ 0x15
   966  00B5                     	ds	1
   967  00B6                     sprintf@ap:	
   968  00B6                     ___aldiv@counter:	
   969                           ; 1 bytes @ 0x16
   970                           
   971                           
   972                           ; 1 bytes @ 0x16
   973  00B6                     	ds	1
   974  00B7                     sprintf@flag:	
   975  00B7                     ___aldiv@sign:	
   976                           ; 1 bytes @ 0x17
   977                           
   978                           
   979                           ; 1 bytes @ 0x17
   980  00B7                     	ds	1
   981  00B8                     sprintf@prec:	
   982  00B8                     ___aldiv@quotient:	
   983                           ; 1 bytes @ 0x18
   984                           
   985                           
   986                           ; 4 bytes @ 0x18
   987  00B8                     	ds	1
   988  00B9                     sprintf@val:	
   989                           
   990                           ; 2 bytes @ 0x19
   991  00B9                     	ds	2
   992  00BB                     sprintf@c:	
   993                           
   994                           ; 1 bytes @ 0x1B
   995  00BB                     	ds	1
   996  00BC                     ?_pwm_set:	
   997  00BC                     ?_SetPoint:	
   998                           ; 1 bytes @ 0x1C
   999                           
  1000  00BC                     pwm_set@channel:	
  1001                           ; 1 bytes @ 0x1C
  1002                           
  1003  00BC                     SetPoint@new_val:	
  1004                           ; 2 bytes @ 0x1C
  1005                           
  1006                           
  1007                           ; 2 bytes @ 0x1C
  1008  00BC                     	ds	2
  1009  00BE                     ??_SetPoint:	
  1010  00BE                     pwm_set@duty_cycle:	
  1011                           ; 1 bytes @ 0x1E
  1012                           
  1013                           
  1014                           ; 4 bytes @ 0x1E
  1015  00BE                     	ds	1
  1016  00BF                     SetPoint@sVar:	
  1017                           
  1018                           ; 20 bytes @ 0x1F
  1019  00BF                     	ds	3
  1020  00C2                     ??_pwm_set:	
  1021                           
  1022                           ; 1 bytes @ 0x22
  1023  00C2                     	ds	17
  1024  00D3                     ??_motor_reset:	
  1025  00D3                     ??_main:	
  1026                           ; 1 bytes @ 0x33
  1027                           
  1028                           
  1029                           ; 1 bytes @ 0x33
  1030  00D3                     	ds	3
  1031                           
  1032                           	psect	cstackCOMMON
  1033  0070                     __pcstackCOMMON:	
  1034  0070                     ?_spiRead:	
  1035  0070                     ?_spiWrite:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_serial_init:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_putch:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_chkchr:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_pwm_init:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?_SetMotor:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_resetCounter:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?_motor_reset:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_isr:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_encoders_init:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?_main:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?_spiReceiveWait:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ?___wmul:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     ?___awdiv:	
  1075                           ; 2 bytes @ 0x0
  1076                           
  1077  0070                     ?_constrain:	
  1078                           ; 2 bytes @ 0x0
  1079                           
  1080  0070                     ?i1___lmul:	
  1081                           ; 4 bytes @ 0x0
  1082                           
  1083  0070                     ___wmul@multiplier:	
  1084                           ; 4 bytes @ 0x0
  1085                           
  1086  0070                     ___awdiv@divisor:	
  1087                           ; 2 bytes @ 0x0
  1088                           
  1089  0070                     constrain@value:	
  1090                           ; 2 bytes @ 0x0
  1091                           
  1092  0070                     i1___lmul@multiplier:	
  1093                           ; 4 bytes @ 0x0
  1094                           
  1095                           
  1096                           ; 4 bytes @ 0x0
  1097  0070                     	ds	2
  1098  0072                     ___wmul@multiplicand:	
  1099  0072                     ___awdiv@dividend:	
  1100                           ; 2 bytes @ 0x2
  1101                           
  1102                           
  1103                           ; 2 bytes @ 0x2
  1104  0072                     	ds	2
  1105  0074                     ??___wmul:	
  1106  0074                     ??___awdiv:	
  1107                           ; 1 bytes @ 0x4
  1108                           
  1109  0074                     ___wmul@product:	
  1110                           ; 1 bytes @ 0x4
  1111                           
  1112  0074                     constrain@lLimit:	
  1113                           ; 2 bytes @ 0x4
  1114                           
  1115  0074                     i1___lmul@multiplicand:	
  1116                           ; 4 bytes @ 0x4
  1117                           
  1118                           
  1119                           ; 4 bytes @ 0x4
  1120  0074                     	ds	1
  1121  0075                     ___awdiv@counter:	
  1122                           
  1123                           ; 1 bytes @ 0x5
  1124  0075                     	ds	1
  1125  0076                     ___awdiv@sign:	
  1126                           
  1127                           ; 1 bytes @ 0x6
  1128  0076                     	ds	1
  1129  0077                     ___awdiv@quotient:	
  1130                           
  1131                           ; 2 bytes @ 0x7
  1132  0077                     	ds	1
  1133  0078                     ??i1___lmul:	
  1134  0078                     constrain@uLimit:	
  1135                           ; 1 bytes @ 0x8
  1136                           
  1137                           
  1138                           ; 4 bytes @ 0x8
  1139  0078                     	ds	1
  1140  0079                     i1___lmul@product:	
  1141                           
  1142                           ; 4 bytes @ 0x9
  1143  0079                     	ds	3
  1144  007C                     ??_constrain:	
  1145                           
  1146                           ; 1 bytes @ 0xC
  1147  007C                     	ds	1
  1148  007D                     ??i1___aldiv:	
  1149                           
  1150                           ; 1 bytes @ 0xD
  1151  007D                     	ds	1
  1152                           
  1153                           	psect	cstackBANK0
  1154  0020                     __pcstackBANK0:	
  1155  0020                     ?i1___aldiv:	
  1156  0020                     i1___aldiv@divisor:	
  1157                           ; 4 bytes @ 0x0
  1158                           
  1159                           
  1160                           ; 4 bytes @ 0x0
  1161  0020                     	ds	4
  1162  0024                     i1___aldiv@dividend:	
  1163                           
  1164                           ; 4 bytes @ 0x4
  1165  0024                     	ds	4
  1166  0028                     i1___aldiv@counter:	
  1167                           
  1168                           ; 1 bytes @ 0x8
  1169  0028                     	ds	1
  1170  0029                     i1___aldiv@sign:	
  1171                           
  1172                           ; 1 bytes @ 0x9
  1173  0029                     	ds	1
  1174  002A                     i1___aldiv@quotient:	
  1175                           
  1176                           ; 4 bytes @ 0xA
  1177  002A                     	ds	4
  1178  002E                     ?i1_pwm_set:	
  1179  002E                     i1pwm_set@channel:	
  1180                           ; 1 bytes @ 0xE
  1181                           
  1182                           
  1183                           ; 2 bytes @ 0xE
  1184  002E                     	ds	2
  1185  0030                     i1pwm_set@duty_cycle:	
  1186                           
  1187                           ; 4 bytes @ 0x10
  1188  0030                     	ds	4
  1189  0034                     ??i1_pwm_set:	
  1190                           
  1191                           ; 1 bytes @ 0x14
  1192  0034                     	ds	4
  1193  0038                     ??_SetMotor:	
  1194                           
  1195                           ; 1 bytes @ 0x18
  1196  0038                     	ds	8
  1197  0040                     SetMotor@P_Response:	
  1198                           
  1199                           ; 2 bytes @ 0x20
  1200  0040                     	ds	2
  1201  0042                     SetMotor@D_Response:	
  1202                           
  1203                           ; 2 bytes @ 0x22
  1204  0042                     	ds	2
  1205  0044                     SetMotor@I_Response:	
  1206                           
  1207                           ; 2 bytes @ 0x24
  1208  0044                     	ds	2
  1209  0046                     SetMotor@resp:	
  1210                           
  1211                           ; 4 bytes @ 0x26
  1212  0046                     	ds	4
  1213  004A                     SetMotor@err:	
  1214                           
  1215                           ; 2 bytes @ 0x2A
  1216  004A                     	ds	2
  1217  004C                     ??_isr:	
  1218                           
  1219                           ; 1 bytes @ 0x2C
  1220  004C                     	ds	6
  1221  0052                     isr@portB:	
  1222                           
  1223                           ; 1 bytes @ 0x32
  1224  0052                     	ds	1
  1225                           
  1226                           	psect	maintext
  1227  0039                     __pmaintext:	
  1228 ;;
  1229 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1230 ;;
  1231 ;; *************** function _main *****************
  1232 ;; Defined at:
  1233 ;;		line 287 in file "main.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  sVar           10   25[BANK3 ] unsigned char [10]
  1238 ;;  sVar           20    0[BANK3 ] unsigned char [20]
  1239 ;;  serialIn        1   35[BANK3 ] unsigned char 
  1240 ;;  i               2    0        int 
  1241 ;;  enc1            2    0        int 
  1242 ;;  serialIn        1    0        unsigned char 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  1    wreg      void 
  1245 ;; Registers used:
  1246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1247 ;; Tracked objects:
  1248 ;;		On entry : B00/0
  1249 ;;		On exit  : 0/0
  1250 ;;		Unchanged: 0/0
  1251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1252 ;;      Params:         0       0       0       0       0
  1253 ;;      Locals:         0       0       0      36       0
  1254 ;;      Temps:          0       0       3       0       0
  1255 ;;      Totals:         0       0       3      36       0
  1256 ;;Total ram usage:       39 bytes
  1257 ;; Hardware stack levels required when called:    8
  1258 ;; This function calls:
  1259 ;;		_SetPoint
  1260 ;;		_chkchr
  1261 ;;		_encoders_init
  1262 ;;		_motor_reset
  1263 ;;		_putst
  1264 ;;		_pwm_init
  1265 ;;		_pwm_set
  1266 ;;		_resetCounter
  1267 ;;		_serial_init
  1268 ;;		_spiDataReady
  1269 ;;		_spiInit
  1270 ;;		_spiRead
  1271 ;;		_spiWrite
  1272 ;;		_sprintf
  1273 ;; This function is called by:
  1274 ;;		Startup code after reset
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _main
  1280  0039                     _main:	
  1281                           
  1282                           ;main.c: 296: OPTION_REGbits.T0CS = 0;
  1283                           
  1284                           ;incstack = 0
  1285                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1286  0039  1683               	bsf	3,5	;RP0=1, select bank1
  1287  003A  1303               	bcf	3,6	;RP1=0, select bank1
  1288  003B  1281               	bcf	1,5	;volatile
  1289                           
  1290                           ;main.c: 297: OPTION_REGbits.PSA = 0;
  1291  003C  1181               	bcf	1,3	;volatile
  1292                           
  1293                           ;main.c: 298: OPTION_REGbits.PS = 7;
  1294  003D  3007               	movlw	7
  1295  003E  0481               	iorwf	1,f	;volatile
  1296                           
  1297                           ;main.c: 301: TRISB5 = 0;
  1298  003F  1286               	bcf	6,5	;volatile
  1299                           
  1300                           ;main.c: 302: ANS13 = 0;
  1301  0040  1683               	bsf	3,5	;RP0=1, select bank3
  1302  0041  1703               	bsf	3,6	;RP1=1, select bank3
  1303  0042  1289               	bcf	9,5	;volatile
  1304                           
  1305                           ;main.c: 303: TRISB7 = 0;
  1306  0043  1683               	bsf	3,5	;RP0=1, select bank1
  1307  0044  1303               	bcf	3,6	;RP1=0, select bank1
  1308  0045  1386               	bcf	6,7	;volatile
  1309                           
  1310                           ;main.c: 304: TRISB1 = 1;
  1311  0046  1486               	bsf	6,1	;volatile
  1312                           
  1313                           ;main.c: 305: TRISB2 = 1;
  1314  0047  1506               	bsf	6,2	;volatile
  1315                           
  1316                           ;main.c: 306: TRISB3 = 1;
  1317  0048  1586               	bsf	6,3	;volatile
  1318                           
  1319                           ;main.c: 307: TRISB4 = 1;
  1320  0049  1606               	bsf	6,4	;volatile
  1321                           
  1322                           ;main.c: 308: ANS10 = 0;
  1323  004A  1683               	bsf	3,5	;RP0=1, select bank3
  1324  004B  1703               	bsf	3,6	;RP1=1, select bank3
  1325  004C  1109               	bcf	9,2	;volatile
  1326                           
  1327                           ;main.c: 309: ANS9 = 0;
  1328  004D  1089               	bcf	9,1	;volatile
  1329                           
  1330                           ;main.c: 310: ANS8 = 0;
  1331  004E  1009               	bcf	9,0	;volatile
  1332                           
  1333                           ;main.c: 311: ANS11 = 0;
  1334  004F  1189               	bcf	9,3	;volatile
  1335                           
  1336                           ;main.c: 312: RB5=1;
  1337  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0051  1303               	bcf	3,6	;RP1=0, select bank0
  1339  0052  1686               	bsf	6,5	;volatile
  1340                           
  1341                           ;main.c: 315: T0IE = 1;
  1342  0053  168B               	bsf	11,5	;volatile
  1343                           
  1344                           ;main.c: 316: TMR1IE = 0;
  1345  0054  1683               	bsf	3,5	;RP0=1, select bank1
  1346  0055  1303               	bcf	3,6	;RP1=0, select bank1
  1347  0056  100C               	bcf	12,0	;volatile
  1348                           
  1349                           ;main.c: 317: PEIE = 1;
  1350  0057  170B               	bsf	11,6	;volatile
  1351                           
  1352                           ;main.c: 318: GIE = 1;
  1353  0058  178B               	bsf	11,7	;volatile
  1354                           
  1355                           ;main.c: 319: IOCB=0b00011000;
  1356  0059  3018               	movlw	24
  1357  005A  0096               	movwf	22	;volatile
  1358                           
  1359                           ;main.c: 320: RBIE = 1;
  1360  005B  158B               	bsf	11,3	;volatile
  1361                           
  1362                           ;main.c: 324: serial_init();
  1363  005C  120A  158A  2526  120A  118A  	fcall	_serial_init
  1364                           
  1365                           ;main.c: 326: spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW,SPI_ID
      +                          LE_2_ACTIVE);
  1366  0061  1683               	bsf	3,5	;RP0=1, select bank1
  1367  0062  1303               	bcf	3,6	;RP1=0, select bank1
  1368  0063  01A0               	clrf	spiInit@sDataSample^(0+128)
  1369  0064  01A1               	clrf	spiInit@sClockIdle^(0+128)
  1370  0065  01A2               	clrf	spiInit@sTransmitEdge^(0+128)
  1371  0066  3024               	movlw	36
  1372  0067  120A  158A  2512  120A  118A  	fcall	_spiInit
  1373                           
  1374                           ;main.c: 329: pwm_init();
  1375  006C  120A  158A  257B  120A  118A  	fcall	_pwm_init
  1376                           
  1377                           ;main.c: 336: encoders_init();
  1378  0071  120A  158A  253E  120A  118A  	fcall	_encoders_init
  1379                           
  1380                           ;main.c: 344: pwm_set(1, 0);
  1381  0076  3001               	movlw	1
  1382  0077  1683               	bsf	3,5	;RP0=1, select bank1
  1383  0078  1303               	bcf	3,6	;RP1=0, select bank1
  1384  0079  00BC               	movwf	pwm_set@channel^(0+128)
  1385  007A  3000               	movlw	0
  1386  007B  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  1387  007C  3000               	movlw	0
  1388  007D  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1389  007E  3000               	movlw	0
  1390  007F  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1391  0080  3000               	movlw	0
  1392  0081  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1393  0082  3000               	movlw	0
  1394  0083  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  1395  0084  120A  118A  26EF  120A  118A  	fcall	_pwm_set
  1396                           
  1397                           ;main.c: 345: pwm_set(2, 0);
  1398  0089  3002               	movlw	2
  1399  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1400  008B  1303               	bcf	3,6	;RP1=0, select bank1
  1401  008C  00BC               	movwf	pwm_set@channel^(0+128)
  1402  008D  3000               	movlw	0
  1403  008E  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  1404  008F  3000               	movlw	0
  1405  0090  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1406  0091  3000               	movlw	0
  1407  0092  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1408  0093  3000               	movlw	0
  1409  0094  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1410  0095  3000               	movlw	0
  1411  0096  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  1412  0097  120A  118A  26EF  120A  118A  	fcall	_pwm_set
  1413  009C                     l2990:	
  1414                           
  1415                           ;main.c: 352: if(spiDataReady())
  1416  009C  120A  158A  24F3  120A  118A  	fcall	_spiDataReady
  1417  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  1418  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  1419  00A3  0820               	movf	?_spiDataReady^(0+128),w
  1420  00A4  0421               	iorwf	(?_spiDataReady+1)^(0+128),w
  1421  00A5  1903               	btfsc	3,2
  1422  00A6  28E5               	goto	l3002
  1423                           
  1424                           ;main.c: 353: {;main.c: 354: RB5 = !RB5;
  1425  00A7  3020               	movlw	32
  1426  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1427  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1428  00AA  0686               	xorwf	6,f
  1429                           
  1430                           ;main.c: 355: SPIData = spiRead() >> 1;
  1431  00AB  120A  158A  24DC  120A  118A  	fcall	_spiRead
  1432  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1433  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1434  00B2  00D3               	movwf	??_main^(0+128)
  1435  00B3  1003               	clrc
  1436  00B4  0C53               	rrf	??_main^(0+128),w
  1437  00B5  00D4               	movwf	(??_main+1)^(0+128)
  1438  00B6  0854               	movf	(??_main+1)^(0+128),w
  1439  00B7  1683               	bsf	3,5	;RP0=1, select bank3
  1440  00B8  1703               	bsf	3,6	;RP1=1, select bank3
  1441  00B9  00BE               	movwf	_SPIData^(0+384)
  1442                           
  1443                           ;main.c: 356: spiWrite(0);
  1444  00BA  3000               	movlw	0
  1445  00BB  120A  158A  24EB  120A  118A  	fcall	_spiWrite
  1446                           
  1447                           ;main.c: 357: char sVar[20];;main.c: 358: sprintf(sVar, "SPIRx: %d \r\n", SPIData);
  1448  00C0  30BF               	movlw	(low (main@sVar| (0+256)))& (0+255)
  1449  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  1450  00C2  1303               	bcf	3,6	;RP1=0, select bank1
  1451  00C3  00AE               	movwf	sprintf@sp^(0+128)
  1452  00C4  3001               	movlw	1
  1453  00C5  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1454  00C6  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1455  00C7  00D3               	movwf	??_main^(0+128)
  1456  00C8  0853               	movf	??_main^(0+128),w
  1457  00C9  00B0               	movwf	sprintf@f^(0+128)
  1458  00CA  1683               	bsf	3,5	;RP0=1, select bank3
  1459  00CB  1703               	bsf	3,6	;RP1=1, select bank3
  1460  00CC  083E               	movf	_SPIData^(0+384),w
  1461  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  1462  00CE  1303               	bcf	3,6	;RP1=0, select bank1
  1463  00CF  00D4               	movwf	(??_main+1)^(0+128)
  1464  00D0  01D5               	clrf	((??_main+1)^(0+128)+1)
  1465  00D1  0854               	movf	(??_main+1)^(0+128),w
  1466  00D2  00B1               	movwf	(?_sprintf^(0+128)+3)
  1467  00D3  0855               	movf	(??_main+2)^(0+128),w
  1468  00D4  00B2               	movwf	((?_sprintf+1)^(0+128)+3)
  1469  00D5  120A  118A  24F2  120A  118A  	fcall	_sprintf
  1470                           
  1471                           ;main.c: 359: putst(sVar);
  1472  00DA  30BF               	movlw	(low (main@sVar| (0+256)))& (0+255)
  1473  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  1474  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  1475  00DD  00A2               	movwf	putst@str^(0+128)
  1476  00DE  3001               	movlw	1
  1477  00DF  00A3               	movwf	(putst@str+1)^(0+128)
  1478  00E0  120A  158A  2726  120A  118A  	fcall	_putst
  1479  00E5                     l3002:	
  1480                           
  1481                           ;main.c: 360: };main.c: 363: char serialIn = chkchr();
  1482  00E5  120A  158A  24E3  120A  118A  	fcall	_chkchr
  1483  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  1484  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  1485  00EC  00D3               	movwf	??_main^(0+128)
  1486  00ED  0853               	movf	??_main^(0+128),w
  1487  00EE  1683               	bsf	3,5	;RP0=1, select bank3
  1488  00EF  1703               	bsf	3,6	;RP1=1, select bank3
  1489  00F0  00E2               	movwf	main@serialIn_392^(0+384)
  1490                           
  1491                           ;main.c: 364: if (serialIn == 'u'){
  1492  00F1  3075               	movlw	117
  1493  00F2  0662               	xorwf	main@serialIn_392^(0+384),w
  1494  00F3  1D03               	btfss	3,2
  1495  00F4  29E1               	goto	l3044
  1496                           
  1497                           ;main.c: 365: resetCounter();
  1498  00F5  120A  158A  24FF  120A  118A  	fcall	_resetCounter
  1499                           
  1500                           ;main.c: 367: last_pos = 0;
  1501  00FA  3000               	movlw	0
  1502  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1503  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1504  00FD  00D6               	movwf	_last_pos+3	;volatile
  1505  00FE  3000               	movlw	0
  1506  00FF  00D5               	movwf	_last_pos+2	;volatile
  1507  0100  3000               	movlw	0
  1508  0101  00D4               	movwf	_last_pos+1	;volatile
  1509  0102  3000               	movlw	0
  1510  0103  00D3               	movwf	_last_pos	;volatile
  1511                           
  1512                           ;main.c: 368: samples = 0;
  1513  0104  01E7               	clrf	_samples	;volatile
  1514  0105  01E8               	clrf	_samples+1	;volatile
  1515                           
  1516                           ;main.c: 369: sampling = 1;
  1517  0106  3001               	movlw	1
  1518  0107  1683               	bsf	3,5	;RP0=1, select bank1
  1519  0108  1303               	bcf	3,6	;RP1=0, select bank1
  1520  0109  00D3               	movwf	??_main^(0+128)
  1521  010A  0853               	movf	??_main^(0+128),w
  1522  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1523  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1524  010D  00E9               	movwf	_sampling	;volatile
  1525                           
  1526                           ;main.c: 370: SetPoint(100);
  1527  010E  3064               	movlw	100
  1528  010F  1683               	bsf	3,5	;RP0=1, select bank1
  1529  0110  1303               	bcf	3,6	;RP1=0, select bank1
  1530  0111  00BC               	movwf	SetPoint@new_val^(0+128)
  1531  0112  3000               	movlw	0
  1532  0113  00BD               	movwf	(SetPoint@new_val^(0+128)+1)
  1533  0114  120A  158A  25A5  120A  118A  	fcall	_SetPoint
  1534                           
  1535                           ;main.c: 371: RB5=0;
  1536  0119  1283               	bcf	3,5	;RP0=0, select bank0
  1537  011A  1303               	bcf	3,6	;RP1=0, select bank0
  1538  011B  1286               	bcf	6,5	;volatile
  1539  011C                     l3018:	
  1540                           ;main.c: 372: while (samples < 90){
  1541                           
  1542  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1543  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1544  011E  0868               	movf	_samples+1,w	;volatile
  1545  011F  3A80               	xorlw	128
  1546  0120  00FF               	movwf	127
  1547  0121  3080               	movlw	128
  1548  0122  027F               	subwf	127,w
  1549  0123  1D03               	skipz
  1550  0124  2927               	goto	u3115
  1551  0125  305A               	movlw	90
  1552  0126  0267               	subwf	_samples,w	;volatile
  1553  0127                     u3115:	
  1554  0127  1C03               	skipc
  1555  0128  291C               	goto	l3018
  1556                           
  1557                           ;main.c: 374: };main.c: 375: sampling = 0;
  1558  0129  1283               	bcf	3,5	;RP0=0, select bank0
  1559  012A  1303               	bcf	3,6	;RP1=0, select bank0
  1560  012B  01E9               	clrf	_sampling	;volatile
  1561                           
  1562                           ;main.c: 376: RB5=1;
  1563  012C  1686               	bsf	6,5	;volatile
  1564                           
  1565                           ;main.c: 378: char sVar[10];;main.c: 379: samples = 0;
  1566  012D  01E7               	clrf	_samples	;volatile
  1567  012E  01E8               	clrf	_samples+1	;volatile
  1568                           
  1569                           ;main.c: 380: sprintf(sVar, "Kp: %d -> ", 4);
  1570  012F  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1571  0130  1683               	bsf	3,5	;RP0=1, select bank1
  1572  0131  1303               	bcf	3,6	;RP1=0, select bank1
  1573  0132  00AE               	movwf	sprintf@sp^(0+128)
  1574  0133  3001               	movlw	1
  1575  0134  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1576  0135  3036               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1577  0136  00D3               	movwf	??_main^(0+128)
  1578  0137  0853               	movf	??_main^(0+128),w
  1579  0138  00B0               	movwf	sprintf@f^(0+128)
  1580  0139  3004               	movlw	4
  1581  013A  00B1               	movwf	(?_sprintf^(0+128)+3)
  1582  013B  3000               	movlw	0
  1583  013C  00B2               	movwf	(?_sprintf^(0+128)+4)
  1584  013D  120A  118A  24F2  120A  118A  	fcall	_sprintf
  1585                           
  1586                           ;main.c: 381: putst(sVar);
  1587  0142  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1588  0143  1683               	bsf	3,5	;RP0=1, select bank1
  1589  0144  1303               	bcf	3,6	;RP1=0, select bank1
  1590  0145  00A2               	movwf	putst@str^(0+128)
  1591  0146  3001               	movlw	1
  1592  0147  00A3               	movwf	(putst@str+1)^(0+128)
  1593  0148  120A  158A  2726  120A  118A  	fcall	_putst
  1594  014D                     l374:	
  1595                           ;main.c: 382: while (samples <= 90 /2){
  1596                           
  1597  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1598  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1599  014F  0868               	movf	_samples+1,w	;volatile
  1600  0150  3A80               	xorlw	128
  1601  0151  00FF               	movwf	127
  1602  0152  3080               	movlw	128
  1603  0153  027F               	subwf	127,w
  1604  0154  1D03               	skipz
  1605  0155  2958               	goto	u3125
  1606  0156  302E               	movlw	46
  1607  0157  0267               	subwf	_samples,w	;volatile
  1608  0158                     u3125:	
  1609  0158  1803               	btfsc	3,0
  1610  0159  29B9               	goto	l377
  1611                           
  1612                           ;main.c: 383: sprintf(sVar, "%d ", pos_log1[samples]);
  1613  015A  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1614  015B  1683               	bsf	3,5	;RP0=1, select bank1
  1615  015C  1303               	bcf	3,6	;RP1=0, select bank1
  1616  015D  00AE               	movwf	sprintf@sp^(0+128)
  1617  015E  3001               	movlw	1
  1618  015F  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1619  0160  3041               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1620  0161  00D3               	movwf	??_main^(0+128)
  1621  0162  0853               	movf	??_main^(0+128),w
  1622  0163  00B0               	movwf	sprintf@f^(0+128)
  1623  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1624  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1625  0166  0867               	movf	_samples,w	;volatile
  1626  0167  3E90               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  1627  0168  0084               	movwf	4
  1628  0169  1783               	bsf	3,7	;select IRP bank3
  1629  016A  0800               	movf	0,w
  1630  016B  1683               	bsf	3,5	;RP0=1, select bank1
  1631  016C  1303               	bcf	3,6	;RP1=0, select bank1
  1632  016D  00B1               	movwf	(?_sprintf^(0+128)+3)
  1633  016E  01B2               	clrf	((?_sprintf+1)^(0+128)+3)
  1634  016F  1BB1               	btfsc	(?_sprintf^(0+128)+3),7
  1635  0170  03B2               	decf	((?_sprintf+1)^(0+128)+3),f
  1636  0171  120A  118A  24F2  120A  118A  	fcall	_sprintf
  1637                           
  1638                           ;main.c: 384: putst(sVar);
  1639  0176  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1640  0177  1683               	bsf	3,5	;RP0=1, select bank1
  1641  0178  1303               	bcf	3,6	;RP1=0, select bank1
  1642  0179  00A2               	movwf	putst@str^(0+128)
  1643  017A  3001               	movlw	1
  1644  017B  00A3               	movwf	(putst@str+1)^(0+128)
  1645  017C  120A  158A  2726  120A  118A  	fcall	_putst
  1646                           
  1647                           ;main.c: 385: samples++;
  1648  0181  3001               	movlw	1
  1649  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1650  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1651  0184  07E7               	addwf	_samples,f	;volatile
  1652  0185  1803               	skipnc
  1653  0186  0AE8               	incf	_samples+1,f	;volatile
  1654  0187  3000               	movlw	0
  1655  0188  07E8               	addwf	_samples+1,f	;volatile
  1656  0189  294D               	goto	l374
  1657  018A                     l3034:	
  1658                           
  1659                           ;main.c: 388: sprintf(sVar, "%d ", pos_log2[samples - 90 / 2]);
  1660  018A  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1661  018B  1683               	bsf	3,5	;RP0=1, select bank1
  1662  018C  1303               	bcf	3,6	;RP1=0, select bank1
  1663  018D  00AE               	movwf	sprintf@sp^(0+128)
  1664  018E  3001               	movlw	1
  1665  018F  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1666  0190  3041               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1667  0191  00D3               	movwf	??_main^(0+128)
  1668  0192  0853               	movf	??_main^(0+128),w
  1669  0193  00B0               	movwf	sprintf@f^(0+128)
  1670  0194  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0195  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0196  0867               	movf	_samples,w	;volatile
  1673  0197  3EE3               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  1674  0198  0084               	movwf	4
  1675  0199  1783               	bsf	3,7	;select IRP bank2
  1676  019A  0800               	movf	0,w
  1677  019B  1683               	bsf	3,5	;RP0=1, select bank1
  1678  019C  1303               	bcf	3,6	;RP1=0, select bank1
  1679  019D  00B1               	movwf	(?_sprintf^(0+128)+3)
  1680  019E  01B2               	clrf	((?_sprintf+1)^(0+128)+3)
  1681  019F  1BB1               	btfsc	(?_sprintf^(0+128)+3),7
  1682  01A0  03B2               	decf	((?_sprintf+1)^(0+128)+3),f
  1683  01A1  120A  118A  24F2  120A  118A  	fcall	_sprintf
  1684                           
  1685                           ;main.c: 389: putst(sVar);
  1686  01A6  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1687  01A7  1683               	bsf	3,5	;RP0=1, select bank1
  1688  01A8  1303               	bcf	3,6	;RP1=0, select bank1
  1689  01A9  00A2               	movwf	putst@str^(0+128)
  1690  01AA  3001               	movlw	1
  1691  01AB  00A3               	movwf	(putst@str+1)^(0+128)
  1692  01AC  120A  158A  2726  120A  118A  	fcall	_putst
  1693                           
  1694                           ;main.c: 390: samples++;
  1695  01B1  3001               	movlw	1
  1696  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1697  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1698  01B4  07E7               	addwf	_samples,f	;volatile
  1699  01B5  1803               	skipnc
  1700  01B6  0AE8               	incf	_samples+1,f	;volatile
  1701  01B7  3000               	movlw	0
  1702  01B8  07E8               	addwf	_samples+1,f	;volatile
  1703  01B9                     l377:	
  1704  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1705  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1706  01BB  0868               	movf	_samples+1,w	;volatile
  1707  01BC  3A80               	xorlw	128
  1708  01BD  00FF               	movwf	127
  1709  01BE  3080               	movlw	128
  1710  01BF  027F               	subwf	127,w
  1711  01C0  1D03               	skipz
  1712  01C1  29C4               	goto	u3135
  1713  01C2  305A               	movlw	90
  1714  01C3  0267               	subwf	_samples,w	;volatile
  1715  01C4                     u3135:	
  1716  01C4  1C03               	skipc
  1717  01C5  298A               	goto	l3034
  1718                           
  1719                           ;main.c: 391: };main.c: 392: sprintf(sVar, "Fim do teste ");
  1720  01C6  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1721  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1722  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  1723  01C9  00AE               	movwf	sprintf@sp^(0+128)
  1724  01CA  3001               	movlw	1
  1725  01CB  00AF               	movwf	(sprintf@sp+1)^(0+128)
  1726  01CC  301B               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1727  01CD  00D3               	movwf	??_main^(0+128)
  1728  01CE  0853               	movf	??_main^(0+128),w
  1729  01CF  00B0               	movwf	sprintf@f^(0+128)
  1730  01D0  120A  118A  24F2  120A  118A  	fcall	_sprintf
  1731                           
  1732                           ;main.c: 393: putst(sVar);
  1733  01D5  30D8               	movlw	(low (main@sVar_394| (0+256)))& (0+255)
  1734  01D6  1683               	bsf	3,5	;RP0=1, select bank1
  1735  01D7  1303               	bcf	3,6	;RP1=0, select bank1
  1736  01D8  00A2               	movwf	putst@str^(0+128)
  1737  01D9  3001               	movlw	1
  1738  01DA  00A3               	movwf	(putst@str+1)^(0+128)
  1739  01DB  120A  158A  2726  120A  118A  	fcall	_putst
  1740                           
  1741                           ;main.c: 394: }else if (serialIn == 'w' ){
  1742  01E0  289C               	goto	l2990
  1743  01E1                     l3044:	
  1744  01E1  3077               	movlw	119
  1745  01E2  0662               	xorwf	main@serialIn_392^(0+384),w
  1746  01E3  1D03               	btfss	3,2
  1747  01E4  29FB               	goto	l3048
  1748                           
  1749                           ;main.c: 395: SetPoint(set_point + 100);
  1750  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1751  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1752  01E7  0857               	movf	_set_point,w	;volatile
  1753  01E8  3E64               	addlw	100
  1754  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  1755  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  1756  01EB  00BC               	movwf	SetPoint@new_val^(0+128)
  1757  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1758  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1759  01EE  0858               	movf	_set_point+1,w	;volatile
  1760  01EF  1803               	skipnc
  1761  01F0  3E01               	addlw	1
  1762  01F1  3E00               	addlw	0
  1763  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  1764  01F3  1303               	bcf	3,6	;RP1=0, select bank1
  1765  01F4  00BD               	movwf	(SetPoint@new_val+1)^(0+128)
  1766  01F5  120A  158A  25A5  120A  118A  	fcall	_SetPoint
  1767                           
  1768                           ;main.c: 396: }else if (serialIn == 's'){
  1769  01FA  289C               	goto	l2990
  1770  01FB                     l3048:	
  1771  01FB  3073               	movlw	115
  1772  01FC  0662               	xorwf	main@serialIn_392^(0+384),w
  1773  01FD  1D03               	btfss	3,2
  1774  01FE  2A15               	goto	l3052
  1775                           
  1776                           ;main.c: 397: SetPoint(set_point - 100);
  1777  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1778  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1779  0201  0857               	movf	_set_point,w	;volatile
  1780  0202  3E9C               	addlw	156
  1781  0203  1683               	bsf	3,5	;RP0=1, select bank1
  1782  0204  1303               	bcf	3,6	;RP1=0, select bank1
  1783  0205  00BC               	movwf	SetPoint@new_val^(0+128)
  1784  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0208  0858               	movf	_set_point+1,w	;volatile
  1787  0209  1803               	skipnc
  1788  020A  3E01               	addlw	1
  1789  020B  3EFF               	addlw	255
  1790  020C  1683               	bsf	3,5	;RP0=1, select bank1
  1791  020D  1303               	bcf	3,6	;RP1=0, select bank1
  1792  020E  00BD               	movwf	(SetPoint@new_val+1)^(0+128)
  1793  020F  120A  158A  25A5  120A  118A  	fcall	_SetPoint
  1794                           
  1795                           ;main.c: 398: }else if (serialIn == ' '){
  1796  0214  289C               	goto	l2990
  1797  0215                     l3052:	
  1798  0215  3020               	movlw	32
  1799  0216  0662               	xorwf	main@serialIn_392^(0+384),w
  1800  0217  1D03               	btfss	3,2
  1801  0218  2A1F               	goto	l3056
  1802                           
  1803                           ;main.c: 399: motor_reset();
  1804  0219  120A  158A  263B  120A  118A  	fcall	_motor_reset
  1805                           
  1806                           ;main.c: 400: }else if (serialIn == 'e' ){
  1807  021E  289C               	goto	l2990
  1808  021F                     l3056:	
  1809  021F  3065               	movlw	101
  1810  0220  0662               	xorwf	main@serialIn_392^(0+384),w
  1811  0221  1D03               	btfss	3,2
  1812  0222  2A39               	goto	l3060
  1813                           
  1814                           ;main.c: 401: SetPoint(set_point + 50);
  1815  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1817  0225  0857               	movf	_set_point,w	;volatile
  1818  0226  3E32               	addlw	50
  1819  0227  1683               	bsf	3,5	;RP0=1, select bank1
  1820  0228  1303               	bcf	3,6	;RP1=0, select bank1
  1821  0229  00BC               	movwf	SetPoint@new_val^(0+128)
  1822  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1823  022B  1303               	bcf	3,6	;RP1=0, select bank0
  1824  022C  0858               	movf	_set_point+1,w	;volatile
  1825  022D  1803               	skipnc
  1826  022E  3E01               	addlw	1
  1827  022F  3E00               	addlw	0
  1828  0230  1683               	bsf	3,5	;RP0=1, select bank1
  1829  0231  1303               	bcf	3,6	;RP1=0, select bank1
  1830  0232  00BD               	movwf	(SetPoint@new_val+1)^(0+128)
  1831  0233  120A  158A  25A5  120A  118A  	fcall	_SetPoint
  1832                           
  1833                           ;main.c: 402: }else if (serialIn == 'd'){
  1834  0238  289C               	goto	l2990
  1835  0239                     l3060:	
  1836  0239  3064               	movlw	100
  1837  023A  0662               	xorwf	main@serialIn_392^(0+384),w
  1838  023B  1D03               	btfss	3,2
  1839  023C  2A53               	goto	l3064
  1840                           
  1841                           ;main.c: 403: SetPoint(set_point - 50);
  1842  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1843  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1844  023F  0857               	movf	_set_point,w	;volatile
  1845  0240  3ECE               	addlw	206
  1846  0241  1683               	bsf	3,5	;RP0=1, select bank1
  1847  0242  1303               	bcf	3,6	;RP1=0, select bank1
  1848  0243  00BC               	movwf	SetPoint@new_val^(0+128)
  1849  0244  1283               	bcf	3,5	;RP0=0, select bank0
  1850  0245  1303               	bcf	3,6	;RP1=0, select bank0
  1851  0246  0858               	movf	_set_point+1,w	;volatile
  1852  0247  1803               	skipnc
  1853  0248  3E01               	addlw	1
  1854  0249  3EFF               	addlw	255
  1855  024A  1683               	bsf	3,5	;RP0=1, select bank1
  1856  024B  1303               	bcf	3,6	;RP1=0, select bank1
  1857  024C  00BD               	movwf	(SetPoint@new_val+1)^(0+128)
  1858  024D  120A  158A  25A5  120A  118A  	fcall	_SetPoint
  1859                           
  1860                           ;main.c: 404: }else if (serialIn == '0'){
  1861  0252  289C               	goto	l2990
  1862  0253                     l3064:	
  1863  0253  3030               	movlw	48
  1864  0254  0662               	xorwf	main@serialIn_392^(0+384),w
  1865  0255  1D03               	btfss	3,2
  1866  0256  2A62               	goto	l3068
  1867                           
  1868                           ;main.c: 405: SetPoint(0);
  1869  0257  3000               	movlw	0
  1870  0258  1683               	bsf	3,5	;RP0=1, select bank1
  1871  0259  1303               	bcf	3,6	;RP1=0, select bank1
  1872  025A  00BC               	movwf	SetPoint@new_val^(0+128)
  1873  025B  00BD               	movwf	(SetPoint@new_val+1)^(0+128)
  1874  025C  120A  158A  25A5  120A  118A  	fcall	_SetPoint
  1875                           
  1876                           ;main.c: 406: }else if (serialIn == 'k'){
  1877  0261  289C               	goto	l2990
  1878  0262                     l3068:	
  1879  0262  306B               	movlw	107
  1880  0263  0662               	xorwf	main@serialIn_392^(0+384),w
  1881  0264  1D03               	btfss	3,2
  1882  0265  2A6D               	goto	l3072
  1883                           
  1884                           ;main.c: 407: onlyK = 1;
  1885  0266  3001               	movlw	1
  1886  0267  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0268  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0269  00E5               	movwf	_onlyK
  1889  026A  3000               	movlw	0
  1890  026B  00E6               	movwf	_onlyK+1
  1891                           
  1892                           ;main.c: 408: }else if (serialIn == 'l'){
  1893  026C  289C               	goto	l2990
  1894  026D                     l3072:	
  1895  026D  306C               	movlw	108
  1896  026E  0662               	xorwf	main@serialIn_392^(0+384),w
  1897  026F  1D03               	btfss	3,2
  1898  0270  289C               	goto	l2990
  1899                           
  1900                           ;main.c: 409: onlyK = 0;
  1901  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1902  0272  1303               	bcf	3,6	;RP1=0, select bank0
  1903  0273  01E5               	clrf	_onlyK
  1904  0274  01E6               	clrf	_onlyK+1
  1905  0275  289C               	goto	l2990
  1906  0276                     __end_of_main:	
  1907                           
  1908                           	psect	text1
  1909  0CEB                     __ptext1:	
  1910 ;; *************** function _spiWrite *****************
  1911 ;; Defined at:
  1912 ;;		line 34 in file "spi.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  dat             1    wreg     unsigned char 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  dat             1    0[BANK1 ] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1926 ;;      Params:         0       0       0       0       0
  1927 ;;      Locals:         0       0       1       0       0
  1928 ;;      Temps:          0       0       0       0       0
  1929 ;;      Totals:         0       0       1       0       0
  1930 ;;Total ram usage:        1 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    4
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_main
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           
  1941                           ;psect for function _spiWrite
  1942  0CEB                     _spiWrite:	
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _spiWrite: [wreg]
  1946                           ;spiWrite@dat stored from wreg
  1947  0CEB  1683               	bsf	3,5	;RP0=1, select bank1
  1948  0CEC  1303               	bcf	3,6	;RP1=0, select bank1
  1949  0CED  00A0               	movwf	spiWrite@dat^(0+128)
  1950                           
  1951                           ;spi.c: 36: SSPBUF = dat;
  1952  0CEE  0820               	movf	spiWrite@dat^(0+128),w
  1953  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0CF1  0093               	movwf	19	;volatile
  1956  0CF2  0008               	return
  1957  0CF3                     __end_of_spiWrite:	
  1958                           
  1959                           	psect	text2
  1960  0CDC                     __ptext2:	
  1961 ;; *************** function _spiRead *****************
  1962 ;; Defined at:
  1963 ;;		line 47 in file "spi.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      unsigned char 
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, status,0, pclath, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1977 ;;      Params:         0       0       0       0       0
  1978 ;;      Locals:         0       0       0       0       0
  1979 ;;      Temps:          0       0       0       0       0
  1980 ;;      Totals:         0       0       0       0       0
  1981 ;;Total ram usage:        0 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    5
  1984 ;; This function calls:
  1985 ;;		_spiReceiveWait
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;;		_read_command
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           
  1993                           ;psect for function _spiRead
  1994  0CDC                     _spiRead:	
  1995                           
  1996                           ;spi.c: 49: spiReceiveWait();
  1997                           
  1998                           ;incstack = 0
  1999                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2000  0CDC  120A  158A  24D7   	fcall	_spiReceiveWait
  2001                           
  2002                           ;spi.c: 50: return(SSPBUF);
  2003  0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  2004  0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  2005  0CE1  0813               	movf	19,w	;volatile
  2006  0CE2  0008               	return
  2007  0CE3                     __end_of_spiRead:	
  2008                           
  2009                           	psect	text3
  2010  0CD7                     __ptext3:	
  2011 ;; *************** function _spiReceiveWait *****************
  2012 ;; Defined at:
  2013 ;;		line 29 in file "spi.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		None
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2027 ;;      Params:         0       0       0       0       0
  2028 ;;      Locals:         0       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0
  2030 ;;      Totals:         0       0       0       0       0
  2031 ;;Total ram usage:        0 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    4
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_spiRead
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function _spiReceiveWait
  2043  0CD7                     _spiReceiveWait:	
  2044  0CD7                     l418:	
  2045                           ;spi.c: 31: while ( !SSPSTATbits.BF );
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _spiReceiveWait: []
  2049                           
  2050  0CD7  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0CD8  1303               	bcf	3,6	;RP1=0, select bank1
  2052  0CD9  1814               	btfsc	20,0	;volatile
  2053  0CDA  0008               	return
  2054  0CDB  2CD7               	goto	l418
  2055  0CDC                     __end_of_spiReceiveWait:	
  2056                           
  2057                           	psect	text4
  2058  0D12                     __ptext4:	
  2059 ;; *************** function _spiInit *****************
  2060 ;; Defined at:
  2061 ;;		line 12 in file "spi.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  sType           1    wreg     enum E1233
  2064 ;;  sDataSample     1    0[BANK1 ] enum E1241
  2065 ;;  sClockIdle      1    1[BANK1 ] enum E1245
  2066 ;;  sTransmitEdg    1    2[BANK1 ] enum E1249
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  sType           1    3[BANK1 ] enum E1233
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2078 ;;      Params:         0       0       3       0       0
  2079 ;;      Locals:         0       0       1       0       0
  2080 ;;      Temps:          0       0       0       0       0
  2081 ;;      Totals:         0       0       4       0       0
  2082 ;;Total ram usage:        4 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    4
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           
  2093                           ;psect for function _spiInit
  2094  0D12                     _spiInit:	
  2095                           
  2096                           ;incstack = 0
  2097                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2098                           ;spiInit@sType stored from wreg
  2099  0D12  1683               	bsf	3,5	;RP0=1, select bank1
  2100  0D13  1303               	bcf	3,6	;RP1=0, select bank1
  2101  0D14  00A3               	movwf	spiInit@sType^(0+128)
  2102                           
  2103                           ;spi.c: 14: TRISC5 = 0;
  2104  0D15  1287               	bcf	7,5	;volatile
  2105                           
  2106                           ;spi.c: 15: if(sType & 0b00000100)
  2107  0D16  1D23               	btfss	spiInit@sType^(0+128),2
  2108  0D17  2D1C               	goto	l2494
  2109                           
  2110                           ;spi.c: 16: {;spi.c: 17: SSPSTAT = sTransmitEdge;
  2111  0D18  0822               	movf	spiInit@sTransmitEdge^(0+128),w
  2112  0D19  0094               	movwf	20	;volatile
  2113                           
  2114                           ;spi.c: 18: TRISC3 = 1;
  2115  0D1A  1587               	bsf	7,3	;volatile
  2116                           
  2117                           ;spi.c: 19: }
  2118  0D1B  2D20               	goto	l414
  2119  0D1C                     l2494:	
  2120                           
  2121                           ;spi.c: 20: else;spi.c: 21: {;spi.c: 22: SSPSTAT = sDataSample | sTransmitEdge;
  2122  0D1C  0820               	movf	spiInit@sDataSample^(0+128),w
  2123  0D1D  0422               	iorwf	spiInit@sTransmitEdge^(0+128),w
  2124  0D1E  0094               	movwf	20	;volatile
  2125                           
  2126                           ;spi.c: 23: TRISC3 = 0;
  2127  0D1F  1187               	bcf	7,3	;volatile
  2128  0D20                     l414:	
  2129                           
  2130                           ;spi.c: 24: };spi.c: 26: SSPCON = sType | sClockIdle;
  2131  0D20  0823               	movf	spiInit@sType^(0+128),w
  2132  0D21  0421               	iorwf	spiInit@sClockIdle^(0+128),w
  2133  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0D24  0094               	movwf	20	;volatile
  2136  0D25  0008               	return
  2137  0D26                     __end_of_spiInit:	
  2138                           
  2139                           	psect	text5
  2140  0CF3                     __ptext5:	
  2141 ;; *************** function _spiDataReady *****************
  2142 ;; Defined at:
  2143 ;;		line 39 in file "spi.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  2    0[BANK1 ] unsigned int 
  2150 ;; Registers used:
  2151 ;;		wreg, status,2
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2157 ;;      Params:         0       0       2       0       0
  2158 ;;      Locals:         0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0
  2160 ;;      Totals:         0       0       2       0       0
  2161 ;;Total ram usage:        2 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    4
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;;		_read_command
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           
  2173                           ;psect for function _spiDataReady
  2174  0CF3                     _spiDataReady:	
  2175                           
  2176                           ;spi.c: 41: if(SSPSTATbits.BF)
  2177                           
  2178                           ;incstack = 0
  2179                           ; Regs used in _spiDataReady: [wreg+status,2]
  2180  0CF3  1683               	bsf	3,5	;RP0=1, select bank1
  2181  0CF4  1303               	bcf	3,6	;RP1=0, select bank1
  2182  0CF5  1C14               	btfss	20,0	;volatile
  2183  0CF6  2CFC               	goto	l2478
  2184                           
  2185                           ;spi.c: 42: return 1;
  2186  0CF7  3001               	movlw	1
  2187  0CF8  00A0               	movwf	?_spiDataReady^(0+128)
  2188  0CF9  3000               	movlw	0
  2189  0CFA  00A1               	movwf	(?_spiDataReady^(0+128)+1)
  2190  0CFB  0008               	return
  2191  0CFC                     l2478:	
  2192                           
  2193                           ;spi.c: 43: else;spi.c: 44: return 0;
  2194  0CFC  01A0               	clrf	?_spiDataReady^(0+128)
  2195  0CFD  01A1               	clrf	(?_spiDataReady+1)^(0+128)
  2196  0CFE  0008               	return
  2197  0CFF                     __end_of_spiDataReady:	
  2198                           
  2199                           	psect	text6
  2200  0D26                     __ptext6:	
  2201 ;; *************** function _serial_init *****************
  2202 ;; Defined at:
  2203 ;;		line 29 in file "serial.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;		None
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2217 ;;      Params:         0       0       0       0       0
  2218 ;;      Locals:         0       0       0       0       0
  2219 ;;      Temps:          0       0       0       0       0
  2220 ;;      Totals:         0       0       0       0       0
  2221 ;;Total ram usage:        0 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    4
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function _serial_init
  2233  0D26                     _serial_init:	
  2234                           
  2235                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  2236                           
  2237                           ;incstack = 0
  2238                           ; Regs used in _serial_init: [wreg]
  2239  0D26  3040               	movlw	64
  2240  0D27  1683               	bsf	3,5	;RP0=1, select bank1
  2241  0D28  1303               	bcf	3,6	;RP1=0, select bank1
  2242  0D29  0099               	movwf	25	;volatile
  2243                           
  2244                           ;serial.c: 66: BRGH=1;
  2245  0D2A  1518               	bsf	24,2	;volatile
  2246                           
  2247                           ;serial.c: 67: SYNC=0;
  2248  0D2B  1218               	bcf	24,4	;volatile
  2249                           
  2250                           ;serial.c: 68: SPEN=1;
  2251  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
  2252  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
  2253  0D2E  1798               	bsf	24,7	;volatile
  2254                           
  2255                           ;serial.c: 69: CREN=1;
  2256  0D2F  1618               	bsf	24,4	;volatile
  2257                           
  2258                           ;serial.c: 70: SREN=0;
  2259  0D30  1298               	bcf	24,5	;volatile
  2260                           
  2261                           ;serial.c: 71: TXIE=0;
  2262  0D31  1683               	bsf	3,5	;RP0=1, select bank1
  2263  0D32  1303               	bcf	3,6	;RP1=0, select bank1
  2264  0D33  120C               	bcf	12,4	;volatile
  2265                           
  2266                           ;serial.c: 72: RCIE=0;
  2267  0D34  128C               	bcf	12,5	;volatile
  2268                           
  2269                           ;serial.c: 73: TX9=0;
  2270  0D35  1318               	bcf	24,6	;volatile
  2271                           
  2272                           ;serial.c: 74: RX9=0;
  2273  0D36  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0D37  1303               	bcf	3,6	;RP1=0, select bank0
  2275  0D38  1318               	bcf	24,6	;volatile
  2276                           
  2277                           ;serial.c: 75: TXEN=0;
  2278  0D39  1683               	bsf	3,5	;RP0=1, select bank1
  2279  0D3A  1303               	bcf	3,6	;RP1=0, select bank1
  2280  0D3B  1298               	bcf	24,5	;volatile
  2281                           
  2282                           ;serial.c: 76: TXEN=1;
  2283  0D3C  1698               	bsf	24,5	;volatile
  2284  0D3D  0008               	return
  2285  0D3E                     __end_of_serial_init:	
  2286                           
  2287                           	psect	text7
  2288  0D7B                     __ptext7:	
  2289 ;; *************** function _pwm_init *****************
  2290 ;; Defined at:
  2291 ;;		line 25 in file "pwm.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2305 ;;      Params:         0       0       0       0       0
  2306 ;;      Locals:         0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0
  2308 ;;      Totals:         0       0       0       0       0
  2309 ;;Total ram usage:        0 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    4
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _pwm_init
  2321  0D7B                     _pwm_init:	
  2322                           
  2323                           ;pwm.c: 28: TRISC1 = 1;
  2324                           
  2325                           ;incstack = 0
  2326                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2327  0D7B  1683               	bsf	3,5	;RP0=1, select bank1
  2328  0D7C  1303               	bcf	3,6	;RP1=0, select bank1
  2329  0D7D  1487               	bsf	7,1	;volatile
  2330                           
  2331                           ;pwm.c: 29: TRISC2 = 1;
  2332  0D7E  1507               	bsf	7,2	;volatile
  2333                           
  2334                           ;pwm.c: 32: PR2 = 0xFF;
  2335  0D7F  30FF               	movlw	255
  2336  0D80  0092               	movwf	18	;volatile
  2337                           
  2338                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  2339  0D81  1283               	bcf	3,5	;RP0=0, select bank0
  2340  0D82  1303               	bcf	3,6	;RP1=0, select bank0
  2341  0D83  0817               	movf	23,w	;volatile
  2342  0D84  39F0               	andlw	-16
  2343  0D85  380C               	iorlw	12
  2344  0D86  0097               	movwf	23	;volatile
  2345                           
  2346                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  2347  0D87  081D               	movf	29,w	;volatile
  2348  0D88  39F0               	andlw	-16
  2349  0D89  380C               	iorlw	12
  2350  0D8A  009D               	movwf	29	;volatile
  2351                           
  2352                           ;pwm.c: 39: CCPR1L = 0;
  2353  0D8B  0195               	clrf	21	;volatile
  2354                           
  2355                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  2356  0D8C  30CF               	movlw	-49
  2357  0D8D  0597               	andwf	23,f	;volatile
  2358                           
  2359                           ;pwm.c: 41: CCPR2L = 0;
  2360  0D8E  019B               	clrf	27	;volatile
  2361                           
  2362                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  2363  0D8F  108C               	bcf	12,1	;volatile
  2364                           
  2365                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  2366  0D90  30FC               	movlw	-4
  2367  0D91  0592               	andwf	18,f	;volatile
  2368                           
  2369                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  2370  0D92  1512               	bsf	18,2	;volatile
  2371  0D93                     l170:	
  2372                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  2373                           
  2374  0D93  1C8C               	btfss	12,1	;volatile
  2375  0D94  2D93               	goto	l170
  2376                           
  2377                           ;pwm.c: 53: TRISC1 = 0;
  2378  0D95  1683               	bsf	3,5	;RP0=1, select bank1
  2379  0D96  1303               	bcf	3,6	;RP1=0, select bank1
  2380  0D97  1087               	bcf	7,1	;volatile
  2381                           
  2382                           ;pwm.c: 54: TRISC2 = 0;
  2383  0D98  1107               	bcf	7,2	;volatile
  2384                           
  2385                           ;pwm.c: 59: ANS4 = 0;
  2386  0D99  1683               	bsf	3,5	;RP0=1, select bank3
  2387  0D9A  1703               	bsf	3,6	;RP1=1, select bank3
  2388  0D9B  1208               	bcf	8,4	;volatile
  2389                           
  2390                           ;pwm.c: 60: TRISA5 = 0;
  2391  0D9C  1683               	bsf	3,5	;RP0=1, select bank1
  2392  0D9D  1303               	bcf	3,6	;RP1=0, select bank1
  2393  0D9E  1285               	bcf	5,5	;volatile
  2394                           
  2395                           ;pwm.c: 61: TRISA6 = 0;
  2396  0D9F  1305               	bcf	5,6	;volatile
  2397                           
  2398                           ;pwm.c: 62: RA5 = 0;
  2399  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  2400  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  2401  0DA2  1285               	bcf	5,5	;volatile
  2402                           
  2403                           ;pwm.c: 63: RA6 = 0;
  2404  0DA3  1305               	bcf	5,6	;volatile
  2405  0DA4  0008               	return
  2406  0DA5                     __end_of_pwm_init:	
  2407                           
  2408                           	psect	text8
  2409  0E3B                     __ptext8:	
  2410 ;; *************** function _motor_reset *****************
  2411 ;; Defined at:
  2412 ;;		line 160 in file "main.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2426 ;;      Params:         0       0       0       0       0
  2427 ;;      Locals:         0       0       0       0       0
  2428 ;;      Temps:          0       0       0       0       0
  2429 ;;      Totals:         0       0       0       0       0
  2430 ;;Total ram usage:        0 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    7
  2433 ;; This function calls:
  2434 ;;		_SetPoint
  2435 ;;		_pwm_set
  2436 ;;		_resetCounter
  2437 ;; This function is called by:
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           
  2443                           ;psect for function _motor_reset
  2444  0E3B                     _motor_reset:	
  2445                           
  2446                           ;main.c: 161: pwm_set(1, 0);
  2447                           
  2448                           ;incstack = 0
  2449                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2450  0E3B  3001               	movlw	1
  2451  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  2452  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  2453  0E3E  00BC               	movwf	pwm_set@channel^(0+128)
  2454  0E3F  3000               	movlw	0
  2455  0E40  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  2456  0E41  3000               	movlw	0
  2457  0E42  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2458  0E43  3000               	movlw	0
  2459  0E44  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2460  0E45  3000               	movlw	0
  2461  0E46  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2462  0E47  3000               	movlw	0
  2463  0E48  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2464  0E49  120A  118A  26EF  120A  158A  	fcall	_pwm_set
  2465                           
  2466                           ;main.c: 162: pwm_set(2, 0);
  2467  0E4E  3002               	movlw	2
  2468  0E4F  1683               	bsf	3,5	;RP0=1, select bank1
  2469  0E50  1303               	bcf	3,6	;RP1=0, select bank1
  2470  0E51  00BC               	movwf	pwm_set@channel^(0+128)
  2471  0E52  3000               	movlw	0
  2472  0E53  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  2473  0E54  3000               	movlw	0
  2474  0E55  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2475  0E56  3000               	movlw	0
  2476  0E57  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2477  0E58  3000               	movlw	0
  2478  0E59  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2479  0E5A  3000               	movlw	0
  2480  0E5B  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2481  0E5C  120A  118A  26EF  120A  158A  	fcall	_pwm_set
  2482                           
  2483                           ;main.c: 163: resetCounter();
  2484  0E61  120A  158A  24FF  120A  158A  	fcall	_resetCounter
  2485                           
  2486                           ;main.c: 164: SetPoint(0);
  2487  0E66  3000               	movlw	0
  2488  0E67  1683               	bsf	3,5	;RP0=1, select bank1
  2489  0E68  1303               	bcf	3,6	;RP1=0, select bank1
  2490  0E69  00BC               	movwf	SetPoint@new_val^(0+128)
  2491  0E6A  00BD               	movwf	(SetPoint@new_val+1)^(0+128)
  2492  0E6B  120A  158A  25A5   	fcall	_SetPoint
  2493  0E6E  0008               	return
  2494  0E6F                     __end_of_motor_reset:	
  2495                           
  2496                           	psect	text9
  2497  0CFF                     __ptext9:	
  2498 ;; *************** function _resetCounter *****************
  2499 ;; Defined at:
  2500 ;;		line 155 in file "main.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2514 ;;      Params:         0       0       0       0       0
  2515 ;;      Locals:         0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0
  2517 ;;      Totals:         0       0       0       0       0
  2518 ;;Total ram usage:        0 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    4
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_motor_reset
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function _resetCounter
  2531  0CFF                     _resetCounter:	
  2532                           
  2533                           ;main.c: 156: encoder1_counter = 0;
  2534                           
  2535                           ;incstack = 0
  2536                           ; Regs used in _resetCounter: [wreg]
  2537  0CFF  3000               	movlw	0
  2538  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0D02  00E2               	movwf	_encoder1_counter+3	;volatile
  2541  0D03  3000               	movlw	0
  2542  0D04  00E1               	movwf	_encoder1_counter+2	;volatile
  2543  0D05  3000               	movlw	0
  2544  0D06  00E0               	movwf	_encoder1_counter+1	;volatile
  2545  0D07  3000               	movlw	0
  2546  0D08  00DF               	movwf	_encoder1_counter	;volatile
  2547                           
  2548                           ;main.c: 157: motor_pos = 0;
  2549  0D09  3000               	movlw	0
  2550  0D0A  00DE               	movwf	_motor_pos+3	;volatile
  2551  0D0B  3000               	movlw	0
  2552  0D0C  00DD               	movwf	_motor_pos+2	;volatile
  2553  0D0D  3000               	movlw	0
  2554  0D0E  00DC               	movwf	_motor_pos+1	;volatile
  2555  0D0F  3000               	movlw	0
  2556  0D10  00DB               	movwf	_motor_pos	;volatile
  2557  0D11  0008               	return
  2558  0D12                     __end_of_resetCounter:	
  2559                           
  2560                           	psect	text10
  2561  06EF                     __ptext10:	
  2562 ;; *************** function _pwm_set *****************
  2563 ;; Defined at:
  2564 ;;		line 72 in file "pwm.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  channel         2   28[BANK1 ] int 
  2567 ;;  duty_cycle      4   30[BANK1 ] long 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;		None
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2579 ;;      Params:         0       0       6       0       0
  2580 ;;      Locals:         0       0       0       0       0
  2581 ;;      Temps:          0       0       4       0       0
  2582 ;;      Totals:         0       0      10       0       0
  2583 ;;Total ram usage:       10 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    5
  2586 ;; This function calls:
  2587 ;;		___aldiv
  2588 ;;		___lmul
  2589 ;; This function is called by:
  2590 ;;		_motor_reset
  2591 ;;		_main
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           
  2596                           ;psect for function _pwm_set
  2597  06EF                     _pwm_set:	
  2598                           
  2599                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2600                           
  2601                           ;incstack = 0
  2602                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2603  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  2604  06F0  1303               	bcf	3,6	;RP1=0, select bank1
  2605  06F1  1BC1               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2606  06F2  0008               	return
  2607  06F3  1BC1               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2608  06F4  2F05               	goto	l2224
  2609  06F5  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2610  06F6  1D03               	btfss	3,2
  2611  06F7  0008               	return
  2612  06F8  0840               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2613  06F9  1D03               	btfss	3,2
  2614  06FA  0008               	return
  2615  06FB  3001               	movlw	1
  2616  06FC  023F               	subwf	(pwm_set@duty_cycle+1)^(0+128),w
  2617  06FD  1D03               	skipz
  2618  06FE  2F03               	goto	u2083
  2619  06FF  3000               	movlw	0
  2620  0700  023E               	subwf	pwm_set@duty_cycle^(0+128),w
  2621  0701  1D03               	skipz
  2622  0702  2F03               	goto	u2083
  2623  0703                     u2083:	
  2624  0703  1803               	btfsc	3,0
  2625  0704  0008               	return
  2626  0705                     l2224:	
  2627                           
  2628                           ;pwm.c: 77: if (duty_cycle !=0){
  2629  0705  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2630  0706  0440               	iorwf	(pwm_set@duty_cycle+2)^(0+128),w
  2631  0707  043F               	iorwf	(pwm_set@duty_cycle+1)^(0+128),w
  2632  0708  043E               	iorwf	pwm_set@duty_cycle^(0+128),w
  2633  0709  1903               	skipnz
  2634  070A  2F66               	goto	l2234
  2635                           
  2636                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  2637  070B  3020               	movlw	32
  2638  070C  00C2               	movwf	??_pwm_set^(0+128)
  2639  070D  3000               	movlw	0
  2640  070E  00C3               	movwf	(??_pwm_set^(0+128)+1)
  2641  070F  3000               	movlw	0
  2642  0710  00C4               	movwf	(??_pwm_set^(0+128)+2)
  2643  0711  3000               	movlw	0
  2644  0712  00C5               	movwf	(??_pwm_set^(0+128)+3)
  2645  0713  3000               	movlw	0
  2646  0714  00B0               	movwf	(___aldiv@divisor+3)^(0+128)
  2647  0715  3000               	movlw	0
  2648  0716  00AF               	movwf	(___aldiv@divisor+2)^(0+128)
  2649  0717  3000               	movlw	0
  2650  0718  00AE               	movwf	(___aldiv@divisor+1)^(0+128)
  2651  0719  30FF               	movlw	255
  2652  071A  00AD               	movwf	___aldiv@divisor^(0+128)
  2653  071B  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2654  071C  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  2655  071D  0840               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2656  071E  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  2657  071F  083F               	movf	(pwm_set@duty_cycle+1)^(0+128),w
  2658  0720  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  2659  0721  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2660  0722  00A0               	movwf	___lmul@multiplier^(0+128)
  2661  0723  3000               	movlw	0
  2662  0724  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  2663  0725  3000               	movlw	0
  2664  0726  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  2665  0727  3000               	movlw	0
  2666  0728  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  2667  0729  30DF               	movlw	223
  2668  072A  00A4               	movwf	___lmul@multiplicand^(0+128)
  2669  072B  120A  158A  2766  120A  118A  	fcall	___lmul
  2670  0730  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0731  1303               	bcf	3,6	;RP1=0, select bank1
  2672  0732  0823               	movf	(?___lmul+3)^(0+128),w
  2673  0733  00B4               	movwf	(___aldiv@dividend+3)^(0+128)
  2674  0734  0822               	movf	(?___lmul+2)^(0+128),w
  2675  0735  00B3               	movwf	(___aldiv@dividend+2)^(0+128)
  2676  0736  0821               	movf	(?___lmul+1)^(0+128),w
  2677  0737  00B2               	movwf	(___aldiv@dividend+1)^(0+128)
  2678  0738  0820               	movf	?___lmul^(0+128),w
  2679  0739  00B1               	movwf	___aldiv@dividend^(0+128)
  2680  073A  120A  118A  25D1  120A  118A  	fcall	___aldiv
  2681  073F  1683               	bsf	3,5	;RP0=1, select bank1
  2682  0740  1303               	bcf	3,6	;RP1=0, select bank1
  2683  0741  082D               	movf	?___aldiv^(0+128),w
  2684  0742  07C2               	addwf	??_pwm_set^(0+128),f
  2685  0743  082E               	movf	(?___aldiv+1)^(0+128),w
  2686  0744  1803               	skipnc
  2687  0745  0F2E               	incfsz	(?___aldiv+1)^(0+128),w
  2688  0746  2F48               	goto	u2100
  2689  0747  2F49               	goto	u2101
  2690  0748                     u2100:	
  2691  0748  07C3               	addwf	(??_pwm_set^(0+128)+1),f
  2692  0749                     u2101:	
  2693  0749  082F               	movf	(?___aldiv+2)^(0+128),w
  2694  074A  1803               	skipnc
  2695  074B  0F2F               	incfsz	(?___aldiv+2)^(0+128),w
  2696  074C  2F4E               	goto	u2102
  2697  074D  2F4F               	goto	u2103
  2698  074E                     u2102:	
  2699  074E  07C4               	addwf	(??_pwm_set^(0+128)+2),f
  2700  074F                     u2103:	
  2701  074F  0830               	movf	(?___aldiv+3)^(0+128),w
  2702  0750  1803               	skipnc
  2703  0751  0A30               	incf	(?___aldiv+3)^(0+128),w
  2704  0752  07C5               	addwf	(??_pwm_set^(0+128)+3),f
  2705  0753  0845               	movf	(??_pwm_set+3)^(0+128),w
  2706  0754  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2707  0755  0844               	movf	(??_pwm_set+2)^(0+128),w
  2708  0756  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2709  0757  0843               	movf	(??_pwm_set+1)^(0+128),w
  2710  0758  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2711  0759  0842               	movf	??_pwm_set^(0+128),w
  2712  075A  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2713  075B  2F66               	goto	l2234
  2714  075C                     l2228:	
  2715                           
  2716                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2717  075C  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2718  075D  1283               	bcf	3,5	;RP0=0, select bank0
  2719  075E  1303               	bcf	3,6	;RP1=0, select bank0
  2720  075F  0095               	movwf	21	;volatile
  2721                           
  2722                           ;pwm.c: 83: break;
  2723  0760  0008               	return
  2724  0761                     l2230:	
  2725                           
  2726                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2727  0761  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2728  0762  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0763  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0764  009B               	movwf	27	;volatile
  2731                           
  2732                           ;pwm.c: 86: break;
  2733  0765  0008               	return
  2734  0766                     l2234:	
  2735                           
  2736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2737                           ; Switch size 1, requested type "simple"
  2738                           ; Number of cases is 1, Range of values is 0 to 0
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte            4     3 (average)
  2742                           ; direct_byte           11     8 (fixed)
  2743                           ; jumptable            260     6 (fixed)
  2744                           ;	Chosen strategy is simple_byte
  2745  0766  083D               	movf	(pwm_set@channel+1)^(0+128),w
  2746  0767  3A00               	xorlw	0	; case 0
  2747  0768  1903               	skipnz
  2748  0769  2F6B               	goto	l3116
  2749  076A  2F73               	goto	l182
  2750  076B                     l3116:	
  2751                           
  2752                           ; Switch size 1, requested type "simple"
  2753                           ; Number of cases is 2, Range of values is 1 to 2
  2754                           ; switch strategies available:
  2755                           ; Name         Instructions Cycles
  2756                           ; simple_byte            7     4 (average)
  2757                           ; direct_byte           17    11 (fixed)
  2758                           ; jumptable            263     9 (fixed)
  2759                           ;	Chosen strategy is simple_byte
  2760  076B  083C               	movf	pwm_set@channel^(0+128),w
  2761  076C  3A01               	xorlw	1	; case 1
  2762  076D  1903               	skipnz
  2763  076E  2F5C               	goto	l2228
  2764  076F  3A03               	xorlw	3	; case 2
  2765  0770  1903               	skipnz
  2766  0771  2F61               	goto	l2230
  2767  0772  2F73               	goto	l182
  2768  0773                     l182:	
  2769  0773  0008               	return
  2770  0774                     __end_of_pwm_set:	
  2771                           
  2772                           	psect	text11
  2773  0F66                     __ptext11:	
  2774 ;; *************** function ___lmul *****************
  2775 ;; Defined at:
  2776 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  multiplier      4    0[BANK1 ] unsigned long 
  2779 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  product         4    9[BANK1 ] unsigned long 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  4    0[BANK1 ] unsigned long 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2791 ;;      Params:         0       0       8       0       0
  2792 ;;      Locals:         0       0       4       0       0
  2793 ;;      Temps:          0       0       1       0       0
  2794 ;;      Totals:         0       0      13       0       0
  2795 ;;Total ram usage:       13 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    4
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_pwm_set
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           
  2806                           ;psect for function ___lmul
  2807  0F66                     ___lmul:	
  2808                           
  2809                           ;incstack = 0
  2810                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2811  0F66  3000               	movlw	0
  2812  0F67  1683               	bsf	3,5	;RP0=1, select bank1
  2813  0F68  1303               	bcf	3,6	;RP1=0, select bank1
  2814  0F69  00AC               	movwf	(___lmul@product+3)^(0+128)
  2815  0F6A  3000               	movlw	0
  2816  0F6B  00AB               	movwf	(___lmul@product+2)^(0+128)
  2817  0F6C  3000               	movlw	0
  2818  0F6D  00AA               	movwf	(___lmul@product+1)^(0+128)
  2819  0F6E  3000               	movlw	0
  2820  0F6F  00A9               	movwf	___lmul@product^(0+128)
  2821  0F70                     l2114:	
  2822  0F70  1C20               	btfss	___lmul@multiplier^(0+128),0
  2823  0F71  2F86               	goto	l2118
  2824  0F72  0824               	movf	___lmul@multiplicand^(0+128),w
  2825  0F73  07A9               	addwf	___lmul@product^(0+128),f
  2826  0F74  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  2827  0F75  1103               	clrz
  2828  0F76  1803               	skipnc
  2829  0F77  3E01               	addlw	1
  2830  0F78  1D03               	btfss	3,2
  2831  0F79  07AA               	addwf	(___lmul@product+1)^(0+128),f
  2832  0F7A  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  2833  0F7B  1103               	clrz
  2834  0F7C  1803               	skipnc
  2835  0F7D  3E01               	addlw	1
  2836  0F7E  1D03               	btfss	3,2
  2837  0F7F  07AB               	addwf	(___lmul@product+2)^(0+128),f
  2838  0F80  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  2839  0F81  1103               	clrz
  2840  0F82  1803               	skipnc
  2841  0F83  3E01               	addlw	1
  2842  0F84  1D03               	btfss	3,2
  2843  0F85  07AC               	addwf	(___lmul@product+3)^(0+128),f
  2844  0F86                     l2118:	
  2845  0F86  3001               	movlw	1
  2846  0F87  00A8               	movwf	??___lmul^(0+128)
  2847  0F88                     u1795:	
  2848  0F88  1003               	clrc
  2849  0F89  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  2850  0F8A  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  2851  0F8B  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  2852  0F8C  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  2853  0F8D  0BA8               	decfsz	??___lmul^(0+128),f
  2854  0F8E  2F88               	goto	u1795
  2855  0F8F  3001               	movlw	1
  2856  0F90                     u1805:	
  2857  0F90  1003               	clrc
  2858  0F91  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  2859  0F92  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  2860  0F93  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  2861  0F94  0CA0               	rrf	___lmul@multiplier^(0+128),f
  2862  0F95  3EFF               	addlw	-1
  2863  0F96  1D03               	skipz
  2864  0F97  2F90               	goto	u1805
  2865  0F98  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  2866  0F99  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  2867  0F9A  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  2868  0F9B  0420               	iorwf	___lmul@multiplier^(0+128),w
  2869  0F9C  1D03               	skipz
  2870  0F9D  2F70               	goto	l2114
  2871  0F9E  082C               	movf	(___lmul@product+3)^(0+128),w
  2872  0F9F  00A3               	movwf	(?___lmul+3)^(0+128)
  2873  0FA0  082B               	movf	(___lmul@product+2)^(0+128),w
  2874  0FA1  00A2               	movwf	(?___lmul+2)^(0+128)
  2875  0FA2  082A               	movf	(___lmul@product+1)^(0+128),w
  2876  0FA3  00A1               	movwf	(?___lmul+1)^(0+128)
  2877  0FA4  0829               	movf	___lmul@product^(0+128),w
  2878  0FA5  00A0               	movwf	?___lmul^(0+128)
  2879  0FA6  0008               	return
  2880  0FA7                     __end_of___lmul:	
  2881                           
  2882                           	psect	text12
  2883  05D1                     __ptext12:	
  2884 ;; *************** function ___aldiv *****************
  2885 ;; Defined at:
  2886 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  divisor         4   13[BANK1 ] long 
  2889 ;;  dividend        4   17[BANK1 ] long 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  quotient        4   24[BANK1 ] long 
  2892 ;;  sign            1   23[BANK1 ] unsigned char 
  2893 ;;  counter         1   22[BANK1 ] unsigned char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;                  4   13[BANK1 ] long 
  2896 ;; Registers used:
  2897 ;;		wreg, status,2, status,0
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2903 ;;      Params:         0       0       8       0       0
  2904 ;;      Locals:         0       0       6       0       0
  2905 ;;      Temps:          0       0       1       0       0
  2906 ;;      Totals:         0       0      15       0       0
  2907 ;;Total ram usage:       15 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    4
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_pwm_set
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           
  2918                           ;psect for function ___aldiv
  2919  05D1                     ___aldiv:	
  2920                           
  2921                           ;incstack = 0
  2922                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2923  05D1  1683               	bsf	3,5	;RP0=1, select bank1
  2924  05D2  1303               	bcf	3,6	;RP1=0, select bank1
  2925  05D3  01B7               	clrf	___aldiv@sign^(0+128)
  2926  05D4  1FB0               	btfss	(___aldiv@divisor+3)^(0+128),7
  2927  05D5  2DE3               	goto	l611
  2928  05D6  09AD               	comf	___aldiv@divisor^(0+128),f
  2929  05D7  09AE               	comf	(___aldiv@divisor+1)^(0+128),f
  2930  05D8  09AF               	comf	(___aldiv@divisor+2)^(0+128),f
  2931  05D9  09B0               	comf	(___aldiv@divisor+3)^(0+128),f
  2932  05DA  0AAD               	incf	___aldiv@divisor^(0+128),f
  2933  05DB  1903               	skipnz
  2934  05DC  0AAE               	incf	(___aldiv@divisor+1)^(0+128),f
  2935  05DD  1903               	skipnz
  2936  05DE  0AAF               	incf	(___aldiv@divisor+2)^(0+128),f
  2937  05DF  1903               	skipnz
  2938  05E0  0AB0               	incf	(___aldiv@divisor+3)^(0+128),f
  2939  05E1  01B7               	clrf	___aldiv@sign^(0+128)
  2940  05E2  0AB7               	incf	___aldiv@sign^(0+128),f
  2941  05E3                     l611:	
  2942  05E3  1FB4               	btfss	(___aldiv@dividend+3)^(0+128),7
  2943  05E4  2DF4               	goto	l2136
  2944  05E5  09B1               	comf	___aldiv@dividend^(0+128),f
  2945  05E6  09B2               	comf	(___aldiv@dividend+1)^(0+128),f
  2946  05E7  09B3               	comf	(___aldiv@dividend+2)^(0+128),f
  2947  05E8  09B4               	comf	(___aldiv@dividend+3)^(0+128),f
  2948  05E9  0AB1               	incf	___aldiv@dividend^(0+128),f
  2949  05EA  1903               	skipnz
  2950  05EB  0AB2               	incf	(___aldiv@dividend+1)^(0+128),f
  2951  05EC  1903               	skipnz
  2952  05ED  0AB3               	incf	(___aldiv@dividend+2)^(0+128),f
  2953  05EE  1903               	skipnz
  2954  05EF  0AB4               	incf	(___aldiv@dividend+3)^(0+128),f
  2955  05F0  3001               	movlw	1
  2956  05F1  00B5               	movwf	??___aldiv^(0+128)
  2957  05F2  0835               	movf	??___aldiv^(0+128),w
  2958  05F3  06B7               	xorwf	___aldiv@sign^(0+128),f
  2959  05F4                     l2136:	
  2960  05F4  3000               	movlw	0
  2961  05F5  00BB               	movwf	(___aldiv@quotient+3)^(0+128)
  2962  05F6  3000               	movlw	0
  2963  05F7  00BA               	movwf	(___aldiv@quotient+2)^(0+128)
  2964  05F8  3000               	movlw	0
  2965  05F9  00B9               	movwf	(___aldiv@quotient+1)^(0+128)
  2966  05FA  3000               	movlw	0
  2967  05FB  00B8               	movwf	___aldiv@quotient^(0+128)
  2968  05FC  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  2969  05FD  042F               	iorwf	(___aldiv@divisor+2)^(0+128),w
  2970  05FE  042E               	iorwf	(___aldiv@divisor+1)^(0+128),w
  2971  05FF  042D               	iorwf	___aldiv@divisor^(0+128),w
  2972  0600  1903               	skipnz
  2973  0601  2E49               	goto	l2158
  2974  0602  01B6               	clrf	___aldiv@counter^(0+128)
  2975  0603  0AB6               	incf	___aldiv@counter^(0+128),f
  2976  0604                     l2144:	
  2977  0604  1BB0               	btfsc	(___aldiv@divisor+3)^(0+128),7
  2978  0605  2E14               	goto	l2146
  2979  0606  3001               	movlw	1
  2980  0607  00B5               	movwf	??___aldiv^(0+128)
  2981  0608                     u1855:	
  2982  0608  1003               	clrc
  2983  0609  0DAD               	rlf	___aldiv@divisor^(0+128),f
  2984  060A  0DAE               	rlf	(___aldiv@divisor+1)^(0+128),f
  2985  060B  0DAF               	rlf	(___aldiv@divisor+2)^(0+128),f
  2986  060C  0DB0               	rlf	(___aldiv@divisor+3)^(0+128),f
  2987  060D  0BB5               	decfsz	??___aldiv^(0+128),f
  2988  060E  2E08               	goto	u1855
  2989  060F  3001               	movlw	1
  2990  0610  00B5               	movwf	??___aldiv^(0+128)
  2991  0611  0835               	movf	??___aldiv^(0+128),w
  2992  0612  07B6               	addwf	___aldiv@counter^(0+128),f
  2993  0613  2E04               	goto	l2144
  2994  0614                     l2146:	
  2995  0614  3001               	movlw	1
  2996  0615  00B5               	movwf	??___aldiv^(0+128)
  2997  0616                     u1875:	
  2998  0616  1003               	clrc
  2999  0617  0DB8               	rlf	___aldiv@quotient^(0+128),f
  3000  0618  0DB9               	rlf	(___aldiv@quotient+1)^(0+128),f
  3001  0619  0DBA               	rlf	(___aldiv@quotient+2)^(0+128),f
  3002  061A  0DBB               	rlf	(___aldiv@quotient+3)^(0+128),f
  3003  061B  0BB5               	decfsz	??___aldiv^(0+128),f
  3004  061C  2E16               	goto	u1875
  3005  061D  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3006  061E  0234               	subwf	(___aldiv@dividend+3)^(0+128),w
  3007  061F  1D03               	skipz
  3008  0620  2E2B               	goto	u1885
  3009  0621  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  3010  0622  0233               	subwf	(___aldiv@dividend+2)^(0+128),w
  3011  0623  1D03               	skipz
  3012  0624  2E2B               	goto	u1885
  3013  0625  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  3014  0626  0232               	subwf	(___aldiv@dividend+1)^(0+128),w
  3015  0627  1D03               	skipz
  3016  0628  2E2B               	goto	u1885
  3017  0629  082D               	movf	___aldiv@divisor^(0+128),w
  3018  062A  0231               	subwf	___aldiv@dividend^(0+128),w
  3019  062B                     u1885:	
  3020  062B  1C03               	skipc
  3021  062C  2E3C               	goto	l2154
  3022  062D  082D               	movf	___aldiv@divisor^(0+128),w
  3023  062E  02B1               	subwf	___aldiv@dividend^(0+128),f
  3024  062F  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  3025  0630  1C03               	skipc
  3026  0631  0F2E               	incfsz	(___aldiv@divisor+1)^(0+128),w
  3027  0632  02B2               	subwf	(___aldiv@dividend+1)^(0+128),f
  3028  0633  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  3029  0634  1C03               	skipc
  3030  0635  0F2F               	incfsz	(___aldiv@divisor+2)^(0+128),w
  3031  0636  02B3               	subwf	(___aldiv@dividend+2)^(0+128),f
  3032  0637  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3033  0638  1C03               	skipc
  3034  0639  0F30               	incfsz	(___aldiv@divisor+3)^(0+128),w
  3035  063A  02B4               	subwf	(___aldiv@dividend+3)^(0+128),f
  3036  063B  1438               	bsf	___aldiv@quotient^(0+128),0
  3037  063C                     l2154:	
  3038  063C  3001               	movlw	1
  3039  063D                     u1895:	
  3040  063D  1003               	clrc
  3041  063E  0CB0               	rrf	(___aldiv@divisor+3)^(0+128),f
  3042  063F  0CAF               	rrf	(___aldiv@divisor+2)^(0+128),f
  3043  0640  0CAE               	rrf	(___aldiv@divisor+1)^(0+128),f
  3044  0641  0CAD               	rrf	___aldiv@divisor^(0+128),f
  3045  0642  3EFF               	addlw	-1
  3046  0643  1D03               	skipz
  3047  0644  2E3D               	goto	u1895
  3048  0645  3001               	movlw	1
  3049  0646  02B6               	subwf	___aldiv@counter^(0+128),f
  3050  0647  1D03               	btfss	3,2
  3051  0648  2E14               	goto	l2146
  3052  0649                     l2158:	
  3053  0649  0837               	movf	___aldiv@sign^(0+128),w
  3054  064A  1903               	btfsc	3,2
  3055  064B  2E57               	goto	l2162
  3056  064C  09B8               	comf	___aldiv@quotient^(0+128),f
  3057  064D  09B9               	comf	(___aldiv@quotient+1)^(0+128),f
  3058  064E  09BA               	comf	(___aldiv@quotient+2)^(0+128),f
  3059  064F  09BB               	comf	(___aldiv@quotient+3)^(0+128),f
  3060  0650  0AB8               	incf	___aldiv@quotient^(0+128),f
  3061  0651  1903               	skipnz
  3062  0652  0AB9               	incf	(___aldiv@quotient+1)^(0+128),f
  3063  0653  1903               	skipnz
  3064  0654  0ABA               	incf	(___aldiv@quotient+2)^(0+128),f
  3065  0655  1903               	skipnz
  3066  0656  0ABB               	incf	(___aldiv@quotient+3)^(0+128),f
  3067  0657                     l2162:	
  3068  0657  083B               	movf	(___aldiv@quotient+3)^(0+128),w
  3069  0658  00B0               	movwf	(?___aldiv+3)^(0+128)
  3070  0659  083A               	movf	(___aldiv@quotient+2)^(0+128),w
  3071  065A  00AF               	movwf	(?___aldiv+2)^(0+128)
  3072  065B  0839               	movf	(___aldiv@quotient+1)^(0+128),w
  3073  065C  00AE               	movwf	(?___aldiv+1)^(0+128)
  3074  065D  0838               	movf	___aldiv@quotient^(0+128),w
  3075  065E  00AD               	movwf	?___aldiv^(0+128)
  3076  065F  0008               	return
  3077  0660                     __end_of___aldiv:	
  3078                           
  3079                           	psect	text13
  3080  0DA5                     __ptext13:	
  3081 ;; *************** function _SetPoint *****************
  3082 ;; Defined at:
  3083 ;;		line 148 in file "main.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  new_val         2   28[BANK1 ] int 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  sVar           20   31[BANK1 ] unsigned char [20]
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0       0       2       0       0
  3098 ;;      Locals:         0       0      20       0       0
  3099 ;;      Temps:          0       0       1       0       0
  3100 ;;      Totals:         0       0      23       0       0
  3101 ;;Total ram usage:       23 bytes
  3102 ;; Hardware stack levels used:    1
  3103 ;; Hardware stack levels required when called:    6
  3104 ;; This function calls:
  3105 ;;		_putst
  3106 ;;		_sprintf
  3107 ;; This function is called by:
  3108 ;;		_motor_reset
  3109 ;;		_main
  3110 ;;		_read_command
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           
  3115                           ;psect for function _SetPoint
  3116  0DA5                     _SetPoint:	
  3117                           
  3118                           ;main.c: 149: char sVar[20];;main.c: 150: sprintf(sVar, "SetPoint: %d \r\n", new_val);
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in _SetPoint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3122  0DA5  30BF               	movlw	(low (SetPoint@sVar| 0))& (0+255)
  3123  0DA6  1683               	bsf	3,5	;RP0=1, select bank1
  3124  0DA7  1303               	bcf	3,6	;RP1=0, select bank1
  3125  0DA8  00AE               	movwf	sprintf@sp^(0+128)
  3126  0DA9  3000               	movlw	0
  3127  0DAA  00AF               	movwf	(sprintf@sp+1)^(0+128)
  3128  0DAB  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3129  0DAC  00BE               	movwf	??_SetPoint^(0+128)
  3130  0DAD  083E               	movf	??_SetPoint^(0+128),w
  3131  0DAE  00B0               	movwf	sprintf@f^(0+128)
  3132  0DAF  083D               	movf	(SetPoint@new_val+1)^(0+128),w
  3133  0DB0  00B2               	movwf	((?_sprintf+1)^(0+128)+3)
  3134  0DB1  083C               	movf	SetPoint@new_val^(0+128),w
  3135  0DB2  00B1               	movwf	(?_sprintf^(0+128)+3)
  3136  0DB3  120A  118A  24F2  120A  158A  	fcall	_sprintf
  3137                           
  3138                           ;main.c: 151: putst(sVar);
  3139  0DB8  30BF               	movlw	(low (SetPoint@sVar| 0))& (0+255)
  3140  0DB9  1683               	bsf	3,5	;RP0=1, select bank1
  3141  0DBA  1303               	bcf	3,6	;RP1=0, select bank1
  3142  0DBB  00A2               	movwf	putst@str^(0+128)
  3143  0DBC  3000               	movlw	0
  3144  0DBD  00A3               	movwf	(putst@str+1)^(0+128)
  3145  0DBE  120A  158A  2726   	fcall	_putst
  3146                           
  3147                           ;main.c: 152: set_point = new_val;
  3148  0DC1  1683               	bsf	3,5	;RP0=1, select bank1
  3149  0DC2  1303               	bcf	3,6	;RP1=0, select bank1
  3150  0DC3  083C               	movf	SetPoint@new_val^(0+128),w
  3151  0DC4  1283               	bcf	3,5	;RP0=0, select bank0
  3152  0DC5  1303               	bcf	3,6	;RP1=0, select bank0
  3153  0DC6  00D7               	movwf	_set_point	;volatile
  3154  0DC7  1683               	bsf	3,5	;RP0=1, select bank1
  3155  0DC8  1303               	bcf	3,6	;RP1=0, select bank1
  3156  0DC9  083D               	movf	(SetPoint@new_val+1)^(0+128),w
  3157  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0DCC  00D8               	movwf	_set_point+1	;volatile
  3160  0DCD  3000               	movlw	0
  3161  0DCE  1BD8               	btfsc	_set_point+1,7	;volatile
  3162  0DCF  30FF               	movlw	255
  3163  0DD0  00D9               	movwf	_set_point+2	;volatile
  3164  0DD1  00DA               	movwf	_set_point+3	;volatile
  3165  0DD2  0008               	return
  3166  0DD3                     __end_of_SetPoint:	
  3167                           
  3168                           	psect	text14
  3169  04F2                     __ptext14:	
  3170 ;; *************** function _sprintf *****************
  3171 ;; Defined at:
  3172 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;  sp              2   14[BANK1 ] PTR unsigned char 
  3175 ;;		 -> main@sVar_394(10), main@sVar(20), SetPoint@sVar(20), 
  3176 ;;  f               1   16[BANK1 ] PTR const unsigned char 
  3177 ;;		 -> STR_6(14), STR_5(4), STR_4(4), STR_3(11), 
  3178 ;;		 -> STR_2(13), STR_1(16), 
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  tmpval          4    0        struct .
  3181 ;;  val             2   25[BANK1 ] unsigned int 
  3182 ;;  cp              2    0        PTR const unsigned char 
  3183 ;;  len             2    0        unsigned int 
  3184 ;;  c               1   27[BANK1 ] unsigned char 
  3185 ;;  prec            1   24[BANK1 ] char 
  3186 ;;  flag            1   23[BANK1 ] unsigned char 
  3187 ;;  ap              1   22[BANK1 ] PTR void [1]
  3188 ;;		 -> ?_sprintf(2), 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  2   14[BANK1 ] int 
  3191 ;; Registers used:
  3192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3198 ;;      Params:         0       0       5       0       0
  3199 ;;      Locals:         0       0       6       0       0
  3200 ;;      Temps:          0       0       3       0       0
  3201 ;;      Totals:         0       0      14       0       0
  3202 ;;Total ram usage:       14 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    5
  3205 ;; This function calls:
  3206 ;;		___lwdiv
  3207 ;;		___lwmod
  3208 ;; This function is called by:
  3209 ;;		_SetPoint
  3210 ;;		_main
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           
  3215                           ;psect for function _sprintf
  3216  04F2                     _sprintf:	
  3217                           
  3218                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  3219                           
  3220                           ;incstack = 0
  3221                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3222  04F2  30B1               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
  3223  04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3224  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  3225  04F5  00B3               	movwf	??_sprintf^(0+128)
  3226  04F6  0833               	movf	??_sprintf^(0+128),w
  3227  04F7  00B6               	movwf	sprintf@ap^(0+128)
  3228  04F8                     l2106:	
  3229                           ;doprnt.c: 548: while((c = *f++)) {
  3230                           
  3231  04F8  3001               	movlw	1
  3232  04F9  07B0               	addwf	sprintf@f^(0+128),f
  3233  04FA  30FF               	movlw	-1
  3234  04FB  0730               	addwf	sprintf@f^(0+128),w
  3235  04FC  0084               	movwf	4
  3236  04FD  120A  158A  2000  120A  118A  	fcall	stringdir
  3237  0502  00B3               	movwf	??_sprintf^(0+128)
  3238  0503  0833               	movf	??_sprintf^(0+128),w
  3239  0504  00BB               	movwf	sprintf@c^(0+128)
  3240  0505  083B               	movf	sprintf@c^(0+128),w
  3241  0506  1903               	btfsc	3,2
  3242  0507  2DCA               	goto	l2108
  3243                           
  3244                           ;doprnt.c: 550: if(c != '%')
  3245  0508  3025               	movlw	37
  3246  0509  063B               	xorwf	sprintf@c^(0+128),w
  3247  050A  1903               	btfsc	3,2
  3248  050B  2D1C               	goto	l2062
  3249                           
  3250                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  3251  050C  083B               	movf	sprintf@c^(0+128),w
  3252  050D  00B3               	movwf	??_sprintf^(0+128)
  3253  050E  082E               	movf	sprintf@sp^(0+128),w
  3254  050F  0084               	movwf	4
  3255  0510  1783               	bsf	3,7
  3256  0511  1C2F               	btfss	(sprintf@sp+1)^(0+128),0
  3257  0512  1383               	bcf	3,7
  3258  0513  0833               	movf	??_sprintf^(0+128),w
  3259  0514  0080               	movwf	0
  3260  0515  3001               	movlw	1
  3261  0516  07AE               	addwf	sprintf@sp^(0+128),f
  3262  0517  1803               	skipnc
  3263  0518  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  3264  0519  3000               	movlw	0
  3265  051A  07AF               	addwf	(sprintf@sp+1)^(0+128),f
  3266                           
  3267                           ;doprnt.c: 554: continue;
  3268  051B  2CF8               	goto	l2106
  3269  051C                     l2062:	
  3270                           
  3271                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  3272  051C  01B7               	clrf	sprintf@flag^(0+128)
  3273                           
  3274                           ;doprnt.c: 654: switch(c = *f++) {
  3275  051D  3001               	movlw	1
  3276  051E  07B0               	addwf	sprintf@f^(0+128),f
  3277  051F  30FF               	movlw	-1
  3278  0520  0730               	addwf	sprintf@f^(0+128),w
  3279  0521  0084               	movwf	4
  3280  0522  120A  158A  2000  120A  118A  	fcall	stringdir
  3281  0527  00BB               	movwf	sprintf@c^(0+128)
  3282                           
  3283                           ; Switch size 1, requested type "simple"
  3284                           ; Number of cases is 3, Range of values is 0 to 105
  3285                           ; switch strategies available:
  3286                           ; Name         Instructions Cycles
  3287                           ; simple_byte           10     6 (average)
  3288                           ; jumptable            260     6 (fixed)
  3289                           ;	Chosen strategy is simple_byte
  3290  0528  3A00               	xorlw	0	; case 0
  3291  0529  1903               	skipnz
  3292  052A  2DCA               	goto	l2108
  3293  052B  3A64               	xorlw	100	; case 100
  3294  052C  1903               	skipnz
  3295  052D  2D32               	goto	l2068
  3296  052E  3A0D               	xorlw	13	; case 105
  3297  052F  1903               	skipnz
  3298  0530  2D32               	goto	l2068
  3299  0531  2CF8               	goto	l2106
  3300  0532                     l2068:	
  3301                           
  3302                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3303  0532  0836               	movf	sprintf@ap^(0+128),w
  3304  0533  0084               	movwf	4
  3305  0534  1383               	bcf	3,7	;select IRP bank0
  3306  0535  0800               	movf	0,w
  3307  0536  00B9               	movwf	sprintf@val^(0+128)
  3308  0537  0A84               	incf	4,f
  3309  0538  0800               	movf	0,w
  3310  0539  00BA               	movwf	(sprintf@val+1)^(0+128)
  3311  053A  3002               	movlw	2
  3312  053B  00B3               	movwf	??_sprintf^(0+128)
  3313  053C  0833               	movf	??_sprintf^(0+128),w
  3314  053D  07B6               	addwf	sprintf@ap^(0+128),f
  3315                           
  3316                           ;doprnt.c: 1280: if((int)val < 0) {
  3317  053E  1FBA               	btfss	(sprintf@val+1)^(0+128),7
  3318  053F  2D49               	goto	l2078
  3319                           
  3320                           ;doprnt.c: 1281: flag |= 0x03;
  3321  0540  3003               	movlw	3
  3322  0541  00B3               	movwf	??_sprintf^(0+128)
  3323  0542  0833               	movf	??_sprintf^(0+128),w
  3324  0543  04B7               	iorwf	sprintf@flag^(0+128),f
  3325                           
  3326                           ;doprnt.c: 1282: val = -val;
  3327  0544  09B9               	comf	sprintf@val^(0+128),f
  3328  0545  09BA               	comf	(sprintf@val+1)^(0+128),f
  3329  0546  0AB9               	incf	sprintf@val^(0+128),f
  3330  0547  1903               	skipnz
  3331  0548  0ABA               	incf	(sprintf@val+1)^(0+128),f
  3332  0549                     l2078:	
  3333                           
  3334                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  3335  0549  01BB               	clrf	sprintf@c^(0+128)
  3336  054A  0ABB               	incf	sprintf@c^(0+128),f
  3337  054B                     l2084:	
  3338                           
  3339                           ;doprnt.c: 1325: if(val < dpowers[c])
  3340  054B  083B               	movf	sprintf@c^(0+128),w
  3341  054C  00B3               	movwf	??_sprintf^(0+128)
  3342  054D  0733               	addwf	??_sprintf^(0+128),w
  3343  054E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3344  054F  0084               	movwf	4
  3345  0550  120A  158A  2000  120A  118A  	fcall	stringdir
  3346  0555  00B4               	movwf	(??_sprintf+1)^(0+128)
  3347  0556  120A  158A  2000  120A  118A  	fcall	stringdir
  3348  055B  00B5               	movwf	((??_sprintf+1)^(0+128)+1)
  3349  055C  0835               	movf	(??_sprintf+2)^(0+128),w
  3350  055D  023A               	subwf	(sprintf@val+1)^(0+128),w
  3351  055E  1D03               	skipz
  3352  055F  2D62               	goto	u1725
  3353  0560  0834               	movf	(??_sprintf+1)^(0+128),w
  3354  0561  0239               	subwf	sprintf@val^(0+128),w
  3355  0562                     u1725:	
  3356  0562  1C03               	btfss	3,0
  3357  0563  2D6C               	goto	l2090
  3358  0564  3001               	movlw	1
  3359  0565  00B3               	movwf	??_sprintf^(0+128)
  3360  0566  0833               	movf	??_sprintf^(0+128),w
  3361  0567  07BB               	addwf	sprintf@c^(0+128),f
  3362  0568  3005               	movlw	5
  3363  0569  063B               	xorwf	sprintf@c^(0+128),w
  3364  056A  1D03               	btfss	3,2
  3365  056B  2D4B               	goto	l2084
  3366  056C                     l2090:	
  3367                           
  3368                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  3369  056C  0837               	movf	sprintf@flag^(0+128),w
  3370  056D  3903               	andlw	3
  3371  056E  1903               	btfsc	3,2
  3372  056F  2D7F               	goto	l2096
  3373                           
  3374                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  3375  0570  302D               	movlw	45
  3376  0571  00B3               	movwf	??_sprintf^(0+128)
  3377  0572  082E               	movf	sprintf@sp^(0+128),w
  3378  0573  0084               	movwf	4
  3379  0574  1783               	bsf	3,7
  3380  0575  1C2F               	btfss	(sprintf@sp+1)^(0+128),0
  3381  0576  1383               	bcf	3,7
  3382  0577  0833               	movf	??_sprintf^(0+128),w
  3383  0578  0080               	movwf	0
  3384  0579  3001               	movlw	1
  3385  057A  07AE               	addwf	sprintf@sp^(0+128),f
  3386  057B  1803               	skipnc
  3387  057C  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  3388  057D  3000               	movlw	0
  3389  057E  07AF               	addwf	(sprintf@sp+1)^(0+128),f
  3390  057F                     l2096:	
  3391                           
  3392                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  3393  057F  083B               	movf	sprintf@c^(0+128),w
  3394  0580  00B3               	movwf	??_sprintf^(0+128)
  3395  0581  0833               	movf	??_sprintf^(0+128),w
  3396  0582  00B8               	movwf	sprintf@prec^(0+128)
  3397  0583                     l2104:	
  3398                           ;doprnt.c: 1493: while(prec--) {
  3399                           
  3400  0583  30FF               	movlw	255
  3401  0584  00B3               	movwf	??_sprintf^(0+128)
  3402  0585  0833               	movf	??_sprintf^(0+128),w
  3403  0586  07B8               	addwf	sprintf@prec^(0+128),f
  3404  0587  0A38               	incf	sprintf@prec^(0+128),w
  3405  0588  1903               	btfsc	3,2
  3406  0589  2CF8               	goto	l2106
  3407                           
  3408                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  3409  058A  300A               	movlw	10
  3410  058B  00A8               	movwf	___lwmod@divisor^(0+128)
  3411  058C  3000               	movlw	0
  3412  058D  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  3413  058E  0838               	movf	sprintf@prec^(0+128),w
  3414  058F  00B3               	movwf	??_sprintf^(0+128)
  3415  0590  0733               	addwf	??_sprintf^(0+128),w
  3416  0591  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3417  0592  0084               	movwf	4
  3418  0593  120A  158A  2000  120A  118A  	fcall	stringdir
  3419  0598  00A0               	movwf	___lwdiv@divisor^(0+128)
  3420  0599  120A  158A  2000  120A  118A  	fcall	stringdir
  3421  059E  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  3422  059F  083A               	movf	(sprintf@val+1)^(0+128),w
  3423  05A0  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  3424  05A1  0839               	movf	sprintf@val^(0+128),w
  3425  05A2  00A2               	movwf	___lwdiv@dividend^(0+128)
  3426  05A3  120A  158A  26A9  120A  118A  	fcall	___lwdiv
  3427  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  3428  05A9  1303               	bcf	3,6	;RP1=0, select bank1
  3429  05AA  0821               	movf	(?___lwdiv+1)^(0+128),w
  3430  05AB  00AB               	movwf	(___lwmod@dividend+1)^(0+128)
  3431  05AC  0820               	movf	?___lwdiv^(0+128),w
  3432  05AD  00AA               	movwf	___lwmod@dividend^(0+128)
  3433  05AE  120A  158A  2607  120A  118A  	fcall	___lwmod
  3434  05B3  1683               	bsf	3,5	;RP0=1, select bank1
  3435  05B4  1303               	bcf	3,6	;RP1=0, select bank1
  3436  05B5  0828               	movf	?___lwmod^(0+128),w
  3437  05B6  3E30               	addlw	48
  3438  05B7  00B4               	movwf	(??_sprintf+1)^(0+128)
  3439  05B8  0834               	movf	(??_sprintf+1)^(0+128),w
  3440  05B9  00BB               	movwf	sprintf@c^(0+128)
  3441                           
  3442                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  3443  05BA  083B               	movf	sprintf@c^(0+128),w
  3444  05BB  00B3               	movwf	??_sprintf^(0+128)
  3445  05BC  082E               	movf	sprintf@sp^(0+128),w
  3446  05BD  0084               	movwf	4
  3447  05BE  1783               	bsf	3,7
  3448  05BF  1C2F               	btfss	(sprintf@sp+1)^(0+128),0
  3449  05C0  1383               	bcf	3,7
  3450  05C1  0833               	movf	??_sprintf^(0+128),w
  3451  05C2  0080               	movwf	0
  3452  05C3  3001               	movlw	1
  3453  05C4  07AE               	addwf	sprintf@sp^(0+128),f
  3454  05C5  1803               	skipnc
  3455  05C6  0AAF               	incf	(sprintf@sp+1)^(0+128),f
  3456  05C7  3000               	movlw	0
  3457  05C8  07AF               	addwf	(sprintf@sp+1)^(0+128),f
  3458  05C9  2D83               	goto	l2104
  3459  05CA                     l2108:	
  3460                           
  3461                           ;doprnt.c: 1557: *sp = 0;
  3462  05CA  082E               	movf	sprintf@sp^(0+128),w
  3463  05CB  0084               	movwf	4
  3464  05CC  1783               	bsf	3,7
  3465  05CD  1C2F               	btfss	(sprintf@sp+1)^(0+128),0
  3466  05CE  1383               	bcf	3,7
  3467  05CF  0180               	clrf	0
  3468  05D0  0008               	return
  3469  05D1                     __end_of_sprintf:	
  3470                           
  3471                           	psect	text15
  3472  0E07                     __ptext15:	
  3473 ;; *************** function ___lwmod *****************
  3474 ;; Defined at:
  3475 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  divisor         2    8[BANK1 ] unsigned int 
  3478 ;;  dividend        2   10[BANK1 ] unsigned int 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  counter         1   13[BANK1 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  2    8[BANK1 ] unsigned int 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3490 ;;      Params:         0       0       4       0       0
  3491 ;;      Locals:         0       0       1       0       0
  3492 ;;      Temps:          0       0       1       0       0
  3493 ;;      Totals:         0       0       6       0       0
  3494 ;;Total ram usage:        6 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    4
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_sprintf
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           
  3505                           ;psect for function ___lwmod
  3506  0E07                     ___lwmod:	
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3510  0E07  1683               	bsf	3,5	;RP0=1, select bank1
  3511  0E08  1303               	bcf	3,6	;RP1=0, select bank1
  3512  0E09  0828               	movf	___lwmod@divisor^(0+128),w
  3513  0E0A  0429               	iorwf	(___lwmod@divisor+1)^(0+128),w
  3514  0E0B  1903               	btfsc	3,2
  3515  0E0C  2E36               	goto	l2034
  3516  0E0D  01AD               	clrf	___lwmod@counter^(0+128)
  3517  0E0E  0AAD               	incf	___lwmod@counter^(0+128),f
  3518  0E0F                     l2024:	
  3519  0E0F  1BA9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  3520  0E10  2E1D               	goto	l2026
  3521  0E11  3001               	movlw	1
  3522  0E12                     u1625:	
  3523  0E12  1003               	clrc
  3524  0E13  0DA8               	rlf	___lwmod@divisor^(0+128),f
  3525  0E14  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  3526  0E15  3EFF               	addlw	-1
  3527  0E16  1D03               	skipz
  3528  0E17  2E12               	goto	u1625
  3529  0E18  3001               	movlw	1
  3530  0E19  00AC               	movwf	??___lwmod^(0+128)
  3531  0E1A  082C               	movf	??___lwmod^(0+128),w
  3532  0E1B  07AD               	addwf	___lwmod@counter^(0+128),f
  3533  0E1C  2E0F               	goto	l2024
  3534  0E1D                     l2026:	
  3535  0E1D  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  3536  0E1E  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  3537  0E1F  1D03               	skipz
  3538  0E20  2E23               	goto	u1645
  3539  0E21  0828               	movf	___lwmod@divisor^(0+128),w
  3540  0E22  022A               	subwf	___lwmod@dividend^(0+128),w
  3541  0E23                     u1645:	
  3542  0E23  1C03               	skipc
  3543  0E24  2E2B               	goto	l2030
  3544  0E25  0828               	movf	___lwmod@divisor^(0+128),w
  3545  0E26  02AA               	subwf	___lwmod@dividend^(0+128),f
  3546  0E27  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  3547  0E28  1C03               	skipc
  3548  0E29  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  3549  0E2A  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  3550  0E2B                     l2030:	
  3551  0E2B  3001               	movlw	1
  3552  0E2C                     u1655:	
  3553  0E2C  1003               	clrc
  3554  0E2D  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  3555  0E2E  0CA8               	rrf	___lwmod@divisor^(0+128),f
  3556  0E2F  3EFF               	addlw	-1
  3557  0E30  1D03               	skipz
  3558  0E31  2E2C               	goto	u1655
  3559  0E32  3001               	movlw	1
  3560  0E33  02AD               	subwf	___lwmod@counter^(0+128),f
  3561  0E34  1D03               	btfss	3,2
  3562  0E35  2E1D               	goto	l2026
  3563  0E36                     l2034:	
  3564  0E36  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  3565  0E37  00A9               	movwf	(?___lwmod+1)^(0+128)
  3566  0E38  082A               	movf	___lwmod@dividend^(0+128),w
  3567  0E39  00A8               	movwf	?___lwmod^(0+128)
  3568  0E3A  0008               	return
  3569  0E3B                     __end_of___lwmod:	
  3570                           
  3571                           	psect	text16
  3572  0EA9                     __ptext16:	
  3573 ;; *************** function ___lwdiv *****************
  3574 ;; Defined at:
  3575 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;  divisor         2    0[BANK1 ] unsigned int 
  3578 ;;  dividend        2    2[BANK1 ] unsigned int 
  3579 ;; Auto vars:     Size  Location     Type
  3580 ;;  quotient        2    5[BANK1 ] unsigned int 
  3581 ;;  counter         1    7[BANK1 ] unsigned char 
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  2    0[BANK1 ] unsigned int 
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3591 ;;      Params:         0       0       4       0       0
  3592 ;;      Locals:         0       0       3       0       0
  3593 ;;      Temps:          0       0       1       0       0
  3594 ;;      Totals:         0       0       8       0       0
  3595 ;;Total ram usage:        8 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    4
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_sprintf
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           
  3606                           ;psect for function ___lwdiv
  3607  0EA9                     ___lwdiv:	
  3608                           
  3609                           ;incstack = 0
  3610                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3611  0EA9  1683               	bsf	3,5	;RP0=1, select bank1
  3612  0EAA  1303               	bcf	3,6	;RP1=0, select bank1
  3613  0EAB  01A5               	clrf	___lwdiv@quotient^(0+128)
  3614  0EAC  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  3615  0EAD  0820               	movf	___lwdiv@divisor^(0+128),w
  3616  0EAE  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  3617  0EAF  1903               	btfsc	3,2
  3618  0EB0  2EE2               	goto	l2012
  3619  0EB1  01A7               	clrf	___lwdiv@counter^(0+128)
  3620  0EB2  0AA7               	incf	___lwdiv@counter^(0+128),f
  3621  0EB3                     l2000:	
  3622  0EB3  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  3623  0EB4  2EC1               	goto	l2002
  3624  0EB5  3001               	movlw	1
  3625  0EB6                     u1555:	
  3626  0EB6  1003               	clrc
  3627  0EB7  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  3628  0EB8  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  3629  0EB9  3EFF               	addlw	-1
  3630  0EBA  1D03               	skipz
  3631  0EBB  2EB6               	goto	u1555
  3632  0EBC  3001               	movlw	1
  3633  0EBD  00A4               	movwf	??___lwdiv^(0+128)
  3634  0EBE  0824               	movf	??___lwdiv^(0+128),w
  3635  0EBF  07A7               	addwf	___lwdiv@counter^(0+128),f
  3636  0EC0  2EB3               	goto	l2000
  3637  0EC1                     l2002:	
  3638  0EC1  3001               	movlw	1
  3639  0EC2                     u1575:	
  3640  0EC2  1003               	clrc
  3641  0EC3  0DA5               	rlf	___lwdiv@quotient^(0+128),f
  3642  0EC4  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  3643  0EC5  3EFF               	addlw	-1
  3644  0EC6  1D03               	skipz
  3645  0EC7  2EC2               	goto	u1575
  3646  0EC8  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3647  0EC9  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  3648  0ECA  1D03               	skipz
  3649  0ECB  2ECE               	goto	u1585
  3650  0ECC  0820               	movf	___lwdiv@divisor^(0+128),w
  3651  0ECD  0222               	subwf	___lwdiv@dividend^(0+128),w
  3652  0ECE                     u1585:	
  3653  0ECE  1C03               	skipc
  3654  0ECF  2ED7               	goto	l2008
  3655  0ED0  0820               	movf	___lwdiv@divisor^(0+128),w
  3656  0ED1  02A2               	subwf	___lwdiv@dividend^(0+128),f
  3657  0ED2  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  3658  0ED3  1C03               	skipc
  3659  0ED4  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  3660  0ED5  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  3661  0ED6  1425               	bsf	___lwdiv@quotient^(0+128),0
  3662  0ED7                     l2008:	
  3663  0ED7  3001               	movlw	1
  3664  0ED8                     u1595:	
  3665  0ED8  1003               	clrc
  3666  0ED9  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  3667  0EDA  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  3668  0EDB  3EFF               	addlw	-1
  3669  0EDC  1D03               	skipz
  3670  0EDD  2ED8               	goto	u1595
  3671  0EDE  3001               	movlw	1
  3672  0EDF  02A7               	subwf	___lwdiv@counter^(0+128),f
  3673  0EE0  1D03               	btfss	3,2
  3674  0EE1  2EC1               	goto	l2002
  3675  0EE2                     l2012:	
  3676  0EE2  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  3677  0EE3  00A1               	movwf	(?___lwdiv+1)^(0+128)
  3678  0EE4  0825               	movf	___lwdiv@quotient^(0+128),w
  3679  0EE5  00A0               	movwf	?___lwdiv^(0+128)
  3680  0EE6  0008               	return
  3681  0EE7                     __end_of___lwdiv:	
  3682                           
  3683                           	psect	text17
  3684  0F26                     __ptext17:	
  3685 ;; *************** function _putst *****************
  3686 ;; Defined at:
  3687 ;;		line 211 in file "serial.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  str             2    2[BANK1 ] PTR const unsigned char 
  3690 ;;		 -> main@sVar_394(10), main@sVar(20), SetPoint@sVar(20), 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3702 ;;      Params:         0       0       2       0       0
  3703 ;;      Locals:         0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0
  3705 ;;      Totals:         0       0       2       0       0
  3706 ;;Total ram usage:        2 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    5
  3709 ;; This function calls:
  3710 ;;		_putch
  3711 ;; This function is called by:
  3712 ;;		_SetPoint
  3713 ;;		_main
  3714 ;; This function uses a non-reentrant model
  3715 ;;
  3716                           
  3717                           
  3718                           ;psect for function _putst
  3719  0F26                     _putst:	
  3720  0F26                     l2884:	
  3721                           ;serial.c: 212: while((*str)!=0) {
  3722                           
  3723                           ;incstack = 0
  3724                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3725                           
  3726  0F26  1683               	bsf	3,5	;RP0=1, select bank1
  3727  0F27  1303               	bcf	3,6	;RP1=0, select bank1
  3728  0F28  0822               	movf	putst@str^(0+128),w
  3729  0F29  0084               	movwf	4
  3730  0F2A  1783               	bsf	3,7
  3731  0F2B  1C23               	btfss	(putst@str+1)^(0+128),0
  3732  0F2C  1383               	bcf	3,7
  3733  0F2D  0800               	movf	0,w
  3734  0F2E  1903               	btfsc	3,2
  3735  0F2F  0008               	return
  3736                           
  3737                           ;serial.c: 213: putch(*str);
  3738  0F30  0822               	movf	putst@str^(0+128),w
  3739  0F31  0084               	movwf	4
  3740  0F32  1783               	bsf	3,7
  3741  0F33  1C23               	btfss	(putst@str+1)^(0+128),0
  3742  0F34  1383               	bcf	3,7
  3743  0F35  0800               	movf	0,w
  3744  0F36  120A  158A  25D3  120A  158A  	fcall	_putch
  3745                           
  3746                           ;serial.c: 214: if (*str==13) putch(10);
  3747  0F3B  1683               	bsf	3,5	;RP0=1, select bank1
  3748  0F3C  1303               	bcf	3,6	;RP1=0, select bank1
  3749  0F3D  0822               	movf	putst@str^(0+128),w
  3750  0F3E  0084               	movwf	4
  3751  0F3F  1783               	bsf	3,7
  3752  0F40  1C23               	btfss	(putst@str+1)^(0+128),0
  3753  0F41  1383               	bcf	3,7
  3754  0F42  300D               	movlw	13
  3755  0F43  0600               	xorwf	0,w
  3756  0F44  1D03               	btfss	3,2
  3757  0F45  2F4C               	goto	l2878
  3758  0F46  300A               	movlw	10
  3759  0F47  120A  158A  25D3  120A  158A  	fcall	_putch
  3760  0F4C                     l2878:	
  3761                           
  3762                           ;serial.c: 215: if (*str==10) putch(13);
  3763  0F4C  1683               	bsf	3,5	;RP0=1, select bank1
  3764  0F4D  1303               	bcf	3,6	;RP1=0, select bank1
  3765  0F4E  0822               	movf	putst@str^(0+128),w
  3766  0F4F  0084               	movwf	4
  3767  0F50  1783               	bsf	3,7
  3768  0F51  1C23               	btfss	(putst@str+1)^(0+128),0
  3769  0F52  1383               	bcf	3,7
  3770  0F53  300A               	movlw	10
  3771  0F54  0600               	xorwf	0,w
  3772  0F55  1D03               	btfss	3,2
  3773  0F56  2F5D               	goto	l2882
  3774  0F57  300D               	movlw	13
  3775  0F58  120A  158A  25D3  120A  158A  	fcall	_putch
  3776  0F5D                     l2882:	
  3777                           
  3778                           ;serial.c: 216: str++;
  3779  0F5D  3001               	movlw	1
  3780  0F5E  1683               	bsf	3,5	;RP0=1, select bank1
  3781  0F5F  1303               	bcf	3,6	;RP1=0, select bank1
  3782  0F60  07A2               	addwf	putst@str^(0+128),f
  3783  0F61  1803               	skipnc
  3784  0F62  0AA3               	incf	(putst@str+1)^(0+128),f
  3785  0F63  3000               	movlw	0
  3786  0F64  07A3               	addwf	(putst@str+1)^(0+128),f
  3787  0F65  2F26               	goto	l2884
  3788  0F66                     __end_of_putst:	
  3789                           
  3790                           	psect	text18
  3791  0DD3                     __ptext18:	
  3792 ;; *************** function _putch *****************
  3793 ;; Defined at:
  3794 ;;		line 95 in file "serial.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  c               1    wreg     unsigned char 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  c               1    1[BANK1 ] unsigned char 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3808 ;;      Params:         0       0       0       0       0
  3809 ;;      Locals:         0       0       1       0       0
  3810 ;;      Temps:          0       0       1       0       0
  3811 ;;      Totals:         0       0       2       0       0
  3812 ;;Total ram usage:        2 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    4
  3815 ;; This function calls:
  3816 ;;		Nothing
  3817 ;; This function is called by:
  3818 ;;		_putst
  3819 ;;		_putchhex
  3820 ;;		_putchdec
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function _putch
  3826  0DD3                     _putch:	
  3827                           
  3828                           ;incstack = 0
  3829                           ; Regs used in _putch: [wreg]
  3830                           ;putch@c stored from wreg
  3831  0DD3  1683               	bsf	3,5	;RP0=1, select bank1
  3832  0DD4  1303               	bcf	3,6	;RP1=0, select bank1
  3833  0DD5  00A1               	movwf	putch@c^(0+128)
  3834  0DD6                     l1986:	
  3835                           ;serial.c: 96: while(!TXIF) {
  3836                           
  3837  0DD6  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0DD7  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0DD8  1A0C               	btfsc	12,4	;volatile
  3840  0DD9  2DF4               	goto	l1988
  3841                           
  3842                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  3843  0DDA  1C98               	btfss	24,1	;volatile
  3844  0DDB  2DE4               	goto	l82
  3845  0DDC  1683               	bsf	3,5	;RP0=1, select bank1
  3846  0DDD  1303               	bcf	3,6	;RP1=0, select bank1
  3847  0DDE  1298               	bcf	24,5	;volatile
  3848  0DDF  1698               	bsf	24,5	;volatile
  3849  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0DE2  1218               	bcf	24,4	;volatile
  3852  0DE3  1618               	bsf	24,4	;volatile
  3853  0DE4                     l82:	
  3854  0DE4  1D18               	btfss	24,2	;volatile
  3855  0DE5  2DF2               	goto	l83
  3856  0DE6  081A               	movf	26,w	;volatile
  3857  0DE7  1683               	bsf	3,5	;RP0=1, select bank1
  3858  0DE8  1303               	bcf	3,6	;RP1=0, select bank1
  3859  0DE9  00A0               	movwf	??_putch^(0+128)
  3860  0DEA  0820               	movf	??_putch^(0+128),w
  3861  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  3862  0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  3863  0DED  00EC               	movwf	_dummy
  3864  0DEE  1683               	bsf	3,5	;RP0=1, select bank1
  3865  0DEF  1303               	bcf	3,6	;RP1=0, select bank1
  3866  0DF0  1298               	bcf	24,5	;volatile
  3867  0DF1  1698               	bsf	24,5	;volatile
  3868  0DF2                     l83:	
  3869  0DF2  0064               	clrwdt	;# 
  3870  0DF3  2DD6               	goto	l1986
  3871  0DF4                     l1988:	
  3872                           
  3873                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  3874  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  3875  0DF5  1303               	bcf	3,6	;RP1=0, select bank1
  3876  0DF6  0821               	movf	putch@c^(0+128),w
  3877  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  3878  0DF8  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0DF9  0099               	movwf	25	;volatile
  3880                           
  3881                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  3882  0DFA  303C               	movlw	60
  3883  0DFB  1683               	bsf	3,5	;RP0=1, select bank1
  3884  0DFC  1303               	bcf	3,6	;RP1=0, select bank1
  3885  0DFD  00A0               	movwf	??_putch^(0+128)
  3886  0DFE  0820               	movf	??_putch^(0+128),w
  3887  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  3888  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  3889  0E01  00ED               	movwf	_delayus_variable
  3890  0E02  0000               	nop	;# 
  3891  0E03  0000               	nop	;# 
  3892  0E04  0BED               	decfsz	_delayus_variable,f	;# 
  3893  0E05  2DD0               	goto	($+-3)	;# 
  3894  0E06  0008               	return
  3895  0E07                     __end_of_putch:	
  3896                           
  3897                           	psect	text19
  3898  0D3E                     __ptext19:	
  3899 ;; *************** function _encoders_init *****************
  3900 ;; Defined at:
  3901 ;;		line 250 in file "main.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3915 ;;      Params:         0       0       0       0       0
  3916 ;;      Locals:         0       0       0       0       0
  3917 ;;      Temps:          0       0       2       0       0
  3918 ;;      Totals:         0       0       2       0       0
  3919 ;;Total ram usage:        2 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    4
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_main
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function _encoders_init
  3931  0D3E                     _encoders_init:	
  3932                           
  3933                           ;main.c: 253: state1 = (PORTB & 0b00011000) >>3;
  3934                           
  3935                           ;incstack = 0
  3936                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  3937  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  3938  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  3939  0D40  0806               	movf	6,w	;volatile
  3940  0D41  1683               	bsf	3,5	;RP0=1, select bank1
  3941  0D42  1303               	bcf	3,6	;RP1=0, select bank1
  3942  0D43  00A0               	movwf	??_encoders_init^(0+128)
  3943  0D44  3003               	movlw	3
  3944  0D45                     u2445:	
  3945  0D45  1003               	clrc
  3946  0D46  0CA0               	rrf	??_encoders_init^(0+128),f
  3947  0D47  3EFF               	addlw	-1
  3948  0D48  1D03               	skipz
  3949  0D49  2D45               	goto	u2445
  3950  0D4A  0820               	movf	??_encoders_init^(0+128),w
  3951  0D4B  3903               	andlw	3
  3952  0D4C  00A1               	movwf	(??_encoders_init+1)^(0+128)
  3953  0D4D  0821               	movf	(??_encoders_init+1)^(0+128),w
  3954  0D4E  1283               	bcf	3,5	;RP0=0, select bank0
  3955  0D4F  1303               	bcf	3,6	;RP1=0, select bank0
  3956  0D50  00EB               	movwf	_state1	;volatile
  3957                           
  3958                           ;main.c: 254: encoder1_counter = 0;
  3959  0D51  3000               	movlw	0
  3960  0D52  00E2               	movwf	_encoder1_counter+3	;volatile
  3961  0D53  3000               	movlw	0
  3962  0D54  00E1               	movwf	_encoder1_counter+2	;volatile
  3963  0D55  3000               	movlw	0
  3964  0D56  00E0               	movwf	_encoder1_counter+1	;volatile
  3965  0D57  3000               	movlw	0
  3966  0D58  00DF               	movwf	_encoder1_counter	;volatile
  3967  0D59  0008               	return
  3968  0D5A                     __end_of_encoders_init:	
  3969                           
  3970                           	psect	text20
  3971  0CE3                     __ptext20:	
  3972 ;; *************** function _chkchr *****************
  3973 ;; Defined at:
  3974 ;;		line 142 in file "serial.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      unsigned char 
  3981 ;; Registers used:
  3982 ;;		wreg
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3988 ;;      Params:         0       0       0       0       0
  3989 ;;      Locals:         0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0
  3991 ;;      Totals:         0       0       0       0       0
  3992 ;;Total ram usage:        0 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    4
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_main
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           
  4003                           ;psect for function _chkchr
  4004  0CE3                     _chkchr:	
  4005                           
  4006                           ;serial.c: 143: if (RCIF) {
  4007                           
  4008                           ;incstack = 0
  4009                           ; Regs used in _chkchr: [wreg]
  4010  0CE3  1283               	bcf	3,5	;RP0=0, select bank0
  4011  0CE4  1303               	bcf	3,6	;RP1=0, select bank0
  4012  0CE5  1E8C               	btfss	12,5	;volatile
  4013  0CE6  2CE9               	goto	l2380
  4014                           
  4015                           ;serial.c: 144: return RCREG;
  4016  0CE7  081A               	movf	26,w	;volatile
  4017  0CE8  0008               	return
  4018  0CE9                     l2380:	
  4019                           
  4020                           ;serial.c: 145: };serial.c: 146: return 255;
  4021  0CE9  30FF               	movlw	255
  4022  0CEA  0008               	return
  4023  0CEB                     __end_of_chkchr:	
  4024                           
  4025                           	psect	text21
  4026  03F5                     __ptext21:	
  4027 ;; *************** function _isr *****************
  4028 ;; Defined at:
  4029 ;;		line 170 in file "main.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  portB           1   50[BANK0 ] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4043 ;;      Params:         0       0       0       0       0
  4044 ;;      Locals:         0       1       0       0       0
  4045 ;;      Temps:          0       6       0       0       0
  4046 ;;      Totals:         0       7       0       0       0
  4047 ;;Total ram usage:        7 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    3
  4050 ;; This function calls:
  4051 ;;		_SetMotor
  4052 ;; This function is called by:
  4053 ;;		Interrupt level 1
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function _isr
  4059  03F5                     _isr:	
  4060                           
  4061                           ;main.c: 171: static int tick;;main.c: 175: if (T0IE && T0IF) {
  4062  03F5  1A8B               	btfsc	11,5	;volatile
  4063  03F6  1D0B               	btfss	11,2	;volatile
  4064  03F7  2C3B               	goto	i1l2600
  4065                           
  4066                           ;main.c: 177: SetMotor();
  4067  03F8  120A  118A  2276  120A  118A  	fcall	_SetMotor
  4068                           
  4069                           ;main.c: 178: if (sampling){
  4070  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  4071  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  4072  03FF  0869               	movf	_sampling,w	;volatile
  4073  0400  1903               	btfsc	3,2
  4074  0401  2C2E               	goto	i1l2594
  4075                           
  4076                           ;main.c: 179: if (samples < 90/2){
  4077  0402  0868               	movf	_samples+1,w	;volatile
  4078  0403  3A80               	xorlw	128
  4079  0404  00FF               	movwf	127
  4080  0405  3080               	movlw	128
  4081  0406  027F               	subwf	127,w
  4082  0407  1D03               	skipz
  4083  0408  2C0B               	goto	u265_25
  4084  0409  302D               	movlw	45
  4085  040A  0267               	subwf	_samples,w	;volatile
  4086  040B                     u265_25:	
  4087  040B  1803               	skipnc
  4088  040C  2C15               	goto	i1l2588
  4089                           
  4090                           ;main.c: 180: pos_log1[samples] = motor_pos-last_pos;
  4091  040D  1283               	bcf	3,5	;RP0=0, select bank0
  4092  040E  1303               	bcf	3,6	;RP1=0, select bank0
  4093  040F  0853               	movf	_last_pos,w	;volatile
  4094  0410  025B               	subwf	_motor_pos,w	;volatile
  4095  0411  00CC               	movwf	??_isr
  4096  0412  0867               	movf	_samples,w	;volatile
  4097  0413  3E90               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  4098  0414  2C1C               	goto	L1
  4099  0415                     i1l2588:	
  4100                           ;main.c: 181: }else{
  4101                           
  4102                           
  4103                           ;main.c: 182: pos_log2[samples-(90/2)] = motor_pos-last_pos;
  4104  0415  1283               	bcf	3,5	;RP0=0, select bank0
  4105  0416  1303               	bcf	3,6	;RP1=0, select bank0
  4106  0417  0853               	movf	_last_pos,w	;volatile
  4107  0418  025B               	subwf	_motor_pos,w	;volatile
  4108  0419  00CC               	movwf	??_isr
  4109  041A  0867               	movf	_samples,w	;volatile
  4110  041B  3EE3               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  4111  041C                     L1:	
  4112  041C  0084               	movwf	4
  4113  041D  084C               	movf	??_isr,w
  4114  041E  1783               	bsf	3,7	;select IRP bank2
  4115  041F  0080               	movwf	0
  4116                           
  4117                           ;main.c: 183: };main.c: 184: last_pos = motor_pos;
  4118  0420  085E               	movf	_motor_pos+3,w	;volatile
  4119  0421  00D6               	movwf	_last_pos+3	;volatile
  4120  0422  085D               	movf	_motor_pos+2,w	;volatile
  4121  0423  00D5               	movwf	_last_pos+2	;volatile
  4122  0424  085C               	movf	_motor_pos+1,w	;volatile
  4123  0425  00D4               	movwf	_last_pos+1	;volatile
  4124  0426  085B               	movf	_motor_pos,w	;volatile
  4125  0427  00D3               	movwf	_last_pos	;volatile
  4126                           
  4127                           ;main.c: 185: samples++;
  4128  0428  3001               	movlw	1
  4129  0429  07E7               	addwf	_samples,f	;volatile
  4130  042A  1803               	skipnc
  4131  042B  0AE8               	incf	_samples+1,f	;volatile
  4132  042C  3000               	movlw	0
  4133  042D  07E8               	addwf	_samples+1,f	;volatile
  4134  042E                     i1l2594:	
  4135                           
  4136                           ;main.c: 186: };main.c: 188: com_time++;
  4137  042E  3001               	movlw	1
  4138  042F  1683               	bsf	3,5	;RP0=1, select bank1
  4139  0430  1303               	bcf	3,6	;RP1=0, select bank1
  4140  0431  07DA               	addwf	_com_time^(0+128),f	;volatile
  4141  0432  1803               	skipnc
  4142  0433  0ADB               	incf	(_com_time+1)^(0+128),f	;volatile
  4143  0434  3000               	movlw	0
  4144  0435  07DB               	addwf	(_com_time+1)^(0+128),f	;volatile
  4145                           
  4146                           ;main.c: 190: TMR0 = (0xff - 195);
  4147  0436  303C               	movlw	60
  4148  0437  1283               	bcf	3,5	;RP0=0, select bank0
  4149  0438  1303               	bcf	3,6	;RP1=0, select bank0
  4150  0439  0081               	movwf	1	;volatile
  4151                           
  4152                           ;main.c: 191: T0IF = 0;
  4153  043A  110B               	bcf	11,2	;volatile
  4154  043B                     i1l2600:	
  4155                           
  4156                           ;main.c: 192: };main.c: 195: if (RBIE && RBIF) {
  4157  043B  198B               	btfsc	11,3	;volatile
  4158  043C  1C0B               	btfss	11,0	;volatile
  4159  043D  2CE7               	goto	i1l348
  4160                           
  4161                           ;main.c: 196: char portB = PORTB;
  4162  043E  0806               	movf	6,w	;volatile
  4163  043F  00CC               	movwf	??_isr
  4164  0440  084C               	movf	??_isr,w
  4165  0441  00D2               	movwf	isr@portB
  4166                           
  4167                           ;main.c: 198: ab1 = (portB & 0b00011000) >>3;
  4168  0442  0852               	movf	isr@portB,w
  4169  0443  00CC               	movwf	??_isr
  4170  0444  3003               	movlw	3
  4171  0445                     u268_25:	
  4172  0445  1003               	clrc
  4173  0446  0CCC               	rrf	??_isr,f
  4174  0447  3EFF               	addlw	-1
  4175  0448  1D03               	skipz
  4176  0449  2C45               	goto	u268_25
  4177  044A  084C               	movf	??_isr,w
  4178  044B  3903               	andlw	3
  4179  044C  00CD               	movwf	??_isr+1
  4180  044D  084D               	movf	??_isr+1,w
  4181  044E  00EA               	movwf	_ab1	;volatile
  4182                           
  4183                           ;main.c: 199: switch(state1)
  4184  044F  2CC9               	goto	i1l2646
  4185  0450                     i1l2608:	
  4186                           
  4187                           ;main.c: 202: if(ab1 == 1){
  4188  0450  036A               	decf	_ab1,w	;volatile
  4189  0451  1D03               	btfss	3,2
  4190  0452  2C55               	goto	i1l2612
  4191                           
  4192                           ;main.c: 203: state1 = 1;
  4193  0453  3001               	movlw	1
  4194  0454  2C75               	goto	L2
  4195  0455                     i1l2612:	
  4196                           ;main.c: 205: }
  4197                           
  4198                           ;main.c: 204: encoder1_counter--;
  4199                           
  4200                           
  4201                           ;main.c: 206: else if(ab1 == 2){
  4202  0455  3002               	movlw	2
  4203  0456  066A               	xorwf	_ab1,w	;volatile
  4204  0457  1D03               	btfss	3,2
  4205  0458  2CD7               	goto	i1l2648
  4206                           
  4207                           ;main.c: 207: state1 = 2;
  4208  0459  3002               	movlw	2
  4209  045A  00CC               	movwf	??_isr
  4210  045B  084C               	movf	??_isr,w
  4211  045C  00EB               	movwf	_state1	;volatile
  4212  045D  2C62               	goto	i1l2620
  4213  045E                     i1l2616:	
  4214                           ;main.c: 208: encoder1_counter++;
  4215                           
  4216                           
  4217                           ;main.c: 212: if(ab1 == 0){
  4218  045E  086A               	movf	_ab1,w	;volatile
  4219  045F  1D03               	btfss	3,2
  4220  0460  2C70               	goto	i1l2622
  4221                           
  4222                           ;main.c: 213: state1 = 0;
  4223  0461  01EB               	clrf	_state1	;volatile
  4224  0462                     i1l2620:	
  4225                           
  4226                           ;main.c: 214: encoder1_counter++;
  4227  0462  3001               	movlw	1
  4228  0463  07DF               	addwf	_encoder1_counter,f	;volatile
  4229  0464  3000               	movlw	0
  4230  0465  1803               	skipnc
  4231  0466  3001               	movlw	1
  4232  0467  07E0               	addwf	_encoder1_counter+1,f	;volatile
  4233  0468  3000               	movlw	0
  4234  0469  1803               	skipnc
  4235  046A  3001               	movlw	1
  4236  046B  07E1               	addwf	_encoder1_counter+2,f	;volatile
  4237  046C  3000               	movlw	0
  4238  046D  1803               	skipnc
  4239  046E  3001               	movlw	1
  4240  046F  2C82               	goto	L3
  4241  0470                     i1l2622:	
  4242                           ;main.c: 215: }
  4243                           
  4244                           
  4245                           ;main.c: 216: else if (ab1 == 3){
  4246  0470  3003               	movlw	3
  4247  0471  066A               	xorwf	_ab1,w	;volatile
  4248  0472  1D03               	btfss	3,2
  4249  0473  2CD7               	goto	i1l2648
  4250                           
  4251                           ;main.c: 217: state1 = 3;
  4252  0474  3003               	movlw	3
  4253  0475                     L2:	
  4254  0475  00CC               	movwf	??_isr
  4255  0476  084C               	movf	??_isr,w
  4256  0477  00EB               	movwf	_state1	;volatile
  4257                           
  4258                           ;main.c: 218: encoder1_counter--;
  4259  0478  30FF               	movlw	255
  4260  0479  07DF               	addwf	_encoder1_counter,f	;volatile
  4261  047A  30FF               	movlw	255
  4262  047B  1C03               	skipc
  4263  047C  07E0               	addwf	_encoder1_counter+1,f	;volatile
  4264  047D  30FF               	movlw	255
  4265  047E  1C03               	skipc
  4266  047F  07E1               	addwf	_encoder1_counter+2,f	;volatile
  4267  0480  30FF               	movlw	255
  4268  0481  1C03               	skipc
  4269  0482                     L3:	
  4270  0482  07E2               	addwf	_encoder1_counter+3,f	;volatile
  4271  0483  2CD7               	goto	i1l2648
  4272  0484                     i1l2626:	
  4273                           
  4274                           ;main.c: 222: if(ab1 == 0){
  4275  0484  086A               	movf	_ab1,w	;volatile
  4276  0485  1D03               	btfss	3,2
  4277  0486  2C89               	goto	i1l2632
  4278                           
  4279                           ;main.c: 223: state1 = 0;
  4280  0487  01EB               	clrf	_state1	;volatile
  4281  0488  2CA7               	goto	L4
  4282  0489                     i1l2632:	
  4283                           ;main.c: 225: }
  4284                           
  4285                           ;main.c: 224: encoder1_counter--;
  4286                           
  4287                           
  4288                           ;main.c: 226: else if(ab1 == 3){
  4289  0489  3003               	movlw	3
  4290  048A  066A               	xorwf	_ab1,w	;volatile
  4291  048B  1D03               	btfss	3,2
  4292  048C  2CD7               	goto	i1l2648
  4293                           
  4294                           ;main.c: 227: state1 = 3;
  4295  048D  3003               	movlw	3
  4296  048E  00CC               	movwf	??_isr
  4297  048F  084C               	movf	??_isr,w
  4298  0490  00EB               	movwf	_state1	;volatile
  4299                           
  4300                           ;main.c: 228: encoder1_counter++;
  4301  0491  3001               	movlw	1
  4302  0492  07DF               	addwf	_encoder1_counter,f	;volatile
  4303  0493  3000               	movlw	0
  4304  0494  1803               	skipnc
  4305  0495  3001               	movlw	1
  4306  0496  07E0               	addwf	_encoder1_counter+1,f	;volatile
  4307  0497  3000               	movlw	0
  4308  0498  1803               	skipnc
  4309  0499  3001               	movlw	1
  4310  049A  07E1               	addwf	_encoder1_counter+2,f	;volatile
  4311  049B  3000               	movlw	0
  4312  049C  1803               	skipnc
  4313  049D  3001               	movlw	1
  4314  049E  2CB1               	goto	L5
  4315  049F                     i1l2636:	
  4316                           
  4317                           ;main.c: 232: if(ab1 == 2){
  4318  049F  3002               	movlw	2
  4319  04A0  066A               	xorwf	_ab1,w	;volatile
  4320  04A1  1D03               	btfss	3,2
  4321  04A2  2CB3               	goto	i1l2640
  4322                           
  4323                           ;main.c: 233: state1 = 2;
  4324  04A3  3002               	movlw	2
  4325  04A4  00CC               	movwf	??_isr
  4326  04A5  084C               	movf	??_isr,w
  4327  04A6  00EB               	movwf	_state1	;volatile
  4328  04A7                     L4:	
  4329                           
  4330                           ;main.c: 234: encoder1_counter--;
  4331  04A7  30FF               	movlw	255
  4332  04A8  07DF               	addwf	_encoder1_counter,f	;volatile
  4333  04A9  30FF               	movlw	255
  4334  04AA  1C03               	skipc
  4335  04AB  07E0               	addwf	_encoder1_counter+1,f	;volatile
  4336  04AC  30FF               	movlw	255
  4337  04AD  1C03               	skipc
  4338  04AE  07E1               	addwf	_encoder1_counter+2,f	;volatile
  4339  04AF  30FF               	movlw	255
  4340  04B0  1C03               	skipc
  4341  04B1                     L5:	
  4342  04B1  07E2               	addwf	_encoder1_counter+3,f	;volatile
  4343                           
  4344                           ;main.c: 235: }
  4345  04B2  2CD7               	goto	i1l2648
  4346  04B3                     i1l2640:	
  4347                           
  4348                           ;main.c: 236: else if (ab1 == 1){
  4349  04B3  036A               	decf	_ab1,w	;volatile
  4350  04B4  1D03               	btfss	3,2
  4351  04B5  2CD7               	goto	i1l2648
  4352                           
  4353                           ;main.c: 237: state1 = 1;
  4354  04B6  3001               	movlw	1
  4355  04B7  00CC               	movwf	??_isr
  4356  04B8  084C               	movf	??_isr,w
  4357  04B9  00EB               	movwf	_state1	;volatile
  4358                           
  4359                           ;main.c: 238: encoder1_counter++;
  4360  04BA  3001               	movlw	1
  4361  04BB  07DF               	addwf	_encoder1_counter,f	;volatile
  4362  04BC  3000               	movlw	0
  4363  04BD  1803               	skipnc
  4364  04BE  3001               	movlw	1
  4365  04BF  07E0               	addwf	_encoder1_counter+1,f	;volatile
  4366  04C0  3000               	movlw	0
  4367  04C1  1803               	skipnc
  4368  04C2  3001               	movlw	1
  4369  04C3  07E1               	addwf	_encoder1_counter+2,f	;volatile
  4370  04C4  3000               	movlw	0
  4371  04C5  1803               	skipnc
  4372  04C6  3001               	movlw	1
  4373  04C7  07E2               	addwf	_encoder1_counter+3,f	;volatile
  4374  04C8  2CD7               	goto	i1l2648
  4375  04C9                     i1l2646:	
  4376  04C9  086B               	movf	_state1,w	;volatile
  4377                           
  4378                           ; Switch size 1, requested type "simple"
  4379                           ; Number of cases is 4, Range of values is 0 to 3
  4380                           ; switch strategies available:
  4381                           ; Name         Instructions Cycles
  4382                           ; simple_byte           13     7 (average)
  4383                           ; direct_byte           20     8 (fixed)
  4384                           ; jumptable            260     6 (fixed)
  4385                           ;	Chosen strategy is simple_byte
  4386  04CA  3A00               	xorlw	0	; case 0
  4387  04CB  1903               	skipnz
  4388  04CC  2C50               	goto	i1l2608
  4389  04CD  3A01               	xorlw	1	; case 1
  4390  04CE  1903               	skipnz
  4391  04CF  2C5E               	goto	i1l2616
  4392  04D0  3A03               	xorlw	3	; case 2
  4393  04D1  1903               	skipnz
  4394  04D2  2C84               	goto	i1l2626
  4395  04D3  3A01               	xorlw	1	; case 3
  4396  04D4  1903               	skipnz
  4397  04D5  2C9F               	goto	i1l2636
  4398  04D6  2CD7               	goto	i1l2648
  4399  04D7                     i1l2648:	
  4400                           
  4401                           ;main.c: 243: motor_pos = -encoder1_counter;
  4402  04D7  095F               	comf	_encoder1_counter,w	;volatile
  4403  04D8  00DB               	movwf	_motor_pos	;volatile
  4404  04D9  0960               	comf	_encoder1_counter+1,w	;volatile
  4405  04DA  00DC               	movwf	_motor_pos+1	;volatile
  4406  04DB  0961               	comf	_encoder1_counter+2,w	;volatile
  4407  04DC  00DD               	movwf	_motor_pos+2	;volatile
  4408  04DD  0962               	comf	_encoder1_counter+3,w	;volatile
  4409  04DE  00DE               	movwf	_motor_pos+3	;volatile
  4410  04DF  0ADB               	incf	_motor_pos,f	;volatile
  4411  04E0  1903               	skipnz
  4412  04E1  0ADC               	incf	_motor_pos+1,f	;volatile
  4413  04E2  1903               	skipnz
  4414  04E3  0ADD               	incf	_motor_pos+2,f	;volatile
  4415  04E4  1903               	skipnz
  4416  04E5  0ADE               	incf	_motor_pos+3,f	;volatile
  4417                           
  4418                           ;main.c: 244: RBIF = 0;
  4419  04E6  100B               	bcf	11,0	;volatile
  4420  04E7                     i1l348:	
  4421  04E7  0851               	movf	??_isr+5,w
  4422  04E8  00FF               	movwf	127
  4423  04E9  0850               	movf	??_isr+4,w
  4424  04EA  008A               	movwf	10
  4425  04EB  084F               	movf	??_isr+3,w
  4426  04EC  0084               	movwf	4
  4427  04ED  0E4E               	swapf	(??_isr+2)^0,w
  4428  04EE  0083               	movwf	3
  4429  04EF  0EFE               	swapf	126,f
  4430  04F0  0E7E               	swapf	126,w
  4431  04F1  0009               	retfie
  4432  04F2                     __end_of_isr:	
  4433                           
  4434                           	psect	intentry
  4435  0004                     __pintentry:	
  4436                           ;incstack = 0
  4437                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4438                           
  4439  0004                     interrupt_function:	
  4440  007E                     saved_w	set	btemp
  4441  0004  00FE               	movwf	btemp
  4442  0005  0E03               	swapf	3,w
  4443  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4444  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4445  0008  00CE               	movwf	??_isr+2
  4446  0009  0804               	movf	4,w
  4447  000A  00CF               	movwf	??_isr+3
  4448  000B  080A               	movf	10,w
  4449  000C  00D0               	movwf	??_isr+4
  4450  000D  087F               	movf	btemp+1,w
  4451  000E  00D1               	movwf	??_isr+5
  4452  000F  120A  118A  2BF5   	ljmp	_isr
  4453                           
  4454                           	psect	text22
  4455  0276                     __ptext22:	
  4456 ;; *************** function _SetMotor *****************
  4457 ;; Defined at:
  4458 ;;		line 109 in file "main.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;  I_Response      2   36[BANK0 ] int 
  4463 ;;  D_Response      2   34[BANK0 ] int 
  4464 ;;  P_Response      2   32[BANK0 ] int 
  4465 ;;  resp            4   38[BANK0 ] long 
  4466 ;;  err             2   42[BANK0 ] int 
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4476 ;;      Params:         0       0       0       0       0
  4477 ;;      Locals:         0      12       0       0       0
  4478 ;;      Temps:          0       8       0       0       0
  4479 ;;      Totals:         0      20       0       0       0
  4480 ;;Total ram usage:       20 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:    2
  4483 ;; This function calls:
  4484 ;;		___awdiv
  4485 ;;		___wmul
  4486 ;;		_constrain
  4487 ;;		i1_pwm_set
  4488 ;; This function is called by:
  4489 ;;		_isr
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           
  4494                           ;psect for function _SetMotor
  4495  0276                     _SetMotor:	
  4496                           
  4497                           ;main.c: 110: static long integral;;main.c: 111: static int derivative;;main.c: 112: sta
      +                          tic int last_err;;main.c: 113: long resp;;main.c: 114: int err = set_point - motor_pos;
  4498                           
  4499                           ;incstack = 0
  4500                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4501  0276  1283               	bcf	3,5	;RP0=0, select bank0
  4502  0277  1303               	bcf	3,6	;RP1=0, select bank0
  4503  0278  085B               	movf	_motor_pos,w	;volatile
  4504  0279  0257               	subwf	_set_point,w	;volatile
  4505  027A  00CA               	movwf	SetMotor@err
  4506  027B  085C               	movf	_motor_pos+1,w	;volatile
  4507  027C  1C03               	skipc
  4508  027D  0A5C               	incf	_motor_pos+1,w	;volatile
  4509  027E  0258               	subwf	_set_point+1,w	;volatile
  4510  027F  00CB               	movwf	SetMotor@err+1
  4511                           
  4512                           ;main.c: 116: if (onlyK){
  4513  0280  0865               	movf	_onlyK,w
  4514  0281  0466               	iorwf	_onlyK+1,w
  4515  0282  1903               	btfsc	3,2
  4516  0283  2A9C               	goto	i1l2432
  4517                           
  4518                           ;main.c: 117: resp = (err)/5;
  4519  0284  3005               	movlw	5
  4520  0285  00F0               	movwf	___awdiv@divisor
  4521  0286  3000               	movlw	0
  4522  0287  00F1               	movwf	___awdiv@divisor+1
  4523  0288  084B               	movf	SetMotor@err+1,w
  4524  0289  00F3               	movwf	___awdiv@dividend+1
  4525  028A  084A               	movf	SetMotor@err,w
  4526  028B  00F2               	movwf	___awdiv@dividend
  4527  028C  120A  158A  27A7  120A  118A  	fcall	___awdiv
  4528  0291  0870               	movf	?___awdiv,w
  4529  0292  1283               	bcf	3,5	;RP0=0, select bank0
  4530  0293  1303               	bcf	3,6	;RP1=0, select bank0
  4531  0294  00C6               	movwf	SetMotor@resp
  4532  0295  0871               	movf	?___awdiv+1,w
  4533  0296  00C7               	movwf	SetMotor@resp+1
  4534  0297  3000               	movlw	0
  4535  0298  1BC7               	btfsc	SetMotor@resp+1,7
  4536  0299  30FF               	movlw	255
  4537  029A  00C8               	movwf	SetMotor@resp+2
  4538  029B  2B4A               	goto	L6
  4539  029C                     i1l2432:	
  4540                           ;main.c: 118: }else{
  4541                           
  4542                           
  4543                           ;main.c: 120: derivative = (err - last_err);
  4544  029C  0863               	movf	SetMotor@last_err,w
  4545  029D  024A               	subwf	SetMotor@err,w
  4546  029E  00EE               	movwf	SetMotor@derivative
  4547  029F  0864               	movf	SetMotor@last_err+1,w
  4548  02A0  1C03               	skipc
  4549  02A1  0A64               	incf	SetMotor@last_err+1,w
  4550  02A2  024B               	subwf	SetMotor@err+1,w
  4551  02A3  00EF               	movwf	SetMotor@derivative+1
  4552                           
  4553                           ;main.c: 121: last_err = err;
  4554  02A4  084B               	movf	SetMotor@err+1,w
  4555  02A5  00E4               	movwf	SetMotor@last_err+1
  4556  02A6  084A               	movf	SetMotor@err,w
  4557  02A7  00E3               	movwf	SetMotor@last_err
  4558                           
  4559                           ;main.c: 122: if (err == 0){
  4560  02A8  084A               	movf	SetMotor@err,w
  4561  02A9  044B               	iorwf	SetMotor@err+1,w
  4562  02AA  1D03               	btfss	3,2
  4563  02AB  2AB6               	goto	i1l2440
  4564                           
  4565                           ;main.c: 123: integral = 0;
  4566  02AC  3000               	movlw	0
  4567  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  4568  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  4569  02AF  00DF               	movwf	(SetMotor@integral+3)^(0+128)
  4570  02B0  3000               	movlw	0
  4571  02B1  00DE               	movwf	(SetMotor@integral+2)^(0+128)
  4572  02B2  3000               	movlw	0
  4573  02B3  00DD               	movwf	(SetMotor@integral+1)^(0+128)
  4574  02B4  3000               	movlw	0
  4575  02B5  2AFE               	goto	L7
  4576  02B6                     i1l2440:	
  4577                           ;main.c: 124: }else{
  4578                           
  4579                           
  4580                           ;main.c: 125: integral = integral + err;
  4581  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  4582  02B7  1303               	bcf	3,6	;RP1=0, select bank1
  4583  02B8  085C               	movf	SetMotor@integral^(0+128),w
  4584  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  4585  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  4586  02BB  00B8               	movwf	??_SetMotor
  4587  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  4588  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  4589  02BE  085D               	movf	(SetMotor@integral+1)^(0+128),w
  4590  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  4591  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  4592  02C1  00B9               	movwf	??_SetMotor+1
  4593  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  4594  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  4595  02C4  085E               	movf	(SetMotor@integral+2)^(0+128),w
  4596  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  4597  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  4598  02C7  00BA               	movwf	??_SetMotor+2
  4599  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  4600  02C9  1303               	bcf	3,6	;RP1=0, select bank1
  4601  02CA  085F               	movf	(SetMotor@integral+3)^(0+128),w
  4602  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  4603  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  4604  02CD  00BB               	movwf	??_SetMotor+3
  4605  02CE  084A               	movf	SetMotor@err,w
  4606  02CF  00BC               	movwf	??_SetMotor+4
  4607  02D0  084B               	movf	SetMotor@err+1,w
  4608  02D1  00BD               	movwf	??_SetMotor+5
  4609  02D2  3000               	movlw	0
  4610  02D3  1BBD               	btfsc	??_SetMotor+5,7
  4611  02D4  30FF               	movlw	255
  4612  02D5  00BE               	movwf	??_SetMotor+6
  4613  02D6  00BF               	movwf	??_SetMotor+7
  4614  02D7  083C               	movf	??_SetMotor+4,w
  4615  02D8  07B8               	addwf	??_SetMotor,f
  4616  02D9  083D               	movf	??_SetMotor+5,w
  4617  02DA  1803               	skipnc
  4618  02DB  0F3D               	incfsz	??_SetMotor+5,w
  4619  02DC  2ADE               	goto	u241_20
  4620  02DD  2ADF               	goto	u241_21
  4621  02DE                     u241_20:	
  4622  02DE  07B9               	addwf	??_SetMotor+1,f
  4623  02DF                     u241_21:	
  4624  02DF  083E               	movf	??_SetMotor+6,w
  4625  02E0  1803               	skipnc
  4626  02E1  0F3E               	incfsz	??_SetMotor+6,w
  4627  02E2  2AE4               	goto	u241_22
  4628  02E3  2AE5               	goto	u241_23
  4629  02E4                     u241_22:	
  4630  02E4  07BA               	addwf	??_SetMotor+2,f
  4631  02E5                     u241_23:	
  4632  02E5  083F               	movf	??_SetMotor+7,w
  4633  02E6  1803               	skipnc
  4634  02E7  0A3F               	incf	??_SetMotor+7,w
  4635  02E8  07BB               	addwf	??_SetMotor+3,f
  4636  02E9  083B               	movf	??_SetMotor+3,w
  4637  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  4638  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  4639  02EC  00DF               	movwf	(SetMotor@integral+3)^(0+128)
  4640  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  4641  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  4642  02EF  083A               	movf	??_SetMotor+2,w
  4643  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  4644  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  4645  02F2  00DE               	movwf	(SetMotor@integral+2)^(0+128)
  4646  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  4647  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  4648  02F5  0839               	movf	??_SetMotor+1,w
  4649  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  4650  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  4651  02F8  00DD               	movwf	(SetMotor@integral+1)^(0+128)
  4652  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  4653  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  4654  02FB  0838               	movf	??_SetMotor,w
  4655  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  4656  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  4657  02FE                     L7:	
  4658  02FE  00DC               	movwf	SetMotor@integral^(0+128)
  4659                           
  4660                           ;main.c: 126: };main.c: 128: int P_Response = 4 * err;
  4661  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4662  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4663  0301  084B               	movf	SetMotor@err+1,w
  4664  0302  00B9               	movwf	??_SetMotor+1
  4665  0303  084A               	movf	SetMotor@err,w
  4666  0304  00B8               	movwf	??_SetMotor
  4667  0305  1003               	clrc
  4668  0306  0DB8               	rlf	??_SetMotor,f
  4669  0307  0DB9               	rlf	??_SetMotor+1,f
  4670  0308  1003               	clrc
  4671  0309  0DB8               	rlf	??_SetMotor,f
  4672  030A  0DB9               	rlf	??_SetMotor+1,f
  4673  030B  0838               	movf	??_SetMotor,w
  4674  030C  00C0               	movwf	SetMotor@P_Response
  4675  030D  0839               	movf	??_SetMotor+1,w
  4676  030E  00C1               	movwf	SetMotor@P_Response+1
  4677                           
  4678                           ;main.c: 129: int D_Response = (13 * derivative);
  4679  030F  086F               	movf	SetMotor@derivative+1,w
  4680  0310  00F1               	movwf	___wmul@multiplier+1
  4681  0311  086E               	movf	SetMotor@derivative,w
  4682  0312  00F0               	movwf	___wmul@multiplier
  4683  0313  300D               	movlw	13
  4684  0314  00F2               	movwf	___wmul@multiplicand
  4685  0315  3000               	movlw	0
  4686  0316  00F3               	movwf	___wmul@multiplicand+1
  4687  0317  120A  158A  255A  120A  118A  	fcall	___wmul
  4688  031C  0871               	movf	?___wmul+1,w
  4689  031D  1283               	bcf	3,5	;RP0=0, select bank0
  4690  031E  1303               	bcf	3,6	;RP1=0, select bank0
  4691  031F  00C3               	movwf	SetMotor@D_Response+1
  4692  0320  0870               	movf	?___wmul,w
  4693  0321  00C2               	movwf	SetMotor@D_Response
  4694                           
  4695                           ;main.c: 131: int I_Response = 0 * integral;
  4696  0322  1683               	bsf	3,5	;RP0=1, select bank1
  4697  0323  1303               	bcf	3,6	;RP1=0, select bank1
  4698  0324  085D               	movf	(SetMotor@integral+1)^(0+128),w
  4699  0325  00F1               	movwf	___wmul@multiplier+1
  4700  0326  085C               	movf	SetMotor@integral^(0+128),w
  4701  0327  00F0               	movwf	___wmul@multiplier
  4702  0328  3000               	movlw	0
  4703  0329  00F2               	movwf	___wmul@multiplicand
  4704  032A  00F3               	movwf	___wmul@multiplicand+1
  4705  032B  120A  158A  255A  120A  118A  	fcall	___wmul
  4706  0330  0871               	movf	?___wmul+1,w
  4707  0331  1283               	bcf	3,5	;RP0=0, select bank0
  4708  0332  1303               	bcf	3,6	;RP1=0, select bank0
  4709  0333  00C5               	movwf	SetMotor@I_Response+1
  4710  0334  0870               	movf	?___wmul,w
  4711  0335  00C4               	movwf	SetMotor@I_Response
  4712                           
  4713                           ;main.c: 132: resp = P_Response + D_Response + I_Response;
  4714  0336  0842               	movf	SetMotor@D_Response,w
  4715  0337  0740               	addwf	SetMotor@P_Response,w
  4716  0338  00B8               	movwf	??_SetMotor
  4717  0339  0843               	movf	SetMotor@D_Response+1,w
  4718  033A  1803               	skipnc
  4719  033B  0A43               	incf	SetMotor@D_Response+1,w
  4720  033C  0741               	addwf	SetMotor@P_Response+1,w
  4721  033D  00B9               	movwf	??_SetMotor+1
  4722  033E  0844               	movf	SetMotor@I_Response,w
  4723  033F  0738               	addwf	??_SetMotor,w
  4724  0340  00C6               	movwf	SetMotor@resp
  4725  0341  0845               	movf	SetMotor@I_Response+1,w
  4726  0342  1803               	skipnc
  4727  0343  0A45               	incf	SetMotor@I_Response+1,w
  4728  0344  0739               	addwf	??_SetMotor+1,w
  4729  0345  00C7               	movwf	SetMotor@resp+1
  4730  0346  01C8               	clrf	SetMotor@resp+2
  4731  0347  1BC7               	btfsc	SetMotor@resp+1,7
  4732  0348  03C8               	decf	SetMotor@resp+2,f
  4733  0349  0848               	movf	SetMotor@resp+2,w
  4734  034A                     L6:	
  4735  034A  00C9               	movwf	SetMotor@resp+3
  4736                           
  4737                           ;main.c: 133: };main.c: 135: resp = constrain(resp, -255,255 );
  4738  034B  0849               	movf	SetMotor@resp+3,w
  4739  034C  00F3               	movwf	constrain@value+3
  4740  034D  0848               	movf	SetMotor@resp+2,w
  4741  034E  00F2               	movwf	constrain@value+2
  4742  034F  0847               	movf	SetMotor@resp+1,w
  4743  0350  00F1               	movwf	constrain@value+1
  4744  0351  0846               	movf	SetMotor@resp,w
  4745  0352  00F0               	movwf	constrain@value
  4746  0353  30FF               	movlw	255
  4747  0354  00F7               	movwf	constrain@lLimit+3
  4748  0355  30FF               	movlw	255
  4749  0356  00F6               	movwf	constrain@lLimit+2
  4750  0357  30FF               	movlw	255
  4751  0358  00F5               	movwf	constrain@lLimit+1
  4752  0359  3001               	movlw	1
  4753  035A  00F4               	movwf	constrain@lLimit
  4754  035B  3000               	movlw	0
  4755  035C  00FB               	movwf	constrain@uLimit+3
  4756  035D  3000               	movlw	0
  4757  035E  00FA               	movwf	constrain@uLimit+2
  4758  035F  3000               	movlw	0
  4759  0360  00F9               	movwf	constrain@uLimit+1
  4760  0361  30FF               	movlw	255
  4761  0362  00F8               	movwf	constrain@uLimit
  4762  0363  120A  158A  266F  120A  118A  	fcall	_constrain
  4763  0368  0873               	movf	?_constrain+3,w
  4764  0369  1283               	bcf	3,5	;RP0=0, select bank0
  4765  036A  1303               	bcf	3,6	;RP1=0, select bank0
  4766  036B  00C9               	movwf	SetMotor@resp+3
  4767  036C  0872               	movf	?_constrain+2,w
  4768  036D  00C8               	movwf	SetMotor@resp+2
  4769  036E  0871               	movf	?_constrain+1,w
  4770  036F  00C7               	movwf	SetMotor@resp+1
  4771  0370  0870               	movf	?_constrain,w
  4772  0371  00C6               	movwf	SetMotor@resp
  4773                           
  4774                           ;main.c: 136: if (resp > 0){
  4775  0372  1BC9               	btfsc	SetMotor@resp+3,7
  4776  0373  2BA6               	goto	i1l301
  4777  0374  0849               	movf	SetMotor@resp+3,w
  4778  0375  1D03               	btfss	3,2
  4779  0376  2B83               	goto	i1l2454
  4780  0377  0848               	movf	SetMotor@resp+2,w
  4781  0378  1D03               	btfss	3,2
  4782  0379  2B83               	goto	i1l2454
  4783  037A  0847               	movf	SetMotor@resp+1,w
  4784  037B  1D03               	btfss	3,2
  4785  037C  2B83               	goto	i1l2454
  4786  037D  3001               	movlw	1
  4787  037E  0246               	subwf	SetMotor@resp,w
  4788  037F  1D03               	skipz
  4789  0380  2B81               	goto	u242_23
  4790  0381                     u242_23:	
  4791  0381  1C03               	btfss	3,0
  4792  0382  2BA6               	goto	i1l301
  4793  0383                     i1l2454:	
  4794                           
  4795                           ;main.c: 137: pwm_set(1, resp );
  4796  0383  3001               	movlw	1
  4797  0384  00AE               	movwf	i1pwm_set@channel
  4798  0385  3000               	movlw	0
  4799  0386  00AF               	movwf	i1pwm_set@channel+1
  4800  0387  0849               	movf	SetMotor@resp+3,w
  4801  0388  00B3               	movwf	i1pwm_set@duty_cycle+3
  4802  0389  0848               	movf	SetMotor@resp+2,w
  4803  038A  00B2               	movwf	i1pwm_set@duty_cycle+2
  4804  038B  0847               	movf	SetMotor@resp+1,w
  4805  038C  00B1               	movwf	i1pwm_set@duty_cycle+1
  4806  038D  0846               	movf	SetMotor@resp,w
  4807  038E  00B0               	movwf	i1pwm_set@duty_cycle
  4808  038F  120A  118A  2774  120A  118A  	fcall	i1_pwm_set
  4809                           
  4810                           ;main.c: 138: pwm_set(2, 0 );
  4811  0394  3002               	movlw	2
  4812  0395  1283               	bcf	3,5	;RP0=0, select bank0
  4813  0396  1303               	bcf	3,6	;RP1=0, select bank0
  4814  0397  00AE               	movwf	i1pwm_set@channel
  4815  0398  3000               	movlw	0
  4816  0399  00AF               	movwf	i1pwm_set@channel+1
  4817  039A  3000               	movlw	0
  4818  039B  00B3               	movwf	i1pwm_set@duty_cycle+3
  4819  039C  3000               	movlw	0
  4820  039D  00B2               	movwf	i1pwm_set@duty_cycle+2
  4821  039E  3000               	movlw	0
  4822  039F  00B1               	movwf	i1pwm_set@duty_cycle+1
  4823  03A0  3000               	movlw	0
  4824  03A1  00B0               	movwf	i1pwm_set@duty_cycle
  4825  03A2  120A  118A  2774   	fcall	i1_pwm_set
  4826                           
  4827                           ;main.c: 139: }else if(resp < 0){
  4828  03A5  0008               	return
  4829  03A6                     i1l301:	
  4830  03A6  1FC9               	btfss	SetMotor@resp+3,7
  4831  03A7  2BD2               	goto	i1l2458
  4832                           
  4833                           ;main.c: 140: pwm_set(1, 0 );
  4834  03A8  3001               	movlw	1
  4835  03A9  00AE               	movwf	i1pwm_set@channel
  4836  03AA  3000               	movlw	0
  4837  03AB  00AF               	movwf	i1pwm_set@channel+1
  4838  03AC  3000               	movlw	0
  4839  03AD  00B3               	movwf	i1pwm_set@duty_cycle+3
  4840  03AE  3000               	movlw	0
  4841  03AF  00B2               	movwf	i1pwm_set@duty_cycle+2
  4842  03B0  3000               	movlw	0
  4843  03B1  00B1               	movwf	i1pwm_set@duty_cycle+1
  4844  03B2  3000               	movlw	0
  4845  03B3  00B0               	movwf	i1pwm_set@duty_cycle
  4846  03B4  120A  118A  2774  120A  118A  	fcall	i1_pwm_set
  4847                           
  4848                           ;main.c: 141: pwm_set(2, -resp );
  4849  03B9  3002               	movlw	2
  4850  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  4851  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  4852  03BC  00AE               	movwf	i1pwm_set@channel
  4853  03BD  3000               	movlw	0
  4854  03BE  00AF               	movwf	i1pwm_set@channel+1
  4855  03BF  0946               	comf	SetMotor@resp,w
  4856  03C0  00B0               	movwf	i1pwm_set@duty_cycle
  4857  03C1  0947               	comf	SetMotor@resp+1,w
  4858  03C2  00B1               	movwf	i1pwm_set@duty_cycle+1
  4859  03C3  0948               	comf	SetMotor@resp+2,w
  4860  03C4  00B2               	movwf	i1pwm_set@duty_cycle+2
  4861  03C5  0949               	comf	SetMotor@resp+3,w
  4862  03C6  00B3               	movwf	i1pwm_set@duty_cycle+3
  4863  03C7  0AB0               	incf	i1pwm_set@duty_cycle,f
  4864  03C8  1903               	skipnz
  4865  03C9  0AB1               	incf	i1pwm_set@duty_cycle+1,f
  4866  03CA  1903               	skipnz
  4867  03CB  0AB2               	incf	i1pwm_set@duty_cycle+2,f
  4868  03CC  1903               	skipnz
  4869  03CD  0AB3               	incf	i1pwm_set@duty_cycle+3,f
  4870  03CE  120A  118A  2774   	fcall	i1_pwm_set
  4871                           
  4872                           ;main.c: 142: }else{
  4873  03D1  0008               	return
  4874  03D2                     i1l2458:	
  4875                           
  4876                           ;main.c: 143: pwm_set(1, 0 );
  4877  03D2  3001               	movlw	1
  4878  03D3  00AE               	movwf	i1pwm_set@channel
  4879  03D4  3000               	movlw	0
  4880  03D5  00AF               	movwf	i1pwm_set@channel+1
  4881  03D6  3000               	movlw	0
  4882  03D7  00B3               	movwf	i1pwm_set@duty_cycle+3
  4883  03D8  3000               	movlw	0
  4884  03D9  00B2               	movwf	i1pwm_set@duty_cycle+2
  4885  03DA  3000               	movlw	0
  4886  03DB  00B1               	movwf	i1pwm_set@duty_cycle+1
  4887  03DC  3000               	movlw	0
  4888  03DD  00B0               	movwf	i1pwm_set@duty_cycle
  4889  03DE  120A  118A  2774  120A  118A  	fcall	i1_pwm_set
  4890                           
  4891                           ;main.c: 144: pwm_set(2, 0 );
  4892  03E3  3002               	movlw	2
  4893  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  4894  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  4895  03E6  00AE               	movwf	i1pwm_set@channel
  4896  03E7  3000               	movlw	0
  4897  03E8  00AF               	movwf	i1pwm_set@channel+1
  4898  03E9  3000               	movlw	0
  4899  03EA  00B3               	movwf	i1pwm_set@duty_cycle+3
  4900  03EB  3000               	movlw	0
  4901  03EC  00B2               	movwf	i1pwm_set@duty_cycle+2
  4902  03ED  3000               	movlw	0
  4903  03EE  00B1               	movwf	i1pwm_set@duty_cycle+1
  4904  03EF  3000               	movlw	0
  4905  03F0  00B0               	movwf	i1pwm_set@duty_cycle
  4906  03F1  120A  118A  2774   	fcall	i1_pwm_set
  4907  03F4  0008               	return
  4908  03F5                     __end_of_SetMotor:	
  4909                           
  4910                           	psect	text23
  4911  0774                     __ptext23:	
  4912 ;; *************** function i1_pwm_set *****************
  4913 ;; Defined at:
  4914 ;;		line 72 in file "pwm.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  channel         2   14[BANK0 ] int 
  4917 ;;  duty_cycle      4   16[BANK0 ] long 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4929 ;;      Params:         0       6       0       0       0
  4930 ;;      Locals:         0       0       0       0       0
  4931 ;;      Temps:          0       4       0       0       0
  4932 ;;      Totals:         0      10       0       0       0
  4933 ;;Total ram usage:       10 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    1
  4936 ;; This function calls:
  4937 ;;		i1___aldiv
  4938 ;;		i1___lmul
  4939 ;; This function is called by:
  4940 ;;		_SetMotor
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function i1_pwm_set
  4946  0774                     i1_pwm_set:	
  4947                           
  4948                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in i1_pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4952  0774  1283               	bcf	3,5	;RP0=0, select bank0
  4953  0775  1303               	bcf	3,6	;RP1=0, select bank0
  4954  0776  1BB3               	btfsc	i1pwm_set@duty_cycle+3,7
  4955  0777  0008               	return
  4956  0778  1BB3               	btfsc	i1pwm_set@duty_cycle+3,7
  4957  0779  2F8A               	goto	i1l2328
  4958  077A  0833               	movf	i1pwm_set@duty_cycle+3,w
  4959  077B  1D03               	btfss	3,2
  4960  077C  0008               	return
  4961  077D  0832               	movf	i1pwm_set@duty_cycle+2,w
  4962  077E  1D03               	btfss	3,2
  4963  077F  0008               	return
  4964  0780  3001               	movlw	1
  4965  0781  0231               	subwf	i1pwm_set@duty_cycle+1,w
  4966  0782  1D03               	skipz
  4967  0783  2F88               	goto	u229_23
  4968  0784  3000               	movlw	0
  4969  0785  0230               	subwf	i1pwm_set@duty_cycle,w
  4970  0786  1D03               	skipz
  4971  0787  2F88               	goto	u229_23
  4972  0788                     u229_23:	
  4973  0788  1803               	btfsc	3,0
  4974  0789  0008               	return
  4975  078A                     i1l2328:	
  4976                           
  4977                           ;pwm.c: 77: if (duty_cycle !=0){
  4978  078A  0833               	movf	i1pwm_set@duty_cycle+3,w
  4979  078B  0432               	iorwf	i1pwm_set@duty_cycle+2,w
  4980  078C  0431               	iorwf	i1pwm_set@duty_cycle+1,w
  4981  078D  0430               	iorwf	i1pwm_set@duty_cycle,w
  4982  078E  1903               	skipnz
  4983  078F  2FE7               	goto	i1l2338
  4984                           
  4985                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  4986  0790  3020               	movlw	32
  4987  0791  00B4               	movwf	??i1_pwm_set
  4988  0792  3000               	movlw	0
  4989  0793  00B5               	movwf	??i1_pwm_set+1
  4990  0794  3000               	movlw	0
  4991  0795  00B6               	movwf	??i1_pwm_set+2
  4992  0796  3000               	movlw	0
  4993  0797  00B7               	movwf	??i1_pwm_set+3
  4994  0798  3000               	movlw	0
  4995  0799  00A3               	movwf	i1___aldiv@divisor+3
  4996  079A  3000               	movlw	0
  4997  079B  00A2               	movwf	i1___aldiv@divisor+2
  4998  079C  3000               	movlw	0
  4999  079D  00A1               	movwf	i1___aldiv@divisor+1
  5000  079E  30FF               	movlw	255
  5001  079F  00A0               	movwf	i1___aldiv@divisor
  5002  07A0  0833               	movf	i1pwm_set@duty_cycle+3,w
  5003  07A1  00F3               	movwf	i1___lmul@multiplier+3
  5004  07A2  0832               	movf	i1pwm_set@duty_cycle+2,w
  5005  07A3  00F2               	movwf	i1___lmul@multiplier+2
  5006  07A4  0831               	movf	i1pwm_set@duty_cycle+1,w
  5007  07A5  00F1               	movwf	i1___lmul@multiplier+1
  5008  07A6  0830               	movf	i1pwm_set@duty_cycle,w
  5009  07A7  00F0               	movwf	i1___lmul@multiplier
  5010  07A8  3000               	movlw	0
  5011  07A9  00F7               	movwf	i1___lmul@multiplicand+3
  5012  07AA  3000               	movlw	0
  5013  07AB  00F6               	movwf	i1___lmul@multiplicand+2
  5014  07AC  3000               	movlw	0
  5015  07AD  00F5               	movwf	i1___lmul@multiplicand+1
  5016  07AE  30DF               	movlw	223
  5017  07AF  00F4               	movwf	i1___lmul@multiplicand
  5018  07B0  120A  158A  26E7  120A  118A  	fcall	i1___lmul
  5019  07B5  0873               	movf	?i1___lmul+3,w
  5020  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  5021  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  5022  07B8  00A7               	movwf	i1___aldiv@dividend+3
  5023  07B9  0872               	movf	?i1___lmul+2,w
  5024  07BA  00A6               	movwf	i1___aldiv@dividend+2
  5025  07BB  0871               	movf	?i1___lmul+1,w
  5026  07BC  00A5               	movwf	i1___aldiv@dividend+1
  5027  07BD  0870               	movf	?i1___lmul,w
  5028  07BE  00A4               	movwf	i1___aldiv@dividend
  5029  07BF  120A  118A  2660  120A  118A  	fcall	i1___aldiv
  5030  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  5031  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  5032  07C6  0820               	movf	?i1___aldiv,w
  5033  07C7  07B4               	addwf	??i1_pwm_set,f
  5034  07C8  0821               	movf	?i1___aldiv+1,w
  5035  07C9  1803               	skipnc
  5036  07CA  0F21               	incfsz	?i1___aldiv+1,w
  5037  07CB  2FCD               	goto	u231_20
  5038  07CC  2FCE               	goto	u231_21
  5039  07CD                     u231_20:	
  5040  07CD  07B5               	addwf	??i1_pwm_set+1,f
  5041  07CE                     u231_21:	
  5042  07CE  0822               	movf	?i1___aldiv+2,w
  5043  07CF  1803               	skipnc
  5044  07D0  0F22               	incfsz	?i1___aldiv+2,w
  5045  07D1  2FD3               	goto	u231_22
  5046  07D2  2FD4               	goto	u231_23
  5047  07D3                     u231_22:	
  5048  07D3  07B6               	addwf	??i1_pwm_set+2,f
  5049  07D4                     u231_23:	
  5050  07D4  0823               	movf	?i1___aldiv+3,w
  5051  07D5  1803               	skipnc
  5052  07D6  0A23               	incf	?i1___aldiv+3,w
  5053  07D7  07B7               	addwf	??i1_pwm_set+3,f
  5054  07D8  0837               	movf	??i1_pwm_set+3,w
  5055  07D9  00B3               	movwf	i1pwm_set@duty_cycle+3
  5056  07DA  0836               	movf	??i1_pwm_set+2,w
  5057  07DB  00B2               	movwf	i1pwm_set@duty_cycle+2
  5058  07DC  0835               	movf	??i1_pwm_set+1,w
  5059  07DD  00B1               	movwf	i1pwm_set@duty_cycle+1
  5060  07DE  0834               	movf	??i1_pwm_set,w
  5061  07DF  00B0               	movwf	i1pwm_set@duty_cycle
  5062  07E0  2FE7               	goto	i1l2338
  5063  07E1                     i1l2332:	
  5064                           
  5065                           ;pwm.c: 82: CCPR1L = duty_cycle;
  5066  07E1  0830               	movf	i1pwm_set@duty_cycle,w
  5067  07E2  0095               	movwf	21	;volatile
  5068                           
  5069                           ;pwm.c: 83: break;
  5070  07E3  0008               	return
  5071  07E4                     i1l2334:	
  5072                           
  5073                           ;pwm.c: 85: CCPR2L = duty_cycle;
  5074  07E4  0830               	movf	i1pwm_set@duty_cycle,w
  5075  07E5  009B               	movwf	27	;volatile
  5076                           
  5077                           ;pwm.c: 86: break;
  5078  07E6  0008               	return
  5079  07E7                     i1l2338:	
  5080                           
  5081                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5082                           ; Switch size 1, requested type "simple"
  5083                           ; Number of cases is 1, Range of values is 0 to 0
  5084                           ; switch strategies available:
  5085                           ; Name         Instructions Cycles
  5086                           ; simple_byte            4     3 (average)
  5087                           ; direct_byte           11     8 (fixed)
  5088                           ; jumptable            260     6 (fixed)
  5089                           ;	Chosen strategy is simple_byte
  5090  07E7  082F               	movf	i1pwm_set@channel+1,w
  5091  07E8  3A00               	xorlw	0	; case 0
  5092  07E9  1903               	skipnz
  5093  07EA  2FEC               	goto	i1l3118
  5094  07EB  2FF4               	goto	i1l182
  5095  07EC                     i1l3118:	
  5096                           
  5097                           ; Switch size 1, requested type "simple"
  5098                           ; Number of cases is 2, Range of values is 1 to 2
  5099                           ; switch strategies available:
  5100                           ; Name         Instructions Cycles
  5101                           ; simple_byte            7     4 (average)
  5102                           ; direct_byte           17    11 (fixed)
  5103                           ; jumptable            263     9 (fixed)
  5104                           ;	Chosen strategy is simple_byte
  5105  07EC  082E               	movf	i1pwm_set@channel,w
  5106  07ED  3A01               	xorlw	1	; case 1
  5107  07EE  1903               	skipnz
  5108  07EF  2FE1               	goto	i1l2332
  5109  07F0  3A03               	xorlw	3	; case 2
  5110  07F1  1903               	skipnz
  5111  07F2  2FE4               	goto	i1l2334
  5112  07F3  2FF4               	goto	i1l182
  5113  07F4                     i1l182:	
  5114  07F4  0008               	return
  5115  07F5                     __end_ofi1_pwm_set:	
  5116                           
  5117                           	psect	text24
  5118  0EE7                     __ptext24:	
  5119 ;; *************** function i1___lmul *****************
  5120 ;; Defined at:
  5121 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  multiplier      4    0[COMMON] unsigned long 
  5124 ;;  multiplicand    4    4[COMMON] unsigned long 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  __lmul          4    9[COMMON] unsigned long 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  4    0[COMMON] unsigned long 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5136 ;;      Params:         8       0       0       0       0
  5137 ;;      Locals:         4       0       0       0       0
  5138 ;;      Temps:          1       0       0       0       0
  5139 ;;      Totals:        13       0       0       0       0
  5140 ;;Total ram usage:       13 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		i1_pwm_set
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function i1___lmul
  5151  0EE7                     i1___lmul:	
  5152                           
  5153                           ;incstack = 0
  5154                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  5155  0EE7  3000               	movlw	0
  5156  0EE8  00FC               	movwf	i1___lmul@product+3
  5157  0EE9  3000               	movlw	0
  5158  0EEA  00FB               	movwf	i1___lmul@product+2
  5159  0EEB  3000               	movlw	0
  5160  0EEC  00FA               	movwf	i1___lmul@product+1
  5161  0EED  3000               	movlw	0
  5162  0EEE  00F9               	movwf	i1___lmul@product
  5163  0EEF                     i1l2168:	
  5164  0EEF  1C70               	btfss	i1___lmul@multiplier,0
  5165  0EF0  2F05               	goto	i1l2172
  5166  0EF1  0874               	movf	i1___lmul@multiplicand,w
  5167  0EF2  07F9               	addwf	i1___lmul@product,f
  5168  0EF3  0875               	movf	i1___lmul@multiplicand+1,w
  5169  0EF4  1103               	clrz
  5170  0EF5  1803               	skipnc
  5171  0EF6  3E01               	addlw	1
  5172  0EF7  1D03               	btfss	3,2
  5173  0EF8  07FA               	addwf	i1___lmul@product+1,f
  5174  0EF9  0876               	movf	i1___lmul@multiplicand+2,w
  5175  0EFA  1103               	clrz
  5176  0EFB  1803               	skipnc
  5177  0EFC  3E01               	addlw	1
  5178  0EFD  1D03               	btfss	3,2
  5179  0EFE  07FB               	addwf	i1___lmul@product+2,f
  5180  0EFF  0877               	movf	i1___lmul@multiplicand+3,w
  5181  0F00  1103               	clrz
  5182  0F01  1803               	skipnc
  5183  0F02  3E01               	addlw	1
  5184  0F03  1D03               	btfss	3,2
  5185  0F04  07FC               	addwf	i1___lmul@product+3,f
  5186  0F05                     i1l2172:	
  5187  0F05  3001               	movlw	1
  5188  0F06  00F8               	movwf	??i1___lmul
  5189  0F07                     u194_25:	
  5190  0F07  1003               	clrc
  5191  0F08  0DF4               	rlf	i1___lmul@multiplicand,f
  5192  0F09  0DF5               	rlf	i1___lmul@multiplicand+1,f
  5193  0F0A  0DF6               	rlf	i1___lmul@multiplicand+2,f
  5194  0F0B  0DF7               	rlf	i1___lmul@multiplicand+3,f
  5195  0F0C  0BF8               	decfsz	??i1___lmul,f
  5196  0F0D  2F07               	goto	u194_25
  5197  0F0E  3001               	movlw	1
  5198  0F0F                     u195_25:	
  5199  0F0F  1003               	clrc
  5200  0F10  0CF3               	rrf	i1___lmul@multiplier+3,f
  5201  0F11  0CF2               	rrf	i1___lmul@multiplier+2,f
  5202  0F12  0CF1               	rrf	i1___lmul@multiplier+1,f
  5203  0F13  0CF0               	rrf	i1___lmul@multiplier,f
  5204  0F14  3EFF               	addlw	-1
  5205  0F15  1D03               	skipz
  5206  0F16  2F0F               	goto	u195_25
  5207  0F17  0873               	movf	i1___lmul@multiplier+3,w
  5208  0F18  0472               	iorwf	i1___lmul@multiplier+2,w
  5209  0F19  0471               	iorwf	i1___lmul@multiplier+1,w
  5210  0F1A  0470               	iorwf	i1___lmul@multiplier,w
  5211  0F1B  1D03               	skipz
  5212  0F1C  2EEF               	goto	i1l2168
  5213  0F1D  087C               	movf	i1___lmul@product+3,w
  5214  0F1E  00F3               	movwf	?i1___lmul+3
  5215  0F1F  087B               	movf	i1___lmul@product+2,w
  5216  0F20  00F2               	movwf	?i1___lmul+2
  5217  0F21  087A               	movf	i1___lmul@product+1,w
  5218  0F22  00F1               	movwf	?i1___lmul+1
  5219  0F23  0879               	movf	i1___lmul@product,w
  5220  0F24  00F0               	movwf	?i1___lmul
  5221  0F25  0008               	return
  5222  0F26                     __end_ofi1___lmul:	
  5223                           
  5224                           	psect	text25
  5225  0660                     __ptext25:	
  5226 ;; *************** function i1___aldiv *****************
  5227 ;; Defined at:
  5228 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  divisor         4    0[BANK0 ] long 
  5231 ;;  dividend        4    4[BANK0 ] long 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  __aldiv         4   10[BANK0 ] long 
  5234 ;;  __aldiv         1    9[BANK0 ] unsigned char 
  5235 ;;  __aldiv         1    8[BANK0 ] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  4    0[BANK0 ] long 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5245 ;;      Params:         0       8       0       0       0
  5246 ;;      Locals:         0       6       0       0       0
  5247 ;;      Temps:          1       0       0       0       0
  5248 ;;      Totals:         1      14       0       0       0
  5249 ;;Total ram usage:       15 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		i1_pwm_set
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function i1___aldiv
  5260  0660                     i1___aldiv:	
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
  5264  0660  1283               	bcf	3,5	;RP0=0, select bank0
  5265  0661  1303               	bcf	3,6	;RP1=0, select bank0
  5266  0662  01A9               	clrf	i1___aldiv@sign
  5267  0663  1FA3               	btfss	i1___aldiv@divisor+3,7
  5268  0664  2E72               	goto	i1l611
  5269  0665  09A0               	comf	i1___aldiv@divisor,f
  5270  0666  09A1               	comf	i1___aldiv@divisor+1,f
  5271  0667  09A2               	comf	i1___aldiv@divisor+2,f
  5272  0668  09A3               	comf	i1___aldiv@divisor+3,f
  5273  0669  0AA0               	incf	i1___aldiv@divisor,f
  5274  066A  1903               	skipnz
  5275  066B  0AA1               	incf	i1___aldiv@divisor+1,f
  5276  066C  1903               	skipnz
  5277  066D  0AA2               	incf	i1___aldiv@divisor+2,f
  5278  066E  1903               	skipnz
  5279  066F  0AA3               	incf	i1___aldiv@divisor+3,f
  5280  0670  01A9               	clrf	i1___aldiv@sign
  5281  0671  0AA9               	incf	i1___aldiv@sign,f
  5282  0672                     i1l611:	
  5283  0672  1FA7               	btfss	i1___aldiv@dividend+3,7
  5284  0673  2E83               	goto	i1l2190
  5285  0674  09A4               	comf	i1___aldiv@dividend,f
  5286  0675  09A5               	comf	i1___aldiv@dividend+1,f
  5287  0676  09A6               	comf	i1___aldiv@dividend+2,f
  5288  0677  09A7               	comf	i1___aldiv@dividend+3,f
  5289  0678  0AA4               	incf	i1___aldiv@dividend,f
  5290  0679  1903               	skipnz
  5291  067A  0AA5               	incf	i1___aldiv@dividend+1,f
  5292  067B  1903               	skipnz
  5293  067C  0AA6               	incf	i1___aldiv@dividend+2,f
  5294  067D  1903               	skipnz
  5295  067E  0AA7               	incf	i1___aldiv@dividend+3,f
  5296  067F  3001               	movlw	1
  5297  0680  00FD               	movwf	??i1___aldiv
  5298  0681  087D               	movf	??i1___aldiv,w
  5299  0682  06A9               	xorwf	i1___aldiv@sign,f
  5300  0683                     i1l2190:	
  5301  0683  3000               	movlw	0
  5302  0684  00AD               	movwf	i1___aldiv@quotient+3
  5303  0685  3000               	movlw	0
  5304  0686  00AC               	movwf	i1___aldiv@quotient+2
  5305  0687  3000               	movlw	0
  5306  0688  00AB               	movwf	i1___aldiv@quotient+1
  5307  0689  3000               	movlw	0
  5308  068A  00AA               	movwf	i1___aldiv@quotient
  5309  068B  0823               	movf	i1___aldiv@divisor+3,w
  5310  068C  0422               	iorwf	i1___aldiv@divisor+2,w
  5311  068D  0421               	iorwf	i1___aldiv@divisor+1,w
  5312  068E  0420               	iorwf	i1___aldiv@divisor,w
  5313  068F  1903               	skipnz
  5314  0690  2ED8               	goto	i1l2212
  5315  0691  01A8               	clrf	i1___aldiv@counter
  5316  0692  0AA8               	incf	i1___aldiv@counter,f
  5317  0693                     i1l2198:	
  5318  0693  1BA3               	btfsc	i1___aldiv@divisor+3,7
  5319  0694  2EA3               	goto	i1l2200
  5320  0695  3001               	movlw	1
  5321  0696  00FD               	movwf	??i1___aldiv
  5322  0697                     u200_25:	
  5323  0697  1003               	clrc
  5324  0698  0DA0               	rlf	i1___aldiv@divisor,f
  5325  0699  0DA1               	rlf	i1___aldiv@divisor+1,f
  5326  069A  0DA2               	rlf	i1___aldiv@divisor+2,f
  5327  069B  0DA3               	rlf	i1___aldiv@divisor+3,f
  5328  069C  0BFD               	decfsz	??i1___aldiv,f
  5329  069D  2E97               	goto	u200_25
  5330  069E  3001               	movlw	1
  5331  069F  00FD               	movwf	??i1___aldiv
  5332  06A0  087D               	movf	??i1___aldiv,w
  5333  06A1  07A8               	addwf	i1___aldiv@counter,f
  5334  06A2  2E93               	goto	i1l2198
  5335  06A3                     i1l2200:	
  5336  06A3  3001               	movlw	1
  5337  06A4  00FD               	movwf	??i1___aldiv
  5338  06A5                     u202_25:	
  5339  06A5  1003               	clrc
  5340  06A6  0DAA               	rlf	i1___aldiv@quotient,f
  5341  06A7  0DAB               	rlf	i1___aldiv@quotient+1,f
  5342  06A8  0DAC               	rlf	i1___aldiv@quotient+2,f
  5343  06A9  0DAD               	rlf	i1___aldiv@quotient+3,f
  5344  06AA  0BFD               	decfsz	??i1___aldiv,f
  5345  06AB  2EA5               	goto	u202_25
  5346  06AC  0823               	movf	i1___aldiv@divisor+3,w
  5347  06AD  0227               	subwf	i1___aldiv@dividend+3,w
  5348  06AE  1D03               	skipz
  5349  06AF  2EBA               	goto	u203_25
  5350  06B0  0822               	movf	i1___aldiv@divisor+2,w
  5351  06B1  0226               	subwf	i1___aldiv@dividend+2,w
  5352  06B2  1D03               	skipz
  5353  06B3  2EBA               	goto	u203_25
  5354  06B4  0821               	movf	i1___aldiv@divisor+1,w
  5355  06B5  0225               	subwf	i1___aldiv@dividend+1,w
  5356  06B6  1D03               	skipz
  5357  06B7  2EBA               	goto	u203_25
  5358  06B8  0820               	movf	i1___aldiv@divisor,w
  5359  06B9  0224               	subwf	i1___aldiv@dividend,w
  5360  06BA                     u203_25:	
  5361  06BA  1C03               	skipc
  5362  06BB  2ECB               	goto	i1l2208
  5363  06BC  0820               	movf	i1___aldiv@divisor,w
  5364  06BD  02A4               	subwf	i1___aldiv@dividend,f
  5365  06BE  0821               	movf	i1___aldiv@divisor+1,w
  5366  06BF  1C03               	skipc
  5367  06C0  0F21               	incfsz	i1___aldiv@divisor+1,w
  5368  06C1  02A5               	subwf	i1___aldiv@dividend+1,f
  5369  06C2  0822               	movf	i1___aldiv@divisor+2,w
  5370  06C3  1C03               	skipc
  5371  06C4  0F22               	incfsz	i1___aldiv@divisor+2,w
  5372  06C5  02A6               	subwf	i1___aldiv@dividend+2,f
  5373  06C6  0823               	movf	i1___aldiv@divisor+3,w
  5374  06C7  1C03               	skipc
  5375  06C8  0F23               	incfsz	i1___aldiv@divisor+3,w
  5376  06C9  02A7               	subwf	i1___aldiv@dividend+3,f
  5377  06CA  142A               	bsf	i1___aldiv@quotient,0
  5378  06CB                     i1l2208:	
  5379  06CB  3001               	movlw	1
  5380  06CC                     u204_25:	
  5381  06CC  1003               	clrc
  5382  06CD  0CA3               	rrf	i1___aldiv@divisor+3,f
  5383  06CE  0CA2               	rrf	i1___aldiv@divisor+2,f
  5384  06CF  0CA1               	rrf	i1___aldiv@divisor+1,f
  5385  06D0  0CA0               	rrf	i1___aldiv@divisor,f
  5386  06D1  3EFF               	addlw	-1
  5387  06D2  1D03               	skipz
  5388  06D3  2ECC               	goto	u204_25
  5389  06D4  3001               	movlw	1
  5390  06D5  02A8               	subwf	i1___aldiv@counter,f
  5391  06D6  1D03               	btfss	3,2
  5392  06D7  2EA3               	goto	i1l2200
  5393  06D8                     i1l2212:	
  5394  06D8  0829               	movf	i1___aldiv@sign,w
  5395  06D9  1903               	btfsc	3,2
  5396  06DA  2EE6               	goto	i1l2216
  5397  06DB  09AA               	comf	i1___aldiv@quotient,f
  5398  06DC  09AB               	comf	i1___aldiv@quotient+1,f
  5399  06DD  09AC               	comf	i1___aldiv@quotient+2,f
  5400  06DE  09AD               	comf	i1___aldiv@quotient+3,f
  5401  06DF  0AAA               	incf	i1___aldiv@quotient,f
  5402  06E0  1903               	skipnz
  5403  06E1  0AAB               	incf	i1___aldiv@quotient+1,f
  5404  06E2  1903               	skipnz
  5405  06E3  0AAC               	incf	i1___aldiv@quotient+2,f
  5406  06E4  1903               	skipnz
  5407  06E5  0AAD               	incf	i1___aldiv@quotient+3,f
  5408  06E6                     i1l2216:	
  5409  06E6  082D               	movf	i1___aldiv@quotient+3,w
  5410  06E7  00A3               	movwf	?i1___aldiv+3
  5411  06E8  082C               	movf	i1___aldiv@quotient+2,w
  5412  06E9  00A2               	movwf	?i1___aldiv+2
  5413  06EA  082B               	movf	i1___aldiv@quotient+1,w
  5414  06EB  00A1               	movwf	?i1___aldiv+1
  5415  06EC  082A               	movf	i1___aldiv@quotient,w
  5416  06ED  00A0               	movwf	?i1___aldiv
  5417  06EE  0008               	return
  5418  06EF                     __end_ofi1___aldiv:	
  5419                           
  5420                           	psect	text26
  5421  0E6F                     __ptext26:	
  5422 ;; *************** function _constrain *****************
  5423 ;; Defined at:
  5424 ;;		line 97 in file "main.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;  value           4    0[COMMON] long 
  5427 ;;  lLimit          4    4[COMMON] long 
  5428 ;;  uLimit          4    8[COMMON] long 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;                  4    0[COMMON] long 
  5433 ;; Registers used:
  5434 ;;		wreg, btemp+1
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5440 ;;      Params:        12       0       0       0       0
  5441 ;;      Locals:         0       0       0       0       0
  5442 ;;      Temps:          0       0       0       0       0
  5443 ;;      Totals:        12       0       0       0       0
  5444 ;;Total ram usage:       12 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_SetMotor
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _constrain
  5455  0E6F                     _constrain:	
  5456                           
  5457                           ;main.c: 98: if (value > uLimit){
  5458                           
  5459                           ;incstack = 0
  5460                           ; Regs used in _constrain: [wreg+btemp+1]
  5461  0E6F  087B               	movf	constrain@uLimit+3,w
  5462  0E70  3A80               	xorlw	128
  5463  0E71  00FF               	movwf	127
  5464  0E72  0873               	movf	constrain@value+3,w
  5465  0E73  3A80               	xorlw	128
  5466  0E74  027F               	subwf	127,w
  5467  0E75  1D03               	skipz
  5468  0E76  2E81               	goto	u211_23
  5469  0E77  0872               	movf	constrain@value+2,w
  5470  0E78  027A               	subwf	constrain@uLimit+2,w
  5471  0E79  1D03               	skipz
  5472  0E7A  2E81               	goto	u211_23
  5473  0E7B  0871               	movf	constrain@value+1,w
  5474  0E7C  0279               	subwf	constrain@uLimit+1,w
  5475  0E7D  1D03               	skipz
  5476  0E7E  2E81               	goto	u211_23
  5477  0E7F  0870               	movf	constrain@value,w
  5478  0E80  0278               	subwf	constrain@uLimit,w
  5479  0E81                     u211_23:	
  5480  0E81  1803               	skipnc
  5481  0E82  2E8C               	goto	i1l2248
  5482                           
  5483                           ;main.c: 99: return(uLimit);
  5484  0E83  087B               	movf	constrain@uLimit+3,w
  5485  0E84  00F3               	movwf	?_constrain+3
  5486  0E85  087A               	movf	constrain@uLimit+2,w
  5487  0E86  00F2               	movwf	?_constrain+2
  5488  0E87  0879               	movf	constrain@uLimit+1,w
  5489  0E88  00F1               	movwf	?_constrain+1
  5490  0E89  0878               	movf	constrain@uLimit,w
  5491  0E8A  00F0               	movwf	?_constrain
  5492  0E8B  0008               	return
  5493  0E8C                     i1l2248:	
  5494  0E8C  0873               	movf	constrain@value+3,w
  5495  0E8D  3A80               	xorlw	128
  5496  0E8E  00FF               	movwf	127
  5497  0E8F  0877               	movf	constrain@lLimit+3,w
  5498  0E90  3A80               	xorlw	128
  5499  0E91  027F               	subwf	127,w
  5500  0E92  1D03               	skipz
  5501  0E93  2E9E               	goto	u212_23
  5502  0E94  0876               	movf	constrain@lLimit+2,w
  5503  0E95  0272               	subwf	constrain@value+2,w
  5504  0E96  1D03               	skipz
  5505  0E97  2E9E               	goto	u212_23
  5506  0E98  0875               	movf	constrain@lLimit+1,w
  5507  0E99  0271               	subwf	constrain@value+1,w
  5508  0E9A  1D03               	skipz
  5509  0E9B  2E9E               	goto	u212_23
  5510  0E9C  0874               	movf	constrain@lLimit,w
  5511  0E9D  0270               	subwf	constrain@value,w
  5512  0E9E                     u212_23:	
  5513  0E9E  1803               	skipnc
  5514  0E9F  0008               	return
  5515                           
  5516                           ;main.c: 101: return(lLimit);
  5517  0EA0  0877               	movf	constrain@lLimit+3,w
  5518  0EA1  00F3               	movwf	?_constrain+3
  5519  0EA2  0876               	movf	constrain@lLimit+2,w
  5520  0EA3  00F2               	movwf	?_constrain+2
  5521  0EA4  0875               	movf	constrain@lLimit+1,w
  5522  0EA5  00F1               	movwf	?_constrain+1
  5523  0EA6  0874               	movf	constrain@lLimit,w
  5524  0EA7  00F0               	movwf	?_constrain
  5525  0EA8  0008               	return
  5526  0EA9                     __end_of_constrain:	
  5527                           ;main.c: 103: return(value);
  5528                           
  5529                           
  5530                           	psect	text27
  5531  0D5A                     __ptext27:	
  5532 ;; *************** function ___wmul *****************
  5533 ;; Defined at:
  5534 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;  multiplier      2    0[COMMON] unsigned int 
  5537 ;;  multiplicand    2    2[COMMON] unsigned int 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  product         2    4[COMMON] unsigned int 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  2    0[COMMON] unsigned int 
  5542 ;; Registers used:
  5543 ;;		wreg, status,2, status,0
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5549 ;;      Params:         4       0       0       0       0
  5550 ;;      Locals:         2       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0
  5552 ;;      Totals:         6       0       0       0       0
  5553 ;;Total ram usage:        6 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_SetMotor
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           
  5563                           ;psect for function ___wmul
  5564  0D5A                     ___wmul:	
  5565                           
  5566                           ;incstack = 0
  5567                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5568  0D5A  01F4               	clrf	___wmul@product
  5569  0D5B  01F5               	clrf	___wmul@product+1
  5570  0D5C                     i1l2268:	
  5571  0D5C  1C70               	btfss	___wmul@multiplier,0
  5572  0D5D  2D64               	goto	i1l546
  5573  0D5E  0872               	movf	___wmul@multiplicand,w
  5574  0D5F  07F4               	addwf	___wmul@product,f
  5575  0D60  1803               	skipnc
  5576  0D61  0AF5               	incf	___wmul@product+1,f
  5577  0D62  0873               	movf	___wmul@multiplicand+1,w
  5578  0D63  07F5               	addwf	___wmul@product+1,f
  5579  0D64                     i1l546:	
  5580  0D64  3001               	movlw	1
  5581  0D65                     u215_25:	
  5582  0D65  1003               	clrc
  5583  0D66  0DF2               	rlf	___wmul@multiplicand,f
  5584  0D67  0DF3               	rlf	___wmul@multiplicand+1,f
  5585  0D68  3EFF               	addlw	-1
  5586  0D69  1D03               	skipz
  5587  0D6A  2D65               	goto	u215_25
  5588  0D6B  3001               	movlw	1
  5589  0D6C                     u216_25:	
  5590  0D6C  1003               	clrc
  5591  0D6D  0CF1               	rrf	___wmul@multiplier+1,f
  5592  0D6E  0CF0               	rrf	___wmul@multiplier,f
  5593  0D6F  3EFF               	addlw	-1
  5594  0D70  1D03               	skipz
  5595  0D71  2D6C               	goto	u216_25
  5596  0D72  0870               	movf	___wmul@multiplier,w
  5597  0D73  0471               	iorwf	___wmul@multiplier+1,w
  5598  0D74  1D03               	btfss	3,2
  5599  0D75  2D5C               	goto	i1l2268
  5600  0D76  0875               	movf	___wmul@product+1,w
  5601  0D77  00F1               	movwf	?___wmul+1
  5602  0D78  0874               	movf	___wmul@product,w
  5603  0D79  00F0               	movwf	?___wmul
  5604  0D7A  0008               	return
  5605  0D7B                     __end_of___wmul:	
  5606                           
  5607                           	psect	text28
  5608  0FA7                     __ptext28:	
  5609 ;; *************** function ___awdiv *****************
  5610 ;; Defined at:
  5611 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;  divisor         2    0[COMMON] int 
  5614 ;;  dividend        2    2[COMMON] int 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;  quotient        2    7[COMMON] int 
  5617 ;;  sign            1    6[COMMON] unsigned char 
  5618 ;;  counter         1    5[COMMON] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  2    0[COMMON] int 
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5628 ;;      Params:         4       0       0       0       0
  5629 ;;      Locals:         4       0       0       0       0
  5630 ;;      Temps:          1       0       0       0       0
  5631 ;;      Totals:         9       0       0       0       0
  5632 ;;Total ram usage:        9 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_SetMotor
  5638 ;;		_putchdec
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function ___awdiv
  5644  0FA7                     ___awdiv:	
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5648  0FA7  01F6               	clrf	___awdiv@sign
  5649  0FA8  1FF1               	btfss	___awdiv@divisor+1,7
  5650  0FA9  2FB1               	goto	i1l2288
  5651  0FAA  09F0               	comf	___awdiv@divisor,f
  5652  0FAB  09F1               	comf	___awdiv@divisor+1,f
  5653  0FAC  0AF0               	incf	___awdiv@divisor,f
  5654  0FAD  1903               	skipnz
  5655  0FAE  0AF1               	incf	___awdiv@divisor+1,f
  5656  0FAF  01F6               	clrf	___awdiv@sign
  5657  0FB0  0AF6               	incf	___awdiv@sign,f
  5658  0FB1                     i1l2288:	
  5659  0FB1  1FF3               	btfss	___awdiv@dividend+1,7
  5660  0FB2  2FBC               	goto	i1l2294
  5661  0FB3  09F2               	comf	___awdiv@dividend,f
  5662  0FB4  09F3               	comf	___awdiv@dividend+1,f
  5663  0FB5  0AF2               	incf	___awdiv@dividend,f
  5664  0FB6  1903               	skipnz
  5665  0FB7  0AF3               	incf	___awdiv@dividend+1,f
  5666  0FB8  3001               	movlw	1
  5667  0FB9  00F4               	movwf	??___awdiv
  5668  0FBA  0874               	movf	??___awdiv,w
  5669  0FBB  06F6               	xorwf	___awdiv@sign,f
  5670  0FBC                     i1l2294:	
  5671  0FBC  01F7               	clrf	___awdiv@quotient
  5672  0FBD  01F8               	clrf	___awdiv@quotient+1
  5673  0FBE  0870               	movf	___awdiv@divisor,w
  5674  0FBF  0471               	iorwf	___awdiv@divisor+1,w
  5675  0FC0  1903               	btfsc	3,2
  5676  0FC1  2FF3               	goto	i1l2316
  5677  0FC2  01F5               	clrf	___awdiv@counter
  5678  0FC3  0AF5               	incf	___awdiv@counter,f
  5679  0FC4                     i1l2304:	
  5680  0FC4  1BF1               	btfsc	___awdiv@divisor+1,7
  5681  0FC5  2FD2               	goto	i1l2306
  5682  0FC6  3001               	movlw	1
  5683  0FC7                     u221_25:	
  5684  0FC7  1003               	clrc
  5685  0FC8  0DF0               	rlf	___awdiv@divisor,f
  5686  0FC9  0DF1               	rlf	___awdiv@divisor+1,f
  5687  0FCA  3EFF               	addlw	-1
  5688  0FCB  1D03               	skipz
  5689  0FCC  2FC7               	goto	u221_25
  5690  0FCD  3001               	movlw	1
  5691  0FCE  00F4               	movwf	??___awdiv
  5692  0FCF  0874               	movf	??___awdiv,w
  5693  0FD0  07F5               	addwf	___awdiv@counter,f
  5694  0FD1  2FC4               	goto	i1l2304
  5695  0FD2                     i1l2306:	
  5696  0FD2  3001               	movlw	1
  5697  0FD3                     u223_25:	
  5698  0FD3  1003               	clrc
  5699  0FD4  0DF7               	rlf	___awdiv@quotient,f
  5700  0FD5  0DF8               	rlf	___awdiv@quotient+1,f
  5701  0FD6  3EFF               	addlw	-1
  5702  0FD7  1D03               	skipz
  5703  0FD8  2FD3               	goto	u223_25
  5704  0FD9  0871               	movf	___awdiv@divisor+1,w
  5705  0FDA  0273               	subwf	___awdiv@dividend+1,w
  5706  0FDB  1D03               	skipz
  5707  0FDC  2FDF               	goto	u224_25
  5708  0FDD  0870               	movf	___awdiv@divisor,w
  5709  0FDE  0272               	subwf	___awdiv@dividend,w
  5710  0FDF                     u224_25:	
  5711  0FDF  1C03               	skipc
  5712  0FE0  2FE8               	goto	i1l2312
  5713  0FE1  0870               	movf	___awdiv@divisor,w
  5714  0FE2  02F2               	subwf	___awdiv@dividend,f
  5715  0FE3  0871               	movf	___awdiv@divisor+1,w
  5716  0FE4  1C03               	skipc
  5717  0FE5  03F3               	decf	___awdiv@dividend+1,f
  5718  0FE6  02F3               	subwf	___awdiv@dividend+1,f
  5719  0FE7  1477               	bsf	___awdiv@quotient,0
  5720  0FE8                     i1l2312:	
  5721  0FE8  3001               	movlw	1
  5722  0FE9                     u225_25:	
  5723  0FE9  1003               	clrc
  5724  0FEA  0CF1               	rrf	___awdiv@divisor+1,f
  5725  0FEB  0CF0               	rrf	___awdiv@divisor,f
  5726  0FEC  3EFF               	addlw	-1
  5727  0FED  1D03               	skipz
  5728  0FEE  2FE9               	goto	u225_25
  5729  0FEF  3001               	movlw	1
  5730  0FF0  02F5               	subwf	___awdiv@counter,f
  5731  0FF1  1D03               	btfss	3,2
  5732  0FF2  2FD2               	goto	i1l2306
  5733  0FF3                     i1l2316:	
  5734  0FF3  0876               	movf	___awdiv@sign,w
  5735  0FF4  1903               	btfsc	3,2
  5736  0FF5  2FFB               	goto	i1l2320
  5737  0FF6  09F7               	comf	___awdiv@quotient,f
  5738  0FF7  09F8               	comf	___awdiv@quotient+1,f
  5739  0FF8  0AF7               	incf	___awdiv@quotient,f
  5740  0FF9  1903               	skipnz
  5741  0FFA  0AF8               	incf	___awdiv@quotient+1,f
  5742  0FFB                     i1l2320:	
  5743  0FFB  0878               	movf	___awdiv@quotient+1,w
  5744  0FFC  00F1               	movwf	?___awdiv+1
  5745  0FFD  0877               	movf	___awdiv@quotient,w
  5746  0FFE  00F0               	movwf	?___awdiv
  5747  0FFF  0008               	return
  5748  1000                     __end_of___awdiv:	
  5749  007E                     btemp	set	126	;btemp
  5750  007E                     wtemp0	set	126


Data Sizes:
    Strings     58
    Constant    10
    Data        0
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     51      80
    BANK1            80     54      64
    BANK3            96     36      83
    BANK2            96      0      46

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_6(CODE[14]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[11]), 
		 -> STR_2(CODE[13]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@sVar_394(BANK3[10]), main@sVar(BANK3[20]), SetPoint@sVar(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    putst@str	PTR const unsigned char  size(2) Largest target is 20
		 -> main@sVar_394(BANK3[10]), main@sVar(BANK3[20]), SetPoint@sVar(BANK1[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_pwm_set->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_SetMotor
    _SetMotor->i1_pwm_set
    i1_pwm_set->i1___aldiv

Critical Paths under _main in BANK1

    _main->_SetPoint
    _motor_reset->_SetPoint
    _pwm_set->___aldiv
    ___aldiv->___lmul
    _SetPoint->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putst->_putch

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   13386
                                             51 BANK1      3     3      0
                                              0 BANK3     36    36      0
                           _SetPoint
                             _chkchr
                      _encoders_init
                        _motor_reset
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                       _spiDataReady
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 (1) _spiDataReady                                         2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    5090
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2059
                                             28 BANK1     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK1     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                            23    21      2    3031
                                             28 BANK1     23    21      2
                              _putst
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    17      5    1762
                                             14 BANK1     14     9      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     0      2     389
                                              2 BANK1      2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  7     7      0    3595
                                             44 BANK0      7     7      0
                           _SetMotor
 ---------------------------------------------------------------------------------
 (6) _SetMotor                                            20    20      0    3572
                                             24 BANK0     20    20      0
                            ___awdiv
                             ___wmul
                          _constrain
                          i1_pwm_set
 ---------------------------------------------------------------------------------
 (7) i1_pwm_set                                           10     4      6     963
                                             14 BANK0     10     4      6
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (8) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (8) i1___aldiv                                           15     7      8     352
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (7) _constrain                                           12     0     12     382
                                              0 COMMON    12     0     12
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              9     5      4    1516
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetPoint
     _putst
       _putch
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _chkchr
   _encoders_init
   _motor_reset
     _SetPoint
       _putst
         _putch
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _spiDataReady
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _SetMotor
     ___awdiv
     ___wmul
     _constrain
     i1_pwm_set
       i1___aldiv
         i1___lmul (ARG)
       i1___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     11F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     33      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     36      40       7       80.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60     24      53       9       86.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      2E      11       47.9%
DATA                 0      0     11F      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 30 18:28:04 2019

                      pc 0002              __CFG_CP$OFF 0000              _SSPSTATbits 0094  
                     l82 0DE4                       l83 0DF2             ___awdiv@sign 0076  
                     fsr 0004      ___wmul@multiplicand 0072                      l170 0D93  
                    l182 0773                      l414 0D20                      l418 0CD7  
                    l611 05E3                      l374 014D                      l377 01B9  
                    _GIE 005F                      _RA5 002D                      _RA6 002E  
                    _RB5 0035                      _PR2 0092             __CFG_CPD$OFF 0000  
                    _RX9 00C6                      _TX9 04C6                      _ab1 006A  
                    _isr 03F5                      fsr0 0004                      indf 0000  
           __CFG_IESO$ON 0000             __CFG_FOSC$EC 0000         _encoder1_counter 005F  
           __CFG_LVP$OFF 0000           i1___aldiv@sign 0029                     l2000 0EB3  
                   l2002 0EC1                     l2012 0EE2                     l2030 0E2B  
                   l2008 0ED7                     l2024 0E0F                     l2104 0583  
                   l2026 0E1D                     l2034 0E36                     l2106 04F8  
                   l2114 0F70                     l3002 00E5                     l2108 05CA  
                   l2062 051C                     l2118 0F86                     l2230 0761  
                   l2144 0604                     l2136 05F4                     l2224 0705  
                   l2090 056C                     l2162 0657                     l2154 063C  
                   l2146 0614                     l2234 0766                     l3034 018A  
                   l3018 011C                     l2084 054B                     l2068 0532  
                   l3116 076B                     l2228 075C                     l3060 0239  
                   l3052 0215                     l3044 01E1                     l2078 0549  
                   l2158 0649                     l2096 057F                     l3072 026D  
                   l3064 0253                     l3056 021F                     l3048 01FB  
                   l2380 0CE9                     l3068 0262                     l2478 0CFC  
                   l2494 0D1C                     l1986 0DD6                     l2882 0F5D  
                   l1988 0DF4                     l2884 0F26                     l2878 0F4C  
                   l2990 009C                     ?_isr 0070                     STR_1 0810  
                   STR_2 082E                     STR_3 083B                     STR_4 0846  
                   _ANS4 0C44                     STR_5 0846                     STR_6 0820  
                   _ANS8 0C48                     _ANS9 0C49                     _BRGH 04C2  
                   _T0IE 005D                     _CREN 00C4                     _T0IF 005A  
                   _FERR 00C2                     u2100 0748                     u2101 0749  
                   u2102 074E                     u2103 074F                     _IOCB 0096  
                   u2083 0703                     u3115 0127                     u3125 0158  
                   u3135 01C4                     u1625 0E12                     u1555 0EB6  
                   u2445 0D45                     u1645 0E23                     u1725 0562  
                   u1805 0F90                     u1575 0EC2                     u1655 0E2C  
                   u1585 0ECE                     u1595 0ED8                     u1855 0608  
                   u1875 0616                     u1795 0F88                     _PEIE 005E  
                   u1885 062B                     u1895 063D                     _RBIE 005B  
                   _RBIF 0058                     _RCIE 0465                     _RCIF 0065  
                   _OERR 00C1                     _TMR0 0001                     _SPEN 00C7  
                   _SREN 00C5                     _TXIE 0464                     _TXEN 04C5  
                   _TXIF 0064                     _SYNC 04C4             __CFG_WRT$OFF 0000  
          __CFG_FCMEN$ON 0000                     _main 0039                     btemp 007E  
                   start 0012            __CFG_MCLRE$ON 0000                    ??_isr 004C  
           main@sVar_394 01D8          __end_of___aldiv 0660                    ?_main 0070  
        __end_of___awdiv 1000                    _ANS10 0C4A                    _ANS11 0C4B  
                  _ANS13 0C4D            __CFG_WDTE$OFF 0000          ___awdiv@divisor 0070  
        __end_of___lwdiv 0EE7                    i1l301 03A6                    i1l182 07F4  
        __end_of___lwmod 0E3B                    i1l611 0672                    i1l348 04E7  
                  i1l546 0D64          ___awdiv@counter 0075                    _RCREG 001A  
                  _SPBRG 0099                    _PORTB 0006                    _TXREG 0019  
    ___lmul@multiplicand 00A4          ??_encoders_init 00A0          __end_of_dpowers 0810  
                  _dummy 006C                    _onlyK 0065                    _putch 0DD3  
                  _putst 0F26           __CFG_BOREN$OFF 0000         __end_ofi1___lmul 0F26  
                  pclath 000A          __end_of_spiInit 0D26          __end_of_spiRead 0CE3  
        __end_of_pwm_set 0774                    status 0003       __size_ofi1___aldiv 008F  
                  wtemp0 007E          __end_of_sprintf 05D1          __initialization 0015  
           __end_of_main 0276      i1___lmul@multiplier 0070                   ??_main 00D3  
     __size_ofi1_pwm_set 0081         __end_of_SetMotor 03F5         __end_of_SetPoint 0DD3  
                 _CCPR1L 0015                   _CCPR2L 001B         ___awdiv@dividend 0072  
                 ?_putch 0070                   ?_putst 00A2                   i1l2200 06A3  
                 i1l2212 06D8                   i1l2320 0FFB                   i1l2312 0FE8  
                 i1l2304 0FC4                   i1l2216 06E6                   i1l2208 06CB  
                 i1l2306 0FD2                   i1l2316 0FF3                   i1l2172 0F05  
                 i1l2332 07E1                   u200_25 0697                   i1l2190 0683  
                 i1l3118 07EC                   i1l2334 07E4                   i1l2248 0E8C  
                 i1l2168 0EEF                   i1l2328 078A                   i1l2440 02B6  
                 i1l2432 029C                   i1l2600 043B                   i1l2338 07E7  
                 i1l2268 0D5C                   i1l2620 0462                   i1l2612 0455  
                 i1l2294 0FBC                   i1l2198 0693                   i1l2454 0383  
                 i1l2622 0470                   i1l2288 0FB1                   i1l2640 04B3  
                 i1l2632 0489                   i1l2616 045E                   i1l2608 0450  
                 i1l2458 03D2                   i1l2626 0484                   i1l2636 049F  
                 u202_25 06A5                   i1l2646 04C9                   i1l2648 04D7  
                 i1l2594 042E                   u211_23 0E81                   i1l2588 0415  
                 u203_25 06BA                   u212_23 0E9E                   u204_25 06CC  
                 u221_25 0FC7                   u231_20 07CD                   u231_21 07CE  
                 u231_22 07D3                   u231_23 07D4                   u223_25 0FD3  
                 u215_25 0D65                   u224_25 0FDF                   u216_25 0D6C  
                 u241_20 02DE                   u241_21 02DF                   u241_22 02E4  
                 u241_23 02E5                   u225_25 0FE9                   u242_23 0381  
                 u229_23 0788                   u265_25 040B                   u194_25 0F07  
                 u195_25 0F0F                   u268_25 0445                   _TMR1IE 0460  
                 _TRISB1 0431                   _TRISB2 0432                   _TRISC1 0439  
                 _TRISA5 042D                   _TRISB3 0433                   _TRISC2 043A  
                 _TRISA6 042E                   _TRISB4 0434                   _TRISB5 0435  
                 _TRISC3 043B                   _TRISB7 0437                   _TRISC5 043D  
                 _SSPCON 0014                   _SSPBUF 0013           __CFG_PWRTE$OFF 0000  
           ?_serial_init 0070                   ___lmul 0F66                ??___aldiv 00B5  
                 ___wmul 0D5A                ??___awdiv 0074                   _chkchr 0CE3  
              ??___lwdiv 00A4                ??___lwmod 00AC         ___awdiv@quotient 0077  
                 _state1 006B             ?_motor_reset 0070        __end_ofi1___aldiv 06EF  
                 saved_w 007E         __end_of_spiWrite 0CF3                ??_spiInit 00A3  
              ??_spiRead 00A0         __end_of_pwm_init 0DA5                   putch@c 00A1  
              ??_pwm_set 00C2                ??_sprintf 00B3  __end_of__initialization 0035  
      __end_ofi1_pwm_set 07F5           __pcstackCOMMON 0070            __end_of_putch 0E07  
          __end_of_putst 0F66                ?i1___lmul 0070           _OPTION_REGbits 0081  
            SetMotor@err 004A        i1___aldiv@divisor 0020                  ??_putch 00A0  
      i1___aldiv@counter 0028                  ??_putst 00A4               __pbssBANK0 0053  
             __pbssBANK1 00D6               __pbssBANK2 0110               __pbssBANK3 0190  
     __size_of_constrain 003A                ?_SetMotor 0070                ?_SetPoint 00BC  
             __pmaintext 0039                  ?___lmul 00A0                  ?___wmul 0070  
                ?_chkchr 0070               __pintentry 0004  __size_of_spiReceiveWait 0005  
         ___lmul@product 00A9               ??i1___lmul 0078            ?_spiDataReady 00A0  
          ?_resetCounter 0070                  _SPIData 01BE                  _SSPSTAT 0094  
             __stringtab 0800               ??_SetMotor 0038               ??_SetPoint 00BE  
              ?_spiWrite 0070                  ___aldiv 05D1                  ___awdiv 0FA7  
        __size_of___lmul 0041          __size_of___wmul 0021                ?_pwm_init 0070  
                ___lwdiv 0EA9                  ___lwmod 0E07          __size_of_chkchr 0008  
   __size_of_serial_init 0018        __end_of_constrain 0EA9                  __ptext1 0CEB  
                __ptext2 0CDC                  __ptext3 0CD7                  __ptext4 0D12  
                __ptext5 0CF3                  __ptext6 0D26                  __ptext7 0D7B  
                __ptext8 0E3B                  __ptext9 0CFF           ??_spiDataReady 00A2  
                _dpowers 0806                _T2CONbits 0012             __size_of_isr 00FD  
       ___aldiv@dividend 00B1     __size_of_motor_reset 0034                  _samples 0067  
         ??_resetCounter 00A0                  _spiInit 0D12                  _spiRead 0CDC  
                _pwm_set 06EF                  _sprintf 04F2                  clrloop0 07F6  
   end_of_initialization 0035    __end_of_encoders_init 0D5A                  isr@tick 00D6  
       ___aldiv@quotient 00B8               ??_spiWrite 00A0               ??_pwm_init 00A0  
       SetMotor@last_err 0063         SetMotor@integral 00DC                i1___aldiv 0660  
     SetMotor@D_Response 0042              spiWrite@dat 00A0              _CCP1CONbits 0017  
            _CCP2CONbits 001D                i1_pwm_set 0774           _spiReceiveWait 0CD7  
         __end_of___lmul 0FA7           __end_of___wmul 0D7B       SetMotor@I_Response 0044  
         __end_of_chkchr 0CEB         _delayus_variable 006D    i1___lmul@multiplicand 0074  
      __size_ofi1___lmul 003F      start_initialization 0015               ?i1___aldiv 0020  
            __end_of_isr 04F2     __end_of_spiDataReady 0CFF             SetMotor@resp 0046  
           SetPoint@sVar 00BF               ?i1_pwm_set 002E   __end_of_spiReceiveWait 0CDC  
   __end_of_resetCounter 0D12                 ??___lmul 00A8        __size_of_SetMotor 017F  
      __size_of_SetPoint 002E                 ??___wmul 0074       SetMotor@P_Response 0040  
               ??_chkchr 00A0        pwm_set@duty_cycle 00BE       i1___aldiv@dividend 0024  
              ___latbits 0002            __pcstackBANK0 0020            __pcstackBANK1 00A0  
          __pcstackBANK3 01BF         i1___lmul@product 0079              sprintf@flag 00B7  
     i1___aldiv@quotient 002A              sprintf@prec 00B8         ___lwdiv@dividend 00A2  
        ?_spiReceiveWait 0070                 ?___aldiv 00AD                 ?___awdiv 0070  
               ?___lwdiv 00A0                 ?___lwmod 00A8        __size_of_spiWrite 0008  
              __pstrings 0800        __size_of_pwm_init 002A           pwm_set@channel 00BC  
              _constrain 0E6F                 ?_spiInit 00A0                 ?_spiRead 0070  
            ??i1___aldiv 007D         ___lwdiv@quotient 00A5                 ?_pwm_set 00BC  
               ?_sprintf 00AE           __size_of_putch 0034           __size_of_putst 0040  
        ___aldiv@divisor 00AD     spiInit@sTransmitEdge 00A2         main@serialIn_392 01E2  
      interrupt_function 0004          ___aldiv@counter 00B6           ___wmul@product 0074  
              clear_ram0 07F5       spiInit@sDataSample 00A0                 _PIR1bits 000C  
          ??_serial_init 00A0              ??i1_pwm_set 0034                _set_point 0057  
              _motor_pos 005B                 i1___lmul 0EE7            ??_motor_reset 00D3  
            __stringbase 0805        ___wmul@multiplier 0070               ?_constrain 0070  
        SetPoint@new_val 00BC        ___lmul@multiplier 00A0    __size_of_spiDataReady 000C  
  __size_of_resetCounter 0013                 _SetMotor 0276                 _SetPoint 0DA5  
               _nSPIData 00D8         __size_of___aldiv 008F         __size_of___awdiv 0059  
       __size_of___lwdiv 003E         __size_of___lwmod 0034   __size_of_encoders_init 001C  
    __end_of_serial_init 0D3E       __end_of__stringtab 0806             _spiDataReady 0CF3  
             sprintf@val 00B9          ___lwdiv@divisor 00A0          ___lwdiv@counter 00A7  
               __ptext10 06EF                 __ptext11 0F66                 __ptext20 0CE3  
               __ptext12 05D1                 __ptext21 03F5                 __ptext13 0DA5  
               __ptext22 0276                 __ptext14 04F2                 __ptext23 0774  
               __ptext15 0E07                 __ptext24 0EE7                 __ptext16 0EA9  
               __ptext25 0660                 __ptext17 0F26                 __ptext26 0E6F  
               __ptext18 0DD3                 __ptext27 0D5A                 __ptext19 0D3E  
               __ptext28 0FA7             _resetCounter 0CFF      __end_of_motor_reset 0E6F  
       __size_of_spiInit 0014         __size_of_spiRead 0007        __CFG_BOR4V$BOR21V 0000  
               _com_time 00DA         __size_of_pwm_set 0085         __size_of_sprintf 00DF  
               _last_pos 0053            __size_of_main 023D                 _sampling 0069  
               _pos_log1 0190                 _pos_log2 0110       SetMotor@derivative 006E  
               _spiWrite 0CEB             spiInit@sType 00A3                 _pwm_init 0D7B  
               main@sVar 01BF        spiInit@sClockIdle 00A1              ??_constrain 007C  
               isr@portB 0052          constrain@lLimit 0074          constrain@uLimit 0078  
               intlevel1 0000                sprintf@ap 00B6                sprintf@sp 00AE  
          _encoders_init 0D3E         ___lwmod@dividend 00AA         ??_spiReceiveWait 00A0  
              stringcode 0800              _serial_init 0D26              _motor_reset 0E3B  
         constrain@value 0070                 sprintf@c 00BB                 sprintf@f 00B0  
               putst@str 00A2          ___lwmod@divisor 00A8          ___lwmod@counter 00AD  
               stringdir 0800                 stringtab 0800             ___aldiv@sign 00B7  
    i1pwm_set@duty_cycle 0030           ?_encoders_init 0070         i1pwm_set@channel 002E  
