

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 29 16:57:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.05
    46                           ; Generated 20/12/2018 GMT
    47                           ; 
    48                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F886 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0089                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  008F                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0094                     	;# 
   281  0095                     	;# 
   282  0096                     	;# 
   283  0097                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  009F                     	;# 
   292  0105                     	;# 
   293  0107                     	;# 
   294  0108                     	;# 
   295  0109                     	;# 
   296  010C                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  0185                     	;# 
   302  0187                     	;# 
   303  0188                     	;# 
   304  0189                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000D                     	;# 
   472  000E                     	;# 
   473  000E                     	;# 
   474  000F                     	;# 
   475  0010                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0014                     	;# 
   480  0015                     	;# 
   481  0015                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  0081                     	;# 
   494  0085                     	;# 
   495  0086                     	;# 
   496  0087                     	;# 
   497  0089                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  008F                     	;# 
   502  0090                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0093                     	;# 
   506  0093                     	;# 
   507  0093                     	;# 
   508  0094                     	;# 
   509  0095                     	;# 
   510  0096                     	;# 
   511  0097                     	;# 
   512  0098                     	;# 
   513  0099                     	;# 
   514  009A                     	;# 
   515  009B                     	;# 
   516  009C                     	;# 
   517  009D                     	;# 
   518  009E                     	;# 
   519  009F                     	;# 
   520  0105                     	;# 
   521  0107                     	;# 
   522  0108                     	;# 
   523  0109                     	;# 
   524  010C                     	;# 
   525  010C                     	;# 
   526  010D                     	;# 
   527  010E                     	;# 
   528  010F                     	;# 
   529  0185                     	;# 
   530  0187                     	;# 
   531  0188                     	;# 
   532  0189                     	;# 
   533  018C                     	;# 
   534  018D                     	;# 
   535                           
   536                           	psect	strings
   537  0765                     __pstrings:	
   538  0765                     stringtab:	
   539  0765                     __stringtab:	
   540  0765                     stringcode:	
   541                           ;	String table - string pointers are 1 byte each
   542                           
   543  0765                     stringdir:	
   544  0765  3007               	movlw	high stringdir
   545  0766  008A               	movwf	10
   546  0767  0804               	movf	4,w
   547  0768  0A84               	incf	4,f
   548  0769  0782               	addwf	2,f
   549  076A                     __stringbase:	
   550  076A  3400               	retlw	0
   551  076B                     __end_of__stringtab:	
   552  076B                     _dpowers:	
   553  076B  3401               	retlw	1
   554  076C  3400               	retlw	0
   555  076D  340A               	retlw	10
   556  076E  3400               	retlw	0
   557  076F  3464               	retlw	100
   558  0770  3400               	retlw	0
   559  0771  34E8               	retlw	232
   560  0772  3403               	retlw	3
   561  0773  3410               	retlw	16
   562  0774  3427               	retlw	39
   563  0775                     __end_of_dpowers:	
   564  0013                     _SSPBUF	set	19
   565  0014                     _SSPCON	set	20
   566  0006                     _PORTB	set	6
   567  0001                     _TMR0	set	1
   568  0012                     _T2CONbits	set	18
   569  000C                     _PIR1bits	set	12
   570  001B                     _CCPR2L	set	27
   571  0015                     _CCPR1L	set	21
   572  001D                     _CCP2CONbits	set	29
   573  0017                     _CCP1CONbits	set	23
   574  0019                     _TXREG	set	25
   575  001A                     _RCREG	set	26
   576  005F                     _GIE	set	95
   577  005E                     _PEIE	set	94
   578  0035                     _RB5	set	53
   579  0058                     _RBIF	set	88
   580  005B                     _RBIE	set	91
   581  005A                     _T0IF	set	90
   582  005D                     _T0IE	set	93
   583  002E                     _RA6	set	46
   584  002D                     _RA5	set	45
   585  0065                     _RCIF	set	101
   586  0064                     _TXIF	set	100
   587  00C2                     _FERR	set	194
   588  00C1                     _OERR	set	193
   589  00C6                     _RX9	set	198
   590  00C5                     _SREN	set	197
   591  00C4                     _CREN	set	196
   592  00C7                     _SPEN	set	199
   593  0094                     _SSPSTATbits	set	148
   594  0094                     _SSPSTAT	set	148
   595  0096                     _IOCB	set	150
   596  0081                     _OPTION_REGbits	set	129
   597  0092                     _PR2	set	146
   598  0099                     _SPBRG	set	153
   599  043B                     _TRISC3	set	1083
   600  043D                     _TRISC5	set	1085
   601  0460                     _TMR1IE	set	1120
   602  0434                     _TRISB4	set	1076
   603  0433                     _TRISB3	set	1075
   604  0432                     _TRISB2	set	1074
   605  0431                     _TRISB1	set	1073
   606  0437                     _TRISB7	set	1079
   607  0435                     _TRISB5	set	1077
   608  042E                     _TRISA6	set	1070
   609  042D                     _TRISA5	set	1069
   610  043A                     _TRISC2	set	1082
   611  0439                     _TRISC1	set	1081
   612  04C5                     _TXEN	set	1221
   613  04C6                     _TX9	set	1222
   614  0465                     _RCIE	set	1125
   615  0464                     _TXIE	set	1124
   616  04C4                     _SYNC	set	1220
   617  04C2                     _BRGH	set	1218
   618  0C4B                     _ANS11	set	3147
   619  0C48                     _ANS8	set	3144
   620  0C49                     _ANS9	set	3145
   621  0C4A                     _ANS10	set	3146
   622  0C4D                     _ANS13	set	3149
   623  0C44                     _ANS4	set	3140
   624  0775                     STR_5:	
   625  0775  3446               	retlw	70	;'F'
   626  0776  3469               	retlw	105	;'i'
   627  0777  346D               	retlw	109	;'m'
   628  0778  3420               	retlw	32	;' '
   629  0779  3464               	retlw	100	;'d'
   630  077A  346F               	retlw	111	;'o'
   631  077B  3420               	retlw	32	;' '
   632  077C  3474               	retlw	116	;'t'
   633  077D  3465               	retlw	101	;'e'
   634  077E  3473               	retlw	115	;'s'
   635  077F  3474               	retlw	116	;'t'
   636  0780  3465               	retlw	101	;'e'
   637  0781  3420               	retlw	32	;' '
   638  0782  3400               	retlw	0
   639  0783                     STR_1:	
   640  0783  3453               	retlw	83	;'S'
   641  0784  3450               	retlw	80	;'P'
   642  0785  3449               	retlw	73	;'I'
   643  0786  3452               	retlw	82	;'R'
   644  0787  3478               	retlw	120	;'x'
   645  0788  343A               	retlw	58	;':'
   646  0789  3420               	retlw	32	;' '
   647  078A  3425               	retlw	37	;'%'
   648  078B  3464               	retlw	100	;'d'
   649  078C  3420               	retlw	32	;' '
   650  078D  340D               	retlw	13
   651  078E  340A               	retlw	10
   652  078F  3400               	retlw	0
   653  0790                     STR_2:	
   654  0790  344B               	retlw	75	;'K'
   655  0791  3470               	retlw	112	;'p'
   656  0792  343A               	retlw	58	;':'
   657  0793  3420               	retlw	32	;' '
   658  0794  3425               	retlw	37	;'%'
   659  0795  3464               	retlw	100	;'d'
   660  0796  3420               	retlw	32	;' '
   661  0797  342D               	retlw	45	;'-'
   662  0798  343E               	retlw	62	;'>'
   663  0799  3420               	retlw	32	;' '
   664  079A  3400               	retlw	0
   665  079B                     STR_3:	
   666  079B  3425               	retlw	37	;'%'
   667  079C  3464               	retlw	100	;'d'
   668  079D  3420               	retlw	32	;' '
   669  079E  3400               	retlw	0
   670  079B                     
   671                           ; #config settings
   672  0000                     
   673                           	psect	cinit
   674  0015                     start_initialization:	
   675  0015                     __initialization:	
   676                           
   677                           ; Clear objects allocated to BANK0
   678  0015  1383               	bcf	3,7	;select IRP bank0
   679  0016  3053               	movlw	low __pbssBANK0
   680  0017  0084               	movwf	4
   681  0018  3070               	movlw	low (__pbssBANK0+29)
   682  0019  120A  158A  2683  120A  118A  	fcall	clear_ram0
   683                           
   684                           ; Clear objects allocated to BANK1
   685  001E  30E2               	movlw	low __pbssBANK1
   686  001F  0084               	movwf	4
   687  0020  30ED               	movlw	low (__pbssBANK1+11)
   688  0021  120A  158A  2683  120A  118A  	fcall	clear_ram0
   689                           
   690                           ; Clear objects allocated to BANK3
   691  0026  1783               	bsf	3,7	;select IRP bank2
   692  0027  3090               	movlw	low __pbssBANK3
   693  0028  0084               	movwf	4
   694  0029  30EC               	movlw	low (__pbssBANK3+92)
   695  002A  120A  158A  2683   	fcall	clear_ram0
   696  002D                     end_of_initialization:	
   697                           ;End of C runtime variable initialization code
   698                           
   699  002D                     __end_of__initialization:	
   700  002D  0183               	clrf	3
   701  002E  120A  118A  2B7F   	ljmp	_main	;jump to C main() function
   702                           
   703                           	psect	bssBANK0
   704  0053                     __pbssBANK0:	
   705  0053                     _last_pos:	
   706  0053                     	ds	4
   707  0057                     _set_point:	
   708  0057                     	ds	4
   709  005B                     _motor_pos:	
   710  005B                     	ds	4
   711  005F                     _encoder1_counter:	
   712  005F                     	ds	4
   713  0063                     SetMotor@last_err:	
   714  0063                     	ds	2
   715  0065                     _onlyK:	
   716  0065                     	ds	2
   717  0067                     _samples:	
   718  0067                     	ds	2
   719  0069                     _sampling:	
   720  0069                     	ds	1
   721  006A                     _ab1:	
   722  006A                     	ds	1
   723  006B                     _state1:	
   724  006B                     	ds	1
   725  006C                     _dummy:	
   726  006C                     	ds	1
   727  006D                     _delayus_variable:	
   728  006D                     	ds	1
   729  006E                     SetMotor@derivative:	
   730  006E                     	ds	2
   731                           
   732                           	psect	bssBANK1
   733  00E2                     __pbssBANK1:	
   734  00E2                     isr@tick:	
   735  00E2                     	ds	2
   736  00E4                     _nSPIData:	
   737  00E4                     	ds	2
   738  00E6                     _com_time:	
   739  00E6                     	ds	2
   740  00E8                     _SPIData:	
   741  00E8                     	ds	1
   742  00E9                     SetMotor@integral:	
   743  00E9                     	ds	4
   744                           
   745                           	psect	bssBANK3
   746  0190                     __pbssBANK3:	
   747  0190                     _pos_log2:	
   748  0190                     	ds	46
   749  01BE                     _pos_log1:	
   750  01BE                     	ds	46
   751                           
   752                           	psect	clrtext
   753  0E83                     clear_ram0:	
   754                           ;	Called with FSR containing the base address, and
   755                           ;	W with the last address+1
   756                           
   757  0E83  0064               	clrwdt	;clear the watchdog before getting into this loop
   758  0E84                     clrloop0:	
   759  0E84  0180               	clrf	0	;clear RAM location pointed to by FSR
   760  0E85  0A84               	incf	4,f	;increment pointer
   761  0E86  0604               	xorwf	4,w	;XOR with final address
   762  0E87  1903               	btfsc	3,2	;have we reached the end yet?
   763  0E88  3400               	retlw	0	;all done for this memory range, return
   764  0E89  0604               	xorwf	4,w	;XOR again to restore value
   765  0E8A  2E84               	goto	clrloop0	;do the next byte
   766                           
   767                           	psect	cstackBANK1
   768  00A0                     __pcstackBANK1:	
   769  00A0                     ?_spiInit:	
   770  00A0                     ??_spiRead:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  00A0                     ??_spiWrite:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  00A0                     ??_serial_init:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  00A0                     ??_putch:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  00A0                     ??_chkchr:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  00A0                     ??_pwm_init:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  00A0                     ?_SetPoint:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  00A0                     ??_resetCounter:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  00A0                     ??_encoders_init:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  00A0                     ??_spiReceiveWait:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  00A0                     ?_spiDataReady:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  00A0                     ?___lwdiv:	
   804                           ; 2 bytes @ 0x0
   805                           
   806  00A0                     ?___lmul:	
   807                           ; 2 bytes @ 0x0
   808                           
   809  00A0                     spiInit@sDataSample:	
   810                           ; 4 bytes @ 0x0
   811                           
   812  00A0                     spiWrite@dat:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  00A0                     SetPoint@new_val:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  00A0                     ___lwdiv@divisor:	
   819                           ; 2 bytes @ 0x0
   820                           
   821  00A0                     ___lmul@multiplier:	
   822                           ; 2 bytes @ 0x0
   823                           
   824                           
   825                           ; 4 bytes @ 0x0
   826  00A0                     	ds	1
   827  00A1                     putch@c:	
   828  00A1                     spiInit@sClockIdle:	
   829                           ; 1 bytes @ 0x1
   830                           
   831                           
   832                           ; 1 bytes @ 0x1
   833  00A1                     	ds	1
   834  00A2                     ??_spiDataReady:	
   835  00A2                     ??_putst:	
   836                           ; 1 bytes @ 0x2
   837                           
   838  00A2                     ??_SetPoint:	
   839                           ; 1 bytes @ 0x2
   840                           
   841  00A2                     spiInit@sTransmitEdge:	
   842                           ; 1 bytes @ 0x2
   843                           
   844  00A2                     ___lwdiv@dividend:	
   845                           ; 1 bytes @ 0x2
   846                           
   847                           
   848                           ; 2 bytes @ 0x2
   849  00A2                     	ds	1
   850  00A3                     ??_spiInit:	
   851  00A3                     putst@str:	
   852                           ; 1 bytes @ 0x3
   853                           
   854  00A3                     spiInit@sType:	
   855                           ; 1 bytes @ 0x3
   856                           
   857                           
   858                           ; 1 bytes @ 0x3
   859  00A3                     	ds	1
   860  00A4                     ??___lwdiv:	
   861  00A4                     ___lmul@multiplicand:	
   862                           ; 1 bytes @ 0x4
   863                           
   864                           
   865                           ; 4 bytes @ 0x4
   866  00A4                     	ds	1
   867  00A5                     ___lwdiv@quotient:	
   868                           
   869                           ; 2 bytes @ 0x5
   870  00A5                     	ds	2
   871  00A7                     ___lwdiv@counter:	
   872                           
   873                           ; 1 bytes @ 0x7
   874  00A7                     	ds	1
   875  00A8                     ??___lmul:	
   876  00A8                     ?___lwmod:	
   877                           ; 1 bytes @ 0x8
   878                           
   879  00A8                     ___lwmod@divisor:	
   880                           ; 2 bytes @ 0x8
   881                           
   882                           
   883                           ; 2 bytes @ 0x8
   884  00A8                     	ds	1
   885  00A9                     ___lmul@product:	
   886                           
   887                           ; 4 bytes @ 0x9
   888  00A9                     	ds	1
   889  00AA                     ___lwmod@dividend:	
   890                           
   891                           ; 2 bytes @ 0xA
   892  00AA                     	ds	2
   893  00AC                     ??___lwmod:	
   894                           
   895                           ; 1 bytes @ 0xC
   896  00AC                     	ds	1
   897  00AD                     ?___aldiv:	
   898  00AD                     ___lwmod@counter:	
   899                           ; 4 bytes @ 0xD
   900                           
   901  00AD                     ___aldiv@divisor:	
   902                           ; 1 bytes @ 0xD
   903                           
   904                           
   905                           ; 4 bytes @ 0xD
   906  00AD                     	ds	1
   907  00AE                     ?_sprintf:	
   908  00AE                     sprintf@f:	
   909                           ; 2 bytes @ 0xE
   910                           
   911                           
   912                           ; 1 bytes @ 0xE
   913  00AE                     	ds	3
   914  00B1                     ??_sprintf:	
   915  00B1                     ___aldiv@dividend:	
   916                           ; 1 bytes @ 0x11
   917                           
   918                           
   919                           ; 4 bytes @ 0x11
   920  00B1                     	ds	3
   921  00B4                     sprintf@ap:	
   922                           
   923                           ; 1 bytes @ 0x14
   924  00B4                     	ds	1
   925  00B5                     ??___aldiv:	
   926  00B5                     sprintf@flag:	
   927                           ; 1 bytes @ 0x15
   928                           
   929                           
   930                           ; 1 bytes @ 0x15
   931  00B5                     	ds	1
   932  00B6                     sprintf@prec:	
   933  00B6                     ___aldiv@counter:	
   934                           ; 1 bytes @ 0x16
   935                           
   936                           
   937                           ; 1 bytes @ 0x16
   938  00B6                     	ds	1
   939  00B7                     ___aldiv@sign:	
   940  00B7                     sprintf@val:	
   941                           ; 1 bytes @ 0x17
   942                           
   943                           
   944                           ; 2 bytes @ 0x17
   945  00B7                     	ds	1
   946  00B8                     ___aldiv@quotient:	
   947                           
   948                           ; 4 bytes @ 0x18
   949  00B8                     	ds	1
   950  00B9                     sprintf@sp:	
   951                           
   952                           ; 1 bytes @ 0x19
   953  00B9                     	ds	1
   954  00BA                     sprintf@c:	
   955                           
   956                           ; 1 bytes @ 0x1A
   957  00BA                     	ds	2
   958  00BC                     ?_pwm_set:	
   959  00BC                     pwm_set@channel:	
   960                           ; 1 bytes @ 0x1C
   961                           
   962                           
   963                           ; 2 bytes @ 0x1C
   964  00BC                     	ds	2
   965  00BE                     pwm_set@duty_cycle:	
   966                           
   967                           ; 4 bytes @ 0x1E
   968  00BE                     	ds	4
   969  00C2                     ??_pwm_set:	
   970                           
   971                           ; 1 bytes @ 0x22
   972  00C2                     	ds	4
   973  00C6                     ??_motor_reset:	
   974  00C6                     ??_main:	
   975                           ; 1 bytes @ 0x26
   976                           
   977                           
   978                           ; 1 bytes @ 0x26
   979  00C6                     	ds	7
   980  00CD                     main@sVar:	
   981                           
   982                           ; 10 bytes @ 0x2D
   983  00CD                     	ds	11
   984  00D8                     main@sVar_387:	
   985                           
   986                           ; 10 bytes @ 0x38
   987  00D8                     	ds	10
   988                           
   989                           	psect	cstackCOMMON
   990  0070                     __pcstackCOMMON:	
   991  0070                     ?_spiRead:	
   992  0070                     ?_spiWrite:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_serial_init:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_putch:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_chkchr:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_putst:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ?_pwm_init:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_SetMotor:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_resetCounter:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ?_motor_reset:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0070                     ?_isr:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0070                     ?_encoders_init:	
  1023                           ; 1 bytes @ 0x0
  1024                           
  1025  0070                     ?_main:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028  0070                     ?_spiReceiveWait:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031  0070                     ?___wmul:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0070                     ?___awdiv:	
  1035                           ; 2 bytes @ 0x0
  1036                           
  1037  0070                     ?_constrain:	
  1038                           ; 2 bytes @ 0x0
  1039                           
  1040  0070                     ?i1___lmul:	
  1041                           ; 4 bytes @ 0x0
  1042                           
  1043  0070                     ___wmul@multiplier:	
  1044                           ; 4 bytes @ 0x0
  1045                           
  1046  0070                     ___awdiv@divisor:	
  1047                           ; 2 bytes @ 0x0
  1048                           
  1049  0070                     constrain@value:	
  1050                           ; 2 bytes @ 0x0
  1051                           
  1052  0070                     i1___lmul@multiplier:	
  1053                           ; 4 bytes @ 0x0
  1054                           
  1055                           
  1056                           ; 4 bytes @ 0x0
  1057  0070                     	ds	2
  1058  0072                     ___wmul@multiplicand:	
  1059  0072                     ___awdiv@dividend:	
  1060                           ; 2 bytes @ 0x2
  1061                           
  1062                           
  1063                           ; 2 bytes @ 0x2
  1064  0072                     	ds	2
  1065  0074                     ??___wmul:	
  1066  0074                     ??___awdiv:	
  1067                           ; 1 bytes @ 0x4
  1068                           
  1069  0074                     ___wmul@product:	
  1070                           ; 1 bytes @ 0x4
  1071                           
  1072  0074                     constrain@lLimit:	
  1073                           ; 2 bytes @ 0x4
  1074                           
  1075  0074                     i1___lmul@multiplicand:	
  1076                           ; 4 bytes @ 0x4
  1077                           
  1078                           
  1079                           ; 4 bytes @ 0x4
  1080  0074                     	ds	1
  1081  0075                     ___awdiv@counter:	
  1082                           
  1083                           ; 1 bytes @ 0x5
  1084  0075                     	ds	1
  1085  0076                     ___awdiv@sign:	
  1086                           
  1087                           ; 1 bytes @ 0x6
  1088  0076                     	ds	1
  1089  0077                     ___awdiv@quotient:	
  1090                           
  1091                           ; 2 bytes @ 0x7
  1092  0077                     	ds	1
  1093  0078                     ??i1___lmul:	
  1094  0078                     constrain@uLimit:	
  1095                           ; 1 bytes @ 0x8
  1096                           
  1097                           
  1098                           ; 4 bytes @ 0x8
  1099  0078                     	ds	1
  1100  0079                     i1___lmul@product:	
  1101                           
  1102                           ; 4 bytes @ 0x9
  1103  0079                     	ds	3
  1104  007C                     ??_constrain:	
  1105                           
  1106                           ; 1 bytes @ 0xC
  1107  007C                     	ds	1
  1108  007D                     ??i1___aldiv:	
  1109                           
  1110                           ; 1 bytes @ 0xD
  1111  007D                     	ds	1
  1112                           
  1113                           	psect	cstackBANK0
  1114  0020                     __pcstackBANK0:	
  1115  0020                     ?i1___aldiv:	
  1116  0020                     i1___aldiv@divisor:	
  1117                           ; 4 bytes @ 0x0
  1118                           
  1119                           
  1120                           ; 4 bytes @ 0x0
  1121  0020                     	ds	4
  1122  0024                     i1___aldiv@dividend:	
  1123                           
  1124                           ; 4 bytes @ 0x4
  1125  0024                     	ds	4
  1126  0028                     i1___aldiv@counter:	
  1127                           
  1128                           ; 1 bytes @ 0x8
  1129  0028                     	ds	1
  1130  0029                     i1___aldiv@sign:	
  1131                           
  1132                           ; 1 bytes @ 0x9
  1133  0029                     	ds	1
  1134  002A                     i1___aldiv@quotient:	
  1135                           
  1136                           ; 4 bytes @ 0xA
  1137  002A                     	ds	4
  1138  002E                     ?i1_pwm_set:	
  1139  002E                     i1pwm_set@channel:	
  1140                           ; 1 bytes @ 0xE
  1141                           
  1142                           
  1143                           ; 2 bytes @ 0xE
  1144  002E                     	ds	2
  1145  0030                     i1pwm_set@duty_cycle:	
  1146                           
  1147                           ; 4 bytes @ 0x10
  1148  0030                     	ds	4
  1149  0034                     ??i1_pwm_set:	
  1150                           
  1151                           ; 1 bytes @ 0x14
  1152  0034                     	ds	4
  1153  0038                     ??_SetMotor:	
  1154                           
  1155                           ; 1 bytes @ 0x18
  1156  0038                     	ds	8
  1157  0040                     SetMotor@P_Response:	
  1158                           
  1159                           ; 2 bytes @ 0x20
  1160  0040                     	ds	2
  1161  0042                     SetMotor@D_Response:	
  1162                           
  1163                           ; 2 bytes @ 0x22
  1164  0042                     	ds	2
  1165  0044                     SetMotor@I_Response:	
  1166                           
  1167                           ; 2 bytes @ 0x24
  1168  0044                     	ds	2
  1169  0046                     SetMotor@resp:	
  1170                           
  1171                           ; 4 bytes @ 0x26
  1172  0046                     	ds	4
  1173  004A                     SetMotor@err:	
  1174                           
  1175                           ; 2 bytes @ 0x2A
  1176  004A                     	ds	2
  1177  004C                     ??_isr:	
  1178                           
  1179                           ; 1 bytes @ 0x2C
  1180  004C                     	ds	6
  1181  0052                     isr@portB:	
  1182                           
  1183                           ; 1 bytes @ 0x32
  1184  0052                     	ds	1
  1185                           
  1186                           	psect	maintext
  1187  037F                     __pmaintext:	
  1188 ;;
  1189 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1190 ;;
  1191 ;; *************** function _main *****************
  1192 ;; Defined at:
  1193 ;;		line 291 in file "main.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  sVar           10   56[BANK1 ] unsigned char [10]
  1198 ;;  sVar           10   45[BANK1 ] unsigned char [10]
  1199 ;;  serialIn        1    0        unsigned char 
  1200 ;;  i               2    0        int 
  1201 ;;  enc1            2    0        int 
  1202 ;;  serialIn        1    0        unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : B00/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         0       0       0       0       0
  1213 ;;      Locals:         0       0      26       0       0
  1214 ;;      Temps:          0       0       3       0       0
  1215 ;;      Totals:         0       0      29       0       0
  1216 ;;Total ram usage:       29 bytes
  1217 ;; Hardware stack levels required when called:    7
  1218 ;; This function calls:
  1219 ;;		_SetPoint
  1220 ;;		_chkchr
  1221 ;;		_encoders_init
  1222 ;;		_motor_reset
  1223 ;;		_putst
  1224 ;;		_pwm_init
  1225 ;;		_pwm_set
  1226 ;;		_resetCounter
  1227 ;;		_serial_init
  1228 ;;		_spiDataReady
  1229 ;;		_spiInit
  1230 ;;		_spiRead
  1231 ;;		_spiWrite
  1232 ;;		_sprintf
  1233 ;; This function is called by:
  1234 ;;		Startup code after reset
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           
  1239                           ;psect for function _main
  1240  037F                     _main:	
  1241                           
  1242                           ;main.c: 300: OPTION_REGbits.T0CS = 0;
  1243                           
  1244                           ;incstack = 0
  1245                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1246  037F  1683               	bsf	3,5	;RP0=1, select bank1
  1247  0380  1303               	bcf	3,6	;RP1=0, select bank1
  1248  0381  1281               	bcf	1,5	;volatile
  1249                           
  1250                           ;main.c: 301: OPTION_REGbits.PSA = 0;
  1251  0382  1181               	bcf	1,3	;volatile
  1252                           
  1253                           ;main.c: 302: OPTION_REGbits.PS = 7;
  1254  0383  3007               	movlw	7
  1255  0384  0481               	iorwf	1,f	;volatile
  1256                           
  1257                           ;main.c: 305: TRISB5 = 0;
  1258  0385  1286               	bcf	6,5	;volatile
  1259                           
  1260                           ;main.c: 306: ANS13 = 0;
  1261  0386  1683               	bsf	3,5	;RP0=1, select bank3
  1262  0387  1703               	bsf	3,6	;RP1=1, select bank3
  1263  0388  1289               	bcf	9,5	;volatile
  1264                           
  1265                           ;main.c: 307: TRISB7 = 0;
  1266  0389  1683               	bsf	3,5	;RP0=1, select bank1
  1267  038A  1303               	bcf	3,6	;RP1=0, select bank1
  1268  038B  1386               	bcf	6,7	;volatile
  1269                           
  1270                           ;main.c: 308: TRISB1 = 1;
  1271  038C  1486               	bsf	6,1	;volatile
  1272                           
  1273                           ;main.c: 309: TRISB2 = 1;
  1274  038D  1506               	bsf	6,2	;volatile
  1275                           
  1276                           ;main.c: 310: TRISB3 = 1;
  1277  038E  1586               	bsf	6,3	;volatile
  1278                           
  1279                           ;main.c: 311: TRISB4 = 1;
  1280  038F  1606               	bsf	6,4	;volatile
  1281                           
  1282                           ;main.c: 312: ANS10 = 0;
  1283  0390  1683               	bsf	3,5	;RP0=1, select bank3
  1284  0391  1703               	bsf	3,6	;RP1=1, select bank3
  1285  0392  1109               	bcf	9,2	;volatile
  1286                           
  1287                           ;main.c: 313: ANS9 = 0;
  1288  0393  1089               	bcf	9,1	;volatile
  1289                           
  1290                           ;main.c: 314: ANS8 = 0;
  1291  0394  1009               	bcf	9,0	;volatile
  1292                           
  1293                           ;main.c: 315: ANS11 = 0;
  1294  0395  1189               	bcf	9,3	;volatile
  1295                           
  1296                           ;main.c: 316: RB5=1;
  1297  0396  1283               	bcf	3,5	;RP0=0, select bank0
  1298  0397  1303               	bcf	3,6	;RP1=0, select bank0
  1299  0398  1686               	bsf	6,5	;volatile
  1300                           
  1301                           ;main.c: 319: T0IE = 1;
  1302  0399  168B               	bsf	11,5	;volatile
  1303                           
  1304                           ;main.c: 320: TMR1IE = 0;
  1305  039A  1683               	bsf	3,5	;RP0=1, select bank1
  1306  039B  1303               	bcf	3,6	;RP1=0, select bank1
  1307  039C  100C               	bcf	12,0	;volatile
  1308                           
  1309                           ;main.c: 321: PEIE = 1;
  1310  039D  170B               	bsf	11,6	;volatile
  1311                           
  1312                           ;main.c: 322: GIE = 1;
  1313  039E  178B               	bsf	11,7	;volatile
  1314                           
  1315                           ;main.c: 323: IOCB=0b00011000;
  1316  039F  3018               	movlw	24
  1317  03A0  0096               	movwf	22	;volatile
  1318                           
  1319                           ;main.c: 324: RBIE = 1;
  1320  03A1  158B               	bsf	11,3	;volatile
  1321                           
  1322                           ;main.c: 328: serial_init();
  1323  03A2  120A  158A  26D0  120A  118A  	fcall	_serial_init
  1324                           
  1325                           ;main.c: 330: spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW,SPI_ID
      +                          LE_2_ACTIVE);
  1326  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  1327  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  1328  03A9  01A0               	clrf	spiInit@sDataSample^(0+128)
  1329  03AA  01A1               	clrf	spiInit@sClockIdle^(0+128)
  1330  03AB  01A2               	clrf	spiInit@sTransmitEdge^(0+128)
  1331  03AC  3024               	movlw	36
  1332  03AD  120A  158A  26BC  120A  118A  	fcall	_spiInit
  1333                           
  1334                           ;main.c: 333: pwm_init();
  1335  03B2  120A  158A  2704  120A  118A  	fcall	_pwm_init
  1336                           
  1337                           ;main.c: 340: encoders_init();
  1338  03B7  120A  158A  26E8  120A  118A  	fcall	_encoders_init
  1339                           
  1340                           ;main.c: 348: pwm_set(1, 0);
  1341  03BC  3001               	movlw	1
  1342  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  1343  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  1344  03BF  00BC               	movwf	pwm_set@channel^(0+128)
  1345  03C0  3000               	movlw	0
  1346  03C1  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  1347  03C2  3000               	movlw	0
  1348  03C3  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1349  03C4  3000               	movlw	0
  1350  03C5  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1351  03C6  3000               	movlw	0
  1352  03C7  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1353  03C8  3000               	movlw	0
  1354  03C9  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  1355  03CA  120A  118A  2548  120A  118A  	fcall	_pwm_set
  1356                           
  1357                           ;main.c: 349: pwm_set(2, 0);
  1358  03CF  3002               	movlw	2
  1359  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  1360  03D1  1303               	bcf	3,6	;RP1=0, select bank1
  1361  03D2  00BC               	movwf	pwm_set@channel^(0+128)
  1362  03D3  3000               	movlw	0
  1363  03D4  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  1364  03D5  3000               	movlw	0
  1365  03D6  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1366  03D7  3000               	movlw	0
  1367  03D8  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1368  03D9  3000               	movlw	0
  1369  03DA  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1370  03DB  3000               	movlw	0
  1371  03DC  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  1372  03DD  120A  118A  2548  120A  118A  	fcall	_pwm_set
  1373  03E2                     l2665:	
  1374                           
  1375                           ;main.c: 360: if(spiDataReady())
  1376  03E2  120A  158A  268B  120A  118A  	fcall	_spiDataReady
  1377  03E7  1683               	bsf	3,5	;RP0=1, select bank1
  1378  03E8  1303               	bcf	3,6	;RP1=0, select bank1
  1379  03E9  0820               	movf	?_spiDataReady^(0+128),w
  1380  03EA  0421               	iorwf	(?_spiDataReady+1)^(0+128),w
  1381  03EB  1903               	btfsc	3,2
  1382  03EC  2C0A               	goto	l2673
  1383                           
  1384                           ;main.c: 361: {;main.c: 362: RB5 = !RB5;
  1385  03ED  3020               	movlw	32
  1386  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  1387  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  1388  03F0  0686               	xorwf	6,f
  1389                           
  1390                           ;main.c: 363: SPIData = spiRead() >> 1;
  1391  03F1  120A  158A  266C  120A  118A  	fcall	_spiRead
  1392  03F6  1683               	bsf	3,5	;RP0=1, select bank1
  1393  03F7  1303               	bcf	3,6	;RP1=0, select bank1
  1394  03F8  00C6               	movwf	??_main^(0+128)
  1395  03F9  1003               	clrc
  1396  03FA  0C46               	rrf	??_main^(0+128),w
  1397  03FB  00C7               	movwf	(??_main+1)^(0+128)
  1398  03FC  0847               	movf	(??_main+1)^(0+128),w
  1399  03FD  00E8               	movwf	_SPIData^(0+128)
  1400                           
  1401                           ;main.c: 364: spiWrite(240);
  1402  03FE  30F0               	movlw	240
  1403  03FF  120A  158A  267B  120A  118A  	fcall	_spiWrite
  1404                           
  1405                           ;main.c: 365: nSPIData = 1;
  1406  0404  3001               	movlw	1
  1407  0405  1683               	bsf	3,5	;RP0=1, select bank1
  1408  0406  1303               	bcf	3,6	;RP1=0, select bank1
  1409  0407  00E4               	movwf	_nSPIData^(0+128)
  1410  0408  3000               	movlw	0
  1411  0409  00E5               	movwf	(_nSPIData^(0+128)+1)
  1412  040A                     l2673:	
  1413                           
  1414                           ;main.c: 366: };main.c: 367: if (nSPIData){
  1415  040A  0864               	movf	_nSPIData^(0+128),w
  1416  040B  0465               	iorwf	(_nSPIData+1)^(0+128),w
  1417  040C  1903               	btfsc	3,2
  1418  040D  2BE2               	goto	l2665
  1419                           
  1420                           ;main.c: 368: char sVar[10];;main.c: 369: sprintf(sVar, "SPIRx: %d \r\n", SPIData);
  1421  040E  3019               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1422  040F  00C6               	movwf	??_main^(0+128)
  1423  0410  0846               	movf	??_main^(0+128),w
  1424  0411  00AE               	movwf	sprintf@f^(0+128)
  1425  0412  0868               	movf	_SPIData^(0+128),w
  1426  0413  00C7               	movwf	(??_main+1)^(0+128)
  1427  0414  01C8               	clrf	((??_main+1)^(0+128)+1)
  1428  0415  0847               	movf	(??_main+1)^(0+128),w
  1429  0416  00AF               	movwf	(?_sprintf^(0+128)+1)
  1430  0417  0848               	movf	(??_main+2)^(0+128),w
  1431  0418  00B0               	movwf	((?_sprintf+1)^(0+128)+1)
  1432  0419  30CD               	movlw	(low (main@sVar| 0))& (0+255)
  1433  041A  120A  118A  22AD  120A  118A  	fcall	_sprintf
  1434                           
  1435                           ;main.c: 370: putst(sVar);
  1436  041F  30CD               	movlw	(low (main@sVar| 0))& (0+255)
  1437  0420  120A  158A  27CA  120A  118A  	fcall	_putst
  1438                           
  1439                           ;main.c: 371: nSPIData = 0;
  1440  0425  1683               	bsf	3,5	;RP0=1, select bank1
  1441  0426  1303               	bcf	3,6	;RP1=0, select bank1
  1442  0427  01E4               	clrf	_nSPIData^(0+128)
  1443  0428  01E5               	clrf	(_nSPIData+1)^(0+128)
  1444  0429  2BE2               	goto	l2665
  1445  042A                     __end_of_main:	
  1446                           
  1447                           	psect	text1
  1448  02AD                     __ptext1:	
  1449 ;; *************** function _sprintf *****************
  1450 ;; Defined at:
  1451 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  sp              1    wreg     PTR unsigned char 
  1454 ;;		 -> main@sVar_387(10), main@sVar(10), 
  1455 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  1456 ;;		 -> STR_5(14), STR_4(4), STR_3(4), STR_2(11), 
  1457 ;;		 -> STR_1(13), 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  sp              1   25[BANK1 ] PTR unsigned char 
  1460 ;;		 -> main@sVar_387(10), main@sVar(10), 
  1461 ;;  tmpval          4    0        struct .
  1462 ;;  val             2   23[BANK1 ] unsigned int 
  1463 ;;  cp              2    0        PTR const unsigned char 
  1464 ;;  len             2    0        unsigned int 
  1465 ;;  c               1   26[BANK1 ] unsigned char 
  1466 ;;  prec            1   22[BANK1 ] char 
  1467 ;;  flag            1   21[BANK1 ] unsigned char 
  1468 ;;  ap              1   20[BANK1 ] PTR void [1]
  1469 ;;		 -> ?_sprintf(2), 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  2   14[BANK1 ] int 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1479 ;;      Params:         0       0       3       0       0
  1480 ;;      Locals:         0       0       7       0       0
  1481 ;;      Temps:          0       0       3       0       0
  1482 ;;      Totals:         0       0      13       0       0
  1483 ;;Total ram usage:       13 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    5
  1486 ;; This function calls:
  1487 ;;		___lwdiv
  1488 ;;		___lwmod
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           
  1495                           ;psect for function _sprintf
  1496  02AD                     _sprintf:	
  1497                           
  1498                           ;incstack = 0
  1499                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1500                           ;sprintf@sp stored from wreg
  1501  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  1502  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  1503  02AF  00B9               	movwf	sprintf@sp^(0+128)
  1504                           
  1505                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1506  02B0  30AF               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1507  02B1  00B1               	movwf	??_sprintf^(0+128)
  1508  02B2  0831               	movf	??_sprintf^(0+128),w
  1509  02B3  00B4               	movwf	sprintf@ap^(0+128)
  1510  02B4                     l2447:	
  1511                           ;doprnt.c: 548: while((c = *f++)) {
  1512                           
  1513  02B4  3001               	movlw	1
  1514  02B5  07AE               	addwf	sprintf@f^(0+128),f
  1515  02B6  30FF               	movlw	-1
  1516  02B7  072E               	addwf	sprintf@f^(0+128),w
  1517  02B8  0084               	movwf	4
  1518  02B9  120A  118A  2765  120A  118A  	fcall	stringdir
  1519  02BE  00B1               	movwf	??_sprintf^(0+128)
  1520  02BF  0831               	movf	??_sprintf^(0+128),w
  1521  02C0  00BA               	movwf	sprintf@c^(0+128)
  1522  02C1  083A               	movf	sprintf@c^(0+128),w
  1523  02C2  1903               	btfsc	3,2
  1524  02C3  2B7A               	goto	l2449
  1525                           
  1526                           ;doprnt.c: 550: if(c != '%')
  1527  02C4  3025               	movlw	37
  1528  02C5  063A               	xorwf	sprintf@c^(0+128),w
  1529  02C6  1903               	btfsc	3,2
  1530  02C7  2AD4               	goto	l2403
  1531                           
  1532                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1533  02C8  083A               	movf	sprintf@c^(0+128),w
  1534  02C9  00B1               	movwf	??_sprintf^(0+128)
  1535  02CA  0839               	movf	sprintf@sp^(0+128),w
  1536  02CB  0084               	movwf	4
  1537  02CC  0831               	movf	??_sprintf^(0+128),w
  1538  02CD  1383               	bcf	3,7	;select IRP bank0
  1539  02CE  0080               	movwf	0
  1540  02CF  3001               	movlw	1
  1541  02D0  00B1               	movwf	??_sprintf^(0+128)
  1542  02D1  0831               	movf	??_sprintf^(0+128),w
  1543  02D2  07B9               	addwf	sprintf@sp^(0+128),f
  1544                           
  1545                           ;doprnt.c: 554: continue;
  1546  02D3  2AB4               	goto	l2447
  1547  02D4                     l2403:	
  1548                           
  1549                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1550  02D4  01B5               	clrf	sprintf@flag^(0+128)
  1551                           
  1552                           ;doprnt.c: 654: switch(c = *f++) {
  1553  02D5  3001               	movlw	1
  1554  02D6  07AE               	addwf	sprintf@f^(0+128),f
  1555  02D7  30FF               	movlw	-1
  1556  02D8  072E               	addwf	sprintf@f^(0+128),w
  1557  02D9  0084               	movwf	4
  1558  02DA  120A  118A  2765  120A  118A  	fcall	stringdir
  1559  02DF  00BA               	movwf	sprintf@c^(0+128)
  1560                           
  1561                           ; Switch size 1, requested type "simple"
  1562                           ; Number of cases is 3, Range of values is 0 to 105
  1563                           ; switch strategies available:
  1564                           ; Name         Instructions Cycles
  1565                           ; simple_byte           10     6 (average)
  1566                           ; jumptable            260     6 (fixed)
  1567                           ;	Chosen strategy is simple_byte
  1568  02E0  3A00               	xorlw	0	; case 0
  1569  02E1  1903               	skipnz
  1570  02E2  2B7A               	goto	l2449
  1571  02E3  3A64               	xorlw	100	; case 100
  1572  02E4  1903               	skipnz
  1573  02E5  2AEA               	goto	l2409
  1574  02E6  3A0D               	xorlw	13	; case 105
  1575  02E7  1903               	skipnz
  1576  02E8  2AEA               	goto	l2409
  1577  02E9  2AB4               	goto	l2447
  1578  02EA                     l2409:	
  1579                           
  1580                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1581  02EA  0834               	movf	sprintf@ap^(0+128),w
  1582  02EB  0084               	movwf	4
  1583  02EC  1383               	bcf	3,7	;select IRP bank0
  1584  02ED  0800               	movf	0,w
  1585  02EE  00B7               	movwf	sprintf@val^(0+128)
  1586  02EF  0A84               	incf	4,f
  1587  02F0  0800               	movf	0,w
  1588  02F1  00B8               	movwf	(sprintf@val+1)^(0+128)
  1589  02F2  3002               	movlw	2
  1590  02F3  00B1               	movwf	??_sprintf^(0+128)
  1591  02F4  0831               	movf	??_sprintf^(0+128),w
  1592  02F5  07B4               	addwf	sprintf@ap^(0+128),f
  1593                           
  1594                           ;doprnt.c: 1280: if((int)val < 0) {
  1595  02F6  1FB8               	btfss	(sprintf@val+1)^(0+128),7
  1596  02F7  2B01               	goto	l2419
  1597                           
  1598                           ;doprnt.c: 1281: flag |= 0x03;
  1599  02F8  3003               	movlw	3
  1600  02F9  00B1               	movwf	??_sprintf^(0+128)
  1601  02FA  0831               	movf	??_sprintf^(0+128),w
  1602  02FB  04B5               	iorwf	sprintf@flag^(0+128),f
  1603                           
  1604                           ;doprnt.c: 1282: val = -val;
  1605  02FC  09B7               	comf	sprintf@val^(0+128),f
  1606  02FD  09B8               	comf	(sprintf@val+1)^(0+128),f
  1607  02FE  0AB7               	incf	sprintf@val^(0+128),f
  1608  02FF  1903               	skipnz
  1609  0300  0AB8               	incf	(sprintf@val+1)^(0+128),f
  1610  0301                     l2419:	
  1611                           
  1612                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1613  0301  01BA               	clrf	sprintf@c^(0+128)
  1614  0302  0ABA               	incf	sprintf@c^(0+128),f
  1615  0303                     l2425:	
  1616                           
  1617                           ;doprnt.c: 1325: if(val < dpowers[c])
  1618  0303  083A               	movf	sprintf@c^(0+128),w
  1619  0304  00B1               	movwf	??_sprintf^(0+128)
  1620  0305  0731               	addwf	??_sprintf^(0+128),w
  1621  0306  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1622  0307  0084               	movwf	4
  1623  0308  120A  118A  2765  120A  118A  	fcall	stringdir
  1624  030D  00B2               	movwf	(??_sprintf+1)^(0+128)
  1625  030E  120A  118A  2765  120A  118A  	fcall	stringdir
  1626  0313  00B3               	movwf	((??_sprintf+1)^(0+128)+1)
  1627  0314  0833               	movf	(??_sprintf+2)^(0+128),w
  1628  0315  0238               	subwf	(sprintf@val+1)^(0+128),w
  1629  0316  1D03               	skipz
  1630  0317  2B1A               	goto	u2235
  1631  0318  0832               	movf	(??_sprintf+1)^(0+128),w
  1632  0319  0237               	subwf	sprintf@val^(0+128),w
  1633  031A                     u2235:	
  1634  031A  1C03               	btfss	3,0
  1635  031B  2B24               	goto	l2431
  1636  031C  3001               	movlw	1
  1637  031D  00B1               	movwf	??_sprintf^(0+128)
  1638  031E  0831               	movf	??_sprintf^(0+128),w
  1639  031F  07BA               	addwf	sprintf@c^(0+128),f
  1640  0320  3005               	movlw	5
  1641  0321  063A               	xorwf	sprintf@c^(0+128),w
  1642  0322  1D03               	btfss	3,2
  1643  0323  2B03               	goto	l2425
  1644  0324                     l2431:	
  1645                           
  1646                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1647  0324  0835               	movf	sprintf@flag^(0+128),w
  1648  0325  3903               	andlw	3
  1649  0326  1903               	btfsc	3,2
  1650  0327  2B33               	goto	l2437
  1651                           
  1652                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  1653  0328  302D               	movlw	45
  1654  0329  00B1               	movwf	??_sprintf^(0+128)
  1655  032A  0839               	movf	sprintf@sp^(0+128),w
  1656  032B  0084               	movwf	4
  1657  032C  0831               	movf	??_sprintf^(0+128),w
  1658  032D  1383               	bcf	3,7	;select IRP bank0
  1659  032E  0080               	movwf	0
  1660  032F  3001               	movlw	1
  1661  0330  00B1               	movwf	??_sprintf^(0+128)
  1662  0331  0831               	movf	??_sprintf^(0+128),w
  1663  0332  07B9               	addwf	sprintf@sp^(0+128),f
  1664  0333                     l2437:	
  1665                           
  1666                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1667  0333  083A               	movf	sprintf@c^(0+128),w
  1668  0334  00B1               	movwf	??_sprintf^(0+128)
  1669  0335  0831               	movf	??_sprintf^(0+128),w
  1670  0336  00B6               	movwf	sprintf@prec^(0+128)
  1671  0337                     l2445:	
  1672                           ;doprnt.c: 1493: while(prec--) {
  1673                           
  1674  0337  30FF               	movlw	255
  1675  0338  00B1               	movwf	??_sprintf^(0+128)
  1676  0339  0831               	movf	??_sprintf^(0+128),w
  1677  033A  07B6               	addwf	sprintf@prec^(0+128),f
  1678  033B  0A36               	incf	sprintf@prec^(0+128),w
  1679  033C  1903               	btfsc	3,2
  1680  033D  2AB4               	goto	l2447
  1681                           
  1682                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1683  033E  300A               	movlw	10
  1684  033F  00A8               	movwf	___lwmod@divisor^(0+128)
  1685  0340  3000               	movlw	0
  1686  0341  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  1687  0342  0836               	movf	sprintf@prec^(0+128),w
  1688  0343  00B1               	movwf	??_sprintf^(0+128)
  1689  0344  0731               	addwf	??_sprintf^(0+128),w
  1690  0345  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1691  0346  0084               	movwf	4
  1692  0347  120A  118A  2765  120A  118A  	fcall	stringdir
  1693  034C  00A0               	movwf	___lwdiv@divisor^(0+128)
  1694  034D  120A  118A  2765  120A  118A  	fcall	stringdir
  1695  0352  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  1696  0353  0838               	movf	(sprintf@val+1)^(0+128),w
  1697  0354  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  1698  0355  0837               	movf	sprintf@val^(0+128),w
  1699  0356  00A2               	movwf	___lwdiv@dividend^(0+128)
  1700  0357  120A  118A  2727  120A  118A  	fcall	___lwdiv
  1701  035C  1683               	bsf	3,5	;RP0=1, select bank1
  1702  035D  1303               	bcf	3,6	;RP1=0, select bank1
  1703  035E  0821               	movf	(?___lwdiv+1)^(0+128),w
  1704  035F  00AB               	movwf	(___lwmod@dividend+1)^(0+128)
  1705  0360  0820               	movf	?___lwdiv^(0+128),w
  1706  0361  00AA               	movwf	___lwmod@dividend^(0+128)
  1707  0362  120A  158A  2796  120A  118A  	fcall	___lwmod
  1708  0367  1683               	bsf	3,5	;RP0=1, select bank1
  1709  0368  1303               	bcf	3,6	;RP1=0, select bank1
  1710  0369  0828               	movf	?___lwmod^(0+128),w
  1711  036A  3E30               	addlw	48
  1712  036B  00B2               	movwf	(??_sprintf+1)^(0+128)
  1713  036C  0832               	movf	(??_sprintf+1)^(0+128),w
  1714  036D  00BA               	movwf	sprintf@c^(0+128)
  1715                           
  1716                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1717  036E  083A               	movf	sprintf@c^(0+128),w
  1718  036F  00B1               	movwf	??_sprintf^(0+128)
  1719  0370  0839               	movf	sprintf@sp^(0+128),w
  1720  0371  0084               	movwf	4
  1721  0372  0831               	movf	??_sprintf^(0+128),w
  1722  0373  1383               	bcf	3,7	;select IRP bank0
  1723  0374  0080               	movwf	0
  1724  0375  3001               	movlw	1
  1725  0376  00B1               	movwf	??_sprintf^(0+128)
  1726  0377  0831               	movf	??_sprintf^(0+128),w
  1727  0378  07B9               	addwf	sprintf@sp^(0+128),f
  1728  0379  2B37               	goto	l2445
  1729  037A                     l2449:	
  1730                           
  1731                           ;doprnt.c: 1557: *sp = 0;
  1732  037A  0839               	movf	sprintf@sp^(0+128),w
  1733  037B  0084               	movwf	4
  1734  037C  1383               	bcf	3,7	;select IRP bank0
  1735  037D  0180               	clrf	0
  1736  037E  0008               	return
  1737  037F                     __end_of_sprintf:	
  1738                           
  1739                           	psect	text2
  1740  0F96                     __ptext2:	
  1741 ;; *************** function ___lwmod *****************
  1742 ;; Defined at:
  1743 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  divisor         2    8[BANK1 ] unsigned int 
  1746 ;;  dividend        2   10[BANK1 ] unsigned int 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  counter         1   13[BANK1 ] unsigned char 
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  2    8[BANK1 ] unsigned int 
  1751 ;; Registers used:
  1752 ;;		wreg, status,2, status,0
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1758 ;;      Params:         0       0       4       0       0
  1759 ;;      Locals:         0       0       1       0       0
  1760 ;;      Temps:          0       0       1       0       0
  1761 ;;      Totals:         0       0       6       0       0
  1762 ;;Total ram usage:        6 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    4
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_sprintf
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           
  1773                           ;psect for function ___lwmod
  1774  0F96                     ___lwmod:	
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1778  0F96  1683               	bsf	3,5	;RP0=1, select bank1
  1779  0F97  1303               	bcf	3,6	;RP1=0, select bank1
  1780  0F98  0828               	movf	___lwmod@divisor^(0+128),w
  1781  0F99  0429               	iorwf	(___lwmod@divisor+1)^(0+128),w
  1782  0F9A  1903               	btfsc	3,2
  1783  0F9B  2FC5               	goto	l2199
  1784  0F9C  01AD               	clrf	___lwmod@counter^(0+128)
  1785  0F9D  0AAD               	incf	___lwmod@counter^(0+128),f
  1786  0F9E                     l2189:	
  1787  0F9E  1BA9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  1788  0F9F  2FAC               	goto	l2191
  1789  0FA0  3001               	movlw	1
  1790  0FA1                     u1945:	
  1791  0FA1  1003               	clrc
  1792  0FA2  0DA8               	rlf	___lwmod@divisor^(0+128),f
  1793  0FA3  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  1794  0FA4  3EFF               	addlw	-1
  1795  0FA5  1D03               	skipz
  1796  0FA6  2FA1               	goto	u1945
  1797  0FA7  3001               	movlw	1
  1798  0FA8  00AC               	movwf	??___lwmod^(0+128)
  1799  0FA9  082C               	movf	??___lwmod^(0+128),w
  1800  0FAA  07AD               	addwf	___lwmod@counter^(0+128),f
  1801  0FAB  2F9E               	goto	l2189
  1802  0FAC                     l2191:	
  1803  0FAC  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  1804  0FAD  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  1805  0FAE  1D03               	skipz
  1806  0FAF  2FB2               	goto	u1965
  1807  0FB0  0828               	movf	___lwmod@divisor^(0+128),w
  1808  0FB1  022A               	subwf	___lwmod@dividend^(0+128),w
  1809  0FB2                     u1965:	
  1810  0FB2  1C03               	skipc
  1811  0FB3  2FBA               	goto	l2195
  1812  0FB4  0828               	movf	___lwmod@divisor^(0+128),w
  1813  0FB5  02AA               	subwf	___lwmod@dividend^(0+128),f
  1814  0FB6  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  1815  0FB7  1C03               	skipc
  1816  0FB8  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  1817  0FB9  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  1818  0FBA                     l2195:	
  1819  0FBA  3001               	movlw	1
  1820  0FBB                     u1975:	
  1821  0FBB  1003               	clrc
  1822  0FBC  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  1823  0FBD  0CA8               	rrf	___lwmod@divisor^(0+128),f
  1824  0FBE  3EFF               	addlw	-1
  1825  0FBF  1D03               	skipz
  1826  0FC0  2FBB               	goto	u1975
  1827  0FC1  3001               	movlw	1
  1828  0FC2  02AD               	subwf	___lwmod@counter^(0+128),f
  1829  0FC3  1D03               	btfss	3,2
  1830  0FC4  2FAC               	goto	l2191
  1831  0FC5                     l2199:	
  1832  0FC5  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  1833  0FC6  00A9               	movwf	(?___lwmod+1)^(0+128)
  1834  0FC7  082A               	movf	___lwmod@dividend^(0+128),w
  1835  0FC8  00A8               	movwf	?___lwmod^(0+128)
  1836  0FC9  0008               	return
  1837  0FCA                     __end_of___lwmod:	
  1838                           
  1839                           	psect	text3
  1840  0727                     __ptext3:	
  1841 ;; *************** function ___lwdiv *****************
  1842 ;; Defined at:
  1843 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  divisor         2    0[BANK1 ] unsigned int 
  1846 ;;  dividend        2    2[BANK1 ] unsigned int 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  quotient        2    5[BANK1 ] unsigned int 
  1849 ;;  counter         1    7[BANK1 ] unsigned char 
  1850 ;; Return value:  Size  Location     Type
  1851 ;;                  2    0[BANK1 ] unsigned int 
  1852 ;; Registers used:
  1853 ;;		wreg, status,2, status,0
  1854 ;; Tracked objects:
  1855 ;;		On entry : 0/0
  1856 ;;		On exit  : 0/0
  1857 ;;		Unchanged: 0/0
  1858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1859 ;;      Params:         0       0       4       0       0
  1860 ;;      Locals:         0       0       3       0       0
  1861 ;;      Temps:          0       0       1       0       0
  1862 ;;      Totals:         0       0       8       0       0
  1863 ;;Total ram usage:        8 bytes
  1864 ;; Hardware stack levels used:    1
  1865 ;; Hardware stack levels required when called:    4
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_sprintf
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           
  1874                           ;psect for function ___lwdiv
  1875  0727                     ___lwdiv:	
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1879  0727  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0728  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0729  01A5               	clrf	___lwdiv@quotient^(0+128)
  1882  072A  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  1883  072B  0820               	movf	___lwdiv@divisor^(0+128),w
  1884  072C  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  1885  072D  1903               	btfsc	3,2
  1886  072E  2F60               	goto	l2177
  1887  072F  01A7               	clrf	___lwdiv@counter^(0+128)
  1888  0730  0AA7               	incf	___lwdiv@counter^(0+128),f
  1889  0731                     l2165:	
  1890  0731  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  1891  0732  2F3F               	goto	l2167
  1892  0733  3001               	movlw	1
  1893  0734                     u1875:	
  1894  0734  1003               	clrc
  1895  0735  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  1896  0736  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  1897  0737  3EFF               	addlw	-1
  1898  0738  1D03               	skipz
  1899  0739  2F34               	goto	u1875
  1900  073A  3001               	movlw	1
  1901  073B  00A4               	movwf	??___lwdiv^(0+128)
  1902  073C  0824               	movf	??___lwdiv^(0+128),w
  1903  073D  07A7               	addwf	___lwdiv@counter^(0+128),f
  1904  073E  2F31               	goto	l2165
  1905  073F                     l2167:	
  1906  073F  3001               	movlw	1
  1907  0740                     u1895:	
  1908  0740  1003               	clrc
  1909  0741  0DA5               	rlf	___lwdiv@quotient^(0+128),f
  1910  0742  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  1911  0743  3EFF               	addlw	-1
  1912  0744  1D03               	skipz
  1913  0745  2F40               	goto	u1895
  1914  0746  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  1915  0747  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  1916  0748  1D03               	skipz
  1917  0749  2F4C               	goto	u1905
  1918  074A  0820               	movf	___lwdiv@divisor^(0+128),w
  1919  074B  0222               	subwf	___lwdiv@dividend^(0+128),w
  1920  074C                     u1905:	
  1921  074C  1C03               	skipc
  1922  074D  2F55               	goto	l2173
  1923  074E  0820               	movf	___lwdiv@divisor^(0+128),w
  1924  074F  02A2               	subwf	___lwdiv@dividend^(0+128),f
  1925  0750  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  1926  0751  1C03               	skipc
  1927  0752  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  1928  0753  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  1929  0754  1425               	bsf	___lwdiv@quotient^(0+128),0
  1930  0755                     l2173:	
  1931  0755  3001               	movlw	1
  1932  0756                     u1915:	
  1933  0756  1003               	clrc
  1934  0757  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  1935  0758  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  1936  0759  3EFF               	addlw	-1
  1937  075A  1D03               	skipz
  1938  075B  2F56               	goto	u1915
  1939  075C  3001               	movlw	1
  1940  075D  02A7               	subwf	___lwdiv@counter^(0+128),f
  1941  075E  1D03               	btfss	3,2
  1942  075F  2F3F               	goto	l2167
  1943  0760                     l2177:	
  1944  0760  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  1945  0761  00A1               	movwf	(?___lwdiv+1)^(0+128)
  1946  0762  0825               	movf	___lwdiv@quotient^(0+128),w
  1947  0763  00A0               	movwf	?___lwdiv^(0+128)
  1948  0764  0008               	return
  1949  0765                     __end_of___lwdiv:	
  1950                           
  1951                           	psect	text4
  1952  0E7B                     __ptext4:	
  1953 ;; *************** function _spiWrite *****************
  1954 ;; Defined at:
  1955 ;;		line 34 in file "spi.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  dat             1    wreg     unsigned char 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  dat             1    0[BANK1 ] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1969 ;;      Params:         0       0       0       0       0
  1970 ;;      Locals:         0       0       1       0       0
  1971 ;;      Temps:          0       0       0       0       0
  1972 ;;      Totals:         0       0       1       0       0
  1973 ;;Total ram usage:        1 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    4
  1976 ;; This function calls:
  1977 ;;		Nothing
  1978 ;; This function is called by:
  1979 ;;		_main
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           
  1984                           ;psect for function _spiWrite
  1985  0E7B                     _spiWrite:	
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _spiWrite: [wreg]
  1989                           ;spiWrite@dat stored from wreg
  1990  0E7B  1683               	bsf	3,5	;RP0=1, select bank1
  1991  0E7C  1303               	bcf	3,6	;RP1=0, select bank1
  1992  0E7D  00A0               	movwf	spiWrite@dat^(0+128)
  1993                           
  1994                           ;spi.c: 36: SSPBUF = dat;
  1995  0E7E  0820               	movf	spiWrite@dat^(0+128),w
  1996  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
  1997  0E80  1303               	bcf	3,6	;RP1=0, select bank0
  1998  0E81  0093               	movwf	19	;volatile
  1999  0E82  0008               	return
  2000  0E83                     __end_of_spiWrite:	
  2001                           
  2002                           	psect	text5
  2003  0E6C                     __ptext5:	
  2004 ;; *************** function _spiRead *****************
  2005 ;; Defined at:
  2006 ;;		line 47 in file "spi.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;		None
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;		None
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  1    wreg      unsigned char 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, status,0, pclath, cstack
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2020 ;;      Params:         0       0       0       0       0
  2021 ;;      Locals:         0       0       0       0       0
  2022 ;;      Temps:          0       0       0       0       0
  2023 ;;      Totals:         0       0       0       0       0
  2024 ;;Total ram usage:        0 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    5
  2027 ;; This function calls:
  2028 ;;		_spiReceiveWait
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           
  2035                           ;psect for function _spiRead
  2036  0E6C                     _spiRead:	
  2037                           
  2038                           ;spi.c: 49: spiReceiveWait();
  2039                           
  2040                           ;incstack = 0
  2041                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2042  0E6C  120A  118A  27FA   	fcall	_spiReceiveWait
  2043                           
  2044                           ;spi.c: 50: return(SSPBUF);
  2045  0E6F  1283               	bcf	3,5	;RP0=0, select bank0
  2046  0E70  1303               	bcf	3,6	;RP1=0, select bank0
  2047  0E71  0813               	movf	19,w	;volatile
  2048  0E72  0008               	return
  2049  0E73                     __end_of_spiRead:	
  2050                           
  2051                           	psect	text6
  2052  07FA                     __ptext6:	
  2053 ;; *************** function _spiReceiveWait *****************
  2054 ;; Defined at:
  2055 ;;		line 29 in file "spi.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		None
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2069 ;;      Params:         0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0
  2072 ;;      Totals:         0       0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    4
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_spiRead
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _spiReceiveWait
  2085  07FA                     _spiReceiveWait:	
  2086  07FA                     l407:	
  2087                           ;spi.c: 31: while ( !SSPSTATbits.BF );
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _spiReceiveWait: []
  2091                           
  2092  07FA  1683               	bsf	3,5	;RP0=1, select bank1
  2093  07FB  1303               	bcf	3,6	;RP1=0, select bank1
  2094  07FC  1814               	btfsc	20,0	;volatile
  2095  07FD  0008               	return
  2096  07FE  2FFA               	goto	l407
  2097  07FF                     __end_of_spiReceiveWait:	
  2098                           
  2099                           	psect	text7
  2100  0EBC                     __ptext7:	
  2101 ;; *************** function _spiInit *****************
  2102 ;; Defined at:
  2103 ;;		line 12 in file "spi.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;  sType           1    wreg     enum E1233
  2106 ;;  sDataSample     1    0[BANK1 ] enum E1241
  2107 ;;  sClockIdle      1    1[BANK1 ] enum E1245
  2108 ;;  sTransmitEdg    1    2[BANK1 ] enum E1249
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  sType           1    3[BANK1 ] enum E1233
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, status,2, status,0
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2120 ;;      Params:         0       0       3       0       0
  2121 ;;      Locals:         0       0       1       0       0
  2122 ;;      Temps:          0       0       0       0       0
  2123 ;;      Totals:         0       0       4       0       0
  2124 ;;Total ram usage:        4 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    4
  2127 ;; This function calls:
  2128 ;;		Nothing
  2129 ;; This function is called by:
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           
  2135                           ;psect for function _spiInit
  2136  0EBC                     _spiInit:	
  2137                           
  2138                           ;incstack = 0
  2139                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2140                           ;spiInit@sType stored from wreg
  2141  0EBC  1683               	bsf	3,5	;RP0=1, select bank1
  2142  0EBD  1303               	bcf	3,6	;RP1=0, select bank1
  2143  0EBE  00A3               	movwf	spiInit@sType^(0+128)
  2144                           
  2145                           ;spi.c: 14: TRISC5 = 0;
  2146  0EBF  1287               	bcf	7,5	;volatile
  2147                           
  2148                           ;spi.c: 15: if(sType & 0b00000100)
  2149  0EC0  1D23               	btfss	spiInit@sType^(0+128),2
  2150  0EC1  2EC6               	goto	l2371
  2151                           
  2152                           ;spi.c: 16: {;spi.c: 17: SSPSTAT = sTransmitEdge;
  2153  0EC2  0822               	movf	spiInit@sTransmitEdge^(0+128),w
  2154  0EC3  0094               	movwf	20	;volatile
  2155                           
  2156                           ;spi.c: 18: TRISC3 = 1;
  2157  0EC4  1587               	bsf	7,3	;volatile
  2158                           
  2159                           ;spi.c: 19: }
  2160  0EC5  2ECA               	goto	l403
  2161  0EC6                     l2371:	
  2162                           
  2163                           ;spi.c: 20: else;spi.c: 21: {;spi.c: 22: SSPSTAT = sDataSample | sTransmitEdge;
  2164  0EC6  0820               	movf	spiInit@sDataSample^(0+128),w
  2165  0EC7  0422               	iorwf	spiInit@sTransmitEdge^(0+128),w
  2166  0EC8  0094               	movwf	20	;volatile
  2167                           
  2168                           ;spi.c: 23: TRISC3 = 0;
  2169  0EC9  1187               	bcf	7,3	;volatile
  2170  0ECA                     l403:	
  2171                           
  2172                           ;spi.c: 24: };spi.c: 26: SSPCON = sType | sClockIdle;
  2173  0ECA  0823               	movf	spiInit@sType^(0+128),w
  2174  0ECB  0421               	iorwf	spiInit@sClockIdle^(0+128),w
  2175  0ECC  1283               	bcf	3,5	;RP0=0, select bank0
  2176  0ECD  1303               	bcf	3,6	;RP1=0, select bank0
  2177  0ECE  0094               	movwf	20	;volatile
  2178  0ECF  0008               	return
  2179  0ED0                     __end_of_spiInit:	
  2180                           
  2181                           	psect	text8
  2182  0E8B                     __ptext8:	
  2183 ;; *************** function _spiDataReady *****************
  2184 ;; Defined at:
  2185 ;;		line 39 in file "spi.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  2    0[BANK1 ] unsigned int 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       0       2       0       0
  2200 ;;      Locals:         0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       0       2       0       0
  2203 ;;Total ram usage:        2 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    4
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _spiDataReady
  2215  0E8B                     _spiDataReady:	
  2216                           
  2217                           ;spi.c: 41: if(SSPSTATbits.BF)
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _spiDataReady: [wreg+status,2]
  2221  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  2222  0E8C  1303               	bcf	3,6	;RP1=0, select bank1
  2223  0E8D  1C14               	btfss	20,0	;volatile
  2224  0E8E  2E94               	goto	l2383
  2225                           
  2226                           ;spi.c: 42: return 1;
  2227  0E8F  3001               	movlw	1
  2228  0E90  00A0               	movwf	?_spiDataReady^(0+128)
  2229  0E91  3000               	movlw	0
  2230  0E92  00A1               	movwf	(?_spiDataReady^(0+128)+1)
  2231  0E93  0008               	return
  2232  0E94                     l2383:	
  2233                           
  2234                           ;spi.c: 43: else;spi.c: 44: return 0;
  2235  0E94  01A0               	clrf	?_spiDataReady^(0+128)
  2236  0E95  01A1               	clrf	(?_spiDataReady+1)^(0+128)
  2237  0E96  0008               	return
  2238  0E97                     __end_of_spiDataReady:	
  2239                           
  2240                           	psect	text9
  2241  0ED0                     __ptext9:	
  2242 ;; *************** function _serial_init *****************
  2243 ;; Defined at:
  2244 ;;		line 29 in file "serial.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2258 ;;      Params:         0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0
  2261 ;;      Totals:         0       0       0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    4
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           
  2273                           ;psect for function _serial_init
  2274  0ED0                     _serial_init:	
  2275                           
  2276                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  2277                           
  2278                           ;incstack = 0
  2279                           ; Regs used in _serial_init: [wreg]
  2280  0ED0  3040               	movlw	64
  2281  0ED1  1683               	bsf	3,5	;RP0=1, select bank1
  2282  0ED2  1303               	bcf	3,6	;RP1=0, select bank1
  2283  0ED3  0099               	movwf	25	;volatile
  2284                           
  2285                           ;serial.c: 66: BRGH=1;
  2286  0ED4  1518               	bsf	24,2	;volatile
  2287                           
  2288                           ;serial.c: 67: SYNC=0;
  2289  0ED5  1218               	bcf	24,4	;volatile
  2290                           
  2291                           ;serial.c: 68: SPEN=1;
  2292  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  2293  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  2294  0ED8  1798               	bsf	24,7	;volatile
  2295                           
  2296                           ;serial.c: 69: CREN=1;
  2297  0ED9  1618               	bsf	24,4	;volatile
  2298                           
  2299                           ;serial.c: 70: SREN=0;
  2300  0EDA  1298               	bcf	24,5	;volatile
  2301                           
  2302                           ;serial.c: 71: TXIE=0;
  2303  0EDB  1683               	bsf	3,5	;RP0=1, select bank1
  2304  0EDC  1303               	bcf	3,6	;RP1=0, select bank1
  2305  0EDD  120C               	bcf	12,4	;volatile
  2306                           
  2307                           ;serial.c: 72: RCIE=0;
  2308  0EDE  128C               	bcf	12,5	;volatile
  2309                           
  2310                           ;serial.c: 73: TX9=0;
  2311  0EDF  1318               	bcf	24,6	;volatile
  2312                           
  2313                           ;serial.c: 74: RX9=0;
  2314  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0EE2  1318               	bcf	24,6	;volatile
  2317                           
  2318                           ;serial.c: 75: TXEN=0;
  2319  0EE3  1683               	bsf	3,5	;RP0=1, select bank1
  2320  0EE4  1303               	bcf	3,6	;RP1=0, select bank1
  2321  0EE5  1298               	bcf	24,5	;volatile
  2322                           
  2323                           ;serial.c: 76: TXEN=1;
  2324  0EE6  1698               	bsf	24,5	;volatile
  2325  0EE7  0008               	return
  2326  0EE8                     __end_of_serial_init:	
  2327                           
  2328                           	psect	text10
  2329  0F04                     __ptext10:	
  2330 ;; *************** function _pwm_init *****************
  2331 ;; Defined at:
  2332 ;;		line 25 in file "pwm.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;		None
  2337 ;; Return value:  Size  Location     Type
  2338 ;;                  1    wreg      void 
  2339 ;; Registers used:
  2340 ;;		wreg, status,2, status,0
  2341 ;; Tracked objects:
  2342 ;;		On entry : 0/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: 0/0
  2345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2346 ;;      Params:         0       0       0       0       0
  2347 ;;      Locals:         0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0
  2349 ;;      Totals:         0       0       0       0       0
  2350 ;;Total ram usage:        0 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:    4
  2353 ;; This function calls:
  2354 ;;		Nothing
  2355 ;; This function is called by:
  2356 ;;		_main
  2357 ;; This function uses a non-reentrant model
  2358 ;;
  2359                           
  2360                           
  2361                           ;psect for function _pwm_init
  2362  0F04                     _pwm_init:	
  2363                           
  2364                           ;pwm.c: 28: TRISC1 = 1;
  2365                           
  2366                           ;incstack = 0
  2367                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2368  0F04  1683               	bsf	3,5	;RP0=1, select bank1
  2369  0F05  1303               	bcf	3,6	;RP1=0, select bank1
  2370  0F06  1487               	bsf	7,1	;volatile
  2371                           
  2372                           ;pwm.c: 29: TRISC2 = 1;
  2373  0F07  1507               	bsf	7,2	;volatile
  2374                           
  2375                           ;pwm.c: 32: PR2 = 0xFF;
  2376  0F08  30FF               	movlw	255
  2377  0F09  0092               	movwf	18	;volatile
  2378                           
  2379                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  2380  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0F0C  0817               	movf	23,w	;volatile
  2383  0F0D  39F0               	andlw	-16
  2384  0F0E  380C               	iorlw	12
  2385  0F0F  0097               	movwf	23	;volatile
  2386                           
  2387                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  2388  0F10  081D               	movf	29,w	;volatile
  2389  0F11  39F0               	andlw	-16
  2390  0F12  380C               	iorlw	12
  2391  0F13  009D               	movwf	29	;volatile
  2392                           
  2393                           ;pwm.c: 39: CCPR1L = 0;
  2394  0F14  0195               	clrf	21	;volatile
  2395                           
  2396                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  2397  0F15  30CF               	movlw	-49
  2398  0F16  0597               	andwf	23,f	;volatile
  2399                           
  2400                           ;pwm.c: 41: CCPR2L = 0;
  2401  0F17  019B               	clrf	27	;volatile
  2402                           
  2403                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  2404  0F18  108C               	bcf	12,1	;volatile
  2405                           
  2406                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  2407  0F19  30FC               	movlw	-4
  2408  0F1A  0592               	andwf	18,f	;volatile
  2409                           
  2410                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  2411  0F1B  1512               	bsf	18,2	;volatile
  2412  0F1C                     l170:	
  2413                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  2414                           
  2415  0F1C  1C8C               	btfss	12,1	;volatile
  2416  0F1D  2F1C               	goto	l170
  2417                           
  2418                           ;pwm.c: 53: TRISC1 = 0;
  2419  0F1E  1683               	bsf	3,5	;RP0=1, select bank1
  2420  0F1F  1303               	bcf	3,6	;RP1=0, select bank1
  2421  0F20  1087               	bcf	7,1	;volatile
  2422                           
  2423                           ;pwm.c: 54: TRISC2 = 0;
  2424  0F21  1107               	bcf	7,2	;volatile
  2425                           
  2426                           ;pwm.c: 59: ANS4 = 0;
  2427  0F22  1683               	bsf	3,5	;RP0=1, select bank3
  2428  0F23  1703               	bsf	3,6	;RP1=1, select bank3
  2429  0F24  1208               	bcf	8,4	;volatile
  2430                           
  2431                           ;pwm.c: 60: TRISA5 = 0;
  2432  0F25  1683               	bsf	3,5	;RP0=1, select bank1
  2433  0F26  1303               	bcf	3,6	;RP1=0, select bank1
  2434  0F27  1285               	bcf	5,5	;volatile
  2435                           
  2436                           ;pwm.c: 61: TRISA6 = 0;
  2437  0F28  1305               	bcf	5,6	;volatile
  2438                           
  2439                           ;pwm.c: 62: RA5 = 0;
  2440  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  2441  0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  2442  0F2B  1285               	bcf	5,5	;volatile
  2443                           
  2444                           ;pwm.c: 63: RA6 = 0;
  2445  0F2C  1305               	bcf	5,6	;volatile
  2446  0F2D  0008               	return
  2447  0F2E                     __end_of_pwm_init:	
  2448                           
  2449                           	psect	text11
  2450  0FCA                     __ptext11:	
  2451 ;; *************** function _putst *****************
  2452 ;; Defined at:
  2453 ;;		line 211 in file "serial.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  str             1    wreg     PTR const unsigned char 
  2456 ;;		 -> main@sVar_387(10), main@sVar(10), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  str             1    3[BANK1 ] PTR const unsigned char 
  2459 ;;		 -> main@sVar_387(10), main@sVar(10), 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2469 ;;      Params:         0       0       0       0       0
  2470 ;;      Locals:         0       0       1       0       0
  2471 ;;      Temps:          0       0       1       0       0
  2472 ;;      Totals:         0       0       2       0       0
  2473 ;;Total ram usage:        2 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    5
  2476 ;; This function calls:
  2477 ;;		_putch
  2478 ;; This function is called by:
  2479 ;;		_main
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _putst
  2485  0FCA                     _putst:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2489                           ;putst@str stored from wreg
  2490  0FCA  1683               	bsf	3,5	;RP0=1, select bank1
  2491  0FCB  1303               	bcf	3,6	;RP1=0, select bank1
  2492  0FCC  00A3               	movwf	putst@str^(0+128)
  2493  0FCD                     l2301:	
  2494                           ;serial.c: 212: while((*str)!=0) {
  2495                           
  2496  0FCD  0823               	movf	putst@str^(0+128),w
  2497  0FCE  0084               	movwf	4
  2498  0FCF  1383               	bcf	3,7	;select IRP bank0
  2499  0FD0  0800               	movf	0,w
  2500  0FD1  1903               	btfsc	3,2
  2501  0FD2  0008               	return
  2502                           
  2503                           ;serial.c: 213: putch(*str);
  2504  0FD3  0823               	movf	putst@str^(0+128),w
  2505  0FD4  0084               	movwf	4
  2506  0FD5  0800               	movf	0,w
  2507  0FD6  120A  158A  2762  120A  158A  	fcall	_putch
  2508                           
  2509                           ;serial.c: 214: if (*str==13) putch(10);
  2510  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  2511  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  2512  0FDD  0823               	movf	putst@str^(0+128),w
  2513  0FDE  0084               	movwf	4
  2514  0FDF  300D               	movlw	13
  2515  0FE0  1383               	bcf	3,7	;select IRP bank0
  2516  0FE1  0600               	xorwf	0,w
  2517  0FE2  1D03               	btfss	3,2
  2518  0FE3  2FEA               	goto	l2295
  2519  0FE4  300A               	movlw	10
  2520  0FE5  120A  158A  2762  120A  158A  	fcall	_putch
  2521  0FEA                     l2295:	
  2522                           
  2523                           ;serial.c: 215: if (*str==10) putch(13);
  2524  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  2525  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  2526  0FEC  0823               	movf	putst@str^(0+128),w
  2527  0FED  0084               	movwf	4
  2528  0FEE  300A               	movlw	10
  2529  0FEF  1383               	bcf	3,7	;select IRP bank0
  2530  0FF0  0600               	xorwf	0,w
  2531  0FF1  1D03               	btfss	3,2
  2532  0FF2  2FF9               	goto	l2299
  2533  0FF3  300D               	movlw	13
  2534  0FF4  120A  158A  2762  120A  158A  	fcall	_putch
  2535  0FF9                     l2299:	
  2536                           
  2537                           ;serial.c: 216: str++;
  2538  0FF9  3001               	movlw	1
  2539  0FFA  1683               	bsf	3,5	;RP0=1, select bank1
  2540  0FFB  1303               	bcf	3,6	;RP1=0, select bank1
  2541  0FFC  00A2               	movwf	??_putst^(0+128)
  2542  0FFD  0822               	movf	??_putst^(0+128),w
  2543  0FFE  07A3               	addwf	putst@str^(0+128),f
  2544  0FFF  2FCD               	goto	l2301
  2545  1000                     __end_of_putst:	
  2546                           
  2547                           	psect	text12
  2548  0F62                     __ptext12:	
  2549 ;; *************** function _putch *****************
  2550 ;; Defined at:
  2551 ;;		line 95 in file "serial.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  c               1    wreg     unsigned char 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  c               1    1[BANK1 ] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2565 ;;      Params:         0       0       0       0       0
  2566 ;;      Locals:         0       0       1       0       0
  2567 ;;      Temps:          0       0       1       0       0
  2568 ;;      Totals:         0       0       2       0       0
  2569 ;;Total ram usage:        2 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    4
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		_putst
  2576 ;;		_putchhex
  2577 ;;		_putchdec
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           
  2582                           ;psect for function _putch
  2583  0F62                     _putch:	
  2584                           
  2585                           ;incstack = 0
  2586                           ; Regs used in _putch: [wreg]
  2587                           ;putch@c stored from wreg
  2588  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  2589  0F63  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0F64  00A1               	movwf	putch@c^(0+128)
  2591  0F65                     l2051:	
  2592                           ;serial.c: 96: while(!TXIF) {
  2593                           
  2594  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  2596  0F67  1A0C               	btfsc	12,4	;volatile
  2597  0F68  2F83               	goto	l2053
  2598                           
  2599                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  2600  0F69  1C98               	btfss	24,1	;volatile
  2601  0F6A  2F73               	goto	l82
  2602  0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  2603  0F6C  1303               	bcf	3,6	;RP1=0, select bank1
  2604  0F6D  1298               	bcf	24,5	;volatile
  2605  0F6E  1698               	bsf	24,5	;volatile
  2606  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  2607  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0F71  1218               	bcf	24,4	;volatile
  2609  0F72  1618               	bsf	24,4	;volatile
  2610  0F73                     l82:	
  2611  0F73  1D18               	btfss	24,2	;volatile
  2612  0F74  2F81               	goto	l83
  2613  0F75  081A               	movf	26,w	;volatile
  2614  0F76  1683               	bsf	3,5	;RP0=1, select bank1
  2615  0F77  1303               	bcf	3,6	;RP1=0, select bank1
  2616  0F78  00A0               	movwf	??_putch^(0+128)
  2617  0F79  0820               	movf	??_putch^(0+128),w
  2618  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  2619  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  2620  0F7C  00EC               	movwf	_dummy
  2621  0F7D  1683               	bsf	3,5	;RP0=1, select bank1
  2622  0F7E  1303               	bcf	3,6	;RP1=0, select bank1
  2623  0F7F  1298               	bcf	24,5	;volatile
  2624  0F80  1698               	bsf	24,5	;volatile
  2625  0F81                     l83:	
  2626  0F81  0064               	clrwdt	;# 
  2627  0F82  2F65               	goto	l2051
  2628  0F83                     l2053:	
  2629                           
  2630                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  2631  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  2632  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  2633  0F85  0821               	movf	putch@c^(0+128),w
  2634  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  2635  0F87  1303               	bcf	3,6	;RP1=0, select bank0
  2636  0F88  0099               	movwf	25	;volatile
  2637                           
  2638                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  2639  0F89  303C               	movlw	60
  2640  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  2641  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  2642  0F8C  00A0               	movwf	??_putch^(0+128)
  2643  0F8D  0820               	movf	??_putch^(0+128),w
  2644  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  2645  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
  2646  0F90  00ED               	movwf	_delayus_variable
  2647  0F91  0000               	nop	;# 
  2648  0F92  0000               	nop	;# 
  2649  0F93  0BED               	decfsz	_delayus_variable,f	;# 
  2650  0F94  2F5F               	goto	($+-3)	;# 
  2651  0F95  0008               	return
  2652  0F96                     __end_of_putch:	
  2653                           
  2654                           	psect	text13
  2655  0F2E                     __ptext13:	
  2656 ;; *************** function _motor_reset *****************
  2657 ;; Defined at:
  2658 ;;		line 157 in file "main.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2672 ;;      Params:         0       0       0       0       0
  2673 ;;      Locals:         0       0       0       0       0
  2674 ;;      Temps:          0       0       0       0       0
  2675 ;;      Totals:         0       0       0       0       0
  2676 ;;Total ram usage:        0 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    6
  2679 ;; This function calls:
  2680 ;;		_SetPoint
  2681 ;;		_pwm_set
  2682 ;;		_resetCounter
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _motor_reset
  2690  0F2E                     _motor_reset:	
  2691                           
  2692                           ;main.c: 158: pwm_set(1, 0);
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2696  0F2E  3001               	movlw	1
  2697  0F2F  1683               	bsf	3,5	;RP0=1, select bank1
  2698  0F30  1303               	bcf	3,6	;RP1=0, select bank1
  2699  0F31  00BC               	movwf	pwm_set@channel^(0+128)
  2700  0F32  3000               	movlw	0
  2701  0F33  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  2702  0F34  3000               	movlw	0
  2703  0F35  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2704  0F36  3000               	movlw	0
  2705  0F37  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2706  0F38  3000               	movlw	0
  2707  0F39  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2708  0F3A  3000               	movlw	0
  2709  0F3B  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2710  0F3C  120A  118A  2548  120A  158A  	fcall	_pwm_set
  2711                           
  2712                           ;main.c: 159: pwm_set(2, 0);
  2713  0F41  3002               	movlw	2
  2714  0F42  1683               	bsf	3,5	;RP0=1, select bank1
  2715  0F43  1303               	bcf	3,6	;RP1=0, select bank1
  2716  0F44  00BC               	movwf	pwm_set@channel^(0+128)
  2717  0F45  3000               	movlw	0
  2718  0F46  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  2719  0F47  3000               	movlw	0
  2720  0F48  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2721  0F49  3000               	movlw	0
  2722  0F4A  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2723  0F4B  3000               	movlw	0
  2724  0F4C  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2725  0F4D  3000               	movlw	0
  2726  0F4E  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2727  0F4F  120A  118A  2548  120A  158A  	fcall	_pwm_set
  2728                           
  2729                           ;main.c: 160: resetCounter();
  2730  0F54  120A  158A  26A9  120A  158A  	fcall	_resetCounter
  2731                           
  2732                           ;main.c: 161: SetPoint(0);
  2733  0F59  3000               	movlw	0
  2734  0F5A  1683               	bsf	3,5	;RP0=1, select bank1
  2735  0F5B  1303               	bcf	3,6	;RP1=0, select bank1
  2736  0F5C  00A0               	movwf	SetPoint@new_val^(0+128)
  2737  0F5D  00A1               	movwf	(SetPoint@new_val+1)^(0+128)
  2738  0F5E  120A  158A  2697   	fcall	_SetPoint
  2739  0F61  0008               	return
  2740  0F62                     __end_of_motor_reset:	
  2741                           
  2742                           	psect	text14
  2743  0EA9                     __ptext14:	
  2744 ;; *************** function _resetCounter *****************
  2745 ;; Defined at:
  2746 ;;		line 152 in file "main.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2760 ;;      Params:         0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    4
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_motor_reset
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _resetCounter
  2777  0EA9                     _resetCounter:	
  2778                           
  2779                           ;main.c: 153: encoder1_counter = 0;
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _resetCounter: [wreg]
  2783  0EA9  3000               	movlw	0
  2784  0EAA  1283               	bcf	3,5	;RP0=0, select bank0
  2785  0EAB  1303               	bcf	3,6	;RP1=0, select bank0
  2786  0EAC  00E2               	movwf	_encoder1_counter+3	;volatile
  2787  0EAD  3000               	movlw	0
  2788  0EAE  00E1               	movwf	_encoder1_counter+2	;volatile
  2789  0EAF  3000               	movlw	0
  2790  0EB0  00E0               	movwf	_encoder1_counter+1	;volatile
  2791  0EB1  3000               	movlw	0
  2792  0EB2  00DF               	movwf	_encoder1_counter	;volatile
  2793                           
  2794                           ;main.c: 154: motor_pos = 0;
  2795  0EB3  3000               	movlw	0
  2796  0EB4  00DE               	movwf	_motor_pos+3	;volatile
  2797  0EB5  3000               	movlw	0
  2798  0EB6  00DD               	movwf	_motor_pos+2	;volatile
  2799  0EB7  3000               	movlw	0
  2800  0EB8  00DC               	movwf	_motor_pos+1	;volatile
  2801  0EB9  3000               	movlw	0
  2802  0EBA  00DB               	movwf	_motor_pos	;volatile
  2803  0EBB  0008               	return
  2804  0EBC                     __end_of_resetCounter:	
  2805                           
  2806                           	psect	text15
  2807  0548                     __ptext15:	
  2808 ;; *************** function _pwm_set *****************
  2809 ;; Defined at:
  2810 ;;		line 72 in file "pwm.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  channel         2   28[BANK1 ] int 
  2813 ;;  duty_cycle      4   30[BANK1 ] long 
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;		None
  2816 ;; Return value:  Size  Location     Type
  2817 ;;                  1    wreg      void 
  2818 ;; Registers used:
  2819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2820 ;; Tracked objects:
  2821 ;;		On entry : 0/0
  2822 ;;		On exit  : 0/0
  2823 ;;		Unchanged: 0/0
  2824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2825 ;;      Params:         0       0       6       0       0
  2826 ;;      Locals:         0       0       0       0       0
  2827 ;;      Temps:          0       0       4       0       0
  2828 ;;      Totals:         0       0      10       0       0
  2829 ;;Total ram usage:       10 bytes
  2830 ;; Hardware stack levels used:    1
  2831 ;; Hardware stack levels required when called:    5
  2832 ;; This function calls:
  2833 ;;		___aldiv
  2834 ;;		___lmul
  2835 ;; This function is called by:
  2836 ;;		_motor_reset
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _pwm_set
  2843  0548                     _pwm_set:	
  2844                           
  2845                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2849  0548  1683               	bsf	3,5	;RP0=1, select bank1
  2850  0549  1303               	bcf	3,6	;RP1=0, select bank1
  2851  054A  1BC1               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2852  054B  0008               	return
  2853  054C  1BC1               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2854  054D  2D5E               	goto	l2059
  2855  054E  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2856  054F  1D03               	btfss	3,2
  2857  0550  0008               	return
  2858  0551  0840               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2859  0552  1D03               	btfss	3,2
  2860  0553  0008               	return
  2861  0554  3001               	movlw	1
  2862  0555  023F               	subwf	(pwm_set@duty_cycle+1)^(0+128),w
  2863  0556  1D03               	skipz
  2864  0557  2D5C               	goto	u1663
  2865  0558  3000               	movlw	0
  2866  0559  023E               	subwf	pwm_set@duty_cycle^(0+128),w
  2867  055A  1D03               	skipz
  2868  055B  2D5C               	goto	u1663
  2869  055C                     u1663:	
  2870  055C  1803               	btfsc	3,0
  2871  055D  0008               	return
  2872  055E                     l2059:	
  2873                           
  2874                           ;pwm.c: 77: if (duty_cycle !=0){
  2875  055E  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2876  055F  0440               	iorwf	(pwm_set@duty_cycle+2)^(0+128),w
  2877  0560  043F               	iorwf	(pwm_set@duty_cycle+1)^(0+128),w
  2878  0561  043E               	iorwf	pwm_set@duty_cycle^(0+128),w
  2879  0562  1903               	skipnz
  2880  0563  2DBF               	goto	l2069
  2881                           
  2882                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  2883  0564  3020               	movlw	32
  2884  0565  00C2               	movwf	??_pwm_set^(0+128)
  2885  0566  3000               	movlw	0
  2886  0567  00C3               	movwf	(??_pwm_set^(0+128)+1)
  2887  0568  3000               	movlw	0
  2888  0569  00C4               	movwf	(??_pwm_set^(0+128)+2)
  2889  056A  3000               	movlw	0
  2890  056B  00C5               	movwf	(??_pwm_set^(0+128)+3)
  2891  056C  3000               	movlw	0
  2892  056D  00B0               	movwf	(___aldiv@divisor+3)^(0+128)
  2893  056E  3000               	movlw	0
  2894  056F  00AF               	movwf	(___aldiv@divisor+2)^(0+128)
  2895  0570  3000               	movlw	0
  2896  0571  00AE               	movwf	(___aldiv@divisor+1)^(0+128)
  2897  0572  30FF               	movlw	255
  2898  0573  00AD               	movwf	___aldiv@divisor^(0+128)
  2899  0574  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2900  0575  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  2901  0576  0840               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2902  0577  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  2903  0578  083F               	movf	(pwm_set@duty_cycle+1)^(0+128),w
  2904  0579  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  2905  057A  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2906  057B  00A0               	movwf	___lmul@multiplier^(0+128)
  2907  057C  3000               	movlw	0
  2908  057D  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  2909  057E  3000               	movlw	0
  2910  057F  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  2911  0580  3000               	movlw	0
  2912  0581  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  2913  0582  30DF               	movlw	223
  2914  0583  00A4               	movwf	___lmul@multiplicand^(0+128)
  2915  0584  120A  118A  26A7  120A  118A  	fcall	___lmul
  2916  0589  1683               	bsf	3,5	;RP0=1, select bank1
  2917  058A  1303               	bcf	3,6	;RP1=0, select bank1
  2918  058B  0823               	movf	(?___lmul+3)^(0+128),w
  2919  058C  00B4               	movwf	(___aldiv@dividend+3)^(0+128)
  2920  058D  0822               	movf	(?___lmul+2)^(0+128),w
  2921  058E  00B3               	movwf	(___aldiv@dividend+2)^(0+128)
  2922  058F  0821               	movf	(?___lmul+1)^(0+128),w
  2923  0590  00B2               	movwf	(___aldiv@dividend+1)^(0+128)
  2924  0591  0820               	movf	?___lmul^(0+128),w
  2925  0592  00B1               	movwf	___aldiv@dividend^(0+128)
  2926  0593  120A  118A  242A  120A  118A  	fcall	___aldiv
  2927  0598  1683               	bsf	3,5	;RP0=1, select bank1
  2928  0599  1303               	bcf	3,6	;RP1=0, select bank1
  2929  059A  082D               	movf	?___aldiv^(0+128),w
  2930  059B  07C2               	addwf	??_pwm_set^(0+128),f
  2931  059C  082E               	movf	(?___aldiv+1)^(0+128),w
  2932  059D  1803               	skipnc
  2933  059E  0F2E               	incfsz	(?___aldiv+1)^(0+128),w
  2934  059F  2DA1               	goto	u1680
  2935  05A0  2DA2               	goto	u1681
  2936  05A1                     u1680:	
  2937  05A1  07C3               	addwf	(??_pwm_set^(0+128)+1),f
  2938  05A2                     u1681:	
  2939  05A2  082F               	movf	(?___aldiv+2)^(0+128),w
  2940  05A3  1803               	skipnc
  2941  05A4  0F2F               	incfsz	(?___aldiv+2)^(0+128),w
  2942  05A5  2DA7               	goto	u1682
  2943  05A6  2DA8               	goto	u1683
  2944  05A7                     u1682:	
  2945  05A7  07C4               	addwf	(??_pwm_set^(0+128)+2),f
  2946  05A8                     u1683:	
  2947  05A8  0830               	movf	(?___aldiv+3)^(0+128),w
  2948  05A9  1803               	skipnc
  2949  05AA  0A30               	incf	(?___aldiv+3)^(0+128),w
  2950  05AB  07C5               	addwf	(??_pwm_set^(0+128)+3),f
  2951  05AC  0845               	movf	(??_pwm_set+3)^(0+128),w
  2952  05AD  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2953  05AE  0844               	movf	(??_pwm_set+2)^(0+128),w
  2954  05AF  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2955  05B0  0843               	movf	(??_pwm_set+1)^(0+128),w
  2956  05B1  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2957  05B2  0842               	movf	??_pwm_set^(0+128),w
  2958  05B3  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2959  05B4  2DBF               	goto	l2069
  2960  05B5                     l2063:	
  2961                           
  2962                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2963  05B5  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2964  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2965  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2966  05B8  0095               	movwf	21	;volatile
  2967                           
  2968                           ;pwm.c: 83: break;
  2969  05B9  0008               	return
  2970  05BA                     l2065:	
  2971                           
  2972                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2973  05BA  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2974  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  2975  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  2976  05BD  009B               	movwf	27	;volatile
  2977                           
  2978                           ;pwm.c: 86: break;
  2979  05BE  0008               	return
  2980  05BF                     l2069:	
  2981                           
  2982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2983                           ; Switch size 1, requested type "simple"
  2984                           ; Number of cases is 1, Range of values is 0 to 0
  2985                           ; switch strategies available:
  2986                           ; Name         Instructions Cycles
  2987                           ; simple_byte            4     3 (average)
  2988                           ; direct_byte           11     8 (fixed)
  2989                           ; jumptable            260     6 (fixed)
  2990                           ;	Chosen strategy is simple_byte
  2991  05BF  083D               	movf	(pwm_set@channel+1)^(0+128),w
  2992  05C0  3A00               	xorlw	0	; case 0
  2993  05C1  1903               	skipnz
  2994  05C2  2DC4               	goto	l2795
  2995  05C3  2DCC               	goto	l182
  2996  05C4                     l2795:	
  2997                           
  2998                           ; Switch size 1, requested type "simple"
  2999                           ; Number of cases is 2, Range of values is 1 to 2
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte            7     4 (average)
  3003                           ; direct_byte           17    11 (fixed)
  3004                           ; jumptable            263     9 (fixed)
  3005                           ;	Chosen strategy is simple_byte
  3006  05C4  083C               	movf	pwm_set@channel^(0+128),w
  3007  05C5  3A01               	xorlw	1	; case 1
  3008  05C6  1903               	skipnz
  3009  05C7  2DB5               	goto	l2063
  3010  05C8  3A03               	xorlw	3	; case 2
  3011  05C9  1903               	skipnz
  3012  05CA  2DBA               	goto	l2065
  3013  05CB  2DCC               	goto	l182
  3014  05CC                     l182:	
  3015  05CC  0008               	return
  3016  05CD                     __end_of_pwm_set:	
  3017                           
  3018                           	psect	text16
  3019  06A7                     __ptext16:	
  3020 ;; *************** function ___lmul *****************
  3021 ;; Defined at:
  3022 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  multiplier      4    0[BANK1 ] unsigned long 
  3025 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  product         4    9[BANK1 ] unsigned long 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  4    0[BANK1 ] unsigned long 
  3030 ;; Registers used:
  3031 ;;		wreg, status,2, status,0
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3037 ;;      Params:         0       0       8       0       0
  3038 ;;      Locals:         0       0       4       0       0
  3039 ;;      Temps:          0       0       1       0       0
  3040 ;;      Totals:         0       0      13       0       0
  3041 ;;Total ram usage:       13 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    4
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_pwm_set
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           
  3052                           ;psect for function ___lmul
  3053  06A7                     ___lmul:	
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3057  06A7  3000               	movlw	0
  3058  06A8  1683               	bsf	3,5	;RP0=1, select bank1
  3059  06A9  1303               	bcf	3,6	;RP1=0, select bank1
  3060  06AA  00AC               	movwf	(___lmul@product+3)^(0+128)
  3061  06AB  3000               	movlw	0
  3062  06AC  00AB               	movwf	(___lmul@product+2)^(0+128)
  3063  06AD  3000               	movlw	0
  3064  06AE  00AA               	movwf	(___lmul@product+1)^(0+128)
  3065  06AF  3000               	movlw	0
  3066  06B0  00A9               	movwf	___lmul@product^(0+128)
  3067  06B1                     l1935:	
  3068  06B1  1C20               	btfss	___lmul@multiplier^(0+128),0
  3069  06B2  2EC7               	goto	l1939
  3070  06B3  0824               	movf	___lmul@multiplicand^(0+128),w
  3071  06B4  07A9               	addwf	___lmul@product^(0+128),f
  3072  06B5  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  3073  06B6  1103               	clrz
  3074  06B7  1803               	skipnc
  3075  06B8  3E01               	addlw	1
  3076  06B9  1D03               	btfss	3,2
  3077  06BA  07AA               	addwf	(___lmul@product+1)^(0+128),f
  3078  06BB  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  3079  06BC  1103               	clrz
  3080  06BD  1803               	skipnc
  3081  06BE  3E01               	addlw	1
  3082  06BF  1D03               	btfss	3,2
  3083  06C0  07AB               	addwf	(___lmul@product+2)^(0+128),f
  3084  06C1  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  3085  06C2  1103               	clrz
  3086  06C3  1803               	skipnc
  3087  06C4  3E01               	addlw	1
  3088  06C5  1D03               	btfss	3,2
  3089  06C6  07AC               	addwf	(___lmul@product+3)^(0+128),f
  3090  06C7                     l1939:	
  3091  06C7  3001               	movlw	1
  3092  06C8  00A8               	movwf	??___lmul^(0+128)
  3093  06C9                     u1345:	
  3094  06C9  1003               	clrc
  3095  06CA  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  3096  06CB  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  3097  06CC  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  3098  06CD  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  3099  06CE  0BA8               	decfsz	??___lmul^(0+128),f
  3100  06CF  2EC9               	goto	u1345
  3101  06D0  3001               	movlw	1
  3102  06D1                     u1355:	
  3103  06D1  1003               	clrc
  3104  06D2  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  3105  06D3  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  3106  06D4  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  3107  06D5  0CA0               	rrf	___lmul@multiplier^(0+128),f
  3108  06D6  3EFF               	addlw	-1
  3109  06D7  1D03               	skipz
  3110  06D8  2ED1               	goto	u1355
  3111  06D9  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  3112  06DA  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  3113  06DB  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  3114  06DC  0420               	iorwf	___lmul@multiplier^(0+128),w
  3115  06DD  1D03               	skipz
  3116  06DE  2EB1               	goto	l1935
  3117  06DF  082C               	movf	(___lmul@product+3)^(0+128),w
  3118  06E0  00A3               	movwf	(?___lmul+3)^(0+128)
  3119  06E1  082B               	movf	(___lmul@product+2)^(0+128),w
  3120  06E2  00A2               	movwf	(?___lmul+2)^(0+128)
  3121  06E3  082A               	movf	(___lmul@product+1)^(0+128),w
  3122  06E4  00A1               	movwf	(?___lmul+1)^(0+128)
  3123  06E5  0829               	movf	___lmul@product^(0+128),w
  3124  06E6  00A0               	movwf	?___lmul^(0+128)
  3125  06E7  0008               	return
  3126  06E8                     __end_of___lmul:	
  3127                           
  3128                           	psect	text17
  3129  042A                     __ptext17:	
  3130 ;; *************** function ___aldiv *****************
  3131 ;; Defined at:
  3132 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  divisor         4   13[BANK1 ] long 
  3135 ;;  dividend        4   17[BANK1 ] long 
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;  quotient        4   24[BANK1 ] long 
  3138 ;;  sign            1   23[BANK1 ] unsigned char 
  3139 ;;  counter         1   22[BANK1 ] unsigned char 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  4   13[BANK1 ] long 
  3142 ;; Registers used:
  3143 ;;		wreg, status,2, status,0
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         0       0       8       0       0
  3150 ;;      Locals:         0       0       6       0       0
  3151 ;;      Temps:          0       0       1       0       0
  3152 ;;      Totals:         0       0      15       0       0
  3153 ;;Total ram usage:       15 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    4
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_pwm_set
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           
  3164                           ;psect for function ___aldiv
  3165  042A                     ___aldiv:	
  3166                           
  3167                           ;incstack = 0
  3168                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3169  042A  1683               	bsf	3,5	;RP0=1, select bank1
  3170  042B  1303               	bcf	3,6	;RP1=0, select bank1
  3171  042C  01B7               	clrf	___aldiv@sign^(0+128)
  3172  042D  1FB0               	btfss	(___aldiv@divisor+3)^(0+128),7
  3173  042E  2C3C               	goto	l600
  3174  042F  09AD               	comf	___aldiv@divisor^(0+128),f
  3175  0430  09AE               	comf	(___aldiv@divisor+1)^(0+128),f
  3176  0431  09AF               	comf	(___aldiv@divisor+2)^(0+128),f
  3177  0432  09B0               	comf	(___aldiv@divisor+3)^(0+128),f
  3178  0433  0AAD               	incf	___aldiv@divisor^(0+128),f
  3179  0434  1903               	skipnz
  3180  0435  0AAE               	incf	(___aldiv@divisor+1)^(0+128),f
  3181  0436  1903               	skipnz
  3182  0437  0AAF               	incf	(___aldiv@divisor+2)^(0+128),f
  3183  0438  1903               	skipnz
  3184  0439  0AB0               	incf	(___aldiv@divisor+3)^(0+128),f
  3185  043A  01B7               	clrf	___aldiv@sign^(0+128)
  3186  043B  0AB7               	incf	___aldiv@sign^(0+128),f
  3187  043C                     l600:	
  3188  043C  1FB4               	btfss	(___aldiv@dividend+3)^(0+128),7
  3189  043D  2C4D               	goto	l1957
  3190  043E  09B1               	comf	___aldiv@dividend^(0+128),f
  3191  043F  09B2               	comf	(___aldiv@dividend+1)^(0+128),f
  3192  0440  09B3               	comf	(___aldiv@dividend+2)^(0+128),f
  3193  0441  09B4               	comf	(___aldiv@dividend+3)^(0+128),f
  3194  0442  0AB1               	incf	___aldiv@dividend^(0+128),f
  3195  0443  1903               	skipnz
  3196  0444  0AB2               	incf	(___aldiv@dividend+1)^(0+128),f
  3197  0445  1903               	skipnz
  3198  0446  0AB3               	incf	(___aldiv@dividend+2)^(0+128),f
  3199  0447  1903               	skipnz
  3200  0448  0AB4               	incf	(___aldiv@dividend+3)^(0+128),f
  3201  0449  3001               	movlw	1
  3202  044A  00B5               	movwf	??___aldiv^(0+128)
  3203  044B  0835               	movf	??___aldiv^(0+128),w
  3204  044C  06B7               	xorwf	___aldiv@sign^(0+128),f
  3205  044D                     l1957:	
  3206  044D  3000               	movlw	0
  3207  044E  00BB               	movwf	(___aldiv@quotient+3)^(0+128)
  3208  044F  3000               	movlw	0
  3209  0450  00BA               	movwf	(___aldiv@quotient+2)^(0+128)
  3210  0451  3000               	movlw	0
  3211  0452  00B9               	movwf	(___aldiv@quotient+1)^(0+128)
  3212  0453  3000               	movlw	0
  3213  0454  00B8               	movwf	___aldiv@quotient^(0+128)
  3214  0455  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3215  0456  042F               	iorwf	(___aldiv@divisor+2)^(0+128),w
  3216  0457  042E               	iorwf	(___aldiv@divisor+1)^(0+128),w
  3217  0458  042D               	iorwf	___aldiv@divisor^(0+128),w
  3218  0459  1903               	skipnz
  3219  045A  2CA2               	goto	l1979
  3220  045B  01B6               	clrf	___aldiv@counter^(0+128)
  3221  045C  0AB6               	incf	___aldiv@counter^(0+128),f
  3222  045D                     l1965:	
  3223  045D  1BB0               	btfsc	(___aldiv@divisor+3)^(0+128),7
  3224  045E  2C6D               	goto	l1967
  3225  045F  3001               	movlw	1
  3226  0460  00B5               	movwf	??___aldiv^(0+128)
  3227  0461                     u1405:	
  3228  0461  1003               	clrc
  3229  0462  0DAD               	rlf	___aldiv@divisor^(0+128),f
  3230  0463  0DAE               	rlf	(___aldiv@divisor+1)^(0+128),f
  3231  0464  0DAF               	rlf	(___aldiv@divisor+2)^(0+128),f
  3232  0465  0DB0               	rlf	(___aldiv@divisor+3)^(0+128),f
  3233  0466  0BB5               	decfsz	??___aldiv^(0+128),f
  3234  0467  2C61               	goto	u1405
  3235  0468  3001               	movlw	1
  3236  0469  00B5               	movwf	??___aldiv^(0+128)
  3237  046A  0835               	movf	??___aldiv^(0+128),w
  3238  046B  07B6               	addwf	___aldiv@counter^(0+128),f
  3239  046C  2C5D               	goto	l1965
  3240  046D                     l1967:	
  3241  046D  3001               	movlw	1
  3242  046E  00B5               	movwf	??___aldiv^(0+128)
  3243  046F                     u1425:	
  3244  046F  1003               	clrc
  3245  0470  0DB8               	rlf	___aldiv@quotient^(0+128),f
  3246  0471  0DB9               	rlf	(___aldiv@quotient+1)^(0+128),f
  3247  0472  0DBA               	rlf	(___aldiv@quotient+2)^(0+128),f
  3248  0473  0DBB               	rlf	(___aldiv@quotient+3)^(0+128),f
  3249  0474  0BB5               	decfsz	??___aldiv^(0+128),f
  3250  0475  2C6F               	goto	u1425
  3251  0476  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3252  0477  0234               	subwf	(___aldiv@dividend+3)^(0+128),w
  3253  0478  1D03               	skipz
  3254  0479  2C84               	goto	u1435
  3255  047A  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  3256  047B  0233               	subwf	(___aldiv@dividend+2)^(0+128),w
  3257  047C  1D03               	skipz
  3258  047D  2C84               	goto	u1435
  3259  047E  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  3260  047F  0232               	subwf	(___aldiv@dividend+1)^(0+128),w
  3261  0480  1D03               	skipz
  3262  0481  2C84               	goto	u1435
  3263  0482  082D               	movf	___aldiv@divisor^(0+128),w
  3264  0483  0231               	subwf	___aldiv@dividend^(0+128),w
  3265  0484                     u1435:	
  3266  0484  1C03               	skipc
  3267  0485  2C95               	goto	l1975
  3268  0486  082D               	movf	___aldiv@divisor^(0+128),w
  3269  0487  02B1               	subwf	___aldiv@dividend^(0+128),f
  3270  0488  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  3271  0489  1C03               	skipc
  3272  048A  0F2E               	incfsz	(___aldiv@divisor+1)^(0+128),w
  3273  048B  02B2               	subwf	(___aldiv@dividend+1)^(0+128),f
  3274  048C  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  3275  048D  1C03               	skipc
  3276  048E  0F2F               	incfsz	(___aldiv@divisor+2)^(0+128),w
  3277  048F  02B3               	subwf	(___aldiv@dividend+2)^(0+128),f
  3278  0490  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  3279  0491  1C03               	skipc
  3280  0492  0F30               	incfsz	(___aldiv@divisor+3)^(0+128),w
  3281  0493  02B4               	subwf	(___aldiv@dividend+3)^(0+128),f
  3282  0494  1438               	bsf	___aldiv@quotient^(0+128),0
  3283  0495                     l1975:	
  3284  0495  3001               	movlw	1
  3285  0496                     u1445:	
  3286  0496  1003               	clrc
  3287  0497  0CB0               	rrf	(___aldiv@divisor+3)^(0+128),f
  3288  0498  0CAF               	rrf	(___aldiv@divisor+2)^(0+128),f
  3289  0499  0CAE               	rrf	(___aldiv@divisor+1)^(0+128),f
  3290  049A  0CAD               	rrf	___aldiv@divisor^(0+128),f
  3291  049B  3EFF               	addlw	-1
  3292  049C  1D03               	skipz
  3293  049D  2C96               	goto	u1445
  3294  049E  3001               	movlw	1
  3295  049F  02B6               	subwf	___aldiv@counter^(0+128),f
  3296  04A0  1D03               	btfss	3,2
  3297  04A1  2C6D               	goto	l1967
  3298  04A2                     l1979:	
  3299  04A2  0837               	movf	___aldiv@sign^(0+128),w
  3300  04A3  1903               	btfsc	3,2
  3301  04A4  2CB0               	goto	l1983
  3302  04A5  09B8               	comf	___aldiv@quotient^(0+128),f
  3303  04A6  09B9               	comf	(___aldiv@quotient+1)^(0+128),f
  3304  04A7  09BA               	comf	(___aldiv@quotient+2)^(0+128),f
  3305  04A8  09BB               	comf	(___aldiv@quotient+3)^(0+128),f
  3306  04A9  0AB8               	incf	___aldiv@quotient^(0+128),f
  3307  04AA  1903               	skipnz
  3308  04AB  0AB9               	incf	(___aldiv@quotient+1)^(0+128),f
  3309  04AC  1903               	skipnz
  3310  04AD  0ABA               	incf	(___aldiv@quotient+2)^(0+128),f
  3311  04AE  1903               	skipnz
  3312  04AF  0ABB               	incf	(___aldiv@quotient+3)^(0+128),f
  3313  04B0                     l1983:	
  3314  04B0  083B               	movf	(___aldiv@quotient+3)^(0+128),w
  3315  04B1  00B0               	movwf	(?___aldiv+3)^(0+128)
  3316  04B2  083A               	movf	(___aldiv@quotient+2)^(0+128),w
  3317  04B3  00AF               	movwf	(?___aldiv+2)^(0+128)
  3318  04B4  0839               	movf	(___aldiv@quotient+1)^(0+128),w
  3319  04B5  00AE               	movwf	(?___aldiv+1)^(0+128)
  3320  04B6  0838               	movf	___aldiv@quotient^(0+128),w
  3321  04B7  00AD               	movwf	?___aldiv^(0+128)
  3322  04B8  0008               	return
  3323  04B9                     __end_of___aldiv:	
  3324                           
  3325                           	psect	text18
  3326  0E97                     __ptext18:	
  3327 ;; *************** function _SetPoint *****************
  3328 ;; Defined at:
  3329 ;;		line 148 in file "main.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  new_val         2    0[BANK1 ] int 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3343 ;;      Params:         0       0       2       0       0
  3344 ;;      Locals:         0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0
  3346 ;;      Totals:         0       0       2       0       0
  3347 ;;Total ram usage:        2 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    4
  3350 ;; This function calls:
  3351 ;;		Nothing
  3352 ;; This function is called by:
  3353 ;;		_motor_reset
  3354 ;;		_main
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           
  3359                           ;psect for function _SetPoint
  3360  0E97                     _SetPoint:	
  3361                           
  3362                           ;main.c: 149: set_point = new_val;
  3363                           
  3364                           ;incstack = 0
  3365                           ; Regs used in _SetPoint: [wreg]
  3366  0E97  1683               	bsf	3,5	;RP0=1, select bank1
  3367  0E98  1303               	bcf	3,6	;RP1=0, select bank1
  3368  0E99  0820               	movf	SetPoint@new_val^(0+128),w
  3369  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  3370  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  3371  0E9C  00D7               	movwf	_set_point	;volatile
  3372  0E9D  1683               	bsf	3,5	;RP0=1, select bank1
  3373  0E9E  1303               	bcf	3,6	;RP1=0, select bank1
  3374  0E9F  0821               	movf	(SetPoint@new_val+1)^(0+128),w
  3375  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  3376  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  3377  0EA2  00D8               	movwf	_set_point+1	;volatile
  3378  0EA3  3000               	movlw	0
  3379  0EA4  1BD8               	btfsc	_set_point+1,7	;volatile
  3380  0EA5  30FF               	movlw	255
  3381  0EA6  00D9               	movwf	_set_point+2	;volatile
  3382  0EA7  00DA               	movwf	_set_point+3	;volatile
  3383  0EA8  0008               	return
  3384  0EA9                     __end_of_SetPoint:	
  3385                           
  3386                           	psect	text19
  3387  0EE8                     __ptext19:	
  3388 ;; *************** function _encoders_init *****************
  3389 ;; Defined at:
  3390 ;;		line 247 in file "main.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, status,0
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3404 ;;      Params:         0       0       0       0       0
  3405 ;;      Locals:         0       0       0       0       0
  3406 ;;      Temps:          0       0       2       0       0
  3407 ;;      Totals:         0       0       2       0       0
  3408 ;;Total ram usage:        2 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    4
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_main
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           
  3419                           ;psect for function _encoders_init
  3420  0EE8                     _encoders_init:	
  3421                           
  3422                           ;main.c: 250: state1 = (PORTB & 0b00011000) >>3;
  3423                           
  3424                           ;incstack = 0
  3425                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  3426  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  3428  0EEA  0806               	movf	6,w	;volatile
  3429  0EEB  1683               	bsf	3,5	;RP0=1, select bank1
  3430  0EEC  1303               	bcf	3,6	;RP1=0, select bank1
  3431  0EED  00A0               	movwf	??_encoders_init^(0+128)
  3432  0EEE  3003               	movlw	3
  3433  0EEF                     u2185:	
  3434  0EEF  1003               	clrc
  3435  0EF0  0CA0               	rrf	??_encoders_init^(0+128),f
  3436  0EF1  3EFF               	addlw	-1
  3437  0EF2  1D03               	skipz
  3438  0EF3  2EEF               	goto	u2185
  3439  0EF4  0820               	movf	??_encoders_init^(0+128),w
  3440  0EF5  3903               	andlw	3
  3441  0EF6  00A1               	movwf	(??_encoders_init+1)^(0+128)
  3442  0EF7  0821               	movf	(??_encoders_init+1)^(0+128),w
  3443  0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  3444  0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  3445  0EFA  00EB               	movwf	_state1	;volatile
  3446                           
  3447                           ;main.c: 251: encoder1_counter = 0;
  3448  0EFB  3000               	movlw	0
  3449  0EFC  00E2               	movwf	_encoder1_counter+3	;volatile
  3450  0EFD  3000               	movlw	0
  3451  0EFE  00E1               	movwf	_encoder1_counter+2	;volatile
  3452  0EFF  3000               	movlw	0
  3453  0F00  00E0               	movwf	_encoder1_counter+1	;volatile
  3454  0F01  3000               	movlw	0
  3455  0F02  00DF               	movwf	_encoder1_counter	;volatile
  3456  0F03  0008               	return
  3457  0F04                     __end_of_encoders_init:	
  3458                           
  3459                           	psect	text20
  3460  0E73                     __ptext20:	
  3461 ;; *************** function _chkchr *****************
  3462 ;; Defined at:
  3463 ;;		line 142 in file "serial.c"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      unsigned char 
  3470 ;; Registers used:
  3471 ;;		wreg
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3477 ;;      Params:         0       0       0       0       0
  3478 ;;      Locals:         0       0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0
  3480 ;;      Totals:         0       0       0       0       0
  3481 ;;Total ram usage:        0 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:    4
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           
  3492                           ;psect for function _chkchr
  3493  0E73                     _chkchr:	
  3494                           
  3495                           ;serial.c: 143: if (RCIF) {
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _chkchr: [wreg]
  3499  0E73  1283               	bcf	3,5	;RP0=0, select bank0
  3500  0E74  1303               	bcf	3,6	;RP1=0, select bank0
  3501  0E75  1E8C               	btfss	12,5	;volatile
  3502  0E76  2E79               	goto	l2259
  3503                           
  3504                           ;serial.c: 144: return RCREG;
  3505  0E77  081A               	movf	26,w	;volatile
  3506  0E78  0008               	return
  3507  0E79                     l2259:	
  3508                           
  3509                           ;serial.c: 145: };serial.c: 146: return 255;
  3510  0E79  30FF               	movlw	255
  3511  0E7A  0008               	return
  3512  0E7B                     __end_of_chkchr:	
  3513                           
  3514                           	psect	text21
  3515  01B0                     __ptext21:	
  3516 ;; *************** function _isr *****************
  3517 ;; Defined at:
  3518 ;;		line 167 in file "main.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  portB           1   50[BANK0 ] unsigned char 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3532 ;;      Params:         0       0       0       0       0
  3533 ;;      Locals:         0       1       0       0       0
  3534 ;;      Temps:          0       6       0       0       0
  3535 ;;      Totals:         0       7       0       0       0
  3536 ;;Total ram usage:        7 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    3
  3539 ;; This function calls:
  3540 ;;		_SetMotor
  3541 ;; This function is called by:
  3542 ;;		Interrupt level 1
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           
  3547                           ;psect for function _isr
  3548  01B0                     _isr:	
  3549                           
  3550                           ;main.c: 168: static int tick;;main.c: 172: if (T0IE && T0IF) {
  3551  01B0  1A8B               	btfsc	11,5	;volatile
  3552  01B1  1D0B               	btfss	11,2	;volatile
  3553  01B2  29F6               	goto	i1l2553
  3554                           
  3555                           ;main.c: 174: SetMotor();
  3556  01B3  120A  118A  2031  120A  118A  	fcall	_SetMotor
  3557                           
  3558                           ;main.c: 175: if (sampling){
  3559  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  3560  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  3561  01BA  0869               	movf	_sampling,w	;volatile
  3562  01BB  1903               	btfsc	3,2
  3563  01BC  29E9               	goto	i1l2547
  3564                           
  3565                           ;main.c: 176: if (samples < 90/2){
  3566  01BD  0868               	movf	_samples+1,w	;volatile
  3567  01BE  3A80               	xorlw	128
  3568  01BF  00FF               	movwf	127
  3569  01C0  3080               	movlw	128
  3570  01C1  027F               	subwf	127,w
  3571  01C2  1D03               	skipz
  3572  01C3  29C6               	goto	u246_25
  3573  01C4  302D               	movlw	45
  3574  01C5  0267               	subwf	_samples,w	;volatile
  3575  01C6                     u246_25:	
  3576  01C6  1803               	skipnc
  3577  01C7  29D0               	goto	i1l2541
  3578                           
  3579                           ;main.c: 177: pos_log1[samples] = motor_pos-last_pos;
  3580  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  3581  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  3582  01CA  0853               	movf	_last_pos,w	;volatile
  3583  01CB  025B               	subwf	_motor_pos,w	;volatile
  3584  01CC  00CC               	movwf	??_isr
  3585  01CD  0867               	movf	_samples,w	;volatile
  3586  01CE  3EBE               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  3587  01CF  29D7               	goto	L1
  3588  01D0                     i1l2541:	
  3589                           ;main.c: 178: }else{
  3590                           
  3591                           
  3592                           ;main.c: 179: pos_log2[samples-(90/2)] = motor_pos-last_pos;
  3593  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  3594  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  3595  01D2  0853               	movf	_last_pos,w	;volatile
  3596  01D3  025B               	subwf	_motor_pos,w	;volatile
  3597  01D4  00CC               	movwf	??_isr
  3598  01D5  0867               	movf	_samples,w	;volatile
  3599  01D6  3E63               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  3600  01D7                     L1:	
  3601  01D7  0084               	movwf	4
  3602  01D8  084C               	movf	??_isr,w
  3603  01D9  1783               	bsf	3,7	;select IRP bank3
  3604  01DA  0080               	movwf	0
  3605                           
  3606                           ;main.c: 180: };main.c: 181: last_pos = motor_pos;
  3607  01DB  085E               	movf	_motor_pos+3,w	;volatile
  3608  01DC  00D6               	movwf	_last_pos+3	;volatile
  3609  01DD  085D               	movf	_motor_pos+2,w	;volatile
  3610  01DE  00D5               	movwf	_last_pos+2	;volatile
  3611  01DF  085C               	movf	_motor_pos+1,w	;volatile
  3612  01E0  00D4               	movwf	_last_pos+1	;volatile
  3613  01E1  085B               	movf	_motor_pos,w	;volatile
  3614  01E2  00D3               	movwf	_last_pos	;volatile
  3615                           
  3616                           ;main.c: 182: samples++;
  3617  01E3  3001               	movlw	1
  3618  01E4  07E7               	addwf	_samples,f	;volatile
  3619  01E5  1803               	skipnc
  3620  01E6  0AE8               	incf	_samples+1,f	;volatile
  3621  01E7  3000               	movlw	0
  3622  01E8  07E8               	addwf	_samples+1,f	;volatile
  3623  01E9                     i1l2547:	
  3624                           
  3625                           ;main.c: 183: };main.c: 185: com_time++;
  3626  01E9  3001               	movlw	1
  3627  01EA  1683               	bsf	3,5	;RP0=1, select bank1
  3628  01EB  1303               	bcf	3,6	;RP1=0, select bank1
  3629  01EC  07E6               	addwf	_com_time^(0+128),f	;volatile
  3630  01ED  1803               	skipnc
  3631  01EE  0AE7               	incf	(_com_time+1)^(0+128),f	;volatile
  3632  01EF  3000               	movlw	0
  3633  01F0  07E7               	addwf	(_com_time+1)^(0+128),f	;volatile
  3634                           
  3635                           ;main.c: 187: TMR0 = (0xff - 195);
  3636  01F1  303C               	movlw	60
  3637  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  3638  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  3639  01F4  0081               	movwf	1	;volatile
  3640                           
  3641                           ;main.c: 188: T0IF = 0;
  3642  01F5  110B               	bcf	11,2	;volatile
  3643  01F6                     i1l2553:	
  3644                           
  3645                           ;main.c: 189: };main.c: 192: if (RBIE && RBIF) {
  3646  01F6  198B               	btfsc	11,3	;volatile
  3647  01F7  1C0B               	btfss	11,0	;volatile
  3648  01F8  2AA2               	goto	i1l348
  3649                           
  3650                           ;main.c: 193: char portB = PORTB;
  3651  01F9  0806               	movf	6,w	;volatile
  3652  01FA  00CC               	movwf	??_isr
  3653  01FB  084C               	movf	??_isr,w
  3654  01FC  00D2               	movwf	isr@portB
  3655                           
  3656                           ;main.c: 195: ab1 = (portB & 0b00011000) >>3;
  3657  01FD  0852               	movf	isr@portB,w
  3658  01FE  00CC               	movwf	??_isr
  3659  01FF  3003               	movlw	3
  3660  0200                     u249_25:	
  3661  0200  1003               	clrc
  3662  0201  0CCC               	rrf	??_isr,f
  3663  0202  3EFF               	addlw	-1
  3664  0203  1D03               	skipz
  3665  0204  2A00               	goto	u249_25
  3666  0205  084C               	movf	??_isr,w
  3667  0206  3903               	andlw	3
  3668  0207  00CD               	movwf	??_isr+1
  3669  0208  084D               	movf	??_isr+1,w
  3670  0209  00EA               	movwf	_ab1	;volatile
  3671                           
  3672                           ;main.c: 196: switch(state1)
  3673  020A  2A84               	goto	i1l2599
  3674  020B                     i1l2561:	
  3675                           
  3676                           ;main.c: 199: if(ab1 == 1){
  3677  020B  036A               	decf	_ab1,w	;volatile
  3678  020C  1D03               	btfss	3,2
  3679  020D  2A10               	goto	i1l2565
  3680                           
  3681                           ;main.c: 200: state1 = 1;
  3682  020E  3001               	movlw	1
  3683  020F  2A30               	goto	L2
  3684  0210                     i1l2565:	
  3685                           ;main.c: 202: }
  3686                           
  3687                           ;main.c: 201: encoder1_counter--;
  3688                           
  3689                           
  3690                           ;main.c: 203: else if(ab1 == 2){
  3691  0210  3002               	movlw	2
  3692  0211  066A               	xorwf	_ab1,w	;volatile
  3693  0212  1D03               	btfss	3,2
  3694  0213  2A92               	goto	i1l2601
  3695                           
  3696                           ;main.c: 204: state1 = 2;
  3697  0214  3002               	movlw	2
  3698  0215  00CC               	movwf	??_isr
  3699  0216  084C               	movf	??_isr,w
  3700  0217  00EB               	movwf	_state1	;volatile
  3701  0218  2A1D               	goto	i1l2573
  3702  0219                     i1l2569:	
  3703                           ;main.c: 205: encoder1_counter++;
  3704                           
  3705                           
  3706                           ;main.c: 209: if(ab1 == 0){
  3707  0219  086A               	movf	_ab1,w	;volatile
  3708  021A  1D03               	btfss	3,2
  3709  021B  2A2B               	goto	i1l2575
  3710                           
  3711                           ;main.c: 210: state1 = 0;
  3712  021C  01EB               	clrf	_state1	;volatile
  3713  021D                     i1l2573:	
  3714                           
  3715                           ;main.c: 211: encoder1_counter++;
  3716  021D  3001               	movlw	1
  3717  021E  07DF               	addwf	_encoder1_counter,f	;volatile
  3718  021F  3000               	movlw	0
  3719  0220  1803               	skipnc
  3720  0221  3001               	movlw	1
  3721  0222  07E0               	addwf	_encoder1_counter+1,f	;volatile
  3722  0223  3000               	movlw	0
  3723  0224  1803               	skipnc
  3724  0225  3001               	movlw	1
  3725  0226  07E1               	addwf	_encoder1_counter+2,f	;volatile
  3726  0227  3000               	movlw	0
  3727  0228  1803               	skipnc
  3728  0229  3001               	movlw	1
  3729  022A  2A3D               	goto	L3
  3730  022B                     i1l2575:	
  3731                           ;main.c: 212: }
  3732                           
  3733                           
  3734                           ;main.c: 213: else if (ab1 == 3){
  3735  022B  3003               	movlw	3
  3736  022C  066A               	xorwf	_ab1,w	;volatile
  3737  022D  1D03               	btfss	3,2
  3738  022E  2A92               	goto	i1l2601
  3739                           
  3740                           ;main.c: 214: state1 = 3;
  3741  022F  3003               	movlw	3
  3742  0230                     L2:	
  3743  0230  00CC               	movwf	??_isr
  3744  0231  084C               	movf	??_isr,w
  3745  0232  00EB               	movwf	_state1	;volatile
  3746                           
  3747                           ;main.c: 215: encoder1_counter--;
  3748  0233  30FF               	movlw	255
  3749  0234  07DF               	addwf	_encoder1_counter,f	;volatile
  3750  0235  30FF               	movlw	255
  3751  0236  1C03               	skipc
  3752  0237  07E0               	addwf	_encoder1_counter+1,f	;volatile
  3753  0238  30FF               	movlw	255
  3754  0239  1C03               	skipc
  3755  023A  07E1               	addwf	_encoder1_counter+2,f	;volatile
  3756  023B  30FF               	movlw	255
  3757  023C  1C03               	skipc
  3758  023D                     L3:	
  3759  023D  07E2               	addwf	_encoder1_counter+3,f	;volatile
  3760  023E  2A92               	goto	i1l2601
  3761  023F                     i1l2579:	
  3762                           
  3763                           ;main.c: 219: if(ab1 == 0){
  3764  023F  086A               	movf	_ab1,w	;volatile
  3765  0240  1D03               	btfss	3,2
  3766  0241  2A44               	goto	i1l2585
  3767                           
  3768                           ;main.c: 220: state1 = 0;
  3769  0242  01EB               	clrf	_state1	;volatile
  3770  0243  2A62               	goto	L4
  3771  0244                     i1l2585:	
  3772                           ;main.c: 222: }
  3773                           
  3774                           ;main.c: 221: encoder1_counter--;
  3775                           
  3776                           
  3777                           ;main.c: 223: else if(ab1 == 3){
  3778  0244  3003               	movlw	3
  3779  0245  066A               	xorwf	_ab1,w	;volatile
  3780  0246  1D03               	btfss	3,2
  3781  0247  2A92               	goto	i1l2601
  3782                           
  3783                           ;main.c: 224: state1 = 3;
  3784  0248  3003               	movlw	3
  3785  0249  00CC               	movwf	??_isr
  3786  024A  084C               	movf	??_isr,w
  3787  024B  00EB               	movwf	_state1	;volatile
  3788                           
  3789                           ;main.c: 225: encoder1_counter++;
  3790  024C  3001               	movlw	1
  3791  024D  07DF               	addwf	_encoder1_counter,f	;volatile
  3792  024E  3000               	movlw	0
  3793  024F  1803               	skipnc
  3794  0250  3001               	movlw	1
  3795  0251  07E0               	addwf	_encoder1_counter+1,f	;volatile
  3796  0252  3000               	movlw	0
  3797  0253  1803               	skipnc
  3798  0254  3001               	movlw	1
  3799  0255  07E1               	addwf	_encoder1_counter+2,f	;volatile
  3800  0256  3000               	movlw	0
  3801  0257  1803               	skipnc
  3802  0258  3001               	movlw	1
  3803  0259  2A6C               	goto	L5
  3804  025A                     i1l2589:	
  3805                           
  3806                           ;main.c: 229: if(ab1 == 2){
  3807  025A  3002               	movlw	2
  3808  025B  066A               	xorwf	_ab1,w	;volatile
  3809  025C  1D03               	btfss	3,2
  3810  025D  2A6E               	goto	i1l2593
  3811                           
  3812                           ;main.c: 230: state1 = 2;
  3813  025E  3002               	movlw	2
  3814  025F  00CC               	movwf	??_isr
  3815  0260  084C               	movf	??_isr,w
  3816  0261  00EB               	movwf	_state1	;volatile
  3817  0262                     L4:	
  3818                           
  3819                           ;main.c: 231: encoder1_counter--;
  3820  0262  30FF               	movlw	255
  3821  0263  07DF               	addwf	_encoder1_counter,f	;volatile
  3822  0264  30FF               	movlw	255
  3823  0265  1C03               	skipc
  3824  0266  07E0               	addwf	_encoder1_counter+1,f	;volatile
  3825  0267  30FF               	movlw	255
  3826  0268  1C03               	skipc
  3827  0269  07E1               	addwf	_encoder1_counter+2,f	;volatile
  3828  026A  30FF               	movlw	255
  3829  026B  1C03               	skipc
  3830  026C                     L5:	
  3831  026C  07E2               	addwf	_encoder1_counter+3,f	;volatile
  3832                           
  3833                           ;main.c: 232: }
  3834  026D  2A92               	goto	i1l2601
  3835  026E                     i1l2593:	
  3836                           
  3837                           ;main.c: 233: else if (ab1 == 1){
  3838  026E  036A               	decf	_ab1,w	;volatile
  3839  026F  1D03               	btfss	3,2
  3840  0270  2A92               	goto	i1l2601
  3841                           
  3842                           ;main.c: 234: state1 = 1;
  3843  0271  3001               	movlw	1
  3844  0272  00CC               	movwf	??_isr
  3845  0273  084C               	movf	??_isr,w
  3846  0274  00EB               	movwf	_state1	;volatile
  3847                           
  3848                           ;main.c: 235: encoder1_counter++;
  3849  0275  3001               	movlw	1
  3850  0276  07DF               	addwf	_encoder1_counter,f	;volatile
  3851  0277  3000               	movlw	0
  3852  0278  1803               	skipnc
  3853  0279  3001               	movlw	1
  3854  027A  07E0               	addwf	_encoder1_counter+1,f	;volatile
  3855  027B  3000               	movlw	0
  3856  027C  1803               	skipnc
  3857  027D  3001               	movlw	1
  3858  027E  07E1               	addwf	_encoder1_counter+2,f	;volatile
  3859  027F  3000               	movlw	0
  3860  0280  1803               	skipnc
  3861  0281  3001               	movlw	1
  3862  0282  07E2               	addwf	_encoder1_counter+3,f	;volatile
  3863  0283  2A92               	goto	i1l2601
  3864  0284                     i1l2599:	
  3865  0284  086B               	movf	_state1,w	;volatile
  3866                           
  3867                           ; Switch size 1, requested type "simple"
  3868                           ; Number of cases is 4, Range of values is 0 to 3
  3869                           ; switch strategies available:
  3870                           ; Name         Instructions Cycles
  3871                           ; simple_byte           13     7 (average)
  3872                           ; direct_byte           20     8 (fixed)
  3873                           ; jumptable            260     6 (fixed)
  3874                           ;	Chosen strategy is simple_byte
  3875  0285  3A00               	xorlw	0	; case 0
  3876  0286  1903               	skipnz
  3877  0287  2A0B               	goto	i1l2561
  3878  0288  3A01               	xorlw	1	; case 1
  3879  0289  1903               	skipnz
  3880  028A  2A19               	goto	i1l2569
  3881  028B  3A03               	xorlw	3	; case 2
  3882  028C  1903               	skipnz
  3883  028D  2A3F               	goto	i1l2579
  3884  028E  3A01               	xorlw	1	; case 3
  3885  028F  1903               	skipnz
  3886  0290  2A5A               	goto	i1l2589
  3887  0291  2A92               	goto	i1l2601
  3888  0292                     i1l2601:	
  3889                           
  3890                           ;main.c: 240: motor_pos = -encoder1_counter;
  3891  0292  095F               	comf	_encoder1_counter,w	;volatile
  3892  0293  00DB               	movwf	_motor_pos	;volatile
  3893  0294  0960               	comf	_encoder1_counter+1,w	;volatile
  3894  0295  00DC               	movwf	_motor_pos+1	;volatile
  3895  0296  0961               	comf	_encoder1_counter+2,w	;volatile
  3896  0297  00DD               	movwf	_motor_pos+2	;volatile
  3897  0298  0962               	comf	_encoder1_counter+3,w	;volatile
  3898  0299  00DE               	movwf	_motor_pos+3	;volatile
  3899  029A  0ADB               	incf	_motor_pos,f	;volatile
  3900  029B  1903               	skipnz
  3901  029C  0ADC               	incf	_motor_pos+1,f	;volatile
  3902  029D  1903               	skipnz
  3903  029E  0ADD               	incf	_motor_pos+2,f	;volatile
  3904  029F  1903               	skipnz
  3905  02A0  0ADE               	incf	_motor_pos+3,f	;volatile
  3906                           
  3907                           ;main.c: 241: RBIF = 0;
  3908  02A1  100B               	bcf	11,0	;volatile
  3909  02A2                     i1l348:	
  3910  02A2  0851               	movf	??_isr+5,w
  3911  02A3  00FF               	movwf	127
  3912  02A4  0850               	movf	??_isr+4,w
  3913  02A5  008A               	movwf	10
  3914  02A6  084F               	movf	??_isr+3,w
  3915  02A7  0084               	movwf	4
  3916  02A8  0E4E               	swapf	(??_isr+2)^0,w
  3917  02A9  0083               	movwf	3
  3918  02AA  0EFE               	swapf	126,f
  3919  02AB  0E7E               	swapf	126,w
  3920  02AC  0009               	retfie
  3921  02AD                     __end_of_isr:	
  3922                           
  3923                           	psect	intentry
  3924  0004                     __pintentry:	
  3925                           ;incstack = 0
  3926                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3927                           
  3928  0004                     interrupt_function:	
  3929  007E                     saved_w	set	btemp
  3930  0004  00FE               	movwf	btemp
  3931  0005  0E03               	swapf	3,w
  3932  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0008  00CE               	movwf	??_isr+2
  3935  0009  0804               	movf	4,w
  3936  000A  00CF               	movwf	??_isr+3
  3937  000B  080A               	movf	10,w
  3938  000C  00D0               	movwf	??_isr+4
  3939  000D  087F               	movf	btemp+1,w
  3940  000E  00D1               	movwf	??_isr+5
  3941  000F  120A  118A  29B0   	ljmp	_isr
  3942                           
  3943                           	psect	text22
  3944  0031                     __ptext22:	
  3945 ;; *************** function _SetMotor *****************
  3946 ;; Defined at:
  3947 ;;		line 109 in file "main.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;		None
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  I_Response      2   36[BANK0 ] int 
  3952 ;;  D_Response      2   34[BANK0 ] int 
  3953 ;;  P_Response      2   32[BANK0 ] int 
  3954 ;;  resp            4   38[BANK0 ] long 
  3955 ;;  err             2   42[BANK0 ] int 
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3965 ;;      Params:         0       0       0       0       0
  3966 ;;      Locals:         0      12       0       0       0
  3967 ;;      Temps:          0       8       0       0       0
  3968 ;;      Totals:         0      20       0       0       0
  3969 ;;Total ram usage:       20 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    2
  3972 ;; This function calls:
  3973 ;;		___awdiv
  3974 ;;		___wmul
  3975 ;;		_constrain
  3976 ;;		i1_pwm_set
  3977 ;; This function is called by:
  3978 ;;		_isr
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           
  3983                           ;psect for function _SetMotor
  3984  0031                     _SetMotor:	
  3985                           
  3986                           ;main.c: 110: static long integral;;main.c: 111: static int derivative;;main.c: 112: sta
      +                          tic int last_err;;main.c: 113: long resp;;main.c: 114: int err = set_point - motor_pos;
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3990  0031  1283               	bcf	3,5	;RP0=0, select bank0
  3991  0032  1303               	bcf	3,6	;RP1=0, select bank0
  3992  0033  085B               	movf	_motor_pos,w	;volatile
  3993  0034  0257               	subwf	_set_point,w	;volatile
  3994  0035  00CA               	movwf	SetMotor@err
  3995  0036  085C               	movf	_motor_pos+1,w	;volatile
  3996  0037  1C03               	skipc
  3997  0038  0A5C               	incf	_motor_pos+1,w	;volatile
  3998  0039  0258               	subwf	_set_point+1,w	;volatile
  3999  003A  00CB               	movwf	SetMotor@err+1
  4000                           
  4001                           ;main.c: 116: if (onlyK){
  4002  003B  0865               	movf	_onlyK,w
  4003  003C  0466               	iorwf	_onlyK+1,w
  4004  003D  1903               	btfsc	3,2
  4005  003E  2857               	goto	i1l2327
  4006                           
  4007                           ;main.c: 117: resp = (err)/5;
  4008  003F  3005               	movlw	5
  4009  0040  00F0               	movwf	___awdiv@divisor
  4010  0041  3000               	movlw	0
  4011  0042  00F1               	movwf	___awdiv@divisor+1
  4012  0043  084B               	movf	SetMotor@err+1,w
  4013  0044  00F3               	movwf	___awdiv@dividend+1
  4014  0045  084A               	movf	SetMotor@err,w
  4015  0046  00F2               	movwf	___awdiv@dividend
  4016  0047  120A  118A  264E  120A  118A  	fcall	___awdiv
  4017  004C  0870               	movf	?___awdiv,w
  4018  004D  1283               	bcf	3,5	;RP0=0, select bank0
  4019  004E  1303               	bcf	3,6	;RP1=0, select bank0
  4020  004F  00C6               	movwf	SetMotor@resp
  4021  0050  0871               	movf	?___awdiv+1,w
  4022  0051  00C7               	movwf	SetMotor@resp+1
  4023  0052  3000               	movlw	0
  4024  0053  1BC7               	btfsc	SetMotor@resp+1,7
  4025  0054  30FF               	movlw	255
  4026  0055  00C8               	movwf	SetMotor@resp+2
  4027  0056  2905               	goto	L6
  4028  0057                     i1l2327:	
  4029                           ;main.c: 118: }else{
  4030                           
  4031                           
  4032                           ;main.c: 120: derivative = (err - last_err);
  4033  0057  0863               	movf	SetMotor@last_err,w
  4034  0058  024A               	subwf	SetMotor@err,w
  4035  0059  00EE               	movwf	SetMotor@derivative
  4036  005A  0864               	movf	SetMotor@last_err+1,w
  4037  005B  1C03               	skipc
  4038  005C  0A64               	incf	SetMotor@last_err+1,w
  4039  005D  024B               	subwf	SetMotor@err+1,w
  4040  005E  00EF               	movwf	SetMotor@derivative+1
  4041                           
  4042                           ;main.c: 121: last_err = err;
  4043  005F  084B               	movf	SetMotor@err+1,w
  4044  0060  00E4               	movwf	SetMotor@last_err+1
  4045  0061  084A               	movf	SetMotor@err,w
  4046  0062  00E3               	movwf	SetMotor@last_err
  4047                           
  4048                           ;main.c: 122: if (err == 0){
  4049  0063  084A               	movf	SetMotor@err,w
  4050  0064  044B               	iorwf	SetMotor@err+1,w
  4051  0065  1D03               	btfss	3,2
  4052  0066  2871               	goto	i1l2335
  4053                           
  4054                           ;main.c: 123: integral = 0;
  4055  0067  3000               	movlw	0
  4056  0068  1683               	bsf	3,5	;RP0=1, select bank1
  4057  0069  1303               	bcf	3,6	;RP1=0, select bank1
  4058  006A  00EC               	movwf	(SetMotor@integral+3)^(0+128)
  4059  006B  3000               	movlw	0
  4060  006C  00EB               	movwf	(SetMotor@integral+2)^(0+128)
  4061  006D  3000               	movlw	0
  4062  006E  00EA               	movwf	(SetMotor@integral+1)^(0+128)
  4063  006F  3000               	movlw	0
  4064  0070  28B9               	goto	L7
  4065  0071                     i1l2335:	
  4066                           ;main.c: 124: }else{
  4067                           
  4068                           
  4069                           ;main.c: 125: integral = integral + err;
  4070  0071  1683               	bsf	3,5	;RP0=1, select bank1
  4071  0072  1303               	bcf	3,6	;RP1=0, select bank1
  4072  0073  0869               	movf	SetMotor@integral^(0+128),w
  4073  0074  1283               	bcf	3,5	;RP0=0, select bank0
  4074  0075  1303               	bcf	3,6	;RP1=0, select bank0
  4075  0076  00B8               	movwf	??_SetMotor
  4076  0077  1683               	bsf	3,5	;RP0=1, select bank1
  4077  0078  1303               	bcf	3,6	;RP1=0, select bank1
  4078  0079  086A               	movf	(SetMotor@integral+1)^(0+128),w
  4079  007A  1283               	bcf	3,5	;RP0=0, select bank0
  4080  007B  1303               	bcf	3,6	;RP1=0, select bank0
  4081  007C  00B9               	movwf	??_SetMotor+1
  4082  007D  1683               	bsf	3,5	;RP0=1, select bank1
  4083  007E  1303               	bcf	3,6	;RP1=0, select bank1
  4084  007F  086B               	movf	(SetMotor@integral+2)^(0+128),w
  4085  0080  1283               	bcf	3,5	;RP0=0, select bank0
  4086  0081  1303               	bcf	3,6	;RP1=0, select bank0
  4087  0082  00BA               	movwf	??_SetMotor+2
  4088  0083  1683               	bsf	3,5	;RP0=1, select bank1
  4089  0084  1303               	bcf	3,6	;RP1=0, select bank1
  4090  0085  086C               	movf	(SetMotor@integral+3)^(0+128),w
  4091  0086  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0087  1303               	bcf	3,6	;RP1=0, select bank0
  4093  0088  00BB               	movwf	??_SetMotor+3
  4094  0089  084A               	movf	SetMotor@err,w
  4095  008A  00BC               	movwf	??_SetMotor+4
  4096  008B  084B               	movf	SetMotor@err+1,w
  4097  008C  00BD               	movwf	??_SetMotor+5
  4098  008D  3000               	movlw	0
  4099  008E  1BBD               	btfsc	??_SetMotor+5,7
  4100  008F  30FF               	movlw	255
  4101  0090  00BE               	movwf	??_SetMotor+6
  4102  0091  00BF               	movwf	??_SetMotor+7
  4103  0092  083C               	movf	??_SetMotor+4,w
  4104  0093  07B8               	addwf	??_SetMotor,f
  4105  0094  083D               	movf	??_SetMotor+5,w
  4106  0095  1803               	skipnc
  4107  0096  0F3D               	incfsz	??_SetMotor+5,w
  4108  0097  2899               	goto	u215_20
  4109  0098  289A               	goto	u215_21
  4110  0099                     u215_20:	
  4111  0099  07B9               	addwf	??_SetMotor+1,f
  4112  009A                     u215_21:	
  4113  009A  083E               	movf	??_SetMotor+6,w
  4114  009B  1803               	skipnc
  4115  009C  0F3E               	incfsz	??_SetMotor+6,w
  4116  009D  289F               	goto	u215_22
  4117  009E  28A0               	goto	u215_23
  4118  009F                     u215_22:	
  4119  009F  07BA               	addwf	??_SetMotor+2,f
  4120  00A0                     u215_23:	
  4121  00A0  083F               	movf	??_SetMotor+7,w
  4122  00A1  1803               	skipnc
  4123  00A2  0A3F               	incf	??_SetMotor+7,w
  4124  00A3  07BB               	addwf	??_SetMotor+3,f
  4125  00A4  083B               	movf	??_SetMotor+3,w
  4126  00A5  1683               	bsf	3,5	;RP0=1, select bank1
  4127  00A6  1303               	bcf	3,6	;RP1=0, select bank1
  4128  00A7  00EC               	movwf	(SetMotor@integral+3)^(0+128)
  4129  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  4130  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  4131  00AA  083A               	movf	??_SetMotor+2,w
  4132  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  4133  00AC  1303               	bcf	3,6	;RP1=0, select bank1
  4134  00AD  00EB               	movwf	(SetMotor@integral+2)^(0+128)
  4135  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4136  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  4137  00B0  0839               	movf	??_SetMotor+1,w
  4138  00B1  1683               	bsf	3,5	;RP0=1, select bank1
  4139  00B2  1303               	bcf	3,6	;RP1=0, select bank1
  4140  00B3  00EA               	movwf	(SetMotor@integral+1)^(0+128)
  4141  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  4142  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  4143  00B6  0838               	movf	??_SetMotor,w
  4144  00B7  1683               	bsf	3,5	;RP0=1, select bank1
  4145  00B8  1303               	bcf	3,6	;RP1=0, select bank1
  4146  00B9                     L7:	
  4147  00B9  00E9               	movwf	SetMotor@integral^(0+128)
  4148                           
  4149                           ;main.c: 126: };main.c: 128: int P_Response = 4 * err;
  4150  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  4151  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  4152  00BC  084B               	movf	SetMotor@err+1,w
  4153  00BD  00B9               	movwf	??_SetMotor+1
  4154  00BE  084A               	movf	SetMotor@err,w
  4155  00BF  00B8               	movwf	??_SetMotor
  4156  00C0  1003               	clrc
  4157  00C1  0DB8               	rlf	??_SetMotor,f
  4158  00C2  0DB9               	rlf	??_SetMotor+1,f
  4159  00C3  1003               	clrc
  4160  00C4  0DB8               	rlf	??_SetMotor,f
  4161  00C5  0DB9               	rlf	??_SetMotor+1,f
  4162  00C6  0838               	movf	??_SetMotor,w
  4163  00C7  00C0               	movwf	SetMotor@P_Response
  4164  00C8  0839               	movf	??_SetMotor+1,w
  4165  00C9  00C1               	movwf	SetMotor@P_Response+1
  4166                           
  4167                           ;main.c: 129: int D_Response = (13 * derivative);
  4168  00CA  086F               	movf	SetMotor@derivative+1,w
  4169  00CB  00F1               	movwf	___wmul@multiplier+1
  4170  00CC  086E               	movf	SetMotor@derivative,w
  4171  00CD  00F0               	movwf	___wmul@multiplier
  4172  00CE  300D               	movlw	13
  4173  00CF  00F2               	movwf	___wmul@multiplicand
  4174  00D0  3000               	movlw	0
  4175  00D1  00F3               	movwf	___wmul@multiplicand+1
  4176  00D2  120A  118A  27D9  120A  118A  	fcall	___wmul
  4177  00D7  0871               	movf	?___wmul+1,w
  4178  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  4179  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  4180  00DA  00C3               	movwf	SetMotor@D_Response+1
  4181  00DB  0870               	movf	?___wmul,w
  4182  00DC  00C2               	movwf	SetMotor@D_Response
  4183                           
  4184                           ;main.c: 131: int I_Response = 0 * integral;
  4185  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  4186  00DE  1303               	bcf	3,6	;RP1=0, select bank1
  4187  00DF  086A               	movf	(SetMotor@integral+1)^(0+128),w
  4188  00E0  00F1               	movwf	___wmul@multiplier+1
  4189  00E1  0869               	movf	SetMotor@integral^(0+128),w
  4190  00E2  00F0               	movwf	___wmul@multiplier
  4191  00E3  3000               	movlw	0
  4192  00E4  00F2               	movwf	___wmul@multiplicand
  4193  00E5  00F3               	movwf	___wmul@multiplicand+1
  4194  00E6  120A  118A  27D9  120A  118A  	fcall	___wmul
  4195  00EB  0871               	movf	?___wmul+1,w
  4196  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  4197  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  4198  00EE  00C5               	movwf	SetMotor@I_Response+1
  4199  00EF  0870               	movf	?___wmul,w
  4200  00F0  00C4               	movwf	SetMotor@I_Response
  4201                           
  4202                           ;main.c: 132: resp = P_Response + D_Response + I_Response;
  4203  00F1  0842               	movf	SetMotor@D_Response,w
  4204  00F2  0740               	addwf	SetMotor@P_Response,w
  4205  00F3  00B8               	movwf	??_SetMotor
  4206  00F4  0843               	movf	SetMotor@D_Response+1,w
  4207  00F5  1803               	skipnc
  4208  00F6  0A43               	incf	SetMotor@D_Response+1,w
  4209  00F7  0741               	addwf	SetMotor@P_Response+1,w
  4210  00F8  00B9               	movwf	??_SetMotor+1
  4211  00F9  0844               	movf	SetMotor@I_Response,w
  4212  00FA  0738               	addwf	??_SetMotor,w
  4213  00FB  00C6               	movwf	SetMotor@resp
  4214  00FC  0845               	movf	SetMotor@I_Response+1,w
  4215  00FD  1803               	skipnc
  4216  00FE  0A45               	incf	SetMotor@I_Response+1,w
  4217  00FF  0739               	addwf	??_SetMotor+1,w
  4218  0100  00C7               	movwf	SetMotor@resp+1
  4219  0101  01C8               	clrf	SetMotor@resp+2
  4220  0102  1BC7               	btfsc	SetMotor@resp+1,7
  4221  0103  03C8               	decf	SetMotor@resp+2,f
  4222  0104  0848               	movf	SetMotor@resp+2,w
  4223  0105                     L6:	
  4224  0105  00C9               	movwf	SetMotor@resp+3
  4225                           
  4226                           ;main.c: 133: };main.c: 135: resp = constrain(resp, -255,255 );
  4227  0106  0849               	movf	SetMotor@resp+3,w
  4228  0107  00F3               	movwf	constrain@value+3
  4229  0108  0848               	movf	SetMotor@resp+2,w
  4230  0109  00F2               	movwf	constrain@value+2
  4231  010A  0847               	movf	SetMotor@resp+1,w
  4232  010B  00F1               	movwf	constrain@value+1
  4233  010C  0846               	movf	SetMotor@resp,w
  4234  010D  00F0               	movwf	constrain@value
  4235  010E  30FF               	movlw	255
  4236  010F  00F7               	movwf	constrain@lLimit+3
  4237  0110  30FF               	movlw	255
  4238  0111  00F6               	movwf	constrain@lLimit+2
  4239  0112  30FF               	movlw	255
  4240  0113  00F5               	movwf	constrain@lLimit+1
  4241  0114  3001               	movlw	1
  4242  0115  00F4               	movwf	constrain@lLimit
  4243  0116  3000               	movlw	0
  4244  0117  00FB               	movwf	constrain@uLimit+3
  4245  0118  3000               	movlw	0
  4246  0119  00FA               	movwf	constrain@uLimit+2
  4247  011A  3000               	movlw	0
  4248  011B  00F9               	movwf	constrain@uLimit+1
  4249  011C  30FF               	movlw	255
  4250  011D  00F8               	movwf	constrain@uLimit
  4251  011E  120A  118A  279F  120A  118A  	fcall	_constrain
  4252  0123  0873               	movf	?_constrain+3,w
  4253  0124  1283               	bcf	3,5	;RP0=0, select bank0
  4254  0125  1303               	bcf	3,6	;RP1=0, select bank0
  4255  0126  00C9               	movwf	SetMotor@resp+3
  4256  0127  0872               	movf	?_constrain+2,w
  4257  0128  00C8               	movwf	SetMotor@resp+2
  4258  0129  0871               	movf	?_constrain+1,w
  4259  012A  00C7               	movwf	SetMotor@resp+1
  4260  012B  0870               	movf	?_constrain,w
  4261  012C  00C6               	movwf	SetMotor@resp
  4262                           
  4263                           ;main.c: 136: if (resp > 0){
  4264  012D  1BC9               	btfsc	SetMotor@resp+3,7
  4265  012E  2961               	goto	i1l301
  4266  012F  0849               	movf	SetMotor@resp+3,w
  4267  0130  1D03               	btfss	3,2
  4268  0131  293E               	goto	i1l2349
  4269  0132  0848               	movf	SetMotor@resp+2,w
  4270  0133  1D03               	btfss	3,2
  4271  0134  293E               	goto	i1l2349
  4272  0135  0847               	movf	SetMotor@resp+1,w
  4273  0136  1D03               	btfss	3,2
  4274  0137  293E               	goto	i1l2349
  4275  0138  3001               	movlw	1
  4276  0139  0246               	subwf	SetMotor@resp,w
  4277  013A  1D03               	skipz
  4278  013B  293C               	goto	u216_23
  4279  013C                     u216_23:	
  4280  013C  1C03               	btfss	3,0
  4281  013D  2961               	goto	i1l301
  4282  013E                     i1l2349:	
  4283                           
  4284                           ;main.c: 137: pwm_set(1, resp );
  4285  013E  3001               	movlw	1
  4286  013F  00AE               	movwf	i1pwm_set@channel
  4287  0140  3000               	movlw	0
  4288  0141  00AF               	movwf	i1pwm_set@channel+1
  4289  0142  0849               	movf	SetMotor@resp+3,w
  4290  0143  00B3               	movwf	i1pwm_set@duty_cycle+3
  4291  0144  0848               	movf	SetMotor@resp+2,w
  4292  0145  00B2               	movwf	i1pwm_set@duty_cycle+2
  4293  0146  0847               	movf	SetMotor@resp+1,w
  4294  0147  00B1               	movwf	i1pwm_set@duty_cycle+1
  4295  0148  0846               	movf	SetMotor@resp,w
  4296  0149  00B0               	movwf	i1pwm_set@duty_cycle
  4297  014A  120A  118A  25CD  120A  118A  	fcall	i1_pwm_set
  4298                           
  4299                           ;main.c: 138: pwm_set(2, 0 );
  4300  014F  3002               	movlw	2
  4301  0150  1283               	bcf	3,5	;RP0=0, select bank0
  4302  0151  1303               	bcf	3,6	;RP1=0, select bank0
  4303  0152  00AE               	movwf	i1pwm_set@channel
  4304  0153  3000               	movlw	0
  4305  0154  00AF               	movwf	i1pwm_set@channel+1
  4306  0155  3000               	movlw	0
  4307  0156  00B3               	movwf	i1pwm_set@duty_cycle+3
  4308  0157  3000               	movlw	0
  4309  0158  00B2               	movwf	i1pwm_set@duty_cycle+2
  4310  0159  3000               	movlw	0
  4311  015A  00B1               	movwf	i1pwm_set@duty_cycle+1
  4312  015B  3000               	movlw	0
  4313  015C  00B0               	movwf	i1pwm_set@duty_cycle
  4314  015D  120A  118A  25CD   	fcall	i1_pwm_set
  4315                           
  4316                           ;main.c: 139: }else if(resp < 0){
  4317  0160  0008               	return
  4318  0161                     i1l301:	
  4319  0161  1FC9               	btfss	SetMotor@resp+3,7
  4320  0162  298D               	goto	i1l2353
  4321                           
  4322                           ;main.c: 140: pwm_set(1, 0 );
  4323  0163  3001               	movlw	1
  4324  0164  00AE               	movwf	i1pwm_set@channel
  4325  0165  3000               	movlw	0
  4326  0166  00AF               	movwf	i1pwm_set@channel+1
  4327  0167  3000               	movlw	0
  4328  0168  00B3               	movwf	i1pwm_set@duty_cycle+3
  4329  0169  3000               	movlw	0
  4330  016A  00B2               	movwf	i1pwm_set@duty_cycle+2
  4331  016B  3000               	movlw	0
  4332  016C  00B1               	movwf	i1pwm_set@duty_cycle+1
  4333  016D  3000               	movlw	0
  4334  016E  00B0               	movwf	i1pwm_set@duty_cycle
  4335  016F  120A  118A  25CD  120A  118A  	fcall	i1_pwm_set
  4336                           
  4337                           ;main.c: 141: pwm_set(2, -resp );
  4338  0174  3002               	movlw	2
  4339  0175  1283               	bcf	3,5	;RP0=0, select bank0
  4340  0176  1303               	bcf	3,6	;RP1=0, select bank0
  4341  0177  00AE               	movwf	i1pwm_set@channel
  4342  0178  3000               	movlw	0
  4343  0179  00AF               	movwf	i1pwm_set@channel+1
  4344  017A  0946               	comf	SetMotor@resp,w
  4345  017B  00B0               	movwf	i1pwm_set@duty_cycle
  4346  017C  0947               	comf	SetMotor@resp+1,w
  4347  017D  00B1               	movwf	i1pwm_set@duty_cycle+1
  4348  017E  0948               	comf	SetMotor@resp+2,w
  4349  017F  00B2               	movwf	i1pwm_set@duty_cycle+2
  4350  0180  0949               	comf	SetMotor@resp+3,w
  4351  0181  00B3               	movwf	i1pwm_set@duty_cycle+3
  4352  0182  0AB0               	incf	i1pwm_set@duty_cycle,f
  4353  0183  1903               	skipnz
  4354  0184  0AB1               	incf	i1pwm_set@duty_cycle+1,f
  4355  0185  1903               	skipnz
  4356  0186  0AB2               	incf	i1pwm_set@duty_cycle+2,f
  4357  0187  1903               	skipnz
  4358  0188  0AB3               	incf	i1pwm_set@duty_cycle+3,f
  4359  0189  120A  118A  25CD   	fcall	i1_pwm_set
  4360                           
  4361                           ;main.c: 142: }else{
  4362  018C  0008               	return
  4363  018D                     i1l2353:	
  4364                           
  4365                           ;main.c: 143: pwm_set(1, 0 );
  4366  018D  3001               	movlw	1
  4367  018E  00AE               	movwf	i1pwm_set@channel
  4368  018F  3000               	movlw	0
  4369  0190  00AF               	movwf	i1pwm_set@channel+1
  4370  0191  3000               	movlw	0
  4371  0192  00B3               	movwf	i1pwm_set@duty_cycle+3
  4372  0193  3000               	movlw	0
  4373  0194  00B2               	movwf	i1pwm_set@duty_cycle+2
  4374  0195  3000               	movlw	0
  4375  0196  00B1               	movwf	i1pwm_set@duty_cycle+1
  4376  0197  3000               	movlw	0
  4377  0198  00B0               	movwf	i1pwm_set@duty_cycle
  4378  0199  120A  118A  25CD  120A  118A  	fcall	i1_pwm_set
  4379                           
  4380                           ;main.c: 144: pwm_set(2, 0 );
  4381  019E  3002               	movlw	2
  4382  019F  1283               	bcf	3,5	;RP0=0, select bank0
  4383  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  4384  01A1  00AE               	movwf	i1pwm_set@channel
  4385  01A2  3000               	movlw	0
  4386  01A3  00AF               	movwf	i1pwm_set@channel+1
  4387  01A4  3000               	movlw	0
  4388  01A5  00B3               	movwf	i1pwm_set@duty_cycle+3
  4389  01A6  3000               	movlw	0
  4390  01A7  00B2               	movwf	i1pwm_set@duty_cycle+2
  4391  01A8  3000               	movlw	0
  4392  01A9  00B1               	movwf	i1pwm_set@duty_cycle+1
  4393  01AA  3000               	movlw	0
  4394  01AB  00B0               	movwf	i1pwm_set@duty_cycle
  4395  01AC  120A  118A  25CD   	fcall	i1_pwm_set
  4396  01AF  0008               	return
  4397  01B0                     __end_of_SetMotor:	
  4398                           
  4399                           	psect	text23
  4400  05CD                     __ptext23:	
  4401 ;; *************** function i1_pwm_set *****************
  4402 ;; Defined at:
  4403 ;;		line 72 in file "pwm.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  channel         2   14[BANK0 ] int 
  4406 ;;  duty_cycle      4   16[BANK0 ] long 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      void 
  4411 ;; Registers used:
  4412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4418 ;;      Params:         0       6       0       0       0
  4419 ;;      Locals:         0       0       0       0       0
  4420 ;;      Temps:          0       4       0       0       0
  4421 ;;      Totals:         0      10       0       0       0
  4422 ;;Total ram usage:       10 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    1
  4425 ;; This function calls:
  4426 ;;		i1___aldiv
  4427 ;;		i1___lmul
  4428 ;; This function is called by:
  4429 ;;		_SetMotor
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           
  4434                           ;psect for function i1_pwm_set
  4435  05CD                     i1_pwm_set:	
  4436                           
  4437                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  4438                           
  4439                           ;incstack = 0
  4440                           ; Regs used in i1_pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4441  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  4442  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  4443  05CF  1BB3               	btfsc	i1pwm_set@duty_cycle+3,7
  4444  05D0  0008               	return
  4445  05D1  1BB3               	btfsc	i1pwm_set@duty_cycle+3,7
  4446  05D2  2DE3               	goto	i1l2207
  4447  05D3  0833               	movf	i1pwm_set@duty_cycle+3,w
  4448  05D4  1D03               	btfss	3,2
  4449  05D5  0008               	return
  4450  05D6  0832               	movf	i1pwm_set@duty_cycle+2,w
  4451  05D7  1D03               	btfss	3,2
  4452  05D8  0008               	return
  4453  05D9  3001               	movlw	1
  4454  05DA  0231               	subwf	i1pwm_set@duty_cycle+1,w
  4455  05DB  1D03               	skipz
  4456  05DC  2DE1               	goto	u200_23
  4457  05DD  3000               	movlw	0
  4458  05DE  0230               	subwf	i1pwm_set@duty_cycle,w
  4459  05DF  1D03               	skipz
  4460  05E0  2DE1               	goto	u200_23
  4461  05E1                     u200_23:	
  4462  05E1  1803               	btfsc	3,0
  4463  05E2  0008               	return
  4464  05E3                     i1l2207:	
  4465                           
  4466                           ;pwm.c: 77: if (duty_cycle !=0){
  4467  05E3  0833               	movf	i1pwm_set@duty_cycle+3,w
  4468  05E4  0432               	iorwf	i1pwm_set@duty_cycle+2,w
  4469  05E5  0431               	iorwf	i1pwm_set@duty_cycle+1,w
  4470  05E6  0430               	iorwf	i1pwm_set@duty_cycle,w
  4471  05E7  1903               	skipnz
  4472  05E8  2E40               	goto	i1l2217
  4473                           
  4474                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  4475  05E9  3020               	movlw	32
  4476  05EA  00B4               	movwf	??i1_pwm_set
  4477  05EB  3000               	movlw	0
  4478  05EC  00B5               	movwf	??i1_pwm_set+1
  4479  05ED  3000               	movlw	0
  4480  05EE  00B6               	movwf	??i1_pwm_set+2
  4481  05EF  3000               	movlw	0
  4482  05F0  00B7               	movwf	??i1_pwm_set+3
  4483  05F1  3000               	movlw	0
  4484  05F2  00A3               	movwf	i1___aldiv@divisor+3
  4485  05F3  3000               	movlw	0
  4486  05F4  00A2               	movwf	i1___aldiv@divisor+2
  4487  05F5  3000               	movlw	0
  4488  05F6  00A1               	movwf	i1___aldiv@divisor+1
  4489  05F7  30FF               	movlw	255
  4490  05F8  00A0               	movwf	i1___aldiv@divisor
  4491  05F9  0833               	movf	i1pwm_set@duty_cycle+3,w
  4492  05FA  00F3               	movwf	i1___lmul@multiplier+3
  4493  05FB  0832               	movf	i1pwm_set@duty_cycle+2,w
  4494  05FC  00F2               	movwf	i1___lmul@multiplier+2
  4495  05FD  0831               	movf	i1pwm_set@duty_cycle+1,w
  4496  05FE  00F1               	movwf	i1___lmul@multiplier+1
  4497  05FF  0830               	movf	i1pwm_set@duty_cycle,w
  4498  0600  00F0               	movwf	i1___lmul@multiplier
  4499  0601  3000               	movlw	0
  4500  0602  00F7               	movwf	i1___lmul@multiplicand+3
  4501  0603  3000               	movlw	0
  4502  0604  00F6               	movwf	i1___lmul@multiplicand+2
  4503  0605  3000               	movlw	0
  4504  0606  00F5               	movwf	i1___lmul@multiplicand+1
  4505  0607  30DF               	movlw	223
  4506  0608  00F4               	movwf	i1___lmul@multiplicand
  4507  0609  120A  118A  26E8  120A  118A  	fcall	i1___lmul
  4508  060E  0873               	movf	?i1___lmul+3,w
  4509  060F  1283               	bcf	3,5	;RP0=0, select bank0
  4510  0610  1303               	bcf	3,6	;RP1=0, select bank0
  4511  0611  00A7               	movwf	i1___aldiv@dividend+3
  4512  0612  0872               	movf	?i1___lmul+2,w
  4513  0613  00A6               	movwf	i1___aldiv@dividend+2
  4514  0614  0871               	movf	?i1___lmul+1,w
  4515  0615  00A5               	movwf	i1___aldiv@dividend+1
  4516  0616  0870               	movf	?i1___lmul,w
  4517  0617  00A4               	movwf	i1___aldiv@dividend
  4518  0618  120A  118A  24B9  120A  118A  	fcall	i1___aldiv
  4519  061D  1283               	bcf	3,5	;RP0=0, select bank0
  4520  061E  1303               	bcf	3,6	;RP1=0, select bank0
  4521  061F  0820               	movf	?i1___aldiv,w
  4522  0620  07B4               	addwf	??i1_pwm_set,f
  4523  0621  0821               	movf	?i1___aldiv+1,w
  4524  0622  1803               	skipnc
  4525  0623  0F21               	incfsz	?i1___aldiv+1,w
  4526  0624  2E26               	goto	u202_20
  4527  0625  2E27               	goto	u202_21
  4528  0626                     u202_20:	
  4529  0626  07B5               	addwf	??i1_pwm_set+1,f
  4530  0627                     u202_21:	
  4531  0627  0822               	movf	?i1___aldiv+2,w
  4532  0628  1803               	skipnc
  4533  0629  0F22               	incfsz	?i1___aldiv+2,w
  4534  062A  2E2C               	goto	u202_22
  4535  062B  2E2D               	goto	u202_23
  4536  062C                     u202_22:	
  4537  062C  07B6               	addwf	??i1_pwm_set+2,f
  4538  062D                     u202_23:	
  4539  062D  0823               	movf	?i1___aldiv+3,w
  4540  062E  1803               	skipnc
  4541  062F  0A23               	incf	?i1___aldiv+3,w
  4542  0630  07B7               	addwf	??i1_pwm_set+3,f
  4543  0631  0837               	movf	??i1_pwm_set+3,w
  4544  0632  00B3               	movwf	i1pwm_set@duty_cycle+3
  4545  0633  0836               	movf	??i1_pwm_set+2,w
  4546  0634  00B2               	movwf	i1pwm_set@duty_cycle+2
  4547  0635  0835               	movf	??i1_pwm_set+1,w
  4548  0636  00B1               	movwf	i1pwm_set@duty_cycle+1
  4549  0637  0834               	movf	??i1_pwm_set,w
  4550  0638  00B0               	movwf	i1pwm_set@duty_cycle
  4551  0639  2E40               	goto	i1l2217
  4552  063A                     i1l2211:	
  4553                           
  4554                           ;pwm.c: 82: CCPR1L = duty_cycle;
  4555  063A  0830               	movf	i1pwm_set@duty_cycle,w
  4556  063B  0095               	movwf	21	;volatile
  4557                           
  4558                           ;pwm.c: 83: break;
  4559  063C  0008               	return
  4560  063D                     i1l2213:	
  4561                           
  4562                           ;pwm.c: 85: CCPR2L = duty_cycle;
  4563  063D  0830               	movf	i1pwm_set@duty_cycle,w
  4564  063E  009B               	movwf	27	;volatile
  4565                           
  4566                           ;pwm.c: 86: break;
  4567  063F  0008               	return
  4568  0640                     i1l2217:	
  4569                           
  4570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4571                           ; Switch size 1, requested type "simple"
  4572                           ; Number of cases is 1, Range of values is 0 to 0
  4573                           ; switch strategies available:
  4574                           ; Name         Instructions Cycles
  4575                           ; simple_byte            4     3 (average)
  4576                           ; direct_byte           11     8 (fixed)
  4577                           ; jumptable            260     6 (fixed)
  4578                           ;	Chosen strategy is simple_byte
  4579  0640  082F               	movf	i1pwm_set@channel+1,w
  4580  0641  3A00               	xorlw	0	; case 0
  4581  0642  1903               	skipnz
  4582  0643  2E45               	goto	i1l2797
  4583  0644  2E4D               	goto	i1l182
  4584  0645                     i1l2797:	
  4585                           
  4586                           ; Switch size 1, requested type "simple"
  4587                           ; Number of cases is 2, Range of values is 1 to 2
  4588                           ; switch strategies available:
  4589                           ; Name         Instructions Cycles
  4590                           ; simple_byte            7     4 (average)
  4591                           ; direct_byte           17    11 (fixed)
  4592                           ; jumptable            263     9 (fixed)
  4593                           ;	Chosen strategy is simple_byte
  4594  0645  082E               	movf	i1pwm_set@channel,w
  4595  0646  3A01               	xorlw	1	; case 1
  4596  0647  1903               	skipnz
  4597  0648  2E3A               	goto	i1l2211
  4598  0649  3A03               	xorlw	3	; case 2
  4599  064A  1903               	skipnz
  4600  064B  2E3D               	goto	i1l2213
  4601  064C  2E4D               	goto	i1l182
  4602  064D                     i1l182:	
  4603  064D  0008               	return
  4604  064E                     __end_ofi1_pwm_set:	
  4605                           
  4606                           	psect	text24
  4607  06E8                     __ptext24:	
  4608 ;; *************** function i1___lmul *****************
  4609 ;; Defined at:
  4610 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  multiplier      4    0[COMMON] unsigned long 
  4613 ;;  multiplicand    4    4[COMMON] unsigned long 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  __lmul          4    9[COMMON] unsigned long 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  4    0[COMMON] unsigned long 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4625 ;;      Params:         8       0       0       0       0
  4626 ;;      Locals:         4       0       0       0       0
  4627 ;;      Temps:          1       0       0       0       0
  4628 ;;      Totals:        13       0       0       0       0
  4629 ;;Total ram usage:       13 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		i1_pwm_set
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           
  4639                           ;psect for function i1___lmul
  4640  06E8                     i1___lmul:	
  4641                           
  4642                           ;incstack = 0
  4643                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  4644  06E8  3000               	movlw	0
  4645  06E9  00FC               	movwf	i1___lmul@product+3
  4646  06EA  3000               	movlw	0
  4647  06EB  00FB               	movwf	i1___lmul@product+2
  4648  06EC  3000               	movlw	0
  4649  06ED  00FA               	movwf	i1___lmul@product+1
  4650  06EE  3000               	movlw	0
  4651  06EF  00F9               	movwf	i1___lmul@product
  4652  06F0                     i1l1989:	
  4653  06F0  1C70               	btfss	i1___lmul@multiplier,0
  4654  06F1  2F06               	goto	i1l1993
  4655  06F2  0874               	movf	i1___lmul@multiplicand,w
  4656  06F3  07F9               	addwf	i1___lmul@product,f
  4657  06F4  0875               	movf	i1___lmul@multiplicand+1,w
  4658  06F5  1103               	clrz
  4659  06F6  1803               	skipnc
  4660  06F7  3E01               	addlw	1
  4661  06F8  1D03               	btfss	3,2
  4662  06F9  07FA               	addwf	i1___lmul@product+1,f
  4663  06FA  0876               	movf	i1___lmul@multiplicand+2,w
  4664  06FB  1103               	clrz
  4665  06FC  1803               	skipnc
  4666  06FD  3E01               	addlw	1
  4667  06FE  1D03               	btfss	3,2
  4668  06FF  07FB               	addwf	i1___lmul@product+2,f
  4669  0700  0877               	movf	i1___lmul@multiplicand+3,w
  4670  0701  1103               	clrz
  4671  0702  1803               	skipnc
  4672  0703  3E01               	addlw	1
  4673  0704  1D03               	btfss	3,2
  4674  0705  07FC               	addwf	i1___lmul@product+3,f
  4675  0706                     i1l1993:	
  4676  0706  3001               	movlw	1
  4677  0707  00F8               	movwf	??i1___lmul
  4678  0708                     u149_25:	
  4679  0708  1003               	clrc
  4680  0709  0DF4               	rlf	i1___lmul@multiplicand,f
  4681  070A  0DF5               	rlf	i1___lmul@multiplicand+1,f
  4682  070B  0DF6               	rlf	i1___lmul@multiplicand+2,f
  4683  070C  0DF7               	rlf	i1___lmul@multiplicand+3,f
  4684  070D  0BF8               	decfsz	??i1___lmul,f
  4685  070E  2F08               	goto	u149_25
  4686  070F  3001               	movlw	1
  4687  0710                     u150_25:	
  4688  0710  1003               	clrc
  4689  0711  0CF3               	rrf	i1___lmul@multiplier+3,f
  4690  0712  0CF2               	rrf	i1___lmul@multiplier+2,f
  4691  0713  0CF1               	rrf	i1___lmul@multiplier+1,f
  4692  0714  0CF0               	rrf	i1___lmul@multiplier,f
  4693  0715  3EFF               	addlw	-1
  4694  0716  1D03               	skipz
  4695  0717  2F10               	goto	u150_25
  4696  0718  0873               	movf	i1___lmul@multiplier+3,w
  4697  0719  0472               	iorwf	i1___lmul@multiplier+2,w
  4698  071A  0471               	iorwf	i1___lmul@multiplier+1,w
  4699  071B  0470               	iorwf	i1___lmul@multiplier,w
  4700  071C  1D03               	skipz
  4701  071D  2EF0               	goto	i1l1989
  4702  071E  087C               	movf	i1___lmul@product+3,w
  4703  071F  00F3               	movwf	?i1___lmul+3
  4704  0720  087B               	movf	i1___lmul@product+2,w
  4705  0721  00F2               	movwf	?i1___lmul+2
  4706  0722  087A               	movf	i1___lmul@product+1,w
  4707  0723  00F1               	movwf	?i1___lmul+1
  4708  0724  0879               	movf	i1___lmul@product,w
  4709  0725  00F0               	movwf	?i1___lmul
  4710  0726  0008               	return
  4711  0727                     __end_ofi1___lmul:	
  4712                           
  4713                           	psect	text25
  4714  04B9                     __ptext25:	
  4715 ;; *************** function i1___aldiv *****************
  4716 ;; Defined at:
  4717 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  divisor         4    0[BANK0 ] long 
  4720 ;;  dividend        4    4[BANK0 ] long 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  __aldiv         4   10[BANK0 ] long 
  4723 ;;  __aldiv         1    9[BANK0 ] unsigned char 
  4724 ;;  __aldiv         1    8[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  4    0[BANK0 ] long 
  4727 ;; Registers used:
  4728 ;;		wreg, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4734 ;;      Params:         0       8       0       0       0
  4735 ;;      Locals:         0       6       0       0       0
  4736 ;;      Temps:          1       0       0       0       0
  4737 ;;      Totals:         1      14       0       0       0
  4738 ;;Total ram usage:       15 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		i1_pwm_set
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           
  4748                           ;psect for function i1___aldiv
  4749  04B9                     i1___aldiv:	
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
  4753  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  4754  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  4755  04BB  01A9               	clrf	i1___aldiv@sign
  4756  04BC  1FA3               	btfss	i1___aldiv@divisor+3,7
  4757  04BD  2CCB               	goto	i1l600
  4758  04BE  09A0               	comf	i1___aldiv@divisor,f
  4759  04BF  09A1               	comf	i1___aldiv@divisor+1,f
  4760  04C0  09A2               	comf	i1___aldiv@divisor+2,f
  4761  04C1  09A3               	comf	i1___aldiv@divisor+3,f
  4762  04C2  0AA0               	incf	i1___aldiv@divisor,f
  4763  04C3  1903               	skipnz
  4764  04C4  0AA1               	incf	i1___aldiv@divisor+1,f
  4765  04C5  1903               	skipnz
  4766  04C6  0AA2               	incf	i1___aldiv@divisor+2,f
  4767  04C7  1903               	skipnz
  4768  04C8  0AA3               	incf	i1___aldiv@divisor+3,f
  4769  04C9  01A9               	clrf	i1___aldiv@sign
  4770  04CA  0AA9               	incf	i1___aldiv@sign,f
  4771  04CB                     i1l600:	
  4772  04CB  1FA7               	btfss	i1___aldiv@dividend+3,7
  4773  04CC  2CDC               	goto	i1l2011
  4774  04CD  09A4               	comf	i1___aldiv@dividend,f
  4775  04CE  09A5               	comf	i1___aldiv@dividend+1,f
  4776  04CF  09A6               	comf	i1___aldiv@dividend+2,f
  4777  04D0  09A7               	comf	i1___aldiv@dividend+3,f
  4778  04D1  0AA4               	incf	i1___aldiv@dividend,f
  4779  04D2  1903               	skipnz
  4780  04D3  0AA5               	incf	i1___aldiv@dividend+1,f
  4781  04D4  1903               	skipnz
  4782  04D5  0AA6               	incf	i1___aldiv@dividend+2,f
  4783  04D6  1903               	skipnz
  4784  04D7  0AA7               	incf	i1___aldiv@dividend+3,f
  4785  04D8  3001               	movlw	1
  4786  04D9  00FD               	movwf	??i1___aldiv
  4787  04DA  087D               	movf	??i1___aldiv,w
  4788  04DB  06A9               	xorwf	i1___aldiv@sign,f
  4789  04DC                     i1l2011:	
  4790  04DC  3000               	movlw	0
  4791  04DD  00AD               	movwf	i1___aldiv@quotient+3
  4792  04DE  3000               	movlw	0
  4793  04DF  00AC               	movwf	i1___aldiv@quotient+2
  4794  04E0  3000               	movlw	0
  4795  04E1  00AB               	movwf	i1___aldiv@quotient+1
  4796  04E2  3000               	movlw	0
  4797  04E3  00AA               	movwf	i1___aldiv@quotient
  4798  04E4  0823               	movf	i1___aldiv@divisor+3,w
  4799  04E5  0422               	iorwf	i1___aldiv@divisor+2,w
  4800  04E6  0421               	iorwf	i1___aldiv@divisor+1,w
  4801  04E7  0420               	iorwf	i1___aldiv@divisor,w
  4802  04E8  1903               	skipnz
  4803  04E9  2D31               	goto	i1l2033
  4804  04EA  01A8               	clrf	i1___aldiv@counter
  4805  04EB  0AA8               	incf	i1___aldiv@counter,f
  4806  04EC                     i1l2019:	
  4807  04EC  1BA3               	btfsc	i1___aldiv@divisor+3,7
  4808  04ED  2CFC               	goto	i1l2021
  4809  04EE  3001               	movlw	1
  4810  04EF  00FD               	movwf	??i1___aldiv
  4811  04F0                     u155_25:	
  4812  04F0  1003               	clrc
  4813  04F1  0DA0               	rlf	i1___aldiv@divisor,f
  4814  04F2  0DA1               	rlf	i1___aldiv@divisor+1,f
  4815  04F3  0DA2               	rlf	i1___aldiv@divisor+2,f
  4816  04F4  0DA3               	rlf	i1___aldiv@divisor+3,f
  4817  04F5  0BFD               	decfsz	??i1___aldiv,f
  4818  04F6  2CF0               	goto	u155_25
  4819  04F7  3001               	movlw	1
  4820  04F8  00FD               	movwf	??i1___aldiv
  4821  04F9  087D               	movf	??i1___aldiv,w
  4822  04FA  07A8               	addwf	i1___aldiv@counter,f
  4823  04FB  2CEC               	goto	i1l2019
  4824  04FC                     i1l2021:	
  4825  04FC  3001               	movlw	1
  4826  04FD  00FD               	movwf	??i1___aldiv
  4827  04FE                     u157_25:	
  4828  04FE  1003               	clrc
  4829  04FF  0DAA               	rlf	i1___aldiv@quotient,f
  4830  0500  0DAB               	rlf	i1___aldiv@quotient+1,f
  4831  0501  0DAC               	rlf	i1___aldiv@quotient+2,f
  4832  0502  0DAD               	rlf	i1___aldiv@quotient+3,f
  4833  0503  0BFD               	decfsz	??i1___aldiv,f
  4834  0504  2CFE               	goto	u157_25
  4835  0505  0823               	movf	i1___aldiv@divisor+3,w
  4836  0506  0227               	subwf	i1___aldiv@dividend+3,w
  4837  0507  1D03               	skipz
  4838  0508  2D13               	goto	u158_25
  4839  0509  0822               	movf	i1___aldiv@divisor+2,w
  4840  050A  0226               	subwf	i1___aldiv@dividend+2,w
  4841  050B  1D03               	skipz
  4842  050C  2D13               	goto	u158_25
  4843  050D  0821               	movf	i1___aldiv@divisor+1,w
  4844  050E  0225               	subwf	i1___aldiv@dividend+1,w
  4845  050F  1D03               	skipz
  4846  0510  2D13               	goto	u158_25
  4847  0511  0820               	movf	i1___aldiv@divisor,w
  4848  0512  0224               	subwf	i1___aldiv@dividend,w
  4849  0513                     u158_25:	
  4850  0513  1C03               	skipc
  4851  0514  2D24               	goto	i1l2029
  4852  0515  0820               	movf	i1___aldiv@divisor,w
  4853  0516  02A4               	subwf	i1___aldiv@dividend,f
  4854  0517  0821               	movf	i1___aldiv@divisor+1,w
  4855  0518  1C03               	skipc
  4856  0519  0F21               	incfsz	i1___aldiv@divisor+1,w
  4857  051A  02A5               	subwf	i1___aldiv@dividend+1,f
  4858  051B  0822               	movf	i1___aldiv@divisor+2,w
  4859  051C  1C03               	skipc
  4860  051D  0F22               	incfsz	i1___aldiv@divisor+2,w
  4861  051E  02A6               	subwf	i1___aldiv@dividend+2,f
  4862  051F  0823               	movf	i1___aldiv@divisor+3,w
  4863  0520  1C03               	skipc
  4864  0521  0F23               	incfsz	i1___aldiv@divisor+3,w
  4865  0522  02A7               	subwf	i1___aldiv@dividend+3,f
  4866  0523  142A               	bsf	i1___aldiv@quotient,0
  4867  0524                     i1l2029:	
  4868  0524  3001               	movlw	1
  4869  0525                     u159_25:	
  4870  0525  1003               	clrc
  4871  0526  0CA3               	rrf	i1___aldiv@divisor+3,f
  4872  0527  0CA2               	rrf	i1___aldiv@divisor+2,f
  4873  0528  0CA1               	rrf	i1___aldiv@divisor+1,f
  4874  0529  0CA0               	rrf	i1___aldiv@divisor,f
  4875  052A  3EFF               	addlw	-1
  4876  052B  1D03               	skipz
  4877  052C  2D25               	goto	u159_25
  4878  052D  3001               	movlw	1
  4879  052E  02A8               	subwf	i1___aldiv@counter,f
  4880  052F  1D03               	btfss	3,2
  4881  0530  2CFC               	goto	i1l2021
  4882  0531                     i1l2033:	
  4883  0531  0829               	movf	i1___aldiv@sign,w
  4884  0532  1903               	btfsc	3,2
  4885  0533  2D3F               	goto	i1l2037
  4886  0534  09AA               	comf	i1___aldiv@quotient,f
  4887  0535  09AB               	comf	i1___aldiv@quotient+1,f
  4888  0536  09AC               	comf	i1___aldiv@quotient+2,f
  4889  0537  09AD               	comf	i1___aldiv@quotient+3,f
  4890  0538  0AAA               	incf	i1___aldiv@quotient,f
  4891  0539  1903               	skipnz
  4892  053A  0AAB               	incf	i1___aldiv@quotient+1,f
  4893  053B  1903               	skipnz
  4894  053C  0AAC               	incf	i1___aldiv@quotient+2,f
  4895  053D  1903               	skipnz
  4896  053E  0AAD               	incf	i1___aldiv@quotient+3,f
  4897  053F                     i1l2037:	
  4898  053F  082D               	movf	i1___aldiv@quotient+3,w
  4899  0540  00A3               	movwf	?i1___aldiv+3
  4900  0541  082C               	movf	i1___aldiv@quotient+2,w
  4901  0542  00A2               	movwf	?i1___aldiv+2
  4902  0543  082B               	movf	i1___aldiv@quotient+1,w
  4903  0544  00A1               	movwf	?i1___aldiv+1
  4904  0545  082A               	movf	i1___aldiv@quotient,w
  4905  0546  00A0               	movwf	?i1___aldiv
  4906  0547  0008               	return
  4907  0548                     __end_ofi1___aldiv:	
  4908                           
  4909                           	psect	text26
  4910  079F                     __ptext26:	
  4911 ;; *************** function _constrain *****************
  4912 ;; Defined at:
  4913 ;;		line 97 in file "main.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  value           4    0[COMMON] long 
  4916 ;;  lLimit          4    4[COMMON] long 
  4917 ;;  uLimit          4    8[COMMON] long 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  4    0[COMMON] long 
  4922 ;; Registers used:
  4923 ;;		wreg, btemp+1
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4929 ;;      Params:        12       0       0       0       0
  4930 ;;      Locals:         0       0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0
  4932 ;;      Totals:        12       0       0       0       0
  4933 ;;Total ram usage:       12 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_SetMotor
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _constrain
  4944  079F                     _constrain:	
  4945                           
  4946                           ;main.c: 98: if (value > uLimit){
  4947                           
  4948                           ;incstack = 0
  4949                           ; Regs used in _constrain: [wreg+btemp+1]
  4950  079F  087B               	movf	constrain@uLimit+3,w
  4951  07A0  3A80               	xorlw	128
  4952  07A1  00FF               	movwf	127
  4953  07A2  0873               	movf	constrain@value+3,w
  4954  07A3  3A80               	xorlw	128
  4955  07A4  027F               	subwf	127,w
  4956  07A5  1D03               	skipz
  4957  07A6  2FB1               	goto	u169_23
  4958  07A7  0872               	movf	constrain@value+2,w
  4959  07A8  027A               	subwf	constrain@uLimit+2,w
  4960  07A9  1D03               	skipz
  4961  07AA  2FB1               	goto	u169_23
  4962  07AB  0871               	movf	constrain@value+1,w
  4963  07AC  0279               	subwf	constrain@uLimit+1,w
  4964  07AD  1D03               	skipz
  4965  07AE  2FB1               	goto	u169_23
  4966  07AF  0870               	movf	constrain@value,w
  4967  07B0  0278               	subwf	constrain@uLimit,w
  4968  07B1                     u169_23:	
  4969  07B1  1803               	skipnc
  4970  07B2  2FBC               	goto	i1l2083
  4971                           
  4972                           ;main.c: 99: return(uLimit);
  4973  07B3  087B               	movf	constrain@uLimit+3,w
  4974  07B4  00F3               	movwf	?_constrain+3
  4975  07B5  087A               	movf	constrain@uLimit+2,w
  4976  07B6  00F2               	movwf	?_constrain+2
  4977  07B7  0879               	movf	constrain@uLimit+1,w
  4978  07B8  00F1               	movwf	?_constrain+1
  4979  07B9  0878               	movf	constrain@uLimit,w
  4980  07BA  00F0               	movwf	?_constrain
  4981  07BB  0008               	return
  4982  07BC                     i1l2083:	
  4983  07BC  0873               	movf	constrain@value+3,w
  4984  07BD  3A80               	xorlw	128
  4985  07BE  00FF               	movwf	127
  4986  07BF  0877               	movf	constrain@lLimit+3,w
  4987  07C0  3A80               	xorlw	128
  4988  07C1  027F               	subwf	127,w
  4989  07C2  1D03               	skipz
  4990  07C3  2FCE               	goto	u170_23
  4991  07C4  0876               	movf	constrain@lLimit+2,w
  4992  07C5  0272               	subwf	constrain@value+2,w
  4993  07C6  1D03               	skipz
  4994  07C7  2FCE               	goto	u170_23
  4995  07C8  0875               	movf	constrain@lLimit+1,w
  4996  07C9  0271               	subwf	constrain@value+1,w
  4997  07CA  1D03               	skipz
  4998  07CB  2FCE               	goto	u170_23
  4999  07CC  0874               	movf	constrain@lLimit,w
  5000  07CD  0270               	subwf	constrain@value,w
  5001  07CE                     u170_23:	
  5002  07CE  1803               	skipnc
  5003  07CF  0008               	return
  5004                           
  5005                           ;main.c: 101: return(lLimit);
  5006  07D0  0877               	movf	constrain@lLimit+3,w
  5007  07D1  00F3               	movwf	?_constrain+3
  5008  07D2  0876               	movf	constrain@lLimit+2,w
  5009  07D3  00F2               	movwf	?_constrain+2
  5010  07D4  0875               	movf	constrain@lLimit+1,w
  5011  07D5  00F1               	movwf	?_constrain+1
  5012  07D6  0874               	movf	constrain@lLimit,w
  5013  07D7  00F0               	movwf	?_constrain
  5014  07D8  0008               	return
  5015  07D9                     __end_of_constrain:	
  5016                           ;main.c: 103: return(value);
  5017                           
  5018                           
  5019                           	psect	text27
  5020  07D9                     __ptext27:	
  5021 ;; *************** function ___wmul *****************
  5022 ;; Defined at:
  5023 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  multiplier      2    0[COMMON] unsigned int 
  5026 ;;  multiplicand    2    2[COMMON] unsigned int 
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  product         2    4[COMMON] unsigned int 
  5029 ;; Return value:  Size  Location     Type
  5030 ;;                  2    0[COMMON] unsigned int 
  5031 ;; Registers used:
  5032 ;;		wreg, status,2, status,0
  5033 ;; Tracked objects:
  5034 ;;		On entry : 0/0
  5035 ;;		On exit  : 0/0
  5036 ;;		Unchanged: 0/0
  5037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5038 ;;      Params:         4       0       0       0       0
  5039 ;;      Locals:         2       0       0       0       0
  5040 ;;      Temps:          0       0       0       0       0
  5041 ;;      Totals:         6       0       0       0       0
  5042 ;;Total ram usage:        6 bytes
  5043 ;; Hardware stack levels used:    1
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_SetMotor
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function ___wmul
  5053  07D9                     ___wmul:	
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5057  07D9  01F4               	clrf	___wmul@product
  5058  07DA  01F5               	clrf	___wmul@product+1
  5059  07DB                     i1l2099:	
  5060  07DB  1C70               	btfss	___wmul@multiplier,0
  5061  07DC  2FE3               	goto	i1l535
  5062  07DD  0872               	movf	___wmul@multiplicand,w
  5063  07DE  07F4               	addwf	___wmul@product,f
  5064  07DF  1803               	skipnc
  5065  07E0  0AF5               	incf	___wmul@product+1,f
  5066  07E1  0873               	movf	___wmul@multiplicand+1,w
  5067  07E2  07F5               	addwf	___wmul@product+1,f
  5068  07E3                     i1l535:	
  5069  07E3  3001               	movlw	1
  5070  07E4                     u173_25:	
  5071  07E4  1003               	clrc
  5072  07E5  0DF2               	rlf	___wmul@multiplicand,f
  5073  07E6  0DF3               	rlf	___wmul@multiplicand+1,f
  5074  07E7  3EFF               	addlw	-1
  5075  07E8  1D03               	skipz
  5076  07E9  2FE4               	goto	u173_25
  5077  07EA  3001               	movlw	1
  5078  07EB                     u174_25:	
  5079  07EB  1003               	clrc
  5080  07EC  0CF1               	rrf	___wmul@multiplier+1,f
  5081  07ED  0CF0               	rrf	___wmul@multiplier,f
  5082  07EE  3EFF               	addlw	-1
  5083  07EF  1D03               	skipz
  5084  07F0  2FEB               	goto	u174_25
  5085  07F1  0870               	movf	___wmul@multiplier,w
  5086  07F2  0471               	iorwf	___wmul@multiplier+1,w
  5087  07F3  1D03               	btfss	3,2
  5088  07F4  2FDB               	goto	i1l2099
  5089  07F5  0875               	movf	___wmul@product+1,w
  5090  07F6  00F1               	movwf	?___wmul+1
  5091  07F7  0874               	movf	___wmul@product,w
  5092  07F8  00F0               	movwf	?___wmul
  5093  07F9  0008               	return
  5094  07FA                     __end_of___wmul:	
  5095                           
  5096                           	psect	text28
  5097  064E                     __ptext28:	
  5098 ;; *************** function ___awdiv *****************
  5099 ;; Defined at:
  5100 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;  divisor         2    0[COMMON] int 
  5103 ;;  dividend        2    2[COMMON] int 
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;  quotient        2    7[COMMON] int 
  5106 ;;  sign            1    6[COMMON] unsigned char 
  5107 ;;  counter         1    5[COMMON] unsigned char 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  2    0[COMMON] int 
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5117 ;;      Params:         4       0       0       0       0
  5118 ;;      Locals:         4       0       0       0       0
  5119 ;;      Temps:          1       0       0       0       0
  5120 ;;      Totals:         9       0       0       0       0
  5121 ;;Total ram usage:        9 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_SetMotor
  5127 ;;		_putchdec
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           
  5132                           ;psect for function ___awdiv
  5133  064E                     ___awdiv:	
  5134                           
  5135                           ;incstack = 0
  5136                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5137  064E  01F6               	clrf	___awdiv@sign
  5138  064F  1FF1               	btfss	___awdiv@divisor+1,7
  5139  0650  2E58               	goto	i1l2119
  5140  0651  09F0               	comf	___awdiv@divisor,f
  5141  0652  09F1               	comf	___awdiv@divisor+1,f
  5142  0653  0AF0               	incf	___awdiv@divisor,f
  5143  0654  1903               	skipnz
  5144  0655  0AF1               	incf	___awdiv@divisor+1,f
  5145  0656  01F6               	clrf	___awdiv@sign
  5146  0657  0AF6               	incf	___awdiv@sign,f
  5147  0658                     i1l2119:	
  5148  0658  1FF3               	btfss	___awdiv@dividend+1,7
  5149  0659  2E63               	goto	i1l2125
  5150  065A  09F2               	comf	___awdiv@dividend,f
  5151  065B  09F3               	comf	___awdiv@dividend+1,f
  5152  065C  0AF2               	incf	___awdiv@dividend,f
  5153  065D  1903               	skipnz
  5154  065E  0AF3               	incf	___awdiv@dividend+1,f
  5155  065F  3001               	movlw	1
  5156  0660  00F4               	movwf	??___awdiv
  5157  0661  0874               	movf	??___awdiv,w
  5158  0662  06F6               	xorwf	___awdiv@sign,f
  5159  0663                     i1l2125:	
  5160  0663  01F7               	clrf	___awdiv@quotient
  5161  0664  01F8               	clrf	___awdiv@quotient+1
  5162  0665  0870               	movf	___awdiv@divisor,w
  5163  0666  0471               	iorwf	___awdiv@divisor+1,w
  5164  0667  1903               	btfsc	3,2
  5165  0668  2E9A               	goto	i1l2147
  5166  0669  01F5               	clrf	___awdiv@counter
  5167  066A  0AF5               	incf	___awdiv@counter,f
  5168  066B                     i1l2135:	
  5169  066B  1BF1               	btfsc	___awdiv@divisor+1,7
  5170  066C  2E79               	goto	i1l2137
  5171  066D  3001               	movlw	1
  5172  066E                     u179_25:	
  5173  066E  1003               	clrc
  5174  066F  0DF0               	rlf	___awdiv@divisor,f
  5175  0670  0DF1               	rlf	___awdiv@divisor+1,f
  5176  0671  3EFF               	addlw	-1
  5177  0672  1D03               	skipz
  5178  0673  2E6E               	goto	u179_25
  5179  0674  3001               	movlw	1
  5180  0675  00F4               	movwf	??___awdiv
  5181  0676  0874               	movf	??___awdiv,w
  5182  0677  07F5               	addwf	___awdiv@counter,f
  5183  0678  2E6B               	goto	i1l2135
  5184  0679                     i1l2137:	
  5185  0679  3001               	movlw	1
  5186  067A                     u181_25:	
  5187  067A  1003               	clrc
  5188  067B  0DF7               	rlf	___awdiv@quotient,f
  5189  067C  0DF8               	rlf	___awdiv@quotient+1,f
  5190  067D  3EFF               	addlw	-1
  5191  067E  1D03               	skipz
  5192  067F  2E7A               	goto	u181_25
  5193  0680  0871               	movf	___awdiv@divisor+1,w
  5194  0681  0273               	subwf	___awdiv@dividend+1,w
  5195  0682  1D03               	skipz
  5196  0683  2E86               	goto	u182_25
  5197  0684  0870               	movf	___awdiv@divisor,w
  5198  0685  0272               	subwf	___awdiv@dividend,w
  5199  0686                     u182_25:	
  5200  0686  1C03               	skipc
  5201  0687  2E8F               	goto	i1l2143
  5202  0688  0870               	movf	___awdiv@divisor,w
  5203  0689  02F2               	subwf	___awdiv@dividend,f
  5204  068A  0871               	movf	___awdiv@divisor+1,w
  5205  068B  1C03               	skipc
  5206  068C  03F3               	decf	___awdiv@dividend+1,f
  5207  068D  02F3               	subwf	___awdiv@dividend+1,f
  5208  068E  1477               	bsf	___awdiv@quotient,0
  5209  068F                     i1l2143:	
  5210  068F  3001               	movlw	1
  5211  0690                     u183_25:	
  5212  0690  1003               	clrc
  5213  0691  0CF1               	rrf	___awdiv@divisor+1,f
  5214  0692  0CF0               	rrf	___awdiv@divisor,f
  5215  0693  3EFF               	addlw	-1
  5216  0694  1D03               	skipz
  5217  0695  2E90               	goto	u183_25
  5218  0696  3001               	movlw	1
  5219  0697  02F5               	subwf	___awdiv@counter,f
  5220  0698  1D03               	btfss	3,2
  5221  0699  2E79               	goto	i1l2137
  5222  069A                     i1l2147:	
  5223  069A  0876               	movf	___awdiv@sign,w
  5224  069B  1903               	btfsc	3,2
  5225  069C  2EA2               	goto	i1l2151
  5226  069D  09F7               	comf	___awdiv@quotient,f
  5227  069E  09F8               	comf	___awdiv@quotient+1,f
  5228  069F  0AF7               	incf	___awdiv@quotient,f
  5229  06A0  1903               	skipnz
  5230  06A1  0AF8               	incf	___awdiv@quotient+1,f
  5231  06A2                     i1l2151:	
  5232  06A2  0878               	movf	___awdiv@quotient+1,w
  5233  06A3  00F1               	movwf	?___awdiv+1
  5234  06A4  0877               	movf	___awdiv@quotient,w
  5235  06A5  00F0               	movwf	?___awdiv
  5236  06A6  0008               	return
  5237  06A7                     __end_of___awdiv:	
  5238  007E                     btemp	set	126	;btemp
  5239  007E                     wtemp0	set	126


Data Sizes:
    Strings     42
    Constant    10
    Data        0
    BSS         132
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     51      80
    BANK1            80     67      78
    BANK3            96      0      92
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_5(CODE[14]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[11]), 
		 -> STR_1(CODE[13]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@sVar_387(BANK1[10]), main@sVar(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 10
		 -> main@sVar_387(BANK1[10]), main@sVar(BANK1[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_pwm_set->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_SetMotor
    _SetMotor->i1_pwm_set
    i1_pwm_set->i1___aldiv

Critical Paths under _main in BANK1

    _main->_pwm_set
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putst->_putch
    _motor_reset->_pwm_set
    _pwm_set->___aldiv
    ___aldiv->___lmul

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0    7977
                                             38 BANK1     29    29      0
                           _SetPoint
                             _chkchr
                      _encoders_init
                        _motor_reset
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                       _spiDataReady
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1647
                                             14 BANK1     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 (1) _spiDataReady                                         2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     276
                                              2 BANK1      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    2613
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2059
                                             28 BANK1     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK1     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                             2     0      2     554
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    3595
                                             44 BANK0      7     7      0
                           _SetMotor
 ---------------------------------------------------------------------------------
 (5) _SetMotor                                            20    20      0    3572
                                             24 BANK0     20    20      0
                            ___awdiv
                             ___wmul
                          _constrain
                          i1_pwm_set
 ---------------------------------------------------------------------------------
 (6) i1_pwm_set                                           10     4      6     963
                                             14 BANK0     10     4      6
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (7) i1___aldiv                                           15     7      8     352
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) _constrain                                           12     0     12     382
                                              0 COMMON    12     0     12
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     396
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4    1516
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetPoint
   _chkchr
   _encoders_init
   _motor_reset
     _SetPoint
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _spiDataReady
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _SetMotor
     ___awdiv
     ___wmul
     _constrain
     i1_pwm_set
       i1___aldiv
         i1___lmul (ARG)
       i1___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     108       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     33      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     43      4E       7       97.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      5C       9       95.8%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0     108      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 29 16:57:32 2019

                      pc 0002              __CFG_CP$OFF 0000              _SSPSTATbits 0094  
                     l82 0F73                       l83 0F81             ___awdiv@sign 0076  
                     fsr 0004      ___wmul@multiplicand 0072                      l170 0F1C  
                    l403 0ECA                      l182 05CC                      l407 07FA  
                    l600 043C                      _GIE 005F                      _RA5 002D  
                    _RA6 002E                      _RB5 0035                      _PR2 0092  
           __CFG_CPD$OFF 0000                      _RX9 00C6                      _TX9 04C6  
                    _ab1 006A                      _isr 01B0                      fsr0 0004  
                    indf 0000             __CFG_IESO$ON 0000             __CFG_FOSC$EC 0000  
       _encoder1_counter 005F             __CFG_LVP$OFF 0000           i1___aldiv@sign 0029  
                   l2051 0F65                     l2053 0F83                     l2301 0FCD  
                   l2063 05B5                     l2065 05BA                     l2059 055E  
                   l2403 02D4                     l2069 05BF                     l2173 0755  
                   l2165 0731                     l2167 073F                     l2191 0FAC  
                   l2431 0324                     l2177 0760                     l2425 0303  
                   l2409 02EA                     l2259 0E79                     l2371 0EC6  
                   l2195 0FBA                     l2419 0301                     l2189 0F9E  
                   l2445 0337                     l2437 0333                     l2295 0FEA  
                   l2383 0E94                     l2199 0FC5                     l2447 02B4  
                   l2449 037A                     l2299 0FF9                     l1935 06B1  
                   l2673 040A                     l2665 03E2                     l1939 06C7  
                   l1965 045D                     l1957 044D                     l1983 04B0  
                   l1975 0495                     l1967 046D                     l1979 04A2  
                   l2795 05C4                     ?_isr 0070                     STR_1 0783  
                   STR_2 0790                     STR_3 079B                     _ANS4 0C44  
                   STR_5 0775                     _ANS8 0C48                     _ANS9 0C49  
                   _BRGH 04C2                     _T0IE 005D                     _CREN 00C4  
                   _T0IF 005A                     _FERR 00C2                     _IOCB 0096  
                   u1405 0461                     u1425 046F                     u1345 06C9  
                   u1435 0484                     u1355 06D1                     u2235 031A  
                   u1445 0496                     u2185 0EEF                     u1663 055C  
                   u1680 05A1                     u1681 05A2                     u1905 074C  
                   u1682 05A7                     u1683 05A8                     u1915 0756  
                   u1945 0FA1                     u1875 0734                     _PEIE 005E  
                   u1965 0FB2                     u1895 0740                     u1975 0FBB  
                   _RBIE 005B                     _RBIF 0058                     _RCIE 0465  
                   _RCIF 0065                     _OERR 00C1                     _TMR0 0001  
                   _SPEN 00C7                     _SREN 00C5                     _TXIE 0464  
                   _TXEN 04C5                     _TXIF 0064                     _SYNC 04C4  
           __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000                     _main 037F  
                   btemp 007E                     start 0012            __CFG_MCLRE$ON 0000  
                  ??_isr 004C             main@sVar_387 00D8          __end_of___aldiv 04B9  
                  ?_main 0070          __end_of___awdiv 06A7                    _ANS10 0C4A  
                  _ANS11 0C4B                    _ANS13 0C4D            __CFG_WDTE$OFF 0000  
        ___awdiv@divisor 0070          __end_of___lwdiv 0765                    i1l301 0161  
                  i1l182 064D                    i1l600 04CB          __end_of___lwmod 0FCA  
                  i1l348 02A2                    i1l535 07E3          ___awdiv@counter 0075  
                  _RCREG 001A                    _SPBRG 0099                    _PORTB 0006  
                  _TXREG 0019      ___lmul@multiplicand 00A4          ??_encoders_init 00A0  
        __end_of_dpowers 0775                    _dummy 006C                    _onlyK 0065  
                  _putch 0F62                    _putst 0FCA           __CFG_BOREN$OFF 0000  
       __end_ofi1___lmul 0727                    pclath 000A          __end_of_spiInit 0ED0  
        __end_of_spiRead 0E73          __end_of_pwm_set 05CD                    status 0003  
     __size_ofi1___aldiv 008F                    wtemp0 007E          __end_of_sprintf 037F  
        __initialization 0015             __end_of_main 042A      i1___lmul@multiplier 0070  
                 ??_main 00C6       __size_ofi1_pwm_set 0081         __end_of_SetMotor 01B0  
       __end_of_SetPoint 0EA9                   _CCPR1L 0015                   _CCPR2L 001B  
       ___awdiv@dividend 0072                   ?_putch 0070                   ?_putst 0070  
                 i1l2011 04DC                   i1l2021 04FC                   i1l2033 0531  
                 i1l2019 04EC                   i1l2211 063A                   i1l2125 0663  
                 i1l2037 053F                   i1l2029 0524                   i1l2213 063D  
                 i1l2151 06A2                   i1l2143 068F                   i1l2135 066B  
                 i1l2119 0658                   i1l2207 05E3                   i1l2137 0679  
                 i1l2217 0640                   i1l2147 069A                   i1l2083 07BC  
                 u200_23 05E1                   i1l2335 0071                   i1l2327 0057  
                 i1l2353 018D                   i1l2601 0292                   i1l2099 07DB  
                 i1l2349 013E                   i1l2541 01D0                   u202_20 0626  
                 u202_21 0627                   i1l2561 020B                   i1l2553 01F6  
                 u202_22 062C                   u202_23 062D                   i1l2547 01E9  
                 i1l2573 021D                   i1l2565 0210                   i1l2575 022B  
                 i1l2593 026E                   i1l2585 0244                   i1l2569 0219  
                 i1l2579 023F                   i1l2589 025A                   i1l2599 0284  
                 i1l1993 0706                   i1l1989 06F0                   i1l2797 0645  
                 u150_25 0710                   u215_20 0099                   u215_21 009A  
                 u215_22 009F                   u215_23 00A0                   u216_23 013C  
                 u170_23 07CE                   u155_25 04F0                   u181_25 067A  
                 u173_25 07E4                   u157_25 04FE                   u149_25 0708  
                 u182_25 0686                   u174_25 07EB                   u158_25 0513  
                 u246_25 01C6                   u183_25 0690                   u159_25 0525  
                 u169_23 07B1                   u249_25 0200                   u179_25 066E  
                 _TMR1IE 0460                   _TRISB1 0431                   _TRISB2 0432  
                 _TRISC1 0439                   _TRISA5 042D                   _TRISB3 0433  
                 _TRISC2 043A                   _TRISA6 042E                   _TRISB4 0434  
                 _TRISB5 0435                   _TRISC3 043B                   _TRISB7 0437  
                 _TRISC5 043D                   _SSPCON 0014                   _SSPBUF 0013  
         __CFG_PWRTE$OFF 0000             ?_serial_init 0070                   ___lmul 06A7  
              ??___aldiv 00B5                   ___wmul 07D9                ??___awdiv 0074  
                 _chkchr 0E73                ??___lwdiv 00A4                ??___lwmod 00AC  
       ___awdiv@quotient 0077                   _state1 006B             ?_motor_reset 0070  
      __end_ofi1___aldiv 0548                   saved_w 007E         __end_of_spiWrite 0E83  
              ??_spiInit 00A3                ??_spiRead 00A0         __end_of_pwm_init 0F2E  
                 putch@c 00A1                ??_pwm_set 00C2                ??_sprintf 00B1  
__end_of__initialization 002D        __end_ofi1_pwm_set 064E           __pcstackCOMMON 0070  
          __end_of_putch 0F96            __end_of_putst 1000                ?i1___lmul 0070  
         _OPTION_REGbits 0081              SetMotor@err 004A        i1___aldiv@divisor 0020  
                ??_putch 00A0        i1___aldiv@counter 0028                  ??_putst 00A2  
             __pbssBANK0 0053               __pbssBANK1 00E2               __pbssBANK3 0190  
     __size_of_constrain 003A                ?_SetMotor 0070                ?_SetPoint 00A0  
             __pmaintext 037F                  ?___lmul 00A0                  ?___wmul 0070  
                ?_chkchr 0070               __pintentry 0004  __size_of_spiReceiveWait 0005  
         ___lmul@product 00A9               ??i1___lmul 0078            ?_spiDataReady 00A0  
          ?_resetCounter 0070                  _SPIData 00E8                  _SSPSTAT 0094  
             __stringtab 0765               ??_SetMotor 0038               ??_SetPoint 00A2  
              ?_spiWrite 0070                  ___aldiv 042A                  ___awdiv 064E  
        __size_of___lmul 0041          __size_of___wmul 0021                ?_pwm_init 0070  
                ___lwdiv 0727                  ___lwmod 0F96          __size_of_chkchr 0008  
   __size_of_serial_init 0018        __end_of_constrain 07D9                  __ptext1 02AD  
                __ptext2 0F96                  __ptext3 0727                  __ptext4 0E7B  
                __ptext5 0E6C                  __ptext6 07FA                  __ptext7 0EBC  
                __ptext8 0E8B                  __ptext9 0ED0           ??_spiDataReady 00A2  
                _dpowers 076B                _T2CONbits 0012             __size_of_isr 00FD  
       ___aldiv@dividend 00B1     __size_of_motor_reset 0034                  _samples 0067  
         ??_resetCounter 00A0                  _spiInit 0EBC                  _spiRead 0E6C  
                _pwm_set 0548                  _sprintf 02AD                  clrloop0 0E84  
   end_of_initialization 002D    __end_of_encoders_init 0F04                  isr@tick 00E2  
       ___aldiv@quotient 00B8               ??_spiWrite 00A0               ??_pwm_init 00A0  
       SetMotor@last_err 0063         SetMotor@integral 00E9                i1___aldiv 04B9  
     SetMotor@D_Response 0042              spiWrite@dat 00A0              _CCP1CONbits 0017  
            _CCP2CONbits 001D                i1_pwm_set 05CD           _spiReceiveWait 07FA  
         __end_of___lmul 06E8           __end_of___wmul 07FA       SetMotor@I_Response 0044  
         __end_of_chkchr 0E7B         _delayus_variable 006D    i1___lmul@multiplicand 0074  
      __size_ofi1___lmul 003F      start_initialization 0015               ?i1___aldiv 0020  
            __end_of_isr 02AD     __end_of_spiDataReady 0E97             SetMotor@resp 0046  
             ?i1_pwm_set 002E   __end_of_spiReceiveWait 07FF     __end_of_resetCounter 0EBC  
               ??___lmul 00A8        __size_of_SetMotor 017F        __size_of_SetPoint 0012  
               ??___wmul 0074       SetMotor@P_Response 0040                 ??_chkchr 00A0  
      pwm_set@duty_cycle 00BE       i1___aldiv@dividend 0024                ___latbits 0002  
          __pcstackBANK0 0020            __pcstackBANK1 00A0         i1___lmul@product 0079  
            sprintf@flag 00B5       i1___aldiv@quotient 002A              sprintf@prec 00B6  
       ___lwdiv@dividend 00A2          ?_spiReceiveWait 0070                 ?___aldiv 00AD  
               ?___awdiv 0070                 ?___lwdiv 00A0                 ?___lwmod 00A8  
      __size_of_spiWrite 0008                __pstrings 0765        __size_of_pwm_init 002A  
         pwm_set@channel 00BC                _constrain 079F                 ?_spiInit 00A0  
               ?_spiRead 0070              ??i1___aldiv 007D         ___lwdiv@quotient 00A5  
               ?_pwm_set 00BC                 ?_sprintf 00AE           __size_of_putch 0034  
         __size_of_putst 0036          ___aldiv@divisor 00AD     spiInit@sTransmitEdge 00A2  
      interrupt_function 0004          ___aldiv@counter 00B6           ___wmul@product 0074  
              clear_ram0 0E83       spiInit@sDataSample 00A0                 _PIR1bits 000C  
          ??_serial_init 00A0              ??i1_pwm_set 0034                _set_point 0057  
              _motor_pos 005B                 i1___lmul 06E8            ??_motor_reset 00C6  
            __stringbase 076A        ___wmul@multiplier 0070               ?_constrain 0070  
        SetPoint@new_val 00A0        ___lmul@multiplier 00A0    __size_of_spiDataReady 000C  
  __size_of_resetCounter 0013                 _SetMotor 0031                 _SetPoint 0E97  
               _nSPIData 00E4         __size_of___aldiv 008F         __size_of___awdiv 0059  
       __size_of___lwdiv 003E         __size_of___lwmod 0034   __size_of_encoders_init 001C  
    __end_of_serial_init 0EE8       __end_of__stringtab 076B             _spiDataReady 0E8B  
             sprintf@val 00B7          ___lwdiv@divisor 00A0          ___lwdiv@counter 00A7  
               __ptext10 0F04                 __ptext11 0FCA                 __ptext20 0E73  
               __ptext12 0F62                 __ptext21 01B0                 __ptext13 0F2E  
               __ptext22 0031                 __ptext14 0EA9                 __ptext23 05CD  
               __ptext15 0548                 __ptext24 06E8                 __ptext16 06A7  
               __ptext25 04B9                 __ptext17 042A                 __ptext26 079F  
               __ptext18 0E97                 __ptext27 07D9                 __ptext19 0EE8  
               __ptext28 064E             _resetCounter 0EA9      __end_of_motor_reset 0F62  
       __size_of_spiInit 0014         __size_of_spiRead 0007        __CFG_BOR4V$BOR21V 0000  
               _com_time 00E6         __size_of_pwm_set 0085         __size_of_sprintf 00D2  
               _last_pos 0053            __size_of_main 00AB                 _sampling 0069  
               _pos_log1 01BE                 _pos_log2 0190       SetMotor@derivative 006E  
               _spiWrite 0E7B             spiInit@sType 00A3                 _pwm_init 0F04  
               main@sVar 00CD        spiInit@sClockIdle 00A1              ??_constrain 007C  
               isr@portB 0052          constrain@lLimit 0074          constrain@uLimit 0078  
               intlevel1 0000                sprintf@ap 00B4                sprintf@sp 00B9  
          _encoders_init 0EE8         ___lwmod@dividend 00AA         ??_spiReceiveWait 00A0  
              stringcode 0765              _serial_init 0ED0              _motor_reset 0F2E  
         constrain@value 0070                 sprintf@c 00BA                 sprintf@f 00AE  
               putst@str 00A3          ___lwmod@divisor 00A8          ___lwmod@counter 00AD  
               stringdir 0765                 stringtab 0765             ___aldiv@sign 00B7  
    i1pwm_set@duty_cycle 0030           ?_encoders_init 0070         i1pwm_set@channel 002E  
