

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun May 26 22:49:33 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.05
    44                           ; Generated 20/12/2018 GMT
    45                           ; 
    46                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F886 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0098                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  0105                     	;# 
   215  0107                     	;# 
   216  0108                     	;# 
   217  0109                     	;# 
   218  010C                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  0185                     	;# 
   224  0187                     	;# 
   225  0188                     	;# 
   226  0189                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  008F                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  009F                     	;# 
   366  0105                     	;# 
   367  0107                     	;# 
   368  0108                     	;# 
   369  0109                     	;# 
   370  010C                     	;# 
   371  010C                     	;# 
   372  010D                     	;# 
   373  010E                     	;# 
   374  010F                     	;# 
   375  0185                     	;# 
   376  0187                     	;# 
   377  0188                     	;# 
   378  0189                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  000E                     	;# 
   396  000F                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0014                     	;# 
   402  0015                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001D                     	;# 
   413  001E                     	;# 
   414  001F                     	;# 
   415  0081                     	;# 
   416  0085                     	;# 
   417  0086                     	;# 
   418  0087                     	;# 
   419  0089                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  008F                     	;# 
   424  0090                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0093                     	;# 
   429  0093                     	;# 
   430  0094                     	;# 
   431  0095                     	;# 
   432  0096                     	;# 
   433  0097                     	;# 
   434  0098                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009C                     	;# 
   439  009D                     	;# 
   440  009E                     	;# 
   441  009F                     	;# 
   442  0105                     	;# 
   443  0107                     	;# 
   444  0108                     	;# 
   445  0109                     	;# 
   446  010C                     	;# 
   447  010C                     	;# 
   448  010D                     	;# 
   449  010E                     	;# 
   450  010F                     	;# 
   451  0185                     	;# 
   452  0187                     	;# 
   453  0188                     	;# 
   454  0189                     	;# 
   455  018C                     	;# 
   456  018D                     	;# 
   457  0000                     	;# 
   458  0001                     	;# 
   459  0002                     	;# 
   460  0003                     	;# 
   461  0004                     	;# 
   462  0005                     	;# 
   463  0006                     	;# 
   464  0007                     	;# 
   465  0009                     	;# 
   466  000A                     	;# 
   467  000B                     	;# 
   468  000C                     	;# 
   469  000D                     	;# 
   470  000E                     	;# 
   471  000E                     	;# 
   472  000F                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0014                     	;# 
   478  0015                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  001A                     	;# 
   485  001B                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001D                     	;# 
   489  001E                     	;# 
   490  001F                     	;# 
   491  0081                     	;# 
   492  0085                     	;# 
   493  0086                     	;# 
   494  0087                     	;# 
   495  0089                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  008F                     	;# 
   500  0090                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0093                     	;# 
   504  0093                     	;# 
   505  0093                     	;# 
   506  0094                     	;# 
   507  0095                     	;# 
   508  0096                     	;# 
   509  0097                     	;# 
   510  0098                     	;# 
   511  0099                     	;# 
   512  009A                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  009F                     	;# 
   518  0105                     	;# 
   519  0107                     	;# 
   520  0108                     	;# 
   521  0109                     	;# 
   522  010C                     	;# 
   523  010C                     	;# 
   524  010D                     	;# 
   525  010E                     	;# 
   526  010F                     	;# 
   527  0185                     	;# 
   528  0187                     	;# 
   529  0188                     	;# 
   530  0189                     	;# 
   531  018C                     	;# 
   532  018D                     	;# 
   533                           
   534                           	psect	strings
   535  0800                     __pstrings:	
   536  0800                     stringtab:	
   537  0800                     __stringtab:	
   538  0800                     stringcode:	
   539                           ;	String table - string pointers are 1 byte each
   540                           
   541  0800                     stringdir:	
   542  0800  3008               	movlw	high stringdir
   543  0801  008A               	movwf	10
   544  0802  0804               	movf	4,w
   545  0803  0A84               	incf	4,f
   546  0804  0782               	addwf	2,f
   547  0805                     __stringbase:	
   548  0805  3400               	retlw	0
   549  0806                     __end_of__stringtab:	
   550  0806                     _dpowers:	
   551  0806  3401               	retlw	1
   552  0807  3400               	retlw	0
   553  0808  340A               	retlw	10
   554  0809  3400               	retlw	0
   555  080A  3464               	retlw	100
   556  080B  3400               	retlw	0
   557  080C  34E8               	retlw	232
   558  080D  3403               	retlw	3
   559  080E  3410               	retlw	16
   560  080F  3427               	retlw	39
   561  0810                     __end_of_dpowers:	
   562  0013                     _SSPBUF	set	19
   563  0014                     _SSPCONbits	set	20
   564  0006                     _PORTB	set	6
   565  0001                     _TMR0	set	1
   566  0012                     _T2CONbits	set	18
   567  000C                     _PIR1bits	set	12
   568  001B                     _CCPR2L	set	27
   569  0015                     _CCPR1L	set	21
   570  001D                     _CCP2CONbits	set	29
   571  0017                     _CCP1CONbits	set	23
   572  0019                     _TXREG	set	25
   573  001A                     _RCREG	set	26
   574  0030                     _RB0	set	48
   575  00A7                     _WCOL	set	167
   576  0063                     _SSPIF	set	99
   577  00A4                     _CKP	set	164
   578  00A5                     _SSPEN	set	165
   579  0038                     _RC0	set	56
   580  005F                     _GIE	set	95
   581  005E                     _PEIE	set	94
   582  0035                     _RB5	set	53
   583  0058                     _RBIF	set	88
   584  005B                     _RBIE	set	91
   585  005A                     _T0IF	set	90
   586  005D                     _T0IE	set	93
   587  002E                     _RA6	set	46
   588  002D                     _RA5	set	45
   589  0065                     _RCIF	set	101
   590  0064                     _TXIF	set	100
   591  00C2                     _FERR	set	194
   592  00C1                     _OERR	set	193
   593  00C6                     _RX9	set	198
   594  00C5                     _SREN	set	197
   595  00C4                     _CREN	set	196
   596  00C7                     _SPEN	set	199
   597  0094                     _SSPSTATbits	set	148
   598  0096                     _IOCB	set	150
   599  0081                     _OPTION_REGbits	set	129
   600  0092                     _PR2	set	146
   601  0099                     _SPBRG	set	153
   602  04A7                     _SMP	set	1191
   603  04A6                     _CKE	set	1190
   604  043D                     _TRISC5	set	1085
   605  043C                     _TRISC4	set	1084
   606  043B                     _TRISC3	set	1083
   607  0438                     _TRISC0	set	1080
   608  0430                     _TRISB0	set	1072
   609  0460                     _TMR1IE	set	1120
   610  0434                     _TRISB4	set	1076
   611  0433                     _TRISB3	set	1075
   612  0432                     _TRISB2	set	1074
   613  0431                     _TRISB1	set	1073
   614  0437                     _TRISB7	set	1079
   615  0435                     _TRISB5	set	1077
   616  042E                     _TRISA6	set	1070
   617  042D                     _TRISA5	set	1069
   618  043A                     _TRISC2	set	1082
   619  0439                     _TRISC1	set	1081
   620  04C5                     _TXEN	set	1221
   621  04C6                     _TX9	set	1222
   622  0465                     _RCIE	set	1125
   623  0464                     _TXIE	set	1124
   624  04C4                     _SYNC	set	1220
   625  04C2                     _BRGH	set	1218
   626  0C4C                     _ANS12	set	3148
   627  0C4B                     _ANS11	set	3147
   628  0C48                     _ANS8	set	3144
   629  0C49                     _ANS9	set	3145
   630  0C4A                     _ANS10	set	3146
   631  0C4D                     _ANS13	set	3149
   632  0C44                     _ANS4	set	3140
   633  0810                     STR_4:	
   634  0810  3446               	retlw	70	;'F'
   635  0811  3469               	retlw	105	;'i'
   636  0812  346D               	retlw	109	;'m'
   637  0813  3420               	retlw	32	;' '
   638  0814  3464               	retlw	100	;'d'
   639  0815  346F               	retlw	111	;'o'
   640  0816  3420               	retlw	32	;' '
   641  0817  3474               	retlw	116	;'t'
   642  0818  3465               	retlw	101	;'e'
   643  0819  3473               	retlw	115	;'s'
   644  081A  3474               	retlw	116	;'t'
   645  081B  3465               	retlw	101	;'e'
   646  081C  3420               	retlw	32	;' '
   647  081D  3400               	retlw	0
   648  081E                     STR_1:	
   649  081E  344B               	retlw	75	;'K'
   650  081F  3470               	retlw	112	;'p'
   651  0820  343A               	retlw	58	;':'
   652  0821  3420               	retlw	32	;' '
   653  0822  3425               	retlw	37	;'%'
   654  0823  3464               	retlw	100	;'d'
   655  0824  3420               	retlw	32	;' '
   656  0825  342D               	retlw	45	;'-'
   657  0826  343E               	retlw	62	;'>'
   658  0827  3420               	retlw	32	;' '
   659  0828  3400               	retlw	0
   660  0829                     STR_2:	
   661  0829  3425               	retlw	37	;'%'
   662  082A  3464               	retlw	100	;'d'
   663  082B  3420               	retlw	32	;' '
   664  082C  3400               	retlw	0
   665  0829                     
   666                           ; #config settings
   667  0000                     
   668                           	psect	cinit
   669  0015                     start_initialization:	
   670  0015                     __initialization:	
   671                           
   672                           ; Clear objects allocated to BANK0
   673  0015  1383               	bcf	3,7	;select IRP bank0
   674  0016  305E               	movlw	low __pbssBANK0
   675  0017  0084               	movwf	4
   676  0018  306F               	movlw	low (__pbssBANK0+17)
   677  0019  120A  158A  2219  120A  118A  	fcall	clear_ram0
   678                           
   679                           ; Clear objects allocated to BANK1
   680  001E  30D7               	movlw	low __pbssBANK1
   681  001F  0084               	movwf	4
   682  0020  30ED               	movlw	low (__pbssBANK1+22)
   683  0021  120A  158A  2219  120A  118A  	fcall	clear_ram0
   684                           
   685                           ; Clear objects allocated to BANK3
   686  0026  1783               	bsf	3,7	;select IRP bank2
   687  0027  3090               	movlw	low __pbssBANK3
   688  0028  0084               	movwf	4
   689  0029  30C3               	movlw	low (__pbssBANK3+51)
   690  002A  120A  158A  2219  120A  118A  	fcall	clear_ram0
   691                           
   692                           ; Clear objects allocated to BANK2
   693  002F  3010               	movlw	low __pbssBANK2
   694  0030  0084               	movwf	4
   695  0031  3043               	movlw	low (__pbssBANK2+51)
   696  0032  120A  158A  2219   	fcall	clear_ram0
   697  0035                     end_of_initialization:	
   698                           ;End of C runtime variable initialization code
   699                           
   700  0035                     __end_of__initialization:	
   701  0035  0183               	clrf	3
   702  0036  120A  118A  2D5C   	ljmp	_main	;jump to C main() function
   703                           
   704                           	psect	bssBANK0
   705  005E                     __pbssBANK0:	
   706  005E                     _last_pos:	
   707  005E                     	ds	4
   708  0062                     _motor_pos:	
   709  0062                     	ds	4
   710  0066                     _com_time:	
   711  0066                     	ds	2
   712  0068                     _samples:	
   713  0068                     	ds	2
   714  006A                     _sampling:	
   715  006A                     	ds	1
   716  006B                     _ab1:	
   717  006B                     	ds	1
   718  006C                     _state1:	
   719  006C                     	ds	1
   720  006D                     _dummy:	
   721  006D                     	ds	1
   722  006E                     _delayus_variable:	
   723  006E                     	ds	1
   724                           
   725                           	psect	bssBANK1
   726  00D7                     __pbssBANK1:	
   727  00D7                     SetMotor@last_err:	
   728  00D7                     	ds	4
   729  00DB                     _set_point:	
   730  00DB                     	ds	4
   731  00DF                     _encoder1_counter:	
   732  00DF                     	ds	4
   733  00E3                     isr@tick:	
   734  00E3                     	ds	2
   735  00E5                     SetMotor@derivative:	
   736  00E5                     	ds	4
   737  00E9                     SetMotor@integral:	
   738  00E9                     	ds	4
   739                           
   740                           	psect	bssBANK3
   741  0190                     __pbssBANK3:	
   742  0190                     _pos_log1:	
   743  0190                     	ds	51
   744                           
   745                           	psect	bssBANK2
   746  0110                     __pbssBANK2:	
   747  0110                     _pos_log2:	
   748  0110                     	ds	51
   749                           
   750                           	psect	clrtext
   751  0A19                     clear_ram0:	
   752                           ;	Called with FSR containing the base address, and
   753                           ;	W with the last address+1
   754                           
   755  0A19  0064               	clrwdt	;clear the watchdog before getting into this loop
   756  0A1A                     clrloop0:	
   757  0A1A  0180               	clrf	0	;clear RAM location pointed to by FSR
   758  0A1B  0A84               	incf	4,f	;increment pointer
   759  0A1C  0604               	xorwf	4,w	;XOR with final address
   760  0A1D  1903               	btfsc	3,2	;have we reached the end yet?
   761  0A1E  3400               	retlw	0	;all done for this memory range, return
   762  0A1F  0604               	xorwf	4,w	;XOR again to restore value
   763  0A20  2A1A               	goto	clrloop0	;do the next byte
   764                           
   765                           	psect	cstackBANK1
   766  00A0                     __pcstackBANK1:	
   767  00A0                     ??_spi_slave_init:	
   768  00A0                     ??_serial_init:	
   769                           ; 1 bytes @ 0x0
   770                           
   771  00A0                     ??_putch:	
   772                           ; 1 bytes @ 0x0
   773                           
   774  00A0                     ??_chkchr:	
   775                           ; 1 bytes @ 0x0
   776                           
   777  00A0                     ??_pwm_init:	
   778                           ; 1 bytes @ 0x0
   779                           
   780  00A0                     ?_SetPoint:	
   781                           ; 1 bytes @ 0x0
   782                           
   783  00A0                     ??_resetCounter:	
   784                           ; 1 bytes @ 0x0
   785                           
   786  00A0                     ??_encoders_init:	
   787                           ; 1 bytes @ 0x0
   788                           
   789  00A0                     ?___lwdiv:	
   790                           ; 1 bytes @ 0x0
   791                           
   792  00A0                     ?___lmul:	
   793                           ; 2 bytes @ 0x0
   794                           
   795  00A0                     SetPoint@new_val:	
   796                           ; 4 bytes @ 0x0
   797                           
   798  00A0                     ___lwdiv@divisor:	
   799                           ; 2 bytes @ 0x0
   800                           
   801  00A0                     ___lmul@multiplier:	
   802                           ; 2 bytes @ 0x0
   803                           
   804                           
   805                           ; 4 bytes @ 0x0
   806  00A0                     	ds	1
   807  00A1                     putch@c:	
   808                           
   809                           ; 1 bytes @ 0x1
   810  00A1                     	ds	1
   811  00A2                     ??_putst:	
   812  00A2                     ??_SetPoint:	
   813                           ; 1 bytes @ 0x2
   814                           
   815  00A2                     ___lwdiv@dividend:	
   816                           ; 1 bytes @ 0x2
   817                           
   818                           
   819                           ; 2 bytes @ 0x2
   820  00A2                     	ds	1
   821  00A3                     putst@str:	
   822                           
   823                           ; 1 bytes @ 0x3
   824  00A3                     	ds	1
   825  00A4                     ??___lwdiv:	
   826  00A4                     ___lmul@multiplicand:	
   827                           ; 1 bytes @ 0x4
   828                           
   829                           
   830                           ; 4 bytes @ 0x4
   831  00A4                     	ds	1
   832  00A5                     ___lwdiv@quotient:	
   833                           
   834                           ; 2 bytes @ 0x5
   835  00A5                     	ds	2
   836  00A7                     ___lwdiv@counter:	
   837                           
   838                           ; 1 bytes @ 0x7
   839  00A7                     	ds	1
   840  00A8                     ??___lmul:	
   841  00A8                     ?___lwmod:	
   842                           ; 1 bytes @ 0x8
   843                           
   844  00A8                     ___lwmod@divisor:	
   845                           ; 2 bytes @ 0x8
   846                           
   847                           
   848                           ; 2 bytes @ 0x8
   849  00A8                     	ds	1
   850  00A9                     ___lmul@product:	
   851                           
   852                           ; 4 bytes @ 0x9
   853  00A9                     	ds	1
   854  00AA                     ___lwmod@dividend:	
   855                           
   856                           ; 2 bytes @ 0xA
   857  00AA                     	ds	2
   858  00AC                     ??___lwmod:	
   859                           
   860                           ; 1 bytes @ 0xC
   861  00AC                     	ds	1
   862  00AD                     ?___aldiv:	
   863  00AD                     ___lwmod@counter:	
   864                           ; 4 bytes @ 0xD
   865                           
   866  00AD                     ___aldiv@divisor:	
   867                           ; 1 bytes @ 0xD
   868                           
   869                           
   870                           ; 4 bytes @ 0xD
   871  00AD                     	ds	1
   872  00AE                     ?_sprintf:	
   873  00AE                     sprintf@f:	
   874                           ; 2 bytes @ 0xE
   875                           
   876                           
   877                           ; 1 bytes @ 0xE
   878  00AE                     	ds	3
   879  00B1                     ___aldiv@dividend:	
   880                           
   881                           ; 4 bytes @ 0x11
   882  00B1                     	ds	2
   883  00B3                     ??_sprintf:	
   884                           
   885                           ; 1 bytes @ 0x13
   886  00B3                     	ds	2
   887  00B5                     ??___aldiv:	
   888                           
   889                           ; 1 bytes @ 0x15
   890  00B5                     	ds	1
   891  00B6                     sprintf@ap:	
   892  00B6                     ___aldiv@counter:	
   893                           ; 1 bytes @ 0x16
   894                           
   895                           
   896                           ; 1 bytes @ 0x16
   897  00B6                     	ds	1
   898  00B7                     sprintf@flag:	
   899  00B7                     ___aldiv@sign:	
   900                           ; 1 bytes @ 0x17
   901                           
   902                           
   903                           ; 1 bytes @ 0x17
   904  00B7                     	ds	1
   905  00B8                     sprintf@prec:	
   906  00B8                     ___aldiv@quotient:	
   907                           ; 1 bytes @ 0x18
   908                           
   909                           
   910                           ; 4 bytes @ 0x18
   911  00B8                     	ds	1
   912  00B9                     sprintf@val:	
   913                           
   914                           ; 2 bytes @ 0x19
   915  00B9                     	ds	2
   916  00BB                     sprintf@sp:	
   917                           
   918                           ; 1 bytes @ 0x1B
   919  00BB                     	ds	1
   920  00BC                     ?_pwm_set:	
   921  00BC                     sprintf@c:	
   922                           ; 1 bytes @ 0x1C
   923                           
   924  00BC                     pwm_set@channel:	
   925                           ; 1 bytes @ 0x1C
   926                           
   927                           
   928                           ; 2 bytes @ 0x1C
   929  00BC                     	ds	2
   930  00BE                     pwm_set@duty_cycle:	
   931                           
   932                           ; 4 bytes @ 0x1E
   933  00BE                     	ds	4
   934  00C2                     ??_pwm_set:	
   935                           
   936                           ; 1 bytes @ 0x22
   937  00C2                     	ds	4
   938  00C6                     ??_main:	
   939                           
   940                           ; 1 bytes @ 0x26
   941  00C6                     	ds	6
   942  00CC                     main@sVar:	
   943                           
   944                           ; 10 bytes @ 0x2C
   945  00CC                     	ds	10
   946  00D6                     main@serialIn_346:	
   947                           
   948                           ; 1 bytes @ 0x36
   949  00D6                     	ds	1
   950                           
   951                           	psect	cstackCOMMON
   952  0070                     __pcstackCOMMON:	
   953  0070                     ?_spi_slave_init:	
   954  0070                     ?_serial_init:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_putch:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_chkchr:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_putst:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_pwm_init:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_SetMotor:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_resetCounter:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_isr:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ?_encoders_init:	
   979                           ; 1 bytes @ 0x0
   980                           
   981  0070                     ?_main:	
   982                           ; 1 bytes @ 0x0
   983                           
   984  0070                     ?__Umul8_16:	
   985                           ; 1 bytes @ 0x0
   986                           
   987  0070                     ?_constrain:	
   988                           ; 2 bytes @ 0x0
   989                           
   990  0070                     ?___xxtofl:	
   991                           ; 4 bytes @ 0x0
   992                           
   993  0070                     ?i1___lmul:	
   994                           ; 4 bytes @ 0x0
   995                           
   996  0070                     __Umul8_16@multiplicand:	
   997                           ; 4 bytes @ 0x0
   998                           
   999  0070                     constrain@value:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     ___xxtofl@val:	
  1003                           ; 4 bytes @ 0x0
  1004                           
  1005  0070                     i1___lmul@multiplier:	
  1006                           ; 4 bytes @ 0x0
  1007                           
  1008                           
  1009                           ; 4 bytes @ 0x0
  1010  0070                     	ds	2
  1011  0072                     ??__Umul8_16:	
  1012                           
  1013                           ; 1 bytes @ 0x2
  1014  0072                     	ds	2
  1015  0074                     ??___xxtofl:	
  1016  0074                     __Umul8_16@product:	
  1017                           ; 1 bytes @ 0x4
  1018                           
  1019  0074                     constrain@lLimit:	
  1020                           ; 2 bytes @ 0x4
  1021                           
  1022  0074                     i1___lmul@multiplicand:	
  1023                           ; 4 bytes @ 0x4
  1024                           
  1025                           
  1026                           ; 4 bytes @ 0x4
  1027  0074                     	ds	2
  1028  0076                     __Umul8_16@word_mpld:	
  1029                           
  1030                           ; 2 bytes @ 0x6
  1031  0076                     	ds	2
  1032  0078                     ??i1___lmul:	
  1033  0078                     ___xxtofl@sign:	
  1034                           ; 1 bytes @ 0x8
  1035                           
  1036  0078                     __Umul8_16@multiplier:	
  1037                           ; 1 bytes @ 0x8
  1038                           
  1039  0078                     constrain@uLimit:	
  1040                           ; 1 bytes @ 0x8
  1041                           
  1042                           
  1043                           ; 4 bytes @ 0x8
  1044  0078                     	ds	1
  1045  0079                     ___xxtofl@exp:	
  1046  0079                     i1___lmul@product:	
  1047                           ; 1 bytes @ 0x9
  1048                           
  1049                           
  1050                           ; 4 bytes @ 0x9
  1051  0079                     	ds	1
  1052  007A                     ___xxtofl@arg:	
  1053                           
  1054                           ; 4 bytes @ 0xA
  1055  007A                     	ds	2
  1056  007C                     ??_constrain:	
  1057                           
  1058                           ; 1 bytes @ 0xC
  1059  007C                     	ds	1
  1060  007D                     ??i1___aldiv:	
  1061                           
  1062                           ; 1 bytes @ 0xD
  1063  007D                     	ds	1
  1064                           
  1065                           	psect	cstackBANK0
  1066  0020                     __pcstackBANK0:	
  1067  0020                     ?___flmul:	
  1068  0020                     ?i1___aldiv:	
  1069                           ; 4 bytes @ 0x0
  1070                           
  1071  0020                     ___flmul@b:	
  1072                           ; 4 bytes @ 0x0
  1073                           
  1074  0020                     i1___aldiv@divisor:	
  1075                           ; 4 bytes @ 0x0
  1076                           
  1077                           
  1078                           ; 4 bytes @ 0x0
  1079  0020                     	ds	4
  1080  0024                     ___flmul@a:	
  1081  0024                     i1___aldiv@dividend:	
  1082                           ; 4 bytes @ 0x4
  1083                           
  1084                           
  1085                           ; 4 bytes @ 0x4
  1086  0024                     	ds	4
  1087  0028                     ??___flmul:	
  1088  0028                     i1___aldiv@counter:	
  1089                           ; 1 bytes @ 0x8
  1090                           
  1091                           
  1092                           ; 1 bytes @ 0x8
  1093  0028                     	ds	1
  1094  0029                     i1___aldiv@sign:	
  1095                           
  1096                           ; 1 bytes @ 0x9
  1097  0029                     	ds	1
  1098  002A                     i1___aldiv@quotient:	
  1099                           
  1100                           ; 4 bytes @ 0xA
  1101  002A                     	ds	3
  1102  002D                     ___flmul@sign:	
  1103                           
  1104                           ; 1 bytes @ 0xD
  1105  002D                     	ds	1
  1106  002E                     ?i1_pwm_set:	
  1107  002E                     i1pwm_set@channel:	
  1108                           ; 1 bytes @ 0xE
  1109                           
  1110  002E                     ___flmul@grs:	
  1111                           ; 2 bytes @ 0xE
  1112                           
  1113                           
  1114                           ; 4 bytes @ 0xE
  1115  002E                     	ds	2
  1116  0030                     i1pwm_set@duty_cycle:	
  1117                           
  1118                           ; 4 bytes @ 0x10
  1119  0030                     	ds	2
  1120  0032                     ___flmul@aexp:	
  1121                           
  1122                           ; 1 bytes @ 0x12
  1123  0032                     	ds	1
  1124  0033                     ___flmul@bexp:	
  1125                           
  1126                           ; 1 bytes @ 0x13
  1127  0033                     	ds	1
  1128  0034                     ??i1_pwm_set:	
  1129  0034                     ___flmul@prod:	
  1130                           ; 1 bytes @ 0x14
  1131                           
  1132                           
  1133                           ; 4 bytes @ 0x14
  1134  0034                     	ds	4
  1135  0038                     ___flmul@temp:	
  1136                           
  1137                           ; 2 bytes @ 0x18
  1138  0038                     	ds	2
  1139  003A                     ?___fltol:	
  1140  003A                     ___fltol@f1:	
  1141                           ; 4 bytes @ 0x1A
  1142                           
  1143                           
  1144                           ; 4 bytes @ 0x1A
  1145  003A                     	ds	4
  1146  003E                     ??___fltol:	
  1147                           
  1148                           ; 1 bytes @ 0x1E
  1149  003E                     	ds	5
  1150  0043                     ___fltol@sign1:	
  1151                           
  1152                           ; 1 bytes @ 0x23
  1153  0043                     	ds	1
  1154  0044                     ___fltol@exp1:	
  1155                           
  1156                           ; 1 bytes @ 0x24
  1157  0044                     	ds	1
  1158  0045                     ??_SetMotor:	
  1159                           
  1160                           ; 1 bytes @ 0x25
  1161  0045                     	ds	8
  1162  004D                     SetMotor@P_Response:	
  1163                           
  1164                           ; 2 bytes @ 0x2D
  1165  004D                     	ds	2
  1166  004F                     SetMotor@D_Response:	
  1167                           
  1168                           ; 2 bytes @ 0x2F
  1169  004F                     	ds	2
  1170  0051                     SetMotor@I_Response:	
  1171                           
  1172                           ; 2 bytes @ 0x31
  1173  0051                     	ds	2
  1174  0053                     SetMotor@err:	
  1175                           
  1176                           ; 2 bytes @ 0x33
  1177  0053                     	ds	2
  1178  0055                     SetMotor@resp:	
  1179                           
  1180                           ; 2 bytes @ 0x35
  1181  0055                     	ds	2
  1182  0057                     ??_isr:	
  1183                           
  1184                           ; 1 bytes @ 0x37
  1185  0057                     	ds	6
  1186  005D                     isr@portB:	
  1187                           
  1188                           ; 1 bytes @ 0x3D
  1189  005D                     	ds	1
  1190                           
  1191                           	psect	maintext
  1192  055C                     __pmaintext:	
  1193 ;;
  1194 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1195 ;;
  1196 ;; *************** function _main *****************
  1197 ;; Defined at:
  1198 ;;		line 283 in file "main.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  sVar           10   44[BANK1 ] unsigned char [10]
  1203 ;;  serialIn        1   54[BANK1 ] unsigned char 
  1204 ;;  i               2    0        int 
  1205 ;;  enc1            2    0        int 
  1206 ;;  serialIn        1    0        unsigned char 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : B00/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       0       0       0       0
  1217 ;;      Locals:         0       0      16       0       0
  1218 ;;      Temps:          0       0       1       0       0
  1219 ;;      Totals:         0       0      17       0       0
  1220 ;;Total ram usage:       17 bytes
  1221 ;; Hardware stack levels required when called:    6
  1222 ;; This function calls:
  1223 ;;		_SetPoint
  1224 ;;		_chkchr
  1225 ;;		_encoders_init
  1226 ;;		_putst
  1227 ;;		_pwm_init
  1228 ;;		_pwm_set
  1229 ;;		_resetCounter
  1230 ;;		_serial_init
  1231 ;;		_spi_slave_init
  1232 ;;		_sprintf
  1233 ;; This function is called by:
  1234 ;;		Startup code after reset
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           
  1239                           ;psect for function _main
  1240  055C                     _main:	
  1241                           
  1242                           ;main.c: 292: OPTION_REGbits.T0CS = 0;
  1243                           
  1244                           ;incstack = 0
  1245                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1246  055C  1683               	bsf	3,5	;RP0=1, select bank1
  1247  055D  1303               	bcf	3,6	;RP1=0, select bank1
  1248  055E  1281               	bcf	1,5	;volatile
  1249                           
  1250                           ;main.c: 293: OPTION_REGbits.PSA = 0;
  1251  055F  1181               	bcf	1,3	;volatile
  1252                           
  1253                           ;main.c: 294: OPTION_REGbits.PS = 7;
  1254  0560  3007               	movlw	7
  1255  0561  0481               	iorwf	1,f	;volatile
  1256                           
  1257                           ;main.c: 297: TRISB5 = 0;
  1258  0562  1286               	bcf	6,5	;volatile
  1259                           
  1260                           ;main.c: 298: ANS13 = 0;
  1261  0563  1683               	bsf	3,5	;RP0=1, select bank3
  1262  0564  1703               	bsf	3,6	;RP1=1, select bank3
  1263  0565  1289               	bcf	9,5	;volatile
  1264                           
  1265                           ;main.c: 299: TRISB7 = 0;
  1266  0566  1683               	bsf	3,5	;RP0=1, select bank1
  1267  0567  1303               	bcf	3,6	;RP1=0, select bank1
  1268  0568  1386               	bcf	6,7	;volatile
  1269                           
  1270                           ;main.c: 300: TRISB1 = 1;
  1271  0569  1486               	bsf	6,1	;volatile
  1272                           
  1273                           ;main.c: 301: TRISB2 = 1;
  1274  056A  1506               	bsf	6,2	;volatile
  1275                           
  1276                           ;main.c: 302: TRISB3 = 1;
  1277  056B  1586               	bsf	6,3	;volatile
  1278                           
  1279                           ;main.c: 303: TRISB4 = 1;
  1280  056C  1606               	bsf	6,4	;volatile
  1281                           
  1282                           ;main.c: 304: ANS10 = 0;
  1283  056D  1683               	bsf	3,5	;RP0=1, select bank3
  1284  056E  1703               	bsf	3,6	;RP1=1, select bank3
  1285  056F  1109               	bcf	9,2	;volatile
  1286                           
  1287                           ;main.c: 305: ANS9 = 0;
  1288  0570  1089               	bcf	9,1	;volatile
  1289                           
  1290                           ;main.c: 306: ANS8 = 0;
  1291  0571  1009               	bcf	9,0	;volatile
  1292                           
  1293                           ;main.c: 307: ANS11 = 0;
  1294  0572  1189               	bcf	9,3	;volatile
  1295                           
  1296                           ;main.c: 308: RB5=1;
  1297  0573  1283               	bcf	3,5	;RP0=0, select bank0
  1298  0574  1303               	bcf	3,6	;RP1=0, select bank0
  1299  0575  1686               	bsf	6,5	;volatile
  1300                           
  1301                           ;main.c: 311: T0IE = 1;
  1302  0576  168B               	bsf	11,5	;volatile
  1303                           
  1304                           ;main.c: 312: TMR1IE = 0;
  1305  0577  1683               	bsf	3,5	;RP0=1, select bank1
  1306  0578  1303               	bcf	3,6	;RP1=0, select bank1
  1307  0579  100C               	bcf	12,0	;volatile
  1308                           
  1309                           ;main.c: 313: PEIE = 1;
  1310  057A  170B               	bsf	11,6	;volatile
  1311                           
  1312                           ;main.c: 314: GIE = 1;
  1313  057B  178B               	bsf	11,7	;volatile
  1314                           
  1315                           ;main.c: 315: IOCB=0b00011000;
  1316  057C  3018               	movlw	24
  1317  057D  0096               	movwf	22	;volatile
  1318                           
  1319                           ;main.c: 316: RBIE = 1;
  1320  057E  158B               	bsf	11,3	;volatile
  1321                           
  1322                           ;main.c: 320: serial_init();
  1323  057F  120A  158A  2242  120A  118A  	fcall	_serial_init
  1324                           
  1325                           ;main.c: 321: spi_slave_init();
  1326  0584  120A  158A  225A  120A  118A  	fcall	_spi_slave_init
  1327                           
  1328                           ;main.c: 324: pwm_init();
  1329  0589  120A  158A  22B5  120A  118A  	fcall	_pwm_init
  1330                           
  1331                           ;main.c: 331: encoders_init();
  1332  058E  120A  158A  2274  120A  118A  	fcall	_encoders_init
  1333                           
  1334                           ;main.c: 339: pwm_set(1, 0);
  1335  0593  3001               	movlw	1
  1336  0594  1683               	bsf	3,5	;RP0=1, select bank1
  1337  0595  1303               	bcf	3,6	;RP1=0, select bank1
  1338  0596  00BC               	movwf	pwm_set@channel^(0+128)
  1339  0597  3000               	movlw	0
  1340  0598  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  1341  0599  3000               	movlw	0
  1342  059A  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1343  059B  3000               	movlw	0
  1344  059C  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1345  059D  3000               	movlw	0
  1346  059E  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1347  059F  3000               	movlw	0
  1348  05A0  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  1349  05A1  120A  158A  24E8  120A  118A  	fcall	_pwm_set
  1350                           
  1351                           ;main.c: 340: pwm_set(2, 0);
  1352  05A6  3002               	movlw	2
  1353  05A7  1683               	bsf	3,5	;RP0=1, select bank1
  1354  05A8  1303               	bcf	3,6	;RP1=0, select bank1
  1355  05A9  00BC               	movwf	pwm_set@channel^(0+128)
  1356  05AA  3000               	movlw	0
  1357  05AB  00BD               	movwf	(pwm_set@channel^(0+128)+1)
  1358  05AC  3000               	movlw	0
  1359  05AD  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1360  05AE  3000               	movlw	0
  1361  05AF  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1362  05B0  3000               	movlw	0
  1363  05B1  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1364  05B2  3000               	movlw	0
  1365  05B3  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  1366  05B4  120A  158A  24E8  120A  118A  	fcall	_pwm_set
  1367  05B9                     l2925:	
  1368                           
  1369                           ;main.c: 345: char serialIn = chkchr();
  1370  05B9  120A  158A  2211  120A  118A  	fcall	_chkchr
  1371  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  1372  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  1373  05C0  00C6               	movwf	??_main^(0+128)
  1374  05C1  0846               	movf	??_main^(0+128),w
  1375  05C2  00D6               	movwf	main@serialIn_346^(0+128)
  1376                           
  1377                           ;main.c: 346: if (serialIn == 'a'){
  1378  05C3  3061               	movlw	97
  1379  05C4  0656               	xorwf	main@serialIn_346^(0+128),w
  1380  05C5  1D03               	btfss	3,2
  1381  05C6  2DB9               	goto	l2925
  1382                           
  1383                           ;main.c: 347: resetCounter();
  1384  05C7  120A  118A  27EB  120A  118A  	fcall	_resetCounter
  1385                           
  1386                           ;main.c: 349: last_pos = 0;
  1387  05CC  3000               	movlw	0
  1388  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  1389  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  1390  05CF  00E1               	movwf	_last_pos+3	;volatile
  1391  05D0  3000               	movlw	0
  1392  05D1  00E0               	movwf	_last_pos+2	;volatile
  1393  05D2  3000               	movlw	0
  1394  05D3  00DF               	movwf	_last_pos+1	;volatile
  1395  05D4  3000               	movlw	0
  1396  05D5  00DE               	movwf	_last_pos	;volatile
  1397                           
  1398                           ;main.c: 350: samples = 0;
  1399  05D6  01E8               	clrf	_samples	;volatile
  1400  05D7  01E9               	clrf	_samples+1	;volatile
  1401                           
  1402                           ;main.c: 351: sampling = 1;
  1403  05D8  3001               	movlw	1
  1404  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  1405  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  1406  05DB  00C6               	movwf	??_main^(0+128)
  1407  05DC  0846               	movf	??_main^(0+128),w
  1408  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  1409  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  1410  05DF  00EA               	movwf	_sampling	;volatile
  1411                           
  1412                           ;main.c: 352: SetPoint(100);
  1413  05E0  3064               	movlw	100
  1414  05E1  1683               	bsf	3,5	;RP0=1, select bank1
  1415  05E2  1303               	bcf	3,6	;RP1=0, select bank1
  1416  05E3  00A0               	movwf	SetPoint@new_val^(0+128)
  1417  05E4  3000               	movlw	0
  1418  05E5  00A1               	movwf	(SetPoint@new_val^(0+128)+1)
  1419  05E6  120A  158A  2221  120A  118A  	fcall	_SetPoint
  1420                           
  1421                           ;main.c: 353: RB5=0;
  1422  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  1423  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  1424  05ED  1286               	bcf	6,5	;volatile
  1425  05EE                     l2941:	
  1426                           ;main.c: 354: while (samples < 100){
  1427                           
  1428  05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1429  05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1430  05F0  0869               	movf	_samples+1,w	;volatile
  1431  05F1  3A80               	xorlw	128
  1432  05F2  00FF               	movwf	127
  1433  05F3  3080               	movlw	128
  1434  05F4  027F               	subwf	127,w
  1435  05F5  1D03               	skipz
  1436  05F6  2DF9               	goto	u3545
  1437  05F7  3064               	movlw	100
  1438  05F8  0268               	subwf	_samples,w	;volatile
  1439  05F9                     u3545:	
  1440  05F9  1C03               	skipc
  1441  05FA  2DEE               	goto	l2941
  1442                           
  1443                           ;main.c: 356: };main.c: 357: sampling = 0;
  1444  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  1445  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  1446  05FD  01EA               	clrf	_sampling	;volatile
  1447                           
  1448                           ;main.c: 358: RB5=1;
  1449  05FE  1686               	bsf	6,5	;volatile
  1450                           
  1451                           ;main.c: 360: char sVar[10];;main.c: 361: samples = 0;
  1452  05FF  01E8               	clrf	_samples	;volatile
  1453  0600  01E9               	clrf	_samples+1	;volatile
  1454                           
  1455                           ;main.c: 362: sprintf(sVar, "Kp: %d -> ", 0.55);
  1456  0601  3019               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1457  0602  1683               	bsf	3,5	;RP0=1, select bank1
  1458  0603  1303               	bcf	3,6	;RP1=0, select bank1
  1459  0604  00C6               	movwf	??_main^(0+128)
  1460  0605  0846               	movf	??_main^(0+128),w
  1461  0606  00AE               	movwf	sprintf@f^(0+128)
  1462  0607  303F               	movlw	63
  1463  0608  00B2               	movwf	((?_sprintf+3)^(0+128)+1)
  1464  0609  300C               	movlw	12
  1465  060A  00B1               	movwf	((?_sprintf+2)^(0+128)+1)
  1466  060B  30CC               	movlw	204
  1467  060C  00B0               	movwf	((?_sprintf+1)^(0+128)+1)
  1468  060D  30CD               	movlw	205
  1469  060E  00AF               	movwf	(?_sprintf^(0+128)+1)
  1470  060F  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1471  0610  120A  158A  272E  120A  118A  	fcall	_sprintf
  1472                           
  1473                           ;main.c: 363: putst(sVar);
  1474  0615  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1475  0616  120A  158A  2347  120A  118A  	fcall	_putst
  1476  061B                     l347:	
  1477                           ;main.c: 364: while (samples <= 100 /2){
  1478                           
  1479  061B  1283               	bcf	3,5	;RP0=0, select bank0
  1480  061C  1303               	bcf	3,6	;RP1=0, select bank0
  1481  061D  0869               	movf	_samples+1,w	;volatile
  1482  061E  3A80               	xorlw	128
  1483  061F  00FF               	movwf	127
  1484  0620  3080               	movlw	128
  1485  0621  027F               	subwf	127,w
  1486  0622  1D03               	skipz
  1487  0623  2E26               	goto	u3555
  1488  0624  3033               	movlw	51
  1489  0625  0268               	subwf	_samples,w	;volatile
  1490  0626                     u3555:	
  1491  0626  1803               	btfsc	3,0
  1492  0627  2E77               	goto	l350
  1493                           
  1494                           ;main.c: 365: sprintf(sVar, "%d ", pos_log1[samples]);
  1495  0628  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1496  0629  1683               	bsf	3,5	;RP0=1, select bank1
  1497  062A  1303               	bcf	3,6	;RP1=0, select bank1
  1498  062B  00C6               	movwf	??_main^(0+128)
  1499  062C  0846               	movf	??_main^(0+128),w
  1500  062D  00AE               	movwf	sprintf@f^(0+128)
  1501  062E  1283               	bcf	3,5	;RP0=0, select bank0
  1502  062F  1303               	bcf	3,6	;RP1=0, select bank0
  1503  0630  0868               	movf	_samples,w	;volatile
  1504  0631  3E90               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  1505  0632  0084               	movwf	4
  1506  0633  1783               	bsf	3,7	;select IRP bank3
  1507  0634  0800               	movf	0,w
  1508  0635  1683               	bsf	3,5	;RP0=1, select bank1
  1509  0636  1303               	bcf	3,6	;RP1=0, select bank1
  1510  0637  00AF               	movwf	(?_sprintf^(0+128)+1)
  1511  0638  01B0               	clrf	((?_sprintf+1)^(0+128)+1)
  1512  0639  1BAF               	btfsc	(?_sprintf^(0+128)+1),7
  1513  063A  03B0               	decf	((?_sprintf+1)^(0+128)+1),f
  1514  063B  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1515  063C  120A  158A  272E  120A  118A  	fcall	_sprintf
  1516                           
  1517                           ;main.c: 366: putst(sVar);
  1518  0641  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1519  0642  120A  158A  2347  120A  118A  	fcall	_putst
  1520                           
  1521                           ;main.c: 367: samples++;
  1522  0647  3001               	movlw	1
  1523  0648  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0649  1303               	bcf	3,6	;RP1=0, select bank0
  1525  064A  07E8               	addwf	_samples,f	;volatile
  1526  064B  1803               	skipnc
  1527  064C  0AE9               	incf	_samples+1,f	;volatile
  1528  064D  3000               	movlw	0
  1529  064E  07E9               	addwf	_samples+1,f	;volatile
  1530  064F  2E1B               	goto	l347
  1531  0650                     l2957:	
  1532                           
  1533                           ;main.c: 370: sprintf(sVar, "%d ", pos_log2[samples - 100 / 2]);
  1534  0650  3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1535  0651  1683               	bsf	3,5	;RP0=1, select bank1
  1536  0652  1303               	bcf	3,6	;RP1=0, select bank1
  1537  0653  00C6               	movwf	??_main^(0+128)
  1538  0654  0846               	movf	??_main^(0+128),w
  1539  0655  00AE               	movwf	sprintf@f^(0+128)
  1540  0656  1283               	bcf	3,5	;RP0=0, select bank0
  1541  0657  1303               	bcf	3,6	;RP1=0, select bank0
  1542  0658  0868               	movf	_samples,w	;volatile
  1543  0659  3EDE               	addlw	(low ((_pos_log2| (0+256)+206)))& (0+255)
  1544  065A  0084               	movwf	4
  1545  065B  1783               	bsf	3,7	;select IRP bank2
  1546  065C  0800               	movf	0,w
  1547  065D  1683               	bsf	3,5	;RP0=1, select bank1
  1548  065E  1303               	bcf	3,6	;RP1=0, select bank1
  1549  065F  00AF               	movwf	(?_sprintf^(0+128)+1)
  1550  0660  01B0               	clrf	((?_sprintf+1)^(0+128)+1)
  1551  0661  1BAF               	btfsc	(?_sprintf^(0+128)+1),7
  1552  0662  03B0               	decf	((?_sprintf+1)^(0+128)+1),f
  1553  0663  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1554  0664  120A  158A  272E  120A  118A  	fcall	_sprintf
  1555                           
  1556                           ;main.c: 371: putst(sVar);
  1557  0669  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1558  066A  120A  158A  2347  120A  118A  	fcall	_putst
  1559                           
  1560                           ;main.c: 372: samples++;
  1561  066F  3001               	movlw	1
  1562  0670  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0671  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0672  07E8               	addwf	_samples,f	;volatile
  1565  0673  1803               	skipnc
  1566  0674  0AE9               	incf	_samples+1,f	;volatile
  1567  0675  3000               	movlw	0
  1568  0676  07E9               	addwf	_samples+1,f	;volatile
  1569  0677                     l350:	
  1570  0677  1283               	bcf	3,5	;RP0=0, select bank0
  1571  0678  1303               	bcf	3,6	;RP1=0, select bank0
  1572  0679  0869               	movf	_samples+1,w	;volatile
  1573  067A  3A80               	xorlw	128
  1574  067B  00FF               	movwf	127
  1575  067C  3080               	movlw	128
  1576  067D  027F               	subwf	127,w
  1577  067E  1D03               	skipz
  1578  067F  2E82               	goto	u3565
  1579  0680  3064               	movlw	100
  1580  0681  0268               	subwf	_samples,w	;volatile
  1581  0682                     u3565:	
  1582  0682  1C03               	skipc
  1583  0683  2E50               	goto	l2957
  1584                           
  1585                           ;main.c: 373: };main.c: 374: sprintf(sVar, "Fim do teste ");
  1586  0684  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1587  0685  1683               	bsf	3,5	;RP0=1, select bank1
  1588  0686  1303               	bcf	3,6	;RP1=0, select bank1
  1589  0687  00C6               	movwf	??_main^(0+128)
  1590  0688  0846               	movf	??_main^(0+128),w
  1591  0689  00AE               	movwf	sprintf@f^(0+128)
  1592  068A  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1593  068B  120A  158A  272E  120A  118A  	fcall	_sprintf
  1594                           
  1595                           ;main.c: 375: putst(sVar);
  1596  0690  30CC               	movlw	(low (main@sVar| 0))& (0+255)
  1597  0691  120A  158A  2347  120A  118A  	fcall	_putst
  1598  0696  2DB9               	goto	l2925
  1599  0697                     __end_of_main:	
  1600                           
  1601                           	psect	text1
  1602  0F2E                     __ptext1:	
  1603 ;; *************** function _sprintf *****************
  1604 ;; Defined at:
  1605 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  sp              1    wreg     PTR unsigned char 
  1608 ;;		 -> main@sVar(10), 
  1609 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  1610 ;;		 -> STR_4(14), STR_3(4), STR_2(4), STR_1(11), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  sp              1   27[BANK1 ] PTR unsigned char 
  1613 ;;		 -> main@sVar(10), 
  1614 ;;  tmpval          4    0        struct .
  1615 ;;  val             2   25[BANK1 ] unsigned int 
  1616 ;;  cp              2    0        PTR const unsigned char 
  1617 ;;  len             2    0        unsigned int 
  1618 ;;  c               1   28[BANK1 ] unsigned char 
  1619 ;;  prec            1   24[BANK1 ] char 
  1620 ;;  flag            1   23[BANK1 ] unsigned char 
  1621 ;;  ap              1   22[BANK1 ] PTR void [1]
  1622 ;;		 -> ?_sprintf(2), 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2   14[BANK1 ] int 
  1625 ;; Registers used:
  1626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         0       0       5       0       0
  1633 ;;      Locals:         0       0       7       0       0
  1634 ;;      Temps:          0       0       3       0       0
  1635 ;;      Totals:         0       0      15       0       0
  1636 ;;Total ram usage:       15 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    5
  1639 ;; This function calls:
  1640 ;;		___lwdiv
  1641 ;;		___lwmod
  1642 ;; This function is called by:
  1643 ;;		_main
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _sprintf
  1649  0F2E                     _sprintf:	
  1650                           
  1651                           ;incstack = 0
  1652                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1653                           ;sprintf@sp stored from wreg
  1654  0F2E  1683               	bsf	3,5	;RP0=1, select bank1
  1655  0F2F  1303               	bcf	3,6	;RP1=0, select bank1
  1656  0F30  00BB               	movwf	sprintf@sp^(0+128)
  1657                           
  1658                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1659  0F31  30AF               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1660  0F32  00B3               	movwf	??_sprintf^(0+128)
  1661  0F33  0833               	movf	??_sprintf^(0+128),w
  1662  0F34  00B6               	movwf	sprintf@ap^(0+128)
  1663  0F35                     l2707:	
  1664                           ;doprnt.c: 548: while((c = *f++)) {
  1665                           
  1666  0F35  3001               	movlw	1
  1667  0F36  07AE               	addwf	sprintf@f^(0+128),f
  1668  0F37  30FF               	movlw	-1
  1669  0F38  072E               	addwf	sprintf@f^(0+128),w
  1670  0F39  0084               	movwf	4
  1671  0F3A  120A  158A  2000  120A  158A  	fcall	stringdir
  1672  0F3F  00B3               	movwf	??_sprintf^(0+128)
  1673  0F40  0833               	movf	??_sprintf^(0+128),w
  1674  0F41  00BC               	movwf	sprintf@c^(0+128)
  1675  0F42  083C               	movf	sprintf@c^(0+128),w
  1676  0F43  1903               	btfsc	3,2
  1677  0F44  2FFB               	goto	l2709
  1678                           
  1679                           ;doprnt.c: 550: if(c != '%')
  1680  0F45  3025               	movlw	37
  1681  0F46  063C               	xorwf	sprintf@c^(0+128),w
  1682  0F47  1903               	btfsc	3,2
  1683  0F48  2F55               	goto	l2663
  1684                           
  1685                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1686  0F49  083C               	movf	sprintf@c^(0+128),w
  1687  0F4A  00B3               	movwf	??_sprintf^(0+128)
  1688  0F4B  083B               	movf	sprintf@sp^(0+128),w
  1689  0F4C  0084               	movwf	4
  1690  0F4D  0833               	movf	??_sprintf^(0+128),w
  1691  0F4E  1383               	bcf	3,7	;select IRP bank0
  1692  0F4F  0080               	movwf	0
  1693  0F50  3001               	movlw	1
  1694  0F51  00B3               	movwf	??_sprintf^(0+128)
  1695  0F52  0833               	movf	??_sprintf^(0+128),w
  1696  0F53  07BB               	addwf	sprintf@sp^(0+128),f
  1697                           
  1698                           ;doprnt.c: 554: continue;
  1699  0F54  2F35               	goto	l2707
  1700  0F55                     l2663:	
  1701                           
  1702                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1703  0F55  01B7               	clrf	sprintf@flag^(0+128)
  1704                           
  1705                           ;doprnt.c: 654: switch(c = *f++) {
  1706  0F56  3001               	movlw	1
  1707  0F57  07AE               	addwf	sprintf@f^(0+128),f
  1708  0F58  30FF               	movlw	-1
  1709  0F59  072E               	addwf	sprintf@f^(0+128),w
  1710  0F5A  0084               	movwf	4
  1711  0F5B  120A  158A  2000  120A  158A  	fcall	stringdir
  1712  0F60  00BC               	movwf	sprintf@c^(0+128)
  1713                           
  1714                           ; Switch size 1, requested type "simple"
  1715                           ; Number of cases is 3, Range of values is 0 to 105
  1716                           ; switch strategies available:
  1717                           ; Name         Instructions Cycles
  1718                           ; simple_byte           10     6 (average)
  1719                           ; jumptable            260     6 (fixed)
  1720                           ;	Chosen strategy is simple_byte
  1721  0F61  3A00               	xorlw	0	; case 0
  1722  0F62  1903               	skipnz
  1723  0F63  2FFB               	goto	l2709
  1724  0F64  3A64               	xorlw	100	; case 100
  1725  0F65  1903               	skipnz
  1726  0F66  2F6B               	goto	l2669
  1727  0F67  3A0D               	xorlw	13	; case 105
  1728  0F68  1903               	skipnz
  1729  0F69  2F6B               	goto	l2669
  1730  0F6A  2F35               	goto	l2707
  1731  0F6B                     l2669:	
  1732                           
  1733                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1734  0F6B  0836               	movf	sprintf@ap^(0+128),w
  1735  0F6C  0084               	movwf	4
  1736  0F6D  1383               	bcf	3,7	;select IRP bank0
  1737  0F6E  0800               	movf	0,w
  1738  0F6F  00B9               	movwf	sprintf@val^(0+128)
  1739  0F70  0A84               	incf	4,f
  1740  0F71  0800               	movf	0,w
  1741  0F72  00BA               	movwf	(sprintf@val+1)^(0+128)
  1742  0F73  3002               	movlw	2
  1743  0F74  00B3               	movwf	??_sprintf^(0+128)
  1744  0F75  0833               	movf	??_sprintf^(0+128),w
  1745  0F76  07B6               	addwf	sprintf@ap^(0+128),f
  1746                           
  1747                           ;doprnt.c: 1280: if((int)val < 0) {
  1748  0F77  1FBA               	btfss	(sprintf@val+1)^(0+128),7
  1749  0F78  2F82               	goto	l2679
  1750                           
  1751                           ;doprnt.c: 1281: flag |= 0x03;
  1752  0F79  3003               	movlw	3
  1753  0F7A  00B3               	movwf	??_sprintf^(0+128)
  1754  0F7B  0833               	movf	??_sprintf^(0+128),w
  1755  0F7C  04B7               	iorwf	sprintf@flag^(0+128),f
  1756                           
  1757                           ;doprnt.c: 1282: val = -val;
  1758  0F7D  09B9               	comf	sprintf@val^(0+128),f
  1759  0F7E  09BA               	comf	(sprintf@val+1)^(0+128),f
  1760  0F7F  0AB9               	incf	sprintf@val^(0+128),f
  1761  0F80  1903               	skipnz
  1762  0F81  0ABA               	incf	(sprintf@val+1)^(0+128),f
  1763  0F82                     l2679:	
  1764                           
  1765                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1766  0F82  01BC               	clrf	sprintf@c^(0+128)
  1767  0F83  0ABC               	incf	sprintf@c^(0+128),f
  1768  0F84                     l2685:	
  1769                           
  1770                           ;doprnt.c: 1325: if(val < dpowers[c])
  1771  0F84  083C               	movf	sprintf@c^(0+128),w
  1772  0F85  00B3               	movwf	??_sprintf^(0+128)
  1773  0F86  0733               	addwf	??_sprintf^(0+128),w
  1774  0F87  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1775  0F88  0084               	movwf	4
  1776  0F89  120A  158A  2000  120A  158A  	fcall	stringdir
  1777  0F8E  00B4               	movwf	(??_sprintf+1)^(0+128)
  1778  0F8F  120A  158A  2000  120A  158A  	fcall	stringdir
  1779  0F94  00B5               	movwf	((??_sprintf+1)^(0+128)+1)
  1780  0F95  0835               	movf	(??_sprintf+2)^(0+128),w
  1781  0F96  023A               	subwf	(sprintf@val+1)^(0+128),w
  1782  0F97  1D03               	skipz
  1783  0F98  2F9B               	goto	u3185
  1784  0F99  0834               	movf	(??_sprintf+1)^(0+128),w
  1785  0F9A  0239               	subwf	sprintf@val^(0+128),w
  1786  0F9B                     u3185:	
  1787  0F9B  1C03               	btfss	3,0
  1788  0F9C  2FA5               	goto	l2691
  1789  0F9D  3001               	movlw	1
  1790  0F9E  00B3               	movwf	??_sprintf^(0+128)
  1791  0F9F  0833               	movf	??_sprintf^(0+128),w
  1792  0FA0  07BC               	addwf	sprintf@c^(0+128),f
  1793  0FA1  3005               	movlw	5
  1794  0FA2  063C               	xorwf	sprintf@c^(0+128),w
  1795  0FA3  1D03               	btfss	3,2
  1796  0FA4  2F84               	goto	l2685
  1797  0FA5                     l2691:	
  1798                           
  1799                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1800  0FA5  0837               	movf	sprintf@flag^(0+128),w
  1801  0FA6  3903               	andlw	3
  1802  0FA7  1903               	btfsc	3,2
  1803  0FA8  2FB4               	goto	l2697
  1804                           
  1805                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  1806  0FA9  302D               	movlw	45
  1807  0FAA  00B3               	movwf	??_sprintf^(0+128)
  1808  0FAB  083B               	movf	sprintf@sp^(0+128),w
  1809  0FAC  0084               	movwf	4
  1810  0FAD  0833               	movf	??_sprintf^(0+128),w
  1811  0FAE  1383               	bcf	3,7	;select IRP bank0
  1812  0FAF  0080               	movwf	0
  1813  0FB0  3001               	movlw	1
  1814  0FB1  00B3               	movwf	??_sprintf^(0+128)
  1815  0FB2  0833               	movf	??_sprintf^(0+128),w
  1816  0FB3  07BB               	addwf	sprintf@sp^(0+128),f
  1817  0FB4                     l2697:	
  1818                           
  1819                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1820  0FB4  083C               	movf	sprintf@c^(0+128),w
  1821  0FB5  00B3               	movwf	??_sprintf^(0+128)
  1822  0FB6  0833               	movf	??_sprintf^(0+128),w
  1823  0FB7  00B8               	movwf	sprintf@prec^(0+128)
  1824  0FB8                     l2705:	
  1825                           ;doprnt.c: 1493: while(prec--) {
  1826                           
  1827  0FB8  30FF               	movlw	255
  1828  0FB9  00B3               	movwf	??_sprintf^(0+128)
  1829  0FBA  0833               	movf	??_sprintf^(0+128),w
  1830  0FBB  07B8               	addwf	sprintf@prec^(0+128),f
  1831  0FBC  0A38               	incf	sprintf@prec^(0+128),w
  1832  0FBD  1903               	btfsc	3,2
  1833  0FBE  2F35               	goto	l2707
  1834                           
  1835                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1836  0FBF  300A               	movlw	10
  1837  0FC0  00A8               	movwf	___lwmod@divisor^(0+128)
  1838  0FC1  3000               	movlw	0
  1839  0FC2  00A9               	movwf	(___lwmod@divisor^(0+128)+1)
  1840  0FC3  0838               	movf	sprintf@prec^(0+128),w
  1841  0FC4  00B3               	movwf	??_sprintf^(0+128)
  1842  0FC5  0733               	addwf	??_sprintf^(0+128),w
  1843  0FC6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1844  0FC7  0084               	movwf	4
  1845  0FC8  120A  158A  2000  120A  158A  	fcall	stringdir
  1846  0FCD  00A0               	movwf	___lwdiv@divisor^(0+128)
  1847  0FCE  120A  158A  2000  120A  158A  	fcall	stringdir
  1848  0FD3  00A1               	movwf	(___lwdiv@divisor+1)^(0+128)
  1849  0FD4  083A               	movf	(sprintf@val+1)^(0+128),w
  1850  0FD5  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  1851  0FD6  0839               	movf	sprintf@val^(0+128),w
  1852  0FD7  00A2               	movwf	___lwdiv@dividend^(0+128)
  1853  0FD8  120A  158A  237D  120A  158A  	fcall	___lwdiv
  1854  0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  1855  0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  1856  0FDF  0821               	movf	(?___lwdiv+1)^(0+128),w
  1857  0FE0  00AB               	movwf	(___lwmod@dividend+1)^(0+128)
  1858  0FE1  0820               	movf	?___lwdiv^(0+128),w
  1859  0FE2  00AA               	movwf	___lwmod@dividend^(0+128)
  1860  0FE3  120A  158A  2313  120A  158A  	fcall	___lwmod
  1861  0FE8  1683               	bsf	3,5	;RP0=1, select bank1
  1862  0FE9  1303               	bcf	3,6	;RP1=0, select bank1
  1863  0FEA  0828               	movf	?___lwmod^(0+128),w
  1864  0FEB  3E30               	addlw	48
  1865  0FEC  00B4               	movwf	(??_sprintf+1)^(0+128)
  1866  0FED  0834               	movf	(??_sprintf+1)^(0+128),w
  1867  0FEE  00BC               	movwf	sprintf@c^(0+128)
  1868                           
  1869                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1870  0FEF  083C               	movf	sprintf@c^(0+128),w
  1871  0FF0  00B3               	movwf	??_sprintf^(0+128)
  1872  0FF1  083B               	movf	sprintf@sp^(0+128),w
  1873  0FF2  0084               	movwf	4
  1874  0FF3  0833               	movf	??_sprintf^(0+128),w
  1875  0FF4  1383               	bcf	3,7	;select IRP bank0
  1876  0FF5  0080               	movwf	0
  1877  0FF6  3001               	movlw	1
  1878  0FF7  00B3               	movwf	??_sprintf^(0+128)
  1879  0FF8  0833               	movf	??_sprintf^(0+128),w
  1880  0FF9  07BB               	addwf	sprintf@sp^(0+128),f
  1881  0FFA  2FB8               	goto	l2705
  1882  0FFB                     l2709:	
  1883                           
  1884                           ;doprnt.c: 1557: *sp = 0;
  1885  0FFB  083B               	movf	sprintf@sp^(0+128),w
  1886  0FFC  0084               	movwf	4
  1887  0FFD  1383               	bcf	3,7	;select IRP bank0
  1888  0FFE  0180               	clrf	0
  1889  0FFF  0008               	return
  1890  1000                     __end_of_sprintf:	
  1891                           
  1892                           	psect	text2
  1893  0B13                     __ptext2:	
  1894 ;; *************** function ___lwmod *****************
  1895 ;; Defined at:
  1896 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  divisor         2    8[BANK1 ] unsigned int 
  1899 ;;  dividend        2   10[BANK1 ] unsigned int 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  counter         1   13[BANK1 ] unsigned char 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  2    8[BANK1 ] unsigned int 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1911 ;;      Params:         0       0       4       0       0
  1912 ;;      Locals:         0       0       1       0       0
  1913 ;;      Temps:          0       0       1       0       0
  1914 ;;      Totals:         0       0       6       0       0
  1915 ;;Total ram usage:        6 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    4
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_sprintf
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           
  1926                           ;psect for function ___lwmod
  1927  0B13                     ___lwmod:	
  1928                           
  1929                           ;incstack = 0
  1930                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1931  0B13  1683               	bsf	3,5	;RP0=1, select bank1
  1932  0B14  1303               	bcf	3,6	;RP1=0, select bank1
  1933  0B15  0828               	movf	___lwmod@divisor^(0+128),w
  1934  0B16  0429               	iorwf	(___lwmod@divisor+1)^(0+128),w
  1935  0B17  1903               	btfsc	3,2
  1936  0B18  2B42               	goto	l2285
  1937  0B19  01AD               	clrf	___lwmod@counter^(0+128)
  1938  0B1A  0AAD               	incf	___lwmod@counter^(0+128),f
  1939  0B1B                     l2275:	
  1940  0B1B  1BA9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  1941  0B1C  2B29               	goto	l2277
  1942  0B1D  3001               	movlw	1
  1943  0B1E                     u2375:	
  1944  0B1E  1003               	clrc
  1945  0B1F  0DA8               	rlf	___lwmod@divisor^(0+128),f
  1946  0B20  0DA9               	rlf	(___lwmod@divisor+1)^(0+128),f
  1947  0B21  3EFF               	addlw	-1
  1948  0B22  1D03               	skipz
  1949  0B23  2B1E               	goto	u2375
  1950  0B24  3001               	movlw	1
  1951  0B25  00AC               	movwf	??___lwmod^(0+128)
  1952  0B26  082C               	movf	??___lwmod^(0+128),w
  1953  0B27  07AD               	addwf	___lwmod@counter^(0+128),f
  1954  0B28  2B1B               	goto	l2275
  1955  0B29                     l2277:	
  1956  0B29  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  1957  0B2A  022B               	subwf	(___lwmod@dividend+1)^(0+128),w
  1958  0B2B  1D03               	skipz
  1959  0B2C  2B2F               	goto	u2395
  1960  0B2D  0828               	movf	___lwmod@divisor^(0+128),w
  1961  0B2E  022A               	subwf	___lwmod@dividend^(0+128),w
  1962  0B2F                     u2395:	
  1963  0B2F  1C03               	skipc
  1964  0B30  2B37               	goto	l2281
  1965  0B31  0828               	movf	___lwmod@divisor^(0+128),w
  1966  0B32  02AA               	subwf	___lwmod@dividend^(0+128),f
  1967  0B33  0829               	movf	(___lwmod@divisor+1)^(0+128),w
  1968  0B34  1C03               	skipc
  1969  0B35  03AB               	decf	(___lwmod@dividend+1)^(0+128),f
  1970  0B36  02AB               	subwf	(___lwmod@dividend+1)^(0+128),f
  1971  0B37                     l2281:	
  1972  0B37  3001               	movlw	1
  1973  0B38                     u2405:	
  1974  0B38  1003               	clrc
  1975  0B39  0CA9               	rrf	(___lwmod@divisor+1)^(0+128),f
  1976  0B3A  0CA8               	rrf	___lwmod@divisor^(0+128),f
  1977  0B3B  3EFF               	addlw	-1
  1978  0B3C  1D03               	skipz
  1979  0B3D  2B38               	goto	u2405
  1980  0B3E  3001               	movlw	1
  1981  0B3F  02AD               	subwf	___lwmod@counter^(0+128),f
  1982  0B40  1D03               	btfss	3,2
  1983  0B41  2B29               	goto	l2277
  1984  0B42                     l2285:	
  1985  0B42  082B               	movf	(___lwmod@dividend+1)^(0+128),w
  1986  0B43  00A9               	movwf	(?___lwmod+1)^(0+128)
  1987  0B44  082A               	movf	___lwmod@dividend^(0+128),w
  1988  0B45  00A8               	movwf	?___lwmod^(0+128)
  1989  0B46  0008               	return
  1990  0B47                     __end_of___lwmod:	
  1991                           
  1992                           	psect	text3
  1993  0B7D                     __ptext3:	
  1994 ;; *************** function ___lwdiv *****************
  1995 ;; Defined at:
  1996 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  divisor         2    0[BANK1 ] unsigned int 
  1999 ;;  dividend        2    2[BANK1 ] unsigned int 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  quotient        2    5[BANK1 ] unsigned int 
  2002 ;;  counter         1    7[BANK1 ] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  2    0[BANK1 ] unsigned int 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2012 ;;      Params:         0       0       4       0       0
  2013 ;;      Locals:         0       0       3       0       0
  2014 ;;      Temps:          0       0       1       0       0
  2015 ;;      Totals:         0       0       8       0       0
  2016 ;;Total ram usage:        8 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    4
  2019 ;; This function calls:
  2020 ;;		Nothing
  2021 ;; This function is called by:
  2022 ;;		_sprintf
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           
  2027                           ;psect for function ___lwdiv
  2028  0B7D                     ___lwdiv:	
  2029                           
  2030                           ;incstack = 0
  2031                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2032  0B7D  1683               	bsf	3,5	;RP0=1, select bank1
  2033  0B7E  1303               	bcf	3,6	;RP1=0, select bank1
  2034  0B7F  01A5               	clrf	___lwdiv@quotient^(0+128)
  2035  0B80  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  2036  0B81  0820               	movf	___lwdiv@divisor^(0+128),w
  2037  0B82  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  2038  0B83  1903               	btfsc	3,2
  2039  0B84  2BB6               	goto	l2263
  2040  0B85  01A7               	clrf	___lwdiv@counter^(0+128)
  2041  0B86  0AA7               	incf	___lwdiv@counter^(0+128),f
  2042  0B87                     l2251:	
  2043  0B87  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  2044  0B88  2B95               	goto	l2253
  2045  0B89  3001               	movlw	1
  2046  0B8A                     u2305:	
  2047  0B8A  1003               	clrc
  2048  0B8B  0DA0               	rlf	___lwdiv@divisor^(0+128),f
  2049  0B8C  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  2050  0B8D  3EFF               	addlw	-1
  2051  0B8E  1D03               	skipz
  2052  0B8F  2B8A               	goto	u2305
  2053  0B90  3001               	movlw	1
  2054  0B91  00A4               	movwf	??___lwdiv^(0+128)
  2055  0B92  0824               	movf	??___lwdiv^(0+128),w
  2056  0B93  07A7               	addwf	___lwdiv@counter^(0+128),f
  2057  0B94  2B87               	goto	l2251
  2058  0B95                     l2253:	
  2059  0B95  3001               	movlw	1
  2060  0B96                     u2325:	
  2061  0B96  1003               	clrc
  2062  0B97  0DA5               	rlf	___lwdiv@quotient^(0+128),f
  2063  0B98  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2064  0B99  3EFF               	addlw	-1
  2065  0B9A  1D03               	skipz
  2066  0B9B  2B96               	goto	u2325
  2067  0B9C  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2068  0B9D  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  2069  0B9E  1D03               	skipz
  2070  0B9F  2BA2               	goto	u2335
  2071  0BA0  0820               	movf	___lwdiv@divisor^(0+128),w
  2072  0BA1  0222               	subwf	___lwdiv@dividend^(0+128),w
  2073  0BA2                     u2335:	
  2074  0BA2  1C03               	skipc
  2075  0BA3  2BAB               	goto	l2259
  2076  0BA4  0820               	movf	___lwdiv@divisor^(0+128),w
  2077  0BA5  02A2               	subwf	___lwdiv@dividend^(0+128),f
  2078  0BA6  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  2079  0BA7  1C03               	skipc
  2080  0BA8  03A3               	decf	(___lwdiv@dividend+1)^(0+128),f
  2081  0BA9  02A3               	subwf	(___lwdiv@dividend+1)^(0+128),f
  2082  0BAA  1425               	bsf	___lwdiv@quotient^(0+128),0
  2083  0BAB                     l2259:	
  2084  0BAB  3001               	movlw	1
  2085  0BAC                     u2345:	
  2086  0BAC  1003               	clrc
  2087  0BAD  0CA1               	rrf	(___lwdiv@divisor+1)^(0+128),f
  2088  0BAE  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  2089  0BAF  3EFF               	addlw	-1
  2090  0BB0  1D03               	skipz
  2091  0BB1  2BAC               	goto	u2345
  2092  0BB2  3001               	movlw	1
  2093  0BB3  02A7               	subwf	___lwdiv@counter^(0+128),f
  2094  0BB4  1D03               	btfss	3,2
  2095  0BB5  2B95               	goto	l2253
  2096  0BB6                     l2263:	
  2097  0BB6  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  2098  0BB7  00A1               	movwf	(?___lwdiv+1)^(0+128)
  2099  0BB8  0825               	movf	___lwdiv@quotient^(0+128),w
  2100  0BB9  00A0               	movwf	?___lwdiv^(0+128)
  2101  0BBA  0008               	return
  2102  0BBB                     __end_of___lwdiv:	
  2103                           
  2104                           	psect	text4
  2105  0A5A                     __ptext4:	
  2106 ;; *************** function _spi_slave_init *****************
  2107 ;; Defined at:
  2108 ;;		line 39 in file "spi.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2122 ;;      Params:         0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    4
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_main
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           
  2137                           ;psect for function _spi_slave_init
  2138  0A5A                     _spi_slave_init:	
  2139                           
  2140                           ;spi.c: 40: ANS12 = 0;
  2141                           
  2142                           ;incstack = 0
  2143                           ; Regs used in _spi_slave_init: [wreg+status,2+status,0]
  2144  0A5A  1683               	bsf	3,5	;RP0=1, select bank3
  2145  0A5B  1703               	bsf	3,6	;RP1=1, select bank3
  2146  0A5C  1209               	bcf	9,4	;volatile
  2147                           
  2148                           ;spi.c: 41: TRISB0 = 1;
  2149  0A5D  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0A5E  1303               	bcf	3,6	;RP1=0, select bank1
  2151  0A5F  1406               	bsf	6,0	;volatile
  2152                           
  2153                           ;spi.c: 42: TRISC0 = 1;
  2154  0A60  1407               	bsf	7,0	;volatile
  2155                           
  2156                           ;spi.c: 43: TRISC3 = 1;
  2157  0A61  1587               	bsf	7,3	;volatile
  2158                           
  2159                           ;spi.c: 44: TRISC4 = 1;
  2160  0A62  1607               	bsf	7,4	;volatile
  2161                           
  2162                           ;spi.c: 45: TRISC5 = 0;
  2163  0A63  1287               	bcf	7,5	;volatile
  2164                           
  2165                           ;spi.c: 46: SSPEN = 0;
  2166  0A64  1283               	bcf	3,5	;RP0=0, select bank0
  2167  0A65  1303               	bcf	3,6	;RP1=0, select bank0
  2168  0A66  1294               	bcf	20,5	;volatile
  2169                           
  2170                           ;spi.c: 47: CKP = 0;
  2171  0A67  1214               	bcf	20,4	;volatile
  2172                           
  2173                           ;spi.c: 48: CKE = 0;
  2174  0A68  1683               	bsf	3,5	;RP0=1, select bank1
  2175  0A69  1303               	bcf	3,6	;RP1=0, select bank1
  2176  0A6A  1314               	bcf	20,6	;volatile
  2177                           
  2178                           ;spi.c: 49: SMP = 0;
  2179  0A6B  1394               	bcf	20,7	;volatile
  2180                           
  2181                           ;spi.c: 50: SSPCONbits.SSPM = 4;
  2182  0A6C  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0A6D  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0A6E  0814               	movf	20,w	;volatile
  2185  0A6F  39F0               	andlw	-16
  2186  0A70  3804               	iorlw	4
  2187  0A71  0094               	movwf	20	;volatile
  2188                           
  2189                           ;spi.c: 52: SSPEN = 1;
  2190  0A72  1694               	bsf	20,5	;volatile
  2191  0A73  0008               	return
  2192  0A74                     __end_of_spi_slave_init:	
  2193                           
  2194                           	psect	text5
  2195  0A42                     __ptext5:	
  2196 ;; *************** function _serial_init *****************
  2197 ;; Defined at:
  2198 ;;		line 29 in file "serial.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;		None
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2212 ;;      Params:         0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0
  2214 ;;      Temps:          0       0       0       0       0
  2215 ;;      Totals:         0       0       0       0       0
  2216 ;;Total ram usage:        0 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    4
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_main
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function _serial_init
  2228  0A42                     _serial_init:	
  2229                           
  2230                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  2231                           
  2232                           ;incstack = 0
  2233                           ; Regs used in _serial_init: [wreg]
  2234  0A42  3040               	movlw	64
  2235  0A43  1683               	bsf	3,5	;RP0=1, select bank1
  2236  0A44  1303               	bcf	3,6	;RP1=0, select bank1
  2237  0A45  0099               	movwf	25	;volatile
  2238                           
  2239                           ;serial.c: 66: BRGH=1;
  2240  0A46  1518               	bsf	24,2	;volatile
  2241                           
  2242                           ;serial.c: 67: SYNC=0;
  2243  0A47  1218               	bcf	24,4	;volatile
  2244                           
  2245                           ;serial.c: 68: SPEN=1;
  2246  0A48  1283               	bcf	3,5	;RP0=0, select bank0
  2247  0A49  1303               	bcf	3,6	;RP1=0, select bank0
  2248  0A4A  1798               	bsf	24,7	;volatile
  2249                           
  2250                           ;serial.c: 69: CREN=1;
  2251  0A4B  1618               	bsf	24,4	;volatile
  2252                           
  2253                           ;serial.c: 70: SREN=0;
  2254  0A4C  1298               	bcf	24,5	;volatile
  2255                           
  2256                           ;serial.c: 71: TXIE=0;
  2257  0A4D  1683               	bsf	3,5	;RP0=1, select bank1
  2258  0A4E  1303               	bcf	3,6	;RP1=0, select bank1
  2259  0A4F  120C               	bcf	12,4	;volatile
  2260                           
  2261                           ;serial.c: 72: RCIE=0;
  2262  0A50  128C               	bcf	12,5	;volatile
  2263                           
  2264                           ;serial.c: 73: TX9=0;
  2265  0A51  1318               	bcf	24,6	;volatile
  2266                           
  2267                           ;serial.c: 74: RX9=0;
  2268  0A52  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0A53  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0A54  1318               	bcf	24,6	;volatile
  2271                           
  2272                           ;serial.c: 75: TXEN=0;
  2273  0A55  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0A56  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0A57  1298               	bcf	24,5	;volatile
  2276                           
  2277                           ;serial.c: 76: TXEN=1;
  2278  0A58  1698               	bsf	24,5	;volatile
  2279  0A59  0008               	return
  2280  0A5A                     __end_of_serial_init:	
  2281                           
  2282                           	psect	text6
  2283  07EB                     __ptext6:	
  2284 ;; *************** function _resetCounter *****************
  2285 ;; Defined at:
  2286 ;;		line 146 in file "main.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;		None
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;		None
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      void 
  2293 ;; Registers used:
  2294 ;;		wreg
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2300 ;;      Params:         0       0       0       0       0
  2301 ;;      Locals:         0       0       0       0       0
  2302 ;;      Temps:          0       0       0       0       0
  2303 ;;      Totals:         0       0       0       0       0
  2304 ;;Total ram usage:        0 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    4
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;;		_motor_reset
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function _resetCounter
  2317  07EB                     _resetCounter:	
  2318                           
  2319                           ;main.c: 147: encoder1_counter = 0;
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _resetCounter: [wreg]
  2323  07EB  3000               	movlw	0
  2324  07EC  1683               	bsf	3,5	;RP0=1, select bank1
  2325  07ED  1303               	bcf	3,6	;RP1=0, select bank1
  2326  07EE  00E2               	movwf	(_encoder1_counter+3)^(0+128)	;volatile
  2327  07EF  3000               	movlw	0
  2328  07F0  00E1               	movwf	(_encoder1_counter+2)^(0+128)	;volatile
  2329  07F1  3000               	movlw	0
  2330  07F2  00E0               	movwf	(_encoder1_counter+1)^(0+128)	;volatile
  2331  07F3  3000               	movlw	0
  2332  07F4  00DF               	movwf	_encoder1_counter^(0+128)	;volatile
  2333                           
  2334                           ;main.c: 148: motor_pos = 0;
  2335  07F5  3000               	movlw	0
  2336  07F6  1283               	bcf	3,5	;RP0=0, select bank0
  2337  07F7  1303               	bcf	3,6	;RP1=0, select bank0
  2338  07F8  00E5               	movwf	_motor_pos+3	;volatile
  2339  07F9  3000               	movlw	0
  2340  07FA  00E4               	movwf	_motor_pos+2	;volatile
  2341  07FB  3000               	movlw	0
  2342  07FC  00E3               	movwf	_motor_pos+1	;volatile
  2343  07FD  3000               	movlw	0
  2344  07FE  00E2               	movwf	_motor_pos	;volatile
  2345  07FF  0008               	return
  2346  0800                     __end_of_resetCounter:	
  2347                           
  2348                           	psect	text7
  2349  0CE8                     __ptext7:	
  2350 ;; *************** function _pwm_set *****************
  2351 ;; Defined at:
  2352 ;;		line 72 in file "pwm.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;  channel         2   28[BANK1 ] int 
  2355 ;;  duty_cycle      4   30[BANK1 ] long 
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;		None
  2358 ;; Return value:  Size  Location     Type
  2359 ;;                  1    wreg      void 
  2360 ;; Registers used:
  2361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2367 ;;      Params:         0       0       6       0       0
  2368 ;;      Locals:         0       0       0       0       0
  2369 ;;      Temps:          0       0       4       0       0
  2370 ;;      Totals:         0       0      10       0       0
  2371 ;;Total ram usage:       10 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    5
  2374 ;; This function calls:
  2375 ;;		___aldiv
  2376 ;;		___lmul
  2377 ;; This function is called by:
  2378 ;;		_main
  2379 ;;		_motor_reset
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           
  2384                           ;psect for function _pwm_set
  2385  0CE8                     _pwm_set:	
  2386                           
  2387                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2388                           
  2389                           ;incstack = 0
  2390                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2391  0CE8  1683               	bsf	3,5	;RP0=1, select bank1
  2392  0CE9  1303               	bcf	3,6	;RP1=0, select bank1
  2393  0CEA  1BC1               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2394  0CEB  0008               	return
  2395  0CEC  1BC1               	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2396  0CED  2CFE               	goto	l2597
  2397  0CEE  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2398  0CEF  1D03               	btfss	3,2
  2399  0CF0  0008               	return
  2400  0CF1  0840               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2401  0CF2  1D03               	btfss	3,2
  2402  0CF3  0008               	return
  2403  0CF4  3001               	movlw	1
  2404  0CF5  023F               	subwf	(pwm_set@duty_cycle+1)^(0+128),w
  2405  0CF6  1D03               	skipz
  2406  0CF7  2CFC               	goto	u3083
  2407  0CF8  3000               	movlw	0
  2408  0CF9  023E               	subwf	pwm_set@duty_cycle^(0+128),w
  2409  0CFA  1D03               	skipz
  2410  0CFB  2CFC               	goto	u3083
  2411  0CFC                     u3083:	
  2412  0CFC  1803               	btfsc	3,0
  2413  0CFD  0008               	return
  2414  0CFE                     l2597:	
  2415                           
  2416                           ;pwm.c: 77: if (duty_cycle !=0){
  2417  0CFE  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2418  0CFF  0440               	iorwf	(pwm_set@duty_cycle+2)^(0+128),w
  2419  0D00  043F               	iorwf	(pwm_set@duty_cycle+1)^(0+128),w
  2420  0D01  043E               	iorwf	pwm_set@duty_cycle^(0+128),w
  2421  0D02  1903               	skipnz
  2422  0D03  2D5F               	goto	l2607
  2423                           
  2424                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  2425  0D04  3020               	movlw	32
  2426  0D05  00C2               	movwf	??_pwm_set^(0+128)
  2427  0D06  3000               	movlw	0
  2428  0D07  00C3               	movwf	(??_pwm_set^(0+128)+1)
  2429  0D08  3000               	movlw	0
  2430  0D09  00C4               	movwf	(??_pwm_set^(0+128)+2)
  2431  0D0A  3000               	movlw	0
  2432  0D0B  00C5               	movwf	(??_pwm_set^(0+128)+3)
  2433  0D0C  3000               	movlw	0
  2434  0D0D  00B0               	movwf	(___aldiv@divisor+3)^(0+128)
  2435  0D0E  3000               	movlw	0
  2436  0D0F  00AF               	movwf	(___aldiv@divisor+2)^(0+128)
  2437  0D10  3000               	movlw	0
  2438  0D11  00AE               	movwf	(___aldiv@divisor+1)^(0+128)
  2439  0D12  30FF               	movlw	255
  2440  0D13  00AD               	movwf	___aldiv@divisor^(0+128)
  2441  0D14  0841               	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2442  0D15  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  2443  0D16  0840               	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2444  0D17  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  2445  0D18  083F               	movf	(pwm_set@duty_cycle+1)^(0+128),w
  2446  0D19  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  2447  0D1A  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2448  0D1B  00A0               	movwf	___lmul@multiplier^(0+128)
  2449  0D1C  3000               	movlw	0
  2450  0D1D  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  2451  0D1E  3000               	movlw	0
  2452  0D1F  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  2453  0D20  3000               	movlw	0
  2454  0D21  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  2455  0D22  30DF               	movlw	223
  2456  0D23  00A4               	movwf	___lmul@multiplicand^(0+128)
  2457  0D24  120A  118A  27AA  120A  158A  	fcall	___lmul
  2458  0D29  1683               	bsf	3,5	;RP0=1, select bank1
  2459  0D2A  1303               	bcf	3,6	;RP1=0, select bank1
  2460  0D2B  0823               	movf	(?___lmul+3)^(0+128),w
  2461  0D2C  00B4               	movwf	(___aldiv@dividend+3)^(0+128)
  2462  0D2D  0822               	movf	(?___lmul+2)^(0+128),w
  2463  0D2E  00B3               	movwf	(___aldiv@dividend+2)^(0+128)
  2464  0D2F  0821               	movf	(?___lmul+1)^(0+128),w
  2465  0D30  00B2               	movwf	(___aldiv@dividend+1)^(0+128)
  2466  0D31  0820               	movf	?___lmul^(0+128),w
  2467  0D32  00B1               	movwf	___aldiv@dividend^(0+128)
  2468  0D33  120A  158A  25FC  120A  158A  	fcall	___aldiv
  2469  0D38  1683               	bsf	3,5	;RP0=1, select bank1
  2470  0D39  1303               	bcf	3,6	;RP1=0, select bank1
  2471  0D3A  082D               	movf	?___aldiv^(0+128),w
  2472  0D3B  07C2               	addwf	??_pwm_set^(0+128),f
  2473  0D3C  082E               	movf	(?___aldiv+1)^(0+128),w
  2474  0D3D  1803               	skipnc
  2475  0D3E  0F2E               	incfsz	(?___aldiv+1)^(0+128),w
  2476  0D3F  2D41               	goto	u3100
  2477  0D40  2D42               	goto	u3101
  2478  0D41                     u3100:	
  2479  0D41  07C3               	addwf	(??_pwm_set^(0+128)+1),f
  2480  0D42                     u3101:	
  2481  0D42  082F               	movf	(?___aldiv+2)^(0+128),w
  2482  0D43  1803               	skipnc
  2483  0D44  0F2F               	incfsz	(?___aldiv+2)^(0+128),w
  2484  0D45  2D47               	goto	u3102
  2485  0D46  2D48               	goto	u3103
  2486  0D47                     u3102:	
  2487  0D47  07C4               	addwf	(??_pwm_set^(0+128)+2),f
  2488  0D48                     u3103:	
  2489  0D48  0830               	movf	(?___aldiv+3)^(0+128),w
  2490  0D49  1803               	skipnc
  2491  0D4A  0A30               	incf	(?___aldiv+3)^(0+128),w
  2492  0D4B  07C5               	addwf	(??_pwm_set^(0+128)+3),f
  2493  0D4C  0845               	movf	(??_pwm_set+3)^(0+128),w
  2494  0D4D  00C1               	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2495  0D4E  0844               	movf	(??_pwm_set+2)^(0+128),w
  2496  0D4F  00C0               	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2497  0D50  0843               	movf	(??_pwm_set+1)^(0+128),w
  2498  0D51  00BF               	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2499  0D52  0842               	movf	??_pwm_set^(0+128),w
  2500  0D53  00BE               	movwf	pwm_set@duty_cycle^(0+128)
  2501  0D54  2D5F               	goto	l2607
  2502  0D55                     l2601:	
  2503                           
  2504                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2505  0D55  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2506  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  2507  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  2508  0D58  0095               	movwf	21	;volatile
  2509                           
  2510                           ;pwm.c: 83: break;
  2511  0D59  0008               	return
  2512  0D5A                     l2603:	
  2513                           
  2514                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2515  0D5A  083E               	movf	pwm_set@duty_cycle^(0+128),w
  2516  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
  2517  0D5C  1303               	bcf	3,6	;RP1=0, select bank0
  2518  0D5D  009B               	movwf	27	;volatile
  2519                           
  2520                           ;pwm.c: 86: break;
  2521  0D5E  0008               	return
  2522  0D5F                     l2607:	
  2523                           
  2524                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2525                           ; Switch size 1, requested type "simple"
  2526                           ; Number of cases is 1, Range of values is 0 to 0
  2527                           ; switch strategies available:
  2528                           ; Name         Instructions Cycles
  2529                           ; simple_byte            4     3 (average)
  2530                           ; direct_byte           11     8 (fixed)
  2531                           ; jumptable            260     6 (fixed)
  2532                           ;	Chosen strategy is simple_byte
  2533  0D5F  083D               	movf	(pwm_set@channel+1)^(0+128),w
  2534  0D60  3A00               	xorlw	0	; case 0
  2535  0D61  1903               	skipnz
  2536  0D62  2D64               	goto	l3007
  2537  0D63  2D6C               	goto	l182
  2538  0D64                     l3007:	
  2539                           
  2540                           ; Switch size 1, requested type "simple"
  2541                           ; Number of cases is 2, Range of values is 1 to 2
  2542                           ; switch strategies available:
  2543                           ; Name         Instructions Cycles
  2544                           ; simple_byte            7     4 (average)
  2545                           ; direct_byte           17    11 (fixed)
  2546                           ; jumptable            263     9 (fixed)
  2547                           ;	Chosen strategy is simple_byte
  2548  0D64  083C               	movf	pwm_set@channel^(0+128),w
  2549  0D65  3A01               	xorlw	1	; case 1
  2550  0D66  1903               	skipnz
  2551  0D67  2D55               	goto	l2601
  2552  0D68  3A03               	xorlw	3	; case 2
  2553  0D69  1903               	skipnz
  2554  0D6A  2D5A               	goto	l2603
  2555  0D6B  2D6C               	goto	l182
  2556  0D6C                     l182:	
  2557  0D6C  0008               	return
  2558  0D6D                     __end_of_pwm_set:	
  2559                           
  2560                           	psect	text8
  2561  07AA                     __ptext8:	
  2562 ;; *************** function ___lmul *****************
  2563 ;; Defined at:
  2564 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;  multiplier      4    0[BANK1 ] unsigned long 
  2567 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  product         4    9[BANK1 ] unsigned long 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  4    0[BANK1 ] unsigned long 
  2572 ;; Registers used:
  2573 ;;		wreg, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2579 ;;      Params:         0       0       8       0       0
  2580 ;;      Locals:         0       0       4       0       0
  2581 ;;      Temps:          0       0       1       0       0
  2582 ;;      Totals:         0       0      13       0       0
  2583 ;;Total ram usage:       13 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; Hardware stack levels required when called:    4
  2586 ;; This function calls:
  2587 ;;		Nothing
  2588 ;; This function is called by:
  2589 ;;		_pwm_set
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           
  2594                           ;psect for function ___lmul
  2595  07AA                     ___lmul:	
  2596                           
  2597                           ;incstack = 0
  2598                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2599  07AA  3000               	movlw	0
  2600  07AB  1683               	bsf	3,5	;RP0=1, select bank1
  2601  07AC  1303               	bcf	3,6	;RP1=0, select bank1
  2602  07AD  00AC               	movwf	(___lmul@product+3)^(0+128)
  2603  07AE  3000               	movlw	0
  2604  07AF  00AB               	movwf	(___lmul@product+2)^(0+128)
  2605  07B0  3000               	movlw	0
  2606  07B1  00AA               	movwf	(___lmul@product+1)^(0+128)
  2607  07B2  3000               	movlw	0
  2608  07B3  00A9               	movwf	___lmul@product^(0+128)
  2609  07B4                     l2153:	
  2610  07B4  1C20               	btfss	___lmul@multiplier^(0+128),0
  2611  07B5  2FCA               	goto	l2157
  2612  07B6  0824               	movf	___lmul@multiplicand^(0+128),w
  2613  07B7  07A9               	addwf	___lmul@product^(0+128),f
  2614  07B8  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  2615  07B9  1103               	clrz
  2616  07BA  1803               	skipnc
  2617  07BB  3E01               	addlw	1
  2618  07BC  1D03               	btfss	3,2
  2619  07BD  07AA               	addwf	(___lmul@product+1)^(0+128),f
  2620  07BE  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  2621  07BF  1103               	clrz
  2622  07C0  1803               	skipnc
  2623  07C1  3E01               	addlw	1
  2624  07C2  1D03               	btfss	3,2
  2625  07C3  07AB               	addwf	(___lmul@product+2)^(0+128),f
  2626  07C4  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  2627  07C5  1103               	clrz
  2628  07C6  1803               	skipnc
  2629  07C7  3E01               	addlw	1
  2630  07C8  1D03               	btfss	3,2
  2631  07C9  07AC               	addwf	(___lmul@product+3)^(0+128),f
  2632  07CA                     l2157:	
  2633  07CA  3001               	movlw	1
  2634  07CB  00A8               	movwf	??___lmul^(0+128)
  2635  07CC                     u2065:	
  2636  07CC  1003               	clrc
  2637  07CD  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  2638  07CE  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  2639  07CF  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  2640  07D0  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  2641  07D1  0BA8               	decfsz	??___lmul^(0+128),f
  2642  07D2  2FCC               	goto	u2065
  2643  07D3  3001               	movlw	1
  2644  07D4                     u2075:	
  2645  07D4  1003               	clrc
  2646  07D5  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  2647  07D6  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  2648  07D7  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  2649  07D8  0CA0               	rrf	___lmul@multiplier^(0+128),f
  2650  07D9  3EFF               	addlw	-1
  2651  07DA  1D03               	skipz
  2652  07DB  2FD4               	goto	u2075
  2653  07DC  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  2654  07DD  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  2655  07DE  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  2656  07DF  0420               	iorwf	___lmul@multiplier^(0+128),w
  2657  07E0  1D03               	skipz
  2658  07E1  2FB4               	goto	l2153
  2659  07E2  082C               	movf	(___lmul@product+3)^(0+128),w
  2660  07E3  00A3               	movwf	(?___lmul+3)^(0+128)
  2661  07E4  082B               	movf	(___lmul@product+2)^(0+128),w
  2662  07E5  00A2               	movwf	(?___lmul+2)^(0+128)
  2663  07E6  082A               	movf	(___lmul@product+1)^(0+128),w
  2664  07E7  00A1               	movwf	(?___lmul+1)^(0+128)
  2665  07E8  0829               	movf	___lmul@product^(0+128),w
  2666  07E9  00A0               	movwf	?___lmul^(0+128)
  2667  07EA  0008               	return
  2668  07EB                     __end_of___lmul:	
  2669                           
  2670                           	psect	text9
  2671  0DFC                     __ptext9:	
  2672 ;; *************** function ___aldiv *****************
  2673 ;; Defined at:
  2674 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  divisor         4   13[BANK1 ] long 
  2677 ;;  dividend        4   17[BANK1 ] long 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  quotient        4   24[BANK1 ] long 
  2680 ;;  sign            1   23[BANK1 ] unsigned char 
  2681 ;;  counter         1   22[BANK1 ] unsigned char 
  2682 ;; Return value:  Size  Location     Type
  2683 ;;                  4   13[BANK1 ] long 
  2684 ;; Registers used:
  2685 ;;		wreg, status,2, status,0
  2686 ;; Tracked objects:
  2687 ;;		On entry : 0/0
  2688 ;;		On exit  : 0/0
  2689 ;;		Unchanged: 0/0
  2690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2691 ;;      Params:         0       0       8       0       0
  2692 ;;      Locals:         0       0       6       0       0
  2693 ;;      Temps:          0       0       1       0       0
  2694 ;;      Totals:         0       0      15       0       0
  2695 ;;Total ram usage:       15 bytes
  2696 ;; Hardware stack levels used:    1
  2697 ;; Hardware stack levels required when called:    4
  2698 ;; This function calls:
  2699 ;;		Nothing
  2700 ;; This function is called by:
  2701 ;;		_pwm_set
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           
  2706                           ;psect for function ___aldiv
  2707  0DFC                     ___aldiv:	
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2711  0DFC  1683               	bsf	3,5	;RP0=1, select bank1
  2712  0DFD  1303               	bcf	3,6	;RP1=0, select bank1
  2713  0DFE  01B7               	clrf	___aldiv@sign^(0+128)
  2714  0DFF  1FB0               	btfss	(___aldiv@divisor+3)^(0+128),7
  2715  0E00  2E0E               	goto	l600
  2716  0E01  09AD               	comf	___aldiv@divisor^(0+128),f
  2717  0E02  09AE               	comf	(___aldiv@divisor+1)^(0+128),f
  2718  0E03  09AF               	comf	(___aldiv@divisor+2)^(0+128),f
  2719  0E04  09B0               	comf	(___aldiv@divisor+3)^(0+128),f
  2720  0E05  0AAD               	incf	___aldiv@divisor^(0+128),f
  2721  0E06  1903               	skipnz
  2722  0E07  0AAE               	incf	(___aldiv@divisor+1)^(0+128),f
  2723  0E08  1903               	skipnz
  2724  0E09  0AAF               	incf	(___aldiv@divisor+2)^(0+128),f
  2725  0E0A  1903               	skipnz
  2726  0E0B  0AB0               	incf	(___aldiv@divisor+3)^(0+128),f
  2727  0E0C  01B7               	clrf	___aldiv@sign^(0+128)
  2728  0E0D  0AB7               	incf	___aldiv@sign^(0+128),f
  2729  0E0E                     l600:	
  2730  0E0E  1FB4               	btfss	(___aldiv@dividend+3)^(0+128),7
  2731  0E0F  2E1F               	goto	l2175
  2732  0E10  09B1               	comf	___aldiv@dividend^(0+128),f
  2733  0E11  09B2               	comf	(___aldiv@dividend+1)^(0+128),f
  2734  0E12  09B3               	comf	(___aldiv@dividend+2)^(0+128),f
  2735  0E13  09B4               	comf	(___aldiv@dividend+3)^(0+128),f
  2736  0E14  0AB1               	incf	___aldiv@dividend^(0+128),f
  2737  0E15  1903               	skipnz
  2738  0E16  0AB2               	incf	(___aldiv@dividend+1)^(0+128),f
  2739  0E17  1903               	skipnz
  2740  0E18  0AB3               	incf	(___aldiv@dividend+2)^(0+128),f
  2741  0E19  1903               	skipnz
  2742  0E1A  0AB4               	incf	(___aldiv@dividend+3)^(0+128),f
  2743  0E1B  3001               	movlw	1
  2744  0E1C  00B5               	movwf	??___aldiv^(0+128)
  2745  0E1D  0835               	movf	??___aldiv^(0+128),w
  2746  0E1E  06B7               	xorwf	___aldiv@sign^(0+128),f
  2747  0E1F                     l2175:	
  2748  0E1F  3000               	movlw	0
  2749  0E20  00BB               	movwf	(___aldiv@quotient+3)^(0+128)
  2750  0E21  3000               	movlw	0
  2751  0E22  00BA               	movwf	(___aldiv@quotient+2)^(0+128)
  2752  0E23  3000               	movlw	0
  2753  0E24  00B9               	movwf	(___aldiv@quotient+1)^(0+128)
  2754  0E25  3000               	movlw	0
  2755  0E26  00B8               	movwf	___aldiv@quotient^(0+128)
  2756  0E27  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  2757  0E28  042F               	iorwf	(___aldiv@divisor+2)^(0+128),w
  2758  0E29  042E               	iorwf	(___aldiv@divisor+1)^(0+128),w
  2759  0E2A  042D               	iorwf	___aldiv@divisor^(0+128),w
  2760  0E2B  1903               	skipnz
  2761  0E2C  2E74               	goto	l2197
  2762  0E2D  01B6               	clrf	___aldiv@counter^(0+128)
  2763  0E2E  0AB6               	incf	___aldiv@counter^(0+128),f
  2764  0E2F                     l2183:	
  2765  0E2F  1BB0               	btfsc	(___aldiv@divisor+3)^(0+128),7
  2766  0E30  2E3F               	goto	l2185
  2767  0E31  3001               	movlw	1
  2768  0E32  00B5               	movwf	??___aldiv^(0+128)
  2769  0E33                     u2125:	
  2770  0E33  1003               	clrc
  2771  0E34  0DAD               	rlf	___aldiv@divisor^(0+128),f
  2772  0E35  0DAE               	rlf	(___aldiv@divisor+1)^(0+128),f
  2773  0E36  0DAF               	rlf	(___aldiv@divisor+2)^(0+128),f
  2774  0E37  0DB0               	rlf	(___aldiv@divisor+3)^(0+128),f
  2775  0E38  0BB5               	decfsz	??___aldiv^(0+128),f
  2776  0E39  2E33               	goto	u2125
  2777  0E3A  3001               	movlw	1
  2778  0E3B  00B5               	movwf	??___aldiv^(0+128)
  2779  0E3C  0835               	movf	??___aldiv^(0+128),w
  2780  0E3D  07B6               	addwf	___aldiv@counter^(0+128),f
  2781  0E3E  2E2F               	goto	l2183
  2782  0E3F                     l2185:	
  2783  0E3F  3001               	movlw	1
  2784  0E40  00B5               	movwf	??___aldiv^(0+128)
  2785  0E41                     u2145:	
  2786  0E41  1003               	clrc
  2787  0E42  0DB8               	rlf	___aldiv@quotient^(0+128),f
  2788  0E43  0DB9               	rlf	(___aldiv@quotient+1)^(0+128),f
  2789  0E44  0DBA               	rlf	(___aldiv@quotient+2)^(0+128),f
  2790  0E45  0DBB               	rlf	(___aldiv@quotient+3)^(0+128),f
  2791  0E46  0BB5               	decfsz	??___aldiv^(0+128),f
  2792  0E47  2E41               	goto	u2145
  2793  0E48  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  2794  0E49  0234               	subwf	(___aldiv@dividend+3)^(0+128),w
  2795  0E4A  1D03               	skipz
  2796  0E4B  2E56               	goto	u2155
  2797  0E4C  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  2798  0E4D  0233               	subwf	(___aldiv@dividend+2)^(0+128),w
  2799  0E4E  1D03               	skipz
  2800  0E4F  2E56               	goto	u2155
  2801  0E50  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  2802  0E51  0232               	subwf	(___aldiv@dividend+1)^(0+128),w
  2803  0E52  1D03               	skipz
  2804  0E53  2E56               	goto	u2155
  2805  0E54  082D               	movf	___aldiv@divisor^(0+128),w
  2806  0E55  0231               	subwf	___aldiv@dividend^(0+128),w
  2807  0E56                     u2155:	
  2808  0E56  1C03               	skipc
  2809  0E57  2E67               	goto	l2193
  2810  0E58  082D               	movf	___aldiv@divisor^(0+128),w
  2811  0E59  02B1               	subwf	___aldiv@dividend^(0+128),f
  2812  0E5A  082E               	movf	(___aldiv@divisor+1)^(0+128),w
  2813  0E5B  1C03               	skipc
  2814  0E5C  0F2E               	incfsz	(___aldiv@divisor+1)^(0+128),w
  2815  0E5D  02B2               	subwf	(___aldiv@dividend+1)^(0+128),f
  2816  0E5E  082F               	movf	(___aldiv@divisor+2)^(0+128),w
  2817  0E5F  1C03               	skipc
  2818  0E60  0F2F               	incfsz	(___aldiv@divisor+2)^(0+128),w
  2819  0E61  02B3               	subwf	(___aldiv@dividend+2)^(0+128),f
  2820  0E62  0830               	movf	(___aldiv@divisor+3)^(0+128),w
  2821  0E63  1C03               	skipc
  2822  0E64  0F30               	incfsz	(___aldiv@divisor+3)^(0+128),w
  2823  0E65  02B4               	subwf	(___aldiv@dividend+3)^(0+128),f
  2824  0E66  1438               	bsf	___aldiv@quotient^(0+128),0
  2825  0E67                     l2193:	
  2826  0E67  3001               	movlw	1
  2827  0E68                     u2165:	
  2828  0E68  1003               	clrc
  2829  0E69  0CB0               	rrf	(___aldiv@divisor+3)^(0+128),f
  2830  0E6A  0CAF               	rrf	(___aldiv@divisor+2)^(0+128),f
  2831  0E6B  0CAE               	rrf	(___aldiv@divisor+1)^(0+128),f
  2832  0E6C  0CAD               	rrf	___aldiv@divisor^(0+128),f
  2833  0E6D  3EFF               	addlw	-1
  2834  0E6E  1D03               	skipz
  2835  0E6F  2E68               	goto	u2165
  2836  0E70  3001               	movlw	1
  2837  0E71  02B6               	subwf	___aldiv@counter^(0+128),f
  2838  0E72  1D03               	btfss	3,2
  2839  0E73  2E3F               	goto	l2185
  2840  0E74                     l2197:	
  2841  0E74  0837               	movf	___aldiv@sign^(0+128),w
  2842  0E75  1903               	btfsc	3,2
  2843  0E76  2E82               	goto	l2201
  2844  0E77  09B8               	comf	___aldiv@quotient^(0+128),f
  2845  0E78  09B9               	comf	(___aldiv@quotient+1)^(0+128),f
  2846  0E79  09BA               	comf	(___aldiv@quotient+2)^(0+128),f
  2847  0E7A  09BB               	comf	(___aldiv@quotient+3)^(0+128),f
  2848  0E7B  0AB8               	incf	___aldiv@quotient^(0+128),f
  2849  0E7C  1903               	skipnz
  2850  0E7D  0AB9               	incf	(___aldiv@quotient+1)^(0+128),f
  2851  0E7E  1903               	skipnz
  2852  0E7F  0ABA               	incf	(___aldiv@quotient+2)^(0+128),f
  2853  0E80  1903               	skipnz
  2854  0E81  0ABB               	incf	(___aldiv@quotient+3)^(0+128),f
  2855  0E82                     l2201:	
  2856  0E82  083B               	movf	(___aldiv@quotient+3)^(0+128),w
  2857  0E83  00B0               	movwf	(?___aldiv+3)^(0+128)
  2858  0E84  083A               	movf	(___aldiv@quotient+2)^(0+128),w
  2859  0E85  00AF               	movwf	(?___aldiv+2)^(0+128)
  2860  0E86  0839               	movf	(___aldiv@quotient+1)^(0+128),w
  2861  0E87  00AE               	movwf	(?___aldiv+1)^(0+128)
  2862  0E88  0838               	movf	___aldiv@quotient^(0+128),w
  2863  0E89  00AD               	movwf	?___aldiv^(0+128)
  2864  0E8A  0008               	return
  2865  0E8B                     __end_of___aldiv:	
  2866                           
  2867                           	psect	text10
  2868  0AB5                     __ptext10:	
  2869 ;; *************** function _pwm_init *****************
  2870 ;; Defined at:
  2871 ;;		line 25 in file "pwm.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;		None
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  1    wreg      void 
  2878 ;; Registers used:
  2879 ;;		wreg, status,2, status,0
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2885 ;;      Params:         0       0       0       0       0
  2886 ;;      Locals:         0       0       0       0       0
  2887 ;;      Temps:          0       0       0       0       0
  2888 ;;      Totals:         0       0       0       0       0
  2889 ;;Total ram usage:        0 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    4
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_main
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           
  2900                           ;psect for function _pwm_init
  2901  0AB5                     _pwm_init:	
  2902                           
  2903                           ;pwm.c: 28: TRISC1 = 1;
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2907  0AB5  1683               	bsf	3,5	;RP0=1, select bank1
  2908  0AB6  1303               	bcf	3,6	;RP1=0, select bank1
  2909  0AB7  1487               	bsf	7,1	;volatile
  2910                           
  2911                           ;pwm.c: 29: TRISC2 = 1;
  2912  0AB8  1507               	bsf	7,2	;volatile
  2913                           
  2914                           ;pwm.c: 32: PR2 = 0xFF;
  2915  0AB9  30FF               	movlw	255
  2916  0ABA  0092               	movwf	18	;volatile
  2917                           
  2918                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  2919  0ABB  1283               	bcf	3,5	;RP0=0, select bank0
  2920  0ABC  1303               	bcf	3,6	;RP1=0, select bank0
  2921  0ABD  0817               	movf	23,w	;volatile
  2922  0ABE  39F0               	andlw	-16
  2923  0ABF  380C               	iorlw	12
  2924  0AC0  0097               	movwf	23	;volatile
  2925                           
  2926                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  2927  0AC1  081D               	movf	29,w	;volatile
  2928  0AC2  39F0               	andlw	-16
  2929  0AC3  380C               	iorlw	12
  2930  0AC4  009D               	movwf	29	;volatile
  2931                           
  2932                           ;pwm.c: 39: CCPR1L = 0;
  2933  0AC5  0195               	clrf	21	;volatile
  2934                           
  2935                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  2936  0AC6  30CF               	movlw	-49
  2937  0AC7  0597               	andwf	23,f	;volatile
  2938                           
  2939                           ;pwm.c: 41: CCPR2L = 0;
  2940  0AC8  019B               	clrf	27	;volatile
  2941                           
  2942                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  2943  0AC9  108C               	bcf	12,1	;volatile
  2944                           
  2945                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  2946  0ACA  30FC               	movlw	-4
  2947  0ACB  0592               	andwf	18,f	;volatile
  2948                           
  2949                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  2950  0ACC  1512               	bsf	18,2	;volatile
  2951  0ACD                     l170:	
  2952                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  2953                           
  2954  0ACD  1C8C               	btfss	12,1	;volatile
  2955  0ACE  2ACD               	goto	l170
  2956                           
  2957                           ;pwm.c: 53: TRISC1 = 0;
  2958  0ACF  1683               	bsf	3,5	;RP0=1, select bank1
  2959  0AD0  1303               	bcf	3,6	;RP1=0, select bank1
  2960  0AD1  1087               	bcf	7,1	;volatile
  2961                           
  2962                           ;pwm.c: 54: TRISC2 = 0;
  2963  0AD2  1107               	bcf	7,2	;volatile
  2964                           
  2965                           ;pwm.c: 59: ANS4 = 0;
  2966  0AD3  1683               	bsf	3,5	;RP0=1, select bank3
  2967  0AD4  1703               	bsf	3,6	;RP1=1, select bank3
  2968  0AD5  1208               	bcf	8,4	;volatile
  2969                           
  2970                           ;pwm.c: 60: TRISA5 = 0;
  2971  0AD6  1683               	bsf	3,5	;RP0=1, select bank1
  2972  0AD7  1303               	bcf	3,6	;RP1=0, select bank1
  2973  0AD8  1285               	bcf	5,5	;volatile
  2974                           
  2975                           ;pwm.c: 61: TRISA6 = 0;
  2976  0AD9  1305               	bcf	5,6	;volatile
  2977                           
  2978                           ;pwm.c: 62: RA5 = 0;
  2979  0ADA  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0ADB  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0ADC  1285               	bcf	5,5	;volatile
  2982                           
  2983                           ;pwm.c: 63: RA6 = 0;
  2984  0ADD  1305               	bcf	5,6	;volatile
  2985  0ADE  0008               	return
  2986  0ADF                     __end_of_pwm_init:	
  2987                           
  2988                           	psect	text11
  2989  0B47                     __ptext11:	
  2990 ;; *************** function _putst *****************
  2991 ;; Defined at:
  2992 ;;		line 211 in file "serial.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  str             1    wreg     PTR const unsigned char 
  2995 ;;		 -> main@sVar(10), 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  str             1    3[BANK1 ] PTR const unsigned char 
  2998 ;;		 -> main@sVar(10), 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      void 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3008 ;;      Params:         0       0       0       0       0
  3009 ;;      Locals:         0       0       1       0       0
  3010 ;;      Temps:          0       0       1       0       0
  3011 ;;      Totals:         0       0       2       0       0
  3012 ;;Total ram usage:        2 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    5
  3015 ;; This function calls:
  3016 ;;		_putch
  3017 ;; This function is called by:
  3018 ;;		_main
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _putst
  3024  0B47                     _putst:	
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3028                           ;putst@str stored from wreg
  3029  0B47  1683               	bsf	3,5	;RP0=1, select bank1
  3030  0B48  1303               	bcf	3,6	;RP1=0, select bank1
  3031  0B49  00A3               	movwf	putst@str^(0+128)
  3032  0B4A                     l2571:	
  3033                           ;serial.c: 212: while((*str)!=0) {
  3034                           
  3035  0B4A  0823               	movf	putst@str^(0+128),w
  3036  0B4B  0084               	movwf	4
  3037  0B4C  1383               	bcf	3,7	;select IRP bank0
  3038  0B4D  0800               	movf	0,w
  3039  0B4E  1903               	btfsc	3,2
  3040  0B4F  0008               	return
  3041                           
  3042                           ;serial.c: 213: putch(*str);
  3043  0B50  0823               	movf	putst@str^(0+128),w
  3044  0B51  0084               	movwf	4
  3045  0B52  0800               	movf	0,w
  3046  0B53  120A  158A  22DF  120A  158A  	fcall	_putch
  3047                           
  3048                           ;serial.c: 214: if (*str==13) putch(10);
  3049  0B58  1683               	bsf	3,5	;RP0=1, select bank1
  3050  0B59  1303               	bcf	3,6	;RP1=0, select bank1
  3051  0B5A  0823               	movf	putst@str^(0+128),w
  3052  0B5B  0084               	movwf	4
  3053  0B5C  300D               	movlw	13
  3054  0B5D  1383               	bcf	3,7	;select IRP bank0
  3055  0B5E  0600               	xorwf	0,w
  3056  0B5F  1D03               	btfss	3,2
  3057  0B60  2B67               	goto	l2565
  3058  0B61  300A               	movlw	10
  3059  0B62  120A  158A  22DF  120A  158A  	fcall	_putch
  3060  0B67                     l2565:	
  3061                           
  3062                           ;serial.c: 215: if (*str==10) putch(13);
  3063  0B67  1683               	bsf	3,5	;RP0=1, select bank1
  3064  0B68  1303               	bcf	3,6	;RP1=0, select bank1
  3065  0B69  0823               	movf	putst@str^(0+128),w
  3066  0B6A  0084               	movwf	4
  3067  0B6B  300A               	movlw	10
  3068  0B6C  1383               	bcf	3,7	;select IRP bank0
  3069  0B6D  0600               	xorwf	0,w
  3070  0B6E  1D03               	btfss	3,2
  3071  0B6F  2B76               	goto	l2569
  3072  0B70  300D               	movlw	13
  3073  0B71  120A  158A  22DF  120A  158A  	fcall	_putch
  3074  0B76                     l2569:	
  3075                           
  3076                           ;serial.c: 216: str++;
  3077  0B76  3001               	movlw	1
  3078  0B77  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0B78  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0B79  00A2               	movwf	??_putst^(0+128)
  3081  0B7A  0822               	movf	??_putst^(0+128),w
  3082  0B7B  07A3               	addwf	putst@str^(0+128),f
  3083  0B7C  2B4A               	goto	l2571
  3084  0B7D                     __end_of_putst:	
  3085                           
  3086                           	psect	text12
  3087  0ADF                     __ptext12:	
  3088 ;; *************** function _putch *****************
  3089 ;; Defined at:
  3090 ;;		line 95 in file "serial.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  c               1    wreg     unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  c               1    1[BANK1 ] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3104 ;;      Params:         0       0       0       0       0
  3105 ;;      Locals:         0       0       1       0       0
  3106 ;;      Temps:          0       0       1       0       0
  3107 ;;      Totals:         0       0       2       0       0
  3108 ;;Total ram usage:        2 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    4
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_putst
  3115 ;;		_putchhex
  3116 ;;		_putchdec
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           
  3121                           ;psect for function _putch
  3122  0ADF                     _putch:	
  3123                           
  3124                           ;incstack = 0
  3125                           ; Regs used in _putch: [wreg]
  3126                           ;putch@c stored from wreg
  3127  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
  3128  0AE0  1303               	bcf	3,6	;RP1=0, select bank1
  3129  0AE1  00A1               	movwf	putch@c^(0+128)
  3130  0AE2                     l2135:	
  3131                           ;serial.c: 96: while(!TXIF) {
  3132                           
  3133  0AE2  1283               	bcf	3,5	;RP0=0, select bank0
  3134  0AE3  1303               	bcf	3,6	;RP1=0, select bank0
  3135  0AE4  1A0C               	btfsc	12,4	;volatile
  3136  0AE5  2B00               	goto	l2137
  3137                           
  3138                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  3139  0AE6  1C98               	btfss	24,1	;volatile
  3140  0AE7  2AF0               	goto	l82
  3141  0AE8  1683               	bsf	3,5	;RP0=1, select bank1
  3142  0AE9  1303               	bcf	3,6	;RP1=0, select bank1
  3143  0AEA  1298               	bcf	24,5	;volatile
  3144  0AEB  1698               	bsf	24,5	;volatile
  3145  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0AEE  1218               	bcf	24,4	;volatile
  3148  0AEF  1618               	bsf	24,4	;volatile
  3149  0AF0                     l82:	
  3150  0AF0  1D18               	btfss	24,2	;volatile
  3151  0AF1  2AFE               	goto	l83
  3152  0AF2  081A               	movf	26,w	;volatile
  3153  0AF3  1683               	bsf	3,5	;RP0=1, select bank1
  3154  0AF4  1303               	bcf	3,6	;RP1=0, select bank1
  3155  0AF5  00A0               	movwf	??_putch^(0+128)
  3156  0AF6  0820               	movf	??_putch^(0+128),w
  3157  0AF7  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0AF8  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0AF9  00ED               	movwf	_dummy
  3160  0AFA  1683               	bsf	3,5	;RP0=1, select bank1
  3161  0AFB  1303               	bcf	3,6	;RP1=0, select bank1
  3162  0AFC  1298               	bcf	24,5	;volatile
  3163  0AFD  1698               	bsf	24,5	;volatile
  3164  0AFE                     l83:	
  3165  0AFE  0064               	clrwdt	;# 
  3166  0AFF  2AE2               	goto	l2135
  3167  0B00                     l2137:	
  3168                           
  3169                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  3170  0B00  1683               	bsf	3,5	;RP0=1, select bank1
  3171  0B01  1303               	bcf	3,6	;RP1=0, select bank1
  3172  0B02  0821               	movf	putch@c^(0+128),w
  3173  0B03  1283               	bcf	3,5	;RP0=0, select bank0
  3174  0B04  1303               	bcf	3,6	;RP1=0, select bank0
  3175  0B05  0099               	movwf	25	;volatile
  3176                           
  3177                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  3178  0B06  303C               	movlw	60
  3179  0B07  1683               	bsf	3,5	;RP0=1, select bank1
  3180  0B08  1303               	bcf	3,6	;RP1=0, select bank1
  3181  0B09  00A0               	movwf	??_putch^(0+128)
  3182  0B0A  0820               	movf	??_putch^(0+128),w
  3183  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
  3184  0B0C  1303               	bcf	3,6	;RP1=0, select bank0
  3185  0B0D  00EE               	movwf	_delayus_variable
  3186  0B0E  0000               	nop	;# 
  3187  0B0F  0000               	nop	;# 
  3188  0B10  0BEE               	decfsz	_delayus_variable,f	;# 
  3189  0B11  2ADC               	goto	($+-3)	;# 
  3190  0B12  0008               	return
  3191  0B13                     __end_of_putch:	
  3192                           
  3193                           	psect	text13
  3194  0A74                     __ptext13:	
  3195 ;; *************** function _encoders_init *****************
  3196 ;; Defined at:
  3197 ;;		line 239 in file "main.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;		None
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3211 ;;      Params:         0       0       0       0       0
  3212 ;;      Locals:         0       0       0       0       0
  3213 ;;      Temps:          0       0       2       0       0
  3214 ;;      Totals:         0       0       2       0       0
  3215 ;;Total ram usage:        2 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    4
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_main
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           
  3226                           ;psect for function _encoders_init
  3227  0A74                     _encoders_init:	
  3228                           
  3229                           ;main.c: 242: state1 = (PORTB & 0b00011000) >>3;
  3230                           
  3231                           ;incstack = 0
  3232                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  3233  0A74  1283               	bcf	3,5	;RP0=0, select bank0
  3234  0A75  1303               	bcf	3,6	;RP1=0, select bank0
  3235  0A76  0806               	movf	6,w	;volatile
  3236  0A77  1683               	bsf	3,5	;RP0=1, select bank1
  3237  0A78  1303               	bcf	3,6	;RP1=0, select bank1
  3238  0A79  00A0               	movwf	??_encoders_init^(0+128)
  3239  0A7A  3003               	movlw	3
  3240  0A7B                     u3155:	
  3241  0A7B  1003               	clrc
  3242  0A7C  0CA0               	rrf	??_encoders_init^(0+128),f
  3243  0A7D  3EFF               	addlw	-1
  3244  0A7E  1D03               	skipz
  3245  0A7F  2A7B               	goto	u3155
  3246  0A80  0820               	movf	??_encoders_init^(0+128),w
  3247  0A81  3903               	andlw	3
  3248  0A82  00A1               	movwf	(??_encoders_init+1)^(0+128)
  3249  0A83  0821               	movf	(??_encoders_init+1)^(0+128),w
  3250  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  3251  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  3252  0A86  00EC               	movwf	_state1	;volatile
  3253                           
  3254                           ;main.c: 243: encoder1_counter = 0;
  3255  0A87  3000               	movlw	0
  3256  0A88  1683               	bsf	3,5	;RP0=1, select bank1
  3257  0A89  1303               	bcf	3,6	;RP1=0, select bank1
  3258  0A8A  00E2               	movwf	(_encoder1_counter+3)^(0+128)	;volatile
  3259  0A8B  3000               	movlw	0
  3260  0A8C  00E1               	movwf	(_encoder1_counter+2)^(0+128)	;volatile
  3261  0A8D  3000               	movlw	0
  3262  0A8E  00E0               	movwf	(_encoder1_counter+1)^(0+128)	;volatile
  3263  0A8F  3000               	movlw	0
  3264  0A90  00DF               	movwf	_encoder1_counter^(0+128)	;volatile
  3265  0A91  0008               	return
  3266  0A92                     __end_of_encoders_init:	
  3267                           
  3268                           	psect	text14
  3269  0A11                     __ptext14:	
  3270 ;; *************** function _chkchr *****************
  3271 ;; Defined at:
  3272 ;;		line 142 in file "serial.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;                  1    wreg      unsigned char 
  3279 ;; Registers used:
  3280 ;;		wreg
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3286 ;;      Params:         0       0       0       0       0
  3287 ;;      Locals:         0       0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0
  3289 ;;      Totals:         0       0       0       0       0
  3290 ;;Total ram usage:        0 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    4
  3293 ;; This function calls:
  3294 ;;		Nothing
  3295 ;; This function is called by:
  3296 ;;		_main
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           
  3301                           ;psect for function _chkchr
  3302  0A11                     _chkchr:	
  3303                           
  3304                           ;serial.c: 143: if (RCIF) {
  3305                           
  3306                           ;incstack = 0
  3307                           ; Regs used in _chkchr: [wreg]
  3308  0A11  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0A12  1303               	bcf	3,6	;RP1=0, select bank0
  3310  0A13  1E8C               	btfss	12,5	;volatile
  3311  0A14  2A17               	goto	l2529
  3312                           
  3313                           ;serial.c: 144: return RCREG;
  3314  0A15  081A               	movf	26,w	;volatile
  3315  0A16  0008               	return
  3316  0A17                     l2529:	
  3317                           
  3318                           ;serial.c: 145: };serial.c: 146: return 255;
  3319  0A17  30FF               	movlw	255
  3320  0A18  0008               	return
  3321  0A19                     __end_of_chkchr:	
  3322                           
  3323                           	psect	text15
  3324  0A21                     __ptext15:	
  3325 ;; *************** function _SetPoint *****************
  3326 ;; Defined at:
  3327 ;;		line 142 in file "main.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  new_val         2    0[BANK1 ] int 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  1    wreg      void 
  3334 ;; Registers used:
  3335 ;;		wreg
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3341 ;;      Params:         0       0       2       0       0
  3342 ;;      Locals:         0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0
  3344 ;;      Totals:         0       0       2       0       0
  3345 ;;Total ram usage:        2 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    4
  3348 ;; This function calls:
  3349 ;;		Nothing
  3350 ;; This function is called by:
  3351 ;;		_main
  3352 ;;		_motor_reset
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           
  3357                           ;psect for function _SetPoint
  3358  0A21                     _SetPoint:	
  3359                           
  3360                           ;main.c: 143: set_point = new_val;
  3361                           
  3362                           ;incstack = 0
  3363                           ; Regs used in _SetPoint: [wreg]
  3364  0A21  1683               	bsf	3,5	;RP0=1, select bank1
  3365  0A22  1303               	bcf	3,6	;RP1=0, select bank1
  3366  0A23  0820               	movf	SetPoint@new_val^(0+128),w
  3367  0A24  00DB               	movwf	_set_point^(0+128)	;volatile
  3368  0A25  0821               	movf	(SetPoint@new_val+1)^(0+128),w
  3369  0A26  00DC               	movwf	(_set_point+1)^(0+128)	;volatile
  3370  0A27  3000               	movlw	0
  3371  0A28  1BDC               	btfsc	(_set_point+1)^(0+128),7	;volatile
  3372  0A29  30FF               	movlw	255
  3373  0A2A  00DD               	movwf	(_set_point+2)^(0+128)	;volatile
  3374  0A2B  00DE               	movwf	(_set_point+3)^(0+128)	;volatile
  3375  0A2C  0008               	return
  3376  0A2D                     __end_of_SetPoint:	
  3377                           
  3378                           	psect	text16
  3379  0697                     __ptext16:	
  3380 ;; *************** function _isr *****************
  3381 ;; Defined at:
  3382 ;;		line 159 in file "main.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  portB           1   61[BANK0 ] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      void 
  3389 ;; Registers used:
  3390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3396 ;;      Params:         0       0       0       0       0
  3397 ;;      Locals:         0       1       0       0       0
  3398 ;;      Temps:          0       6       0       0       0
  3399 ;;      Totals:         0       7       0       0       0
  3400 ;;Total ram usage:        7 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    3
  3403 ;; This function calls:
  3404 ;;		_SetMotor
  3405 ;; This function is called by:
  3406 ;;		Interrupt level 1
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           
  3411                           ;psect for function _isr
  3412  0697                     _isr:	
  3413                           
  3414                           ;main.c: 160: static int tick;;main.c: 164: if (T0IE && T0IF) {
  3415  0697  1A8B               	btfsc	11,5	;volatile
  3416  0698  1D0B               	btfss	11,2	;volatile
  3417  0699  2ED9               	goto	i1l2813
  3418                           
  3419                           ;main.c: 166: SetMotor();
  3420  069A  120A  118A  234E  120A  118A  	fcall	_SetMotor
  3421                           
  3422                           ;main.c: 167: if (sampling){
  3423  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3424  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3425  06A1  086A               	movf	_sampling,w	;volatile
  3426  06A2  1903               	btfsc	3,2
  3427  06A3  2ED0               	goto	i1l2807
  3428                           
  3429                           ;main.c: 168: if (samples < 100/2){
  3430  06A4  0869               	movf	_samples+1,w	;volatile
  3431  06A5  3A80               	xorlw	128
  3432  06A6  00FF               	movwf	127
  3433  06A7  3080               	movlw	128
  3434  06A8  027F               	subwf	127,w
  3435  06A9  1D03               	skipz
  3436  06AA  2EAD               	goto	u341_25
  3437  06AB  3032               	movlw	50
  3438  06AC  0268               	subwf	_samples,w	;volatile
  3439  06AD                     u341_25:	
  3440  06AD  1803               	skipnc
  3441  06AE  2EB7               	goto	i1l2801
  3442                           
  3443                           ;main.c: 169: pos_log1[samples] = motor_pos-last_pos;
  3444  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  3445  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  3446  06B1  085E               	movf	_last_pos,w	;volatile
  3447  06B2  0262               	subwf	_motor_pos,w	;volatile
  3448  06B3  00D7               	movwf	??_isr
  3449  06B4  0868               	movf	_samples,w	;volatile
  3450  06B5  3E90               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  3451  06B6  2EBE               	goto	L1
  3452  06B7                     i1l2801:	
  3453                           ;main.c: 170: }else{
  3454                           
  3455                           
  3456                           ;main.c: 171: pos_log2[samples-(100/2)] = motor_pos-last_pos;
  3457  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3458  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3459  06B9  085E               	movf	_last_pos,w	;volatile
  3460  06BA  0262               	subwf	_motor_pos,w	;volatile
  3461  06BB  00D7               	movwf	??_isr
  3462  06BC  0868               	movf	_samples,w	;volatile
  3463  06BD  3EDE               	addlw	(low ((_pos_log2| (0+256)+206)))& (0+255)
  3464  06BE                     L1:	
  3465  06BE  0084               	movwf	4
  3466  06BF  0857               	movf	??_isr,w
  3467  06C0  1783               	bsf	3,7	;select IRP bank2
  3468  06C1  0080               	movwf	0
  3469                           
  3470                           ;main.c: 172: };main.c: 173: last_pos = motor_pos;
  3471  06C2  0865               	movf	_motor_pos+3,w	;volatile
  3472  06C3  00E1               	movwf	_last_pos+3	;volatile
  3473  06C4  0864               	movf	_motor_pos+2,w	;volatile
  3474  06C5  00E0               	movwf	_last_pos+2	;volatile
  3475  06C6  0863               	movf	_motor_pos+1,w	;volatile
  3476  06C7  00DF               	movwf	_last_pos+1	;volatile
  3477  06C8  0862               	movf	_motor_pos,w	;volatile
  3478  06C9  00DE               	movwf	_last_pos	;volatile
  3479                           
  3480                           ;main.c: 174: samples++;
  3481  06CA  3001               	movlw	1
  3482  06CB  07E8               	addwf	_samples,f	;volatile
  3483  06CC  1803               	skipnc
  3484  06CD  0AE9               	incf	_samples+1,f	;volatile
  3485  06CE  3000               	movlw	0
  3486  06CF  07E9               	addwf	_samples+1,f	;volatile
  3487  06D0                     i1l2807:	
  3488                           
  3489                           ;main.c: 175: };main.c: 177: com_time++;
  3490  06D0  3001               	movlw	1
  3491  06D1  07E6               	addwf	_com_time,f	;volatile
  3492  06D2  1803               	skipnc
  3493  06D3  0AE7               	incf	_com_time+1,f	;volatile
  3494  06D4  3000               	movlw	0
  3495  06D5  07E7               	addwf	_com_time+1,f	;volatile
  3496                           
  3497                           ;main.c: 179: TMR0 = (0xff - 195);
  3498  06D6  303C               	movlw	60
  3499  06D7  0081               	movwf	1	;volatile
  3500                           
  3501                           ;main.c: 180: T0IF = 0;
  3502  06D8  110B               	bcf	11,2	;volatile
  3503  06D9                     i1l2813:	
  3504                           
  3505                           ;main.c: 181: };main.c: 184: if (RBIE && RBIF) {
  3506  06D9  198B               	btfsc	11,3	;volatile
  3507  06DA  1C0B               	btfss	11,0	;volatile
  3508  06DB  2F9F               	goto	i1l334
  3509                           
  3510                           ;main.c: 185: char portB = PORTB;
  3511  06DC  0806               	movf	6,w	;volatile
  3512  06DD  00D7               	movwf	??_isr
  3513  06DE  0857               	movf	??_isr,w
  3514  06DF  00DD               	movwf	isr@portB
  3515                           
  3516                           ;main.c: 187: ab1 = (portB & 0b00011000) >>3;
  3517  06E0  085D               	movf	isr@portB,w
  3518  06E1  00D7               	movwf	??_isr
  3519  06E2  3003               	movlw	3
  3520  06E3                     u344_25:	
  3521  06E3  1003               	clrc
  3522  06E4  0CD7               	rrf	??_isr,f
  3523  06E5  3EFF               	addlw	-1
  3524  06E6  1D03               	skipz
  3525  06E7  2EE3               	goto	u344_25
  3526  06E8  0857               	movf	??_isr,w
  3527  06E9  3903               	andlw	3
  3528  06EA  00D8               	movwf	??_isr+1
  3529  06EB  0858               	movf	??_isr+1,w
  3530  06EC  00EB               	movwf	_ab1	;volatile
  3531                           
  3532                           ;main.c: 188: switch(state1)
  3533  06ED  2F71               	goto	i1l2859
  3534  06EE                     i1l2821:	
  3535                           
  3536                           ;main.c: 191: if(ab1 == 1){
  3537  06EE  036B               	decf	_ab1,w	;volatile
  3538  06EF  1D03               	btfss	3,2
  3539  06F0  2EF3               	goto	i1l2825
  3540                           
  3541                           ;main.c: 192: state1 = 1;
  3542  06F1  3001               	movlw	1
  3543  06F2  2F15               	goto	L2
  3544  06F3                     i1l2825:	
  3545                           ;main.c: 194: }
  3546                           
  3547                           ;main.c: 193: encoder1_counter--;
  3548                           
  3549                           
  3550                           ;main.c: 195: else if(ab1 == 2){
  3551  06F3  3002               	movlw	2
  3552  06F4  066B               	xorwf	_ab1,w	;volatile
  3553  06F5  1D03               	btfss	3,2
  3554  06F6  2F7F               	goto	i1l2861
  3555                           
  3556                           ;main.c: 196: state1 = 2;
  3557  06F7  3002               	movlw	2
  3558  06F8  00D7               	movwf	??_isr
  3559  06F9  0857               	movf	??_isr,w
  3560  06FA  00EC               	movwf	_state1	;volatile
  3561  06FB  2F00               	goto	i1l2833
  3562  06FC                     i1l2829:	
  3563                           ;main.c: 197: encoder1_counter++;
  3564                           
  3565                           
  3566                           ;main.c: 201: if(ab1 == 0){
  3567  06FC  086B               	movf	_ab1,w	;volatile
  3568  06FD  1D03               	btfss	3,2
  3569  06FE  2F10               	goto	i1l2835
  3570                           
  3571                           ;main.c: 202: state1 = 0;
  3572  06FF  01EC               	clrf	_state1	;volatile
  3573  0700                     i1l2833:	
  3574                           
  3575                           ;main.c: 203: encoder1_counter++;
  3576  0700  3001               	movlw	1
  3577  0701  1683               	bsf	3,5	;RP0=1, select bank1
  3578  0702  1303               	bcf	3,6	;RP1=0, select bank1
  3579  0703  07DF               	addwf	_encoder1_counter^(0+128),f	;volatile
  3580  0704  3000               	movlw	0
  3581  0705  1803               	skipnc
  3582  0706  3001               	movlw	1
  3583  0707  07E0               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3584  0708  3000               	movlw	0
  3585  0709  1803               	skipnc
  3586  070A  3001               	movlw	1
  3587  070B  07E1               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3588  070C  3000               	movlw	0
  3589  070D  1803               	skipnc
  3590  070E  3001               	movlw	1
  3591  070F  2F24               	goto	L3
  3592  0710                     i1l2835:	
  3593                           ;main.c: 204: }
  3594                           
  3595                           
  3596                           ;main.c: 205: else if (ab1 == 3){
  3597  0710  3003               	movlw	3
  3598  0711  066B               	xorwf	_ab1,w	;volatile
  3599  0712  1D03               	btfss	3,2
  3600  0713  2F7F               	goto	i1l2861
  3601                           
  3602                           ;main.c: 206: state1 = 3;
  3603  0714  3003               	movlw	3
  3604  0715                     L2:	
  3605  0715  00D7               	movwf	??_isr
  3606  0716  0857               	movf	??_isr,w
  3607  0717  00EC               	movwf	_state1	;volatile
  3608                           
  3609                           ;main.c: 207: encoder1_counter--;
  3610  0718  30FF               	movlw	255
  3611  0719  1683               	bsf	3,5	;RP0=1, select bank1
  3612  071A  1303               	bcf	3,6	;RP1=0, select bank1
  3613  071B  07DF               	addwf	_encoder1_counter^(0+128),f	;volatile
  3614  071C  30FF               	movlw	255
  3615  071D  1C03               	skipc
  3616  071E  07E0               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3617  071F  30FF               	movlw	255
  3618  0720  1C03               	skipc
  3619  0721  07E1               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3620  0722  30FF               	movlw	255
  3621  0723  1C03               	skipc
  3622  0724                     L3:	
  3623  0724  07E2               	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  3624  0725  2F7F               	goto	i1l2861
  3625  0726                     i1l2839:	
  3626                           
  3627                           ;main.c: 211: if(ab1 == 0){
  3628  0726  086B               	movf	_ab1,w	;volatile
  3629  0727  1D03               	btfss	3,2
  3630  0728  2F2B               	goto	i1l2845
  3631                           
  3632                           ;main.c: 212: state1 = 0;
  3633  0729  01EC               	clrf	_state1	;volatile
  3634  072A  2F4B               	goto	L4
  3635  072B                     i1l2845:	
  3636                           ;main.c: 214: }
  3637                           
  3638                           ;main.c: 213: encoder1_counter--;
  3639                           
  3640                           
  3641                           ;main.c: 215: else if(ab1 == 3){
  3642  072B  3003               	movlw	3
  3643  072C  066B               	xorwf	_ab1,w	;volatile
  3644  072D  1D03               	btfss	3,2
  3645  072E  2F7F               	goto	i1l2861
  3646                           
  3647                           ;main.c: 216: state1 = 3;
  3648  072F  3003               	movlw	3
  3649  0730  00D7               	movwf	??_isr
  3650  0731  0857               	movf	??_isr,w
  3651  0732  00EC               	movwf	_state1	;volatile
  3652                           
  3653                           ;main.c: 217: encoder1_counter++;
  3654  0733  3001               	movlw	1
  3655  0734  1683               	bsf	3,5	;RP0=1, select bank1
  3656  0735  1303               	bcf	3,6	;RP1=0, select bank1
  3657  0736  07DF               	addwf	_encoder1_counter^(0+128),f	;volatile
  3658  0737  3000               	movlw	0
  3659  0738  1803               	skipnc
  3660  0739  3001               	movlw	1
  3661  073A  07E0               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3662  073B  3000               	movlw	0
  3663  073C  1803               	skipnc
  3664  073D  3001               	movlw	1
  3665  073E  07E1               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3666  073F  3000               	movlw	0
  3667  0740  1803               	skipnc
  3668  0741  3001               	movlw	1
  3669  0742  2F57               	goto	L5
  3670  0743                     i1l2849:	
  3671                           
  3672                           ;main.c: 221: if(ab1 == 2){
  3673  0743  3002               	movlw	2
  3674  0744  066B               	xorwf	_ab1,w	;volatile
  3675  0745  1D03               	btfss	3,2
  3676  0746  2F59               	goto	i1l2853
  3677                           
  3678                           ;main.c: 222: state1 = 2;
  3679  0747  3002               	movlw	2
  3680  0748  00D7               	movwf	??_isr
  3681  0749  0857               	movf	??_isr,w
  3682  074A  00EC               	movwf	_state1	;volatile
  3683  074B                     L4:	
  3684                           
  3685                           ;main.c: 223: encoder1_counter--;
  3686  074B  30FF               	movlw	255
  3687  074C  1683               	bsf	3,5	;RP0=1, select bank1
  3688  074D  1303               	bcf	3,6	;RP1=0, select bank1
  3689  074E  07DF               	addwf	_encoder1_counter^(0+128),f	;volatile
  3690  074F  30FF               	movlw	255
  3691  0750  1C03               	skipc
  3692  0751  07E0               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3693  0752  30FF               	movlw	255
  3694  0753  1C03               	skipc
  3695  0754  07E1               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3696  0755  30FF               	movlw	255
  3697  0756  1C03               	skipc
  3698  0757                     L5:	
  3699  0757  07E2               	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  3700                           
  3701                           ;main.c: 224: }
  3702  0758  2F7F               	goto	i1l2861
  3703  0759                     i1l2853:	
  3704                           
  3705                           ;main.c: 225: else if (ab1 == 1){
  3706  0759  036B               	decf	_ab1,w	;volatile
  3707  075A  1D03               	btfss	3,2
  3708  075B  2F7F               	goto	i1l2861
  3709                           
  3710                           ;main.c: 226: state1 = 1;
  3711  075C  3001               	movlw	1
  3712  075D  00D7               	movwf	??_isr
  3713  075E  0857               	movf	??_isr,w
  3714  075F  00EC               	movwf	_state1	;volatile
  3715                           
  3716                           ;main.c: 227: encoder1_counter++;
  3717  0760  3001               	movlw	1
  3718  0761  1683               	bsf	3,5	;RP0=1, select bank1
  3719  0762  1303               	bcf	3,6	;RP1=0, select bank1
  3720  0763  07DF               	addwf	_encoder1_counter^(0+128),f	;volatile
  3721  0764  3000               	movlw	0
  3722  0765  1803               	skipnc
  3723  0766  3001               	movlw	1
  3724  0767  07E0               	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3725  0768  3000               	movlw	0
  3726  0769  1803               	skipnc
  3727  076A  3001               	movlw	1
  3728  076B  07E1               	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3729  076C  3000               	movlw	0
  3730  076D  1803               	skipnc
  3731  076E  3001               	movlw	1
  3732  076F  07E2               	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  3733  0770  2F7F               	goto	i1l2861
  3734  0771                     i1l2859:	
  3735  0771  086C               	movf	_state1,w	;volatile
  3736                           
  3737                           ; Switch size 1, requested type "simple"
  3738                           ; Number of cases is 4, Range of values is 0 to 3
  3739                           ; switch strategies available:
  3740                           ; Name         Instructions Cycles
  3741                           ; simple_byte           13     7 (average)
  3742                           ; direct_byte           20     8 (fixed)
  3743                           ; jumptable            260     6 (fixed)
  3744                           ;	Chosen strategy is simple_byte
  3745  0772  3A00               	xorlw	0	; case 0
  3746  0773  1903               	skipnz
  3747  0774  2EEE               	goto	i1l2821
  3748  0775  3A01               	xorlw	1	; case 1
  3749  0776  1903               	skipnz
  3750  0777  2EFC               	goto	i1l2829
  3751  0778  3A03               	xorlw	3	; case 2
  3752  0779  1903               	skipnz
  3753  077A  2F26               	goto	i1l2839
  3754  077B  3A01               	xorlw	1	; case 3
  3755  077C  1903               	skipnz
  3756  077D  2F43               	goto	i1l2849
  3757  077E  2F7F               	goto	i1l2861
  3758  077F                     i1l2861:	
  3759                           
  3760                           ;main.c: 232: motor_pos = -encoder1_counter;
  3761  077F  1683               	bsf	3,5	;RP0=1, select bank1
  3762  0780  1303               	bcf	3,6	;RP1=0, select bank1
  3763  0781  095F               	comf	_encoder1_counter^(0+128),w	;volatile
  3764  0782  1283               	bcf	3,5	;RP0=0, select bank0
  3765  0783  1303               	bcf	3,6	;RP1=0, select bank0
  3766  0784  00E2               	movwf	_motor_pos	;volatile
  3767  0785  1683               	bsf	3,5	;RP0=1, select bank1
  3768  0786  1303               	bcf	3,6	;RP1=0, select bank1
  3769  0787  0960               	comf	(_encoder1_counter^(0+128)+1),w	;volatile
  3770  0788  1283               	bcf	3,5	;RP0=0, select bank0
  3771  0789  1303               	bcf	3,6	;RP1=0, select bank0
  3772  078A  00E3               	movwf	_motor_pos+1	;volatile
  3773  078B  1683               	bsf	3,5	;RP0=1, select bank1
  3774  078C  1303               	bcf	3,6	;RP1=0, select bank1
  3775  078D  0961               	comf	(_encoder1_counter^(0+128)+2),w	;volatile
  3776  078E  1283               	bcf	3,5	;RP0=0, select bank0
  3777  078F  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0790  00E4               	movwf	_motor_pos+2	;volatile
  3779  0791  1683               	bsf	3,5	;RP0=1, select bank1
  3780  0792  1303               	bcf	3,6	;RP1=0, select bank1
  3781  0793  0962               	comf	(_encoder1_counter^(0+128)+3),w	;volatile
  3782  0794  1283               	bcf	3,5	;RP0=0, select bank0
  3783  0795  1303               	bcf	3,6	;RP1=0, select bank0
  3784  0796  00E5               	movwf	_motor_pos+3	;volatile
  3785  0797  0AE2               	incf	_motor_pos,f	;volatile
  3786  0798  1903               	skipnz
  3787  0799  0AE3               	incf	_motor_pos+1,f	;volatile
  3788  079A  1903               	skipnz
  3789  079B  0AE4               	incf	_motor_pos+2,f	;volatile
  3790  079C  1903               	skipnz
  3791  079D  0AE5               	incf	_motor_pos+3,f	;volatile
  3792                           
  3793                           ;main.c: 233: RBIF = 0;
  3794  079E  100B               	bcf	11,0	;volatile
  3795  079F                     i1l334:	
  3796  079F  085C               	movf	??_isr+5,w
  3797  07A0  00FF               	movwf	127
  3798  07A1  085B               	movf	??_isr+4,w
  3799  07A2  008A               	movwf	10
  3800  07A3  085A               	movf	??_isr+3,w
  3801  07A4  0084               	movwf	4
  3802  07A5  0E59               	swapf	(??_isr+2)^0,w
  3803  07A6  0083               	movwf	3
  3804  07A7  0EFE               	swapf	126,f
  3805  07A8  0E7E               	swapf	126,w
  3806  07A9  0009               	retfie
  3807  07AA                     __end_of_isr:	
  3808                           
  3809                           	psect	intentry
  3810  0004                     __pintentry:	
  3811                           ;incstack = 0
  3812                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3813                           
  3814  0004                     interrupt_function:	
  3815  007E                     saved_w	set	btemp
  3816  0004  00FE               	movwf	btemp
  3817  0005  0E03               	swapf	3,w
  3818  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3819  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3820  0008  00D9               	movwf	??_isr+2
  3821  0009  0804               	movf	4,w
  3822  000A  00DA               	movwf	??_isr+3
  3823  000B  080A               	movf	10,w
  3824  000C  00DB               	movwf	??_isr+4
  3825  000D  087F               	movf	btemp+1,w
  3826  000E  00DC               	movwf	??_isr+5
  3827  000F  120A  118A  2E97   	ljmp	_isr
  3828                           
  3829                           	psect	text17
  3830  034E                     __ptext17:	
  3831 ;; *************** function _SetMotor *****************
  3832 ;; Defined at:
  3833 ;;		line 106 in file "main.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;		None
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;  resp            2   53[BANK0 ] int 
  3838 ;;  err             2   51[BANK0 ] int 
  3839 ;;  I_Response      2   49[BANK0 ] int 
  3840 ;;  D_Response      2   47[BANK0 ] int 
  3841 ;;  P_Response      2   45[BANK0 ] int 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      void 
  3844 ;; Registers used:
  3845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3851 ;;      Params:         0       0       0       0       0
  3852 ;;      Locals:         0      10       0       0       0
  3853 ;;      Temps:          0       8       0       0       0
  3854 ;;      Totals:         0      18       0       0       0
  3855 ;;Total ram usage:       18 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    2
  3858 ;; This function calls:
  3859 ;;		___flmul
  3860 ;;		___fltol
  3861 ;;		___xxtofl
  3862 ;;		_constrain
  3863 ;;		i1_pwm_set
  3864 ;; This function is called by:
  3865 ;;		_isr
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           
  3870                           ;psect for function _SetMotor
  3871  034E                     _SetMotor:	
  3872                           
  3873                           ;main.c: 107: static long integral;;main.c: 108: static long derivative;;main.c: 109: st
      +                          atic long last_err;;main.c: 113: int err = set_point - motor_pos;
  3874                           
  3875                           ;incstack = 0
  3876                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3877  034E  1283               	bcf	3,5	;RP0=0, select bank0
  3878  034F  1303               	bcf	3,6	;RP1=0, select bank0
  3879  0350  0862               	movf	_motor_pos,w	;volatile
  3880  0351  1683               	bsf	3,5	;RP0=1, select bank1
  3881  0352  1303               	bcf	3,6	;RP1=0, select bank1
  3882  0353  025B               	subwf	_set_point^(0+128),w	;volatile
  3883  0354  1283               	bcf	3,5	;RP0=0, select bank0
  3884  0355  1303               	bcf	3,6	;RP1=0, select bank0
  3885  0356  00D3               	movwf	SetMotor@err
  3886  0357  0863               	movf	_motor_pos+1,w	;volatile
  3887  0358  1C03               	skipc
  3888  0359  0A63               	incf	_motor_pos+1,w	;volatile
  3889  035A  1683               	bsf	3,5	;RP0=1, select bank1
  3890  035B  1303               	bcf	3,6	;RP1=0, select bank1
  3891  035C  025C               	subwf	(_set_point+1)^(0+128),w	;volatile
  3892  035D  1283               	bcf	3,5	;RP0=0, select bank0
  3893  035E  1303               	bcf	3,6	;RP1=0, select bank0
  3894  035F  00D4               	movwf	SetMotor@err+1
  3895                           
  3896                           ;main.c: 116: derivative = (err - last_err);
  3897  0360  0853               	movf	SetMotor@err,w
  3898  0361  00C5               	movwf	??_SetMotor
  3899  0362  0854               	movf	SetMotor@err+1,w
  3900  0363  00C6               	movwf	??_SetMotor+1
  3901  0364  3000               	movlw	0
  3902  0365  1BC6               	btfsc	??_SetMotor+1,7
  3903  0366  30FF               	movlw	255
  3904  0367  00C7               	movwf	??_SetMotor+2
  3905  0368  00C8               	movwf	??_SetMotor+3
  3906  0369  1683               	bsf	3,5	;RP0=1, select bank1
  3907  036A  1303               	bcf	3,6	;RP1=0, select bank1
  3908  036B  0857               	movf	SetMotor@last_err^(0+128),w
  3909  036C  1283               	bcf	3,5	;RP0=0, select bank0
  3910  036D  1303               	bcf	3,6	;RP1=0, select bank0
  3911  036E  02C5               	subwf	??_SetMotor,f
  3912  036F  1683               	bsf	3,5	;RP0=1, select bank1
  3913  0370  1303               	bcf	3,6	;RP1=0, select bank1
  3914  0371  0858               	movf	(SetMotor@last_err+1)^(0+128),w
  3915  0372  1C03               	skipc
  3916  0373  0F58               	incfsz	(SetMotor@last_err+1)^(0+128),w
  3917  0374  2B76               	goto	u311_21
  3918  0375  2B79               	goto	u311_22
  3919  0376                     u311_21:	
  3920  0376  1283               	bcf	3,5	;RP0=0, select bank0
  3921  0377  1303               	bcf	3,6	;RP1=0, select bank0
  3922  0378  02C6               	subwf	??_SetMotor+1,f
  3923  0379                     u311_22:	
  3924  0379  1683               	bsf	3,5	;RP0=1, select bank1
  3925  037A  1303               	bcf	3,6	;RP1=0, select bank1
  3926  037B  0859               	movf	(SetMotor@last_err+2)^(0+128),w
  3927  037C  1C03               	skipc
  3928  037D  0F59               	incfsz	(SetMotor@last_err+2)^(0+128),w
  3929  037E  2B80               	goto	u311_23
  3930  037F  2B83               	goto	u311_24
  3931  0380                     u311_23:	
  3932  0380  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0381  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0382  02C7               	subwf	??_SetMotor+2,f
  3935  0383                     u311_24:	
  3936  0383  1683               	bsf	3,5	;RP0=1, select bank1
  3937  0384  1303               	bcf	3,6	;RP1=0, select bank1
  3938  0385  085A               	movf	(SetMotor@last_err+3)^(0+128),w
  3939  0386  1C03               	skipc
  3940  0387  0F5A               	incfsz	(SetMotor@last_err+3)^(0+128),w
  3941  0388  2B8A               	goto	u311_25
  3942  0389  2B8D               	goto	u311_26
  3943  038A                     u311_25:	
  3944  038A  1283               	bcf	3,5	;RP0=0, select bank0
  3945  038B  1303               	bcf	3,6	;RP1=0, select bank0
  3946  038C  02C8               	subwf	??_SetMotor+3,f
  3947  038D                     u311_26:	
  3948  038D  1683               	bsf	3,5	;RP0=1, select bank1
  3949  038E  1303               	bcf	3,6	;RP1=0, select bank1
  3950  038F  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0390  1303               	bcf	3,6	;RP1=0, select bank0
  3952  0391  0848               	movf	??_SetMotor+3,w
  3953  0392  1683               	bsf	3,5	;RP0=1, select bank1
  3954  0393  1303               	bcf	3,6	;RP1=0, select bank1
  3955  0394  00E8               	movwf	(SetMotor@derivative+3)^(0+128)
  3956  0395  1283               	bcf	3,5	;RP0=0, select bank0
  3957  0396  1303               	bcf	3,6	;RP1=0, select bank0
  3958  0397  0847               	movf	??_SetMotor+2,w
  3959  0398  1683               	bsf	3,5	;RP0=1, select bank1
  3960  0399  1303               	bcf	3,6	;RP1=0, select bank1
  3961  039A  00E7               	movwf	(SetMotor@derivative+2)^(0+128)
  3962  039B  1283               	bcf	3,5	;RP0=0, select bank0
  3963  039C  1303               	bcf	3,6	;RP1=0, select bank0
  3964  039D  0846               	movf	??_SetMotor+1,w
  3965  039E  1683               	bsf	3,5	;RP0=1, select bank1
  3966  039F  1303               	bcf	3,6	;RP1=0, select bank1
  3967  03A0  00E6               	movwf	(SetMotor@derivative+1)^(0+128)
  3968  03A1  1283               	bcf	3,5	;RP0=0, select bank0
  3969  03A2  1303               	bcf	3,6	;RP1=0, select bank0
  3970  03A3  0845               	movf	??_SetMotor,w
  3971  03A4  1683               	bsf	3,5	;RP0=1, select bank1
  3972  03A5  1303               	bcf	3,6	;RP1=0, select bank1
  3973  03A6  00E5               	movwf	SetMotor@derivative^(0+128)
  3974                           
  3975                           ;main.c: 118: if (err = 0){
  3976  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  3977  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  3978  03A9  01D3               	clrf	SetMotor@err
  3979  03AA  01D4               	clrf	SetMotor@err+1
  3980                           
  3981                           ;main.c: 121: integral = integral + err;
  3982  03AB  1683               	bsf	3,5	;RP0=1, select bank1
  3983  03AC  1303               	bcf	3,6	;RP1=0, select bank1
  3984  03AD  0869               	movf	SetMotor@integral^(0+128),w
  3985  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  3986  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  3987  03B0  00C5               	movwf	??_SetMotor
  3988  03B1  1683               	bsf	3,5	;RP0=1, select bank1
  3989  03B2  1303               	bcf	3,6	;RP1=0, select bank1
  3990  03B3  086A               	movf	(SetMotor@integral+1)^(0+128),w
  3991  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  3992  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  3993  03B6  00C6               	movwf	??_SetMotor+1
  3994  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  3995  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  3996  03B9  086B               	movf	(SetMotor@integral+2)^(0+128),w
  3997  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  3998  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  3999  03BC  00C7               	movwf	??_SetMotor+2
  4000  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  4001  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  4002  03BF  086C               	movf	(SetMotor@integral+3)^(0+128),w
  4003  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  4004  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  4005  03C2  00C8               	movwf	??_SetMotor+3
  4006  03C3  0853               	movf	SetMotor@err,w
  4007  03C4  00C9               	movwf	??_SetMotor+4
  4008  03C5  0854               	movf	SetMotor@err+1,w
  4009  03C6  00CA               	movwf	??_SetMotor+5
  4010  03C7  3000               	movlw	0
  4011  03C8  1BCA               	btfsc	??_SetMotor+5,7
  4012  03C9  30FF               	movlw	255
  4013  03CA  00CB               	movwf	??_SetMotor+6
  4014  03CB  00CC               	movwf	??_SetMotor+7
  4015  03CC  0849               	movf	??_SetMotor+4,w
  4016  03CD  07C5               	addwf	??_SetMotor,f
  4017  03CE  084A               	movf	??_SetMotor+5,w
  4018  03CF  1803               	skipnc
  4019  03D0  0F4A               	incfsz	??_SetMotor+5,w
  4020  03D1  2BD3               	goto	u312_20
  4021  03D2  2BD4               	goto	u312_21
  4022  03D3                     u312_20:	
  4023  03D3  07C6               	addwf	??_SetMotor+1,f
  4024  03D4                     u312_21:	
  4025  03D4  084B               	movf	??_SetMotor+6,w
  4026  03D5  1803               	skipnc
  4027  03D6  0F4B               	incfsz	??_SetMotor+6,w
  4028  03D7  2BD9               	goto	u312_22
  4029  03D8  2BDA               	goto	u312_23
  4030  03D9                     u312_22:	
  4031  03D9  07C7               	addwf	??_SetMotor+2,f
  4032  03DA                     u312_23:	
  4033  03DA  084C               	movf	??_SetMotor+7,w
  4034  03DB  1803               	skipnc
  4035  03DC  0A4C               	incf	??_SetMotor+7,w
  4036  03DD  07C8               	addwf	??_SetMotor+3,f
  4037  03DE  0848               	movf	??_SetMotor+3,w
  4038  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  4039  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  4040  03E1  00EC               	movwf	(SetMotor@integral+3)^(0+128)
  4041  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  4042  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  4043  03E4  0847               	movf	??_SetMotor+2,w
  4044  03E5  1683               	bsf	3,5	;RP0=1, select bank1
  4045  03E6  1303               	bcf	3,6	;RP1=0, select bank1
  4046  03E7  00EB               	movwf	(SetMotor@integral+2)^(0+128)
  4047  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  4048  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  4049  03EA  0846               	movf	??_SetMotor+1,w
  4050  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  4051  03EC  1303               	bcf	3,6	;RP1=0, select bank1
  4052  03ED  00EA               	movwf	(SetMotor@integral+1)^(0+128)
  4053  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  4054  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  4055  03F0  0845               	movf	??_SetMotor,w
  4056  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  4057  03F2  1303               	bcf	3,6	;RP1=0, select bank1
  4058  03F3  00E9               	movwf	SetMotor@integral^(0+128)
  4059                           
  4060                           ;main.c: 122: };main.c: 124: int P_Response = 1.1 * err;
  4061  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  4062  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  4063  03F6  0853               	movf	SetMotor@err,w
  4064  03F7  00F0               	movwf	___xxtofl@val
  4065  03F8  0854               	movf	SetMotor@err+1,w
  4066  03F9  00F1               	movwf	___xxtofl@val+1
  4067  03FA  3000               	movlw	0
  4068  03FB  1BF1               	btfsc	___xxtofl@val+1,7
  4069  03FC  30FF               	movlw	255
  4070  03FD  00F2               	movwf	___xxtofl@val+2
  4071  03FE  00F3               	movwf	___xxtofl@val+3
  4072  03FF  3001               	movlw	1
  4073  0400  120A  158A  268B  120A  118A  	fcall	___xxtofl
  4074  0405  0873               	movf	?___xxtofl+3,w
  4075  0406  1283               	bcf	3,5	;RP0=0, select bank0
  4076  0407  1303               	bcf	3,6	;RP1=0, select bank0
  4077  0408  00A7               	movwf	___flmul@a+3
  4078  0409  0872               	movf	?___xxtofl+2,w
  4079  040A  00A6               	movwf	___flmul@a+2
  4080  040B  0871               	movf	?___xxtofl+1,w
  4081  040C  00A5               	movwf	___flmul@a+1
  4082  040D  0870               	movf	?___xxtofl,w
  4083  040E  00A4               	movwf	___flmul@a
  4084  040F  303F               	movlw	63
  4085  0410  00A3               	movwf	___flmul@b+3
  4086  0411  308C               	movlw	140
  4087  0412  00A2               	movwf	___flmul@b+2
  4088  0413  30CC               	movlw	204
  4089  0414  00A1               	movwf	___flmul@b+1
  4090  0415  30CD               	movlw	205
  4091  0416  00A0               	movwf	___flmul@b
  4092  0417  120A  118A  2039  120A  118A  	fcall	___flmul
  4093  041C  1283               	bcf	3,5	;RP0=0, select bank0
  4094  041D  1303               	bcf	3,6	;RP1=0, select bank0
  4095  041E  0823               	movf	?___flmul+3,w
  4096  041F  00BD               	movwf	___fltol@f1+3
  4097  0420  0822               	movf	?___flmul+2,w
  4098  0421  00BC               	movwf	___fltol@f1+2
  4099  0422  0821               	movf	?___flmul+1,w
  4100  0423  00BB               	movwf	___fltol@f1+1
  4101  0424  0820               	movf	?___flmul,w
  4102  0425  00BA               	movwf	___fltol@f1
  4103  0426  120A  158A  23FA  120A  118A  	fcall	___fltol
  4104  042B  1283               	bcf	3,5	;RP0=0, select bank0
  4105  042C  1303               	bcf	3,6	;RP1=0, select bank0
  4106  042D  083B               	movf	?___fltol+1,w
  4107  042E  00CE               	movwf	SetMotor@P_Response+1
  4108  042F  083A               	movf	?___fltol,w
  4109  0430  00CD               	movwf	SetMotor@P_Response
  4110                           
  4111                           ;main.c: 125: int D_Response = 2.0 * derivative;
  4112  0431  1683               	bsf	3,5	;RP0=1, select bank1
  4113  0432  1303               	bcf	3,6	;RP1=0, select bank1
  4114  0433  0868               	movf	(SetMotor@derivative+3)^(0+128),w
  4115  0434  00F3               	movwf	___xxtofl@val+3
  4116  0435  0867               	movf	(SetMotor@derivative+2)^(0+128),w
  4117  0436  00F2               	movwf	___xxtofl@val+2
  4118  0437  0866               	movf	(SetMotor@derivative+1)^(0+128),w
  4119  0438  00F1               	movwf	___xxtofl@val+1
  4120  0439  0865               	movf	SetMotor@derivative^(0+128),w
  4121  043A  00F0               	movwf	___xxtofl@val
  4122  043B  3001               	movlw	1
  4123  043C  120A  158A  268B  120A  118A  	fcall	___xxtofl
  4124  0441  0873               	movf	?___xxtofl+3,w
  4125  0442  1283               	bcf	3,5	;RP0=0, select bank0
  4126  0443  1303               	bcf	3,6	;RP1=0, select bank0
  4127  0444  00A7               	movwf	___flmul@a+3
  4128  0445  0872               	movf	?___xxtofl+2,w
  4129  0446  00A6               	movwf	___flmul@a+2
  4130  0447  0871               	movf	?___xxtofl+1,w
  4131  0448  00A5               	movwf	___flmul@a+1
  4132  0449  0870               	movf	?___xxtofl,w
  4133  044A  00A4               	movwf	___flmul@a
  4134  044B  3040               	movlw	64
  4135  044C  00A3               	movwf	___flmul@b+3
  4136  044D  3000               	movlw	0
  4137  044E  00A2               	movwf	___flmul@b+2
  4138  044F  3000               	movlw	0
  4139  0450  00A1               	movwf	___flmul@b+1
  4140  0451  3000               	movlw	0
  4141  0452  00A0               	movwf	___flmul@b
  4142  0453  120A  118A  2039  120A  118A  	fcall	___flmul
  4143  0458  1283               	bcf	3,5	;RP0=0, select bank0
  4144  0459  1303               	bcf	3,6	;RP1=0, select bank0
  4145  045A  0823               	movf	?___flmul+3,w
  4146  045B  00BD               	movwf	___fltol@f1+3
  4147  045C  0822               	movf	?___flmul+2,w
  4148  045D  00BC               	movwf	___fltol@f1+2
  4149  045E  0821               	movf	?___flmul+1,w
  4150  045F  00BB               	movwf	___fltol@f1+1
  4151  0460  0820               	movf	?___flmul,w
  4152  0461  00BA               	movwf	___fltol@f1
  4153  0462  120A  158A  23FA  120A  118A  	fcall	___fltol
  4154  0467  1283               	bcf	3,5	;RP0=0, select bank0
  4155  0468  1303               	bcf	3,6	;RP1=0, select bank0
  4156  0469  083B               	movf	?___fltol+1,w
  4157  046A  00D0               	movwf	SetMotor@D_Response+1
  4158  046B  083A               	movf	?___fltol,w
  4159  046C  00CF               	movwf	SetMotor@D_Response
  4160                           
  4161                           ;main.c: 126: int I_Response = 0.5 * integral;
  4162  046D  1683               	bsf	3,5	;RP0=1, select bank1
  4163  046E  1303               	bcf	3,6	;RP1=0, select bank1
  4164  046F  086C               	movf	(SetMotor@integral+3)^(0+128),w
  4165  0470  00F3               	movwf	___xxtofl@val+3
  4166  0471  086B               	movf	(SetMotor@integral+2)^(0+128),w
  4167  0472  00F2               	movwf	___xxtofl@val+2
  4168  0473  086A               	movf	(SetMotor@integral+1)^(0+128),w
  4169  0474  00F1               	movwf	___xxtofl@val+1
  4170  0475  0869               	movf	SetMotor@integral^(0+128),w
  4171  0476  00F0               	movwf	___xxtofl@val
  4172  0477  3001               	movlw	1
  4173  0478  120A  158A  268B  120A  118A  	fcall	___xxtofl
  4174  047D  0873               	movf	?___xxtofl+3,w
  4175  047E  1283               	bcf	3,5	;RP0=0, select bank0
  4176  047F  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0480  00A7               	movwf	___flmul@a+3
  4178  0481  0872               	movf	?___xxtofl+2,w
  4179  0482  00A6               	movwf	___flmul@a+2
  4180  0483  0871               	movf	?___xxtofl+1,w
  4181  0484  00A5               	movwf	___flmul@a+1
  4182  0485  0870               	movf	?___xxtofl,w
  4183  0486  00A4               	movwf	___flmul@a
  4184  0487  303F               	movlw	63
  4185  0488  00A3               	movwf	___flmul@b+3
  4186  0489  3000               	movlw	0
  4187  048A  00A2               	movwf	___flmul@b+2
  4188  048B  3000               	movlw	0
  4189  048C  00A1               	movwf	___flmul@b+1
  4190  048D  3000               	movlw	0
  4191  048E  00A0               	movwf	___flmul@b
  4192  048F  120A  118A  2039  120A  118A  	fcall	___flmul
  4193  0494  1283               	bcf	3,5	;RP0=0, select bank0
  4194  0495  1303               	bcf	3,6	;RP1=0, select bank0
  4195  0496  0823               	movf	?___flmul+3,w
  4196  0497  00BD               	movwf	___fltol@f1+3
  4197  0498  0822               	movf	?___flmul+2,w
  4198  0499  00BC               	movwf	___fltol@f1+2
  4199  049A  0821               	movf	?___flmul+1,w
  4200  049B  00BB               	movwf	___fltol@f1+1
  4201  049C  0820               	movf	?___flmul,w
  4202  049D  00BA               	movwf	___fltol@f1
  4203  049E  120A  158A  23FA  120A  118A  	fcall	___fltol
  4204  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  4205  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  4206  04A5  083B               	movf	?___fltol+1,w
  4207  04A6  00D2               	movwf	SetMotor@I_Response+1
  4208  04A7  083A               	movf	?___fltol,w
  4209  04A8  00D1               	movwf	SetMotor@I_Response
  4210                           
  4211                           ;main.c: 127: int resp = P_Response + D_Response + I_Response;
  4212  04A9  084F               	movf	SetMotor@D_Response,w
  4213  04AA  074D               	addwf	SetMotor@P_Response,w
  4214  04AB  00C5               	movwf	??_SetMotor
  4215  04AC  0850               	movf	SetMotor@D_Response+1,w
  4216  04AD  1803               	skipnc
  4217  04AE  0A50               	incf	SetMotor@D_Response+1,w
  4218  04AF  074E               	addwf	SetMotor@P_Response+1,w
  4219  04B0  00C6               	movwf	??_SetMotor+1
  4220  04B1  0851               	movf	SetMotor@I_Response,w
  4221  04B2  0745               	addwf	??_SetMotor,w
  4222  04B3  00D5               	movwf	SetMotor@resp
  4223  04B4  0852               	movf	SetMotor@I_Response+1,w
  4224  04B5  1803               	skipnc
  4225  04B6  0A52               	incf	SetMotor@I_Response+1,w
  4226  04B7  0746               	addwf	??_SetMotor+1,w
  4227  04B8  00D6               	movwf	SetMotor@resp+1
  4228                           
  4229                           ;main.c: 129: constrain(resp, -255,255 );
  4230  04B9  0855               	movf	SetMotor@resp,w
  4231  04BA  00F0               	movwf	constrain@value
  4232  04BB  0856               	movf	SetMotor@resp+1,w
  4233  04BC  00F1               	movwf	constrain@value+1
  4234  04BD  3000               	movlw	0
  4235  04BE  1BF1               	btfsc	constrain@value+1,7
  4236  04BF  30FF               	movlw	255
  4237  04C0  00F2               	movwf	constrain@value+2
  4238  04C1  00F3               	movwf	constrain@value+3
  4239  04C2  30FF               	movlw	255
  4240  04C3  00F7               	movwf	constrain@lLimit+3
  4241  04C4  30FF               	movlw	255
  4242  04C5  00F6               	movwf	constrain@lLimit+2
  4243  04C6  30FF               	movlw	255
  4244  04C7  00F5               	movwf	constrain@lLimit+1
  4245  04C8  3001               	movlw	1
  4246  04C9  00F4               	movwf	constrain@lLimit
  4247  04CA  3000               	movlw	0
  4248  04CB  00FB               	movwf	constrain@uLimit+3
  4249  04CC  3000               	movlw	0
  4250  04CD  00FA               	movwf	constrain@uLimit+2
  4251  04CE  3000               	movlw	0
  4252  04CF  00F9               	movwf	constrain@uLimit+1
  4253  04D0  30FF               	movlw	255
  4254  04D1  00F8               	movwf	constrain@uLimit
  4255  04D2  120A  158A  222D  120A  118A  	fcall	_constrain
  4256                           
  4257                           ;main.c: 130: if (resp > 0){
  4258  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  4259  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  4260  04D9  0856               	movf	SetMotor@resp+1,w
  4261  04DA  3A80               	xorlw	128
  4262  04DB  00FF               	movwf	127
  4263  04DC  3080               	movlw	128
  4264  04DD  027F               	subwf	127,w
  4265  04DE  1D03               	skipz
  4266  04DF  2CE2               	goto	u313_25
  4267  04E0  3001               	movlw	1
  4268  04E1  0255               	subwf	SetMotor@resp,w
  4269  04E2                     u313_25:	
  4270  04E2  1C03               	skipc
  4271  04E3  2D0A               	goto	i1l291
  4272                           
  4273                           ;main.c: 131: pwm_set(1, resp );
  4274  04E4  3001               	movlw	1
  4275  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  4276  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  4277  04E7  00AE               	movwf	i1pwm_set@channel
  4278  04E8  3000               	movlw	0
  4279  04E9  00AF               	movwf	i1pwm_set@channel+1
  4280  04EA  0855               	movf	SetMotor@resp,w
  4281  04EB  00B0               	movwf	i1pwm_set@duty_cycle
  4282  04EC  0856               	movf	SetMotor@resp+1,w
  4283  04ED  00B1               	movwf	i1pwm_set@duty_cycle+1
  4284  04EE  3000               	movlw	0
  4285  04EF  1BB1               	btfsc	i1pwm_set@duty_cycle+1,7
  4286  04F0  30FF               	movlw	255
  4287  04F1  00B2               	movwf	i1pwm_set@duty_cycle+2
  4288  04F2  00B3               	movwf	i1pwm_set@duty_cycle+3
  4289  04F3  120A  158A  2467  120A  118A  	fcall	i1_pwm_set
  4290                           
  4291                           ;main.c: 132: pwm_set(2, 0 );
  4292  04F8  3002               	movlw	2
  4293  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  4294  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  4295  04FB  00AE               	movwf	i1pwm_set@channel
  4296  04FC  3000               	movlw	0
  4297  04FD  00AF               	movwf	i1pwm_set@channel+1
  4298  04FE  3000               	movlw	0
  4299  04FF  00B3               	movwf	i1pwm_set@duty_cycle+3
  4300  0500  3000               	movlw	0
  4301  0501  00B2               	movwf	i1pwm_set@duty_cycle+2
  4302  0502  3000               	movlw	0
  4303  0503  00B1               	movwf	i1pwm_set@duty_cycle+1
  4304  0504  3000               	movlw	0
  4305  0505  00B0               	movwf	i1pwm_set@duty_cycle
  4306  0506  120A  158A  2467   	fcall	i1_pwm_set
  4307                           
  4308                           ;main.c: 133: }else if(resp < 0){
  4309  0509  0008               	return
  4310  050A                     i1l291:	
  4311  050A  1283               	bcf	3,5	;RP0=0, select bank0
  4312  050B  1303               	bcf	3,6	;RP1=0, select bank0
  4313  050C  1FD6               	btfss	SetMotor@resp+1,7
  4314  050D  2D39               	goto	i1l2639
  4315                           
  4316                           ;main.c: 134: pwm_set(1, 0 );
  4317  050E  3001               	movlw	1
  4318  050F  00AE               	movwf	i1pwm_set@channel
  4319  0510  3000               	movlw	0
  4320  0511  00AF               	movwf	i1pwm_set@channel+1
  4321  0512  3000               	movlw	0
  4322  0513  00B3               	movwf	i1pwm_set@duty_cycle+3
  4323  0514  3000               	movlw	0
  4324  0515  00B2               	movwf	i1pwm_set@duty_cycle+2
  4325  0516  3000               	movlw	0
  4326  0517  00B1               	movwf	i1pwm_set@duty_cycle+1
  4327  0518  3000               	movlw	0
  4328  0519  00B0               	movwf	i1pwm_set@duty_cycle
  4329  051A  120A  158A  2467  120A  118A  	fcall	i1_pwm_set
  4330                           
  4331                           ;main.c: 135: pwm_set(2, -resp );
  4332  051F  3002               	movlw	2
  4333  0520  1283               	bcf	3,5	;RP0=0, select bank0
  4334  0521  1303               	bcf	3,6	;RP1=0, select bank0
  4335  0522  00AE               	movwf	i1pwm_set@channel
  4336  0523  3000               	movlw	0
  4337  0524  00AF               	movwf	i1pwm_set@channel+1
  4338  0525  0955               	comf	SetMotor@resp,w
  4339  0526  00C5               	movwf	??_SetMotor
  4340  0527  0956               	comf	SetMotor@resp+1,w
  4341  0528  00C6               	movwf	??_SetMotor+1
  4342  0529  0AC5               	incf	??_SetMotor,f
  4343  052A  1903               	skipnz
  4344  052B  0AC6               	incf	??_SetMotor+1,f
  4345  052C  0845               	movf	??_SetMotor,w
  4346  052D  00B0               	movwf	i1pwm_set@duty_cycle
  4347  052E  0846               	movf	??_SetMotor+1,w
  4348  052F  00B1               	movwf	i1pwm_set@duty_cycle+1
  4349  0530  3000               	movlw	0
  4350  0531  1BB1               	btfsc	i1pwm_set@duty_cycle+1,7
  4351  0532  30FF               	movlw	255
  4352  0533  00B2               	movwf	i1pwm_set@duty_cycle+2
  4353  0534  00B3               	movwf	i1pwm_set@duty_cycle+3
  4354  0535  120A  158A  2467   	fcall	i1_pwm_set
  4355                           
  4356                           ;main.c: 136: }else{
  4357  0538  0008               	return
  4358  0539                     i1l2639:	
  4359                           
  4360                           ;main.c: 137: pwm_set(1, 0 );
  4361  0539  3001               	movlw	1
  4362  053A  00AE               	movwf	i1pwm_set@channel
  4363  053B  3000               	movlw	0
  4364  053C  00AF               	movwf	i1pwm_set@channel+1
  4365  053D  3000               	movlw	0
  4366  053E  00B3               	movwf	i1pwm_set@duty_cycle+3
  4367  053F  3000               	movlw	0
  4368  0540  00B2               	movwf	i1pwm_set@duty_cycle+2
  4369  0541  3000               	movlw	0
  4370  0542  00B1               	movwf	i1pwm_set@duty_cycle+1
  4371  0543  3000               	movlw	0
  4372  0544  00B0               	movwf	i1pwm_set@duty_cycle
  4373  0545  120A  158A  2467  120A  118A  	fcall	i1_pwm_set
  4374                           
  4375                           ;main.c: 138: pwm_set(2, 0 );
  4376  054A  3002               	movlw	2
  4377  054B  1283               	bcf	3,5	;RP0=0, select bank0
  4378  054C  1303               	bcf	3,6	;RP1=0, select bank0
  4379  054D  00AE               	movwf	i1pwm_set@channel
  4380  054E  3000               	movlw	0
  4381  054F  00AF               	movwf	i1pwm_set@channel+1
  4382  0550  3000               	movlw	0
  4383  0551  00B3               	movwf	i1pwm_set@duty_cycle+3
  4384  0552  3000               	movlw	0
  4385  0553  00B2               	movwf	i1pwm_set@duty_cycle+2
  4386  0554  3000               	movlw	0
  4387  0555  00B1               	movwf	i1pwm_set@duty_cycle+1
  4388  0556  3000               	movlw	0
  4389  0557  00B0               	movwf	i1pwm_set@duty_cycle
  4390  0558  120A  158A  2467   	fcall	i1_pwm_set
  4391  055B  0008               	return
  4392  055C                     __end_of_SetMotor:	
  4393                           
  4394                           	psect	text18
  4395  0C67                     __ptext18:	
  4396 ;; *************** function i1_pwm_set *****************
  4397 ;; Defined at:
  4398 ;;		line 72 in file "pwm.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  channel         2   14[BANK0 ] int 
  4401 ;;  duty_cycle      4   16[BANK0 ] long 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;		None
  4404 ;; Return value:  Size  Location     Type
  4405 ;;                  1    wreg      void 
  4406 ;; Registers used:
  4407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4413 ;;      Params:         0       6       0       0       0
  4414 ;;      Locals:         0       0       0       0       0
  4415 ;;      Temps:          0       4       0       0       0
  4416 ;;      Totals:         0      10       0       0       0
  4417 ;;Total ram usage:       10 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    1
  4420 ;; This function calls:
  4421 ;;		i1___aldiv
  4422 ;;		i1___lmul
  4423 ;; This function is called by:
  4424 ;;		_SetMotor
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function i1_pwm_set
  4430  0C67                     i1_pwm_set:	
  4431                           
  4432                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in i1_pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4436  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  4437  0C68  1303               	bcf	3,6	;RP1=0, select bank0
  4438  0C69  1BB3               	btfsc	i1pwm_set@duty_cycle+3,7
  4439  0C6A  0008               	return
  4440  0C6B  1BB3               	btfsc	i1pwm_set@duty_cycle+3,7
  4441  0C6C  2C7D               	goto	i1l2477
  4442  0C6D  0833               	movf	i1pwm_set@duty_cycle+3,w
  4443  0C6E  1D03               	btfss	3,2
  4444  0C6F  0008               	return
  4445  0C70  0832               	movf	i1pwm_set@duty_cycle+2,w
  4446  0C71  1D03               	btfss	3,2
  4447  0C72  0008               	return
  4448  0C73  3001               	movlw	1
  4449  0C74  0231               	subwf	i1pwm_set@duty_cycle+1,w
  4450  0C75  1D03               	skipz
  4451  0C76  2C7B               	goto	u294_23
  4452  0C77  3000               	movlw	0
  4453  0C78  0230               	subwf	i1pwm_set@duty_cycle,w
  4454  0C79  1D03               	skipz
  4455  0C7A  2C7B               	goto	u294_23
  4456  0C7B                     u294_23:	
  4457  0C7B  1803               	btfsc	3,0
  4458  0C7C  0008               	return
  4459  0C7D                     i1l2477:	
  4460                           
  4461                           ;pwm.c: 77: if (duty_cycle !=0){
  4462  0C7D  0833               	movf	i1pwm_set@duty_cycle+3,w
  4463  0C7E  0432               	iorwf	i1pwm_set@duty_cycle+2,w
  4464  0C7F  0431               	iorwf	i1pwm_set@duty_cycle+1,w
  4465  0C80  0430               	iorwf	i1pwm_set@duty_cycle,w
  4466  0C81  1903               	skipnz
  4467  0C82  2CDA               	goto	i1l2487
  4468                           
  4469                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  4470  0C83  3020               	movlw	32
  4471  0C84  00B4               	movwf	??i1_pwm_set
  4472  0C85  3000               	movlw	0
  4473  0C86  00B5               	movwf	??i1_pwm_set+1
  4474  0C87  3000               	movlw	0
  4475  0C88  00B6               	movwf	??i1_pwm_set+2
  4476  0C89  3000               	movlw	0
  4477  0C8A  00B7               	movwf	??i1_pwm_set+3
  4478  0C8B  3000               	movlw	0
  4479  0C8C  00A3               	movwf	i1___aldiv@divisor+3
  4480  0C8D  3000               	movlw	0
  4481  0C8E  00A2               	movwf	i1___aldiv@divisor+2
  4482  0C8F  3000               	movlw	0
  4483  0C90  00A1               	movwf	i1___aldiv@divisor+1
  4484  0C91  30FF               	movlw	255
  4485  0C92  00A0               	movwf	i1___aldiv@divisor
  4486  0C93  0833               	movf	i1pwm_set@duty_cycle+3,w
  4487  0C94  00F3               	movwf	i1___lmul@multiplier+3
  4488  0C95  0832               	movf	i1pwm_set@duty_cycle+2,w
  4489  0C96  00F2               	movwf	i1___lmul@multiplier+2
  4490  0C97  0831               	movf	i1pwm_set@duty_cycle+1,w
  4491  0C98  00F1               	movwf	i1___lmul@multiplier+1
  4492  0C99  0830               	movf	i1pwm_set@duty_cycle,w
  4493  0C9A  00F0               	movwf	i1___lmul@multiplier
  4494  0C9B  3000               	movlw	0
  4495  0C9C  00F7               	movwf	i1___lmul@multiplicand+3
  4496  0C9D  3000               	movlw	0
  4497  0C9E  00F6               	movwf	i1___lmul@multiplicand+2
  4498  0C9F  3000               	movlw	0
  4499  0CA0  00F5               	movwf	i1___lmul@multiplicand+1
  4500  0CA1  30DF               	movlw	223
  4501  0CA2  00F4               	movwf	i1___lmul@multiplicand
  4502  0CA3  120A  158A  23BB  120A  158A  	fcall	i1___lmul
  4503  0CA8  0873               	movf	?i1___lmul+3,w
  4504  0CA9  1283               	bcf	3,5	;RP0=0, select bank0
  4505  0CAA  1303               	bcf	3,6	;RP1=0, select bank0
  4506  0CAB  00A7               	movwf	i1___aldiv@dividend+3
  4507  0CAC  0872               	movf	?i1___lmul+2,w
  4508  0CAD  00A6               	movwf	i1___aldiv@dividend+2
  4509  0CAE  0871               	movf	?i1___lmul+1,w
  4510  0CAF  00A5               	movwf	i1___aldiv@dividend+1
  4511  0CB0  0870               	movf	?i1___lmul,w
  4512  0CB1  00A4               	movwf	i1___aldiv@dividend
  4513  0CB2  120A  158A  256D  120A  158A  	fcall	i1___aldiv
  4514  0CB7  1283               	bcf	3,5	;RP0=0, select bank0
  4515  0CB8  1303               	bcf	3,6	;RP1=0, select bank0
  4516  0CB9  0820               	movf	?i1___aldiv,w
  4517  0CBA  07B4               	addwf	??i1_pwm_set,f
  4518  0CBB  0821               	movf	?i1___aldiv+1,w
  4519  0CBC  1803               	skipnc
  4520  0CBD  0F21               	incfsz	?i1___aldiv+1,w
  4521  0CBE  2CC0               	goto	u296_20
  4522  0CBF  2CC1               	goto	u296_21
  4523  0CC0                     u296_20:	
  4524  0CC0  07B5               	addwf	??i1_pwm_set+1,f
  4525  0CC1                     u296_21:	
  4526  0CC1  0822               	movf	?i1___aldiv+2,w
  4527  0CC2  1803               	skipnc
  4528  0CC3  0F22               	incfsz	?i1___aldiv+2,w
  4529  0CC4  2CC6               	goto	u296_22
  4530  0CC5  2CC7               	goto	u296_23
  4531  0CC6                     u296_22:	
  4532  0CC6  07B6               	addwf	??i1_pwm_set+2,f
  4533  0CC7                     u296_23:	
  4534  0CC7  0823               	movf	?i1___aldiv+3,w
  4535  0CC8  1803               	skipnc
  4536  0CC9  0A23               	incf	?i1___aldiv+3,w
  4537  0CCA  07B7               	addwf	??i1_pwm_set+3,f
  4538  0CCB  0837               	movf	??i1_pwm_set+3,w
  4539  0CCC  00B3               	movwf	i1pwm_set@duty_cycle+3
  4540  0CCD  0836               	movf	??i1_pwm_set+2,w
  4541  0CCE  00B2               	movwf	i1pwm_set@duty_cycle+2
  4542  0CCF  0835               	movf	??i1_pwm_set+1,w
  4543  0CD0  00B1               	movwf	i1pwm_set@duty_cycle+1
  4544  0CD1  0834               	movf	??i1_pwm_set,w
  4545  0CD2  00B0               	movwf	i1pwm_set@duty_cycle
  4546  0CD3  2CDA               	goto	i1l2487
  4547  0CD4                     i1l2481:	
  4548                           
  4549                           ;pwm.c: 82: CCPR1L = duty_cycle;
  4550  0CD4  0830               	movf	i1pwm_set@duty_cycle,w
  4551  0CD5  0095               	movwf	21	;volatile
  4552                           
  4553                           ;pwm.c: 83: break;
  4554  0CD6  0008               	return
  4555  0CD7                     i1l2483:	
  4556                           
  4557                           ;pwm.c: 85: CCPR2L = duty_cycle;
  4558  0CD7  0830               	movf	i1pwm_set@duty_cycle,w
  4559  0CD8  009B               	movwf	27	;volatile
  4560                           
  4561                           ;pwm.c: 86: break;
  4562  0CD9  0008               	return
  4563  0CDA                     i1l2487:	
  4564                           
  4565                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4566                           ; Switch size 1, requested type "simple"
  4567                           ; Number of cases is 1, Range of values is 0 to 0
  4568                           ; switch strategies available:
  4569                           ; Name         Instructions Cycles
  4570                           ; simple_byte            4     3 (average)
  4571                           ; direct_byte           11     8 (fixed)
  4572                           ; jumptable            260     6 (fixed)
  4573                           ;	Chosen strategy is simple_byte
  4574  0CDA  082F               	movf	i1pwm_set@channel+1,w
  4575  0CDB  3A00               	xorlw	0	; case 0
  4576  0CDC  1903               	skipnz
  4577  0CDD  2CDF               	goto	i1l3009
  4578  0CDE  2CE7               	goto	i1l182
  4579  0CDF                     i1l3009:	
  4580                           
  4581                           ; Switch size 1, requested type "simple"
  4582                           ; Number of cases is 2, Range of values is 1 to 2
  4583                           ; switch strategies available:
  4584                           ; Name         Instructions Cycles
  4585                           ; simple_byte            7     4 (average)
  4586                           ; direct_byte           17    11 (fixed)
  4587                           ; jumptable            263     9 (fixed)
  4588                           ;	Chosen strategy is simple_byte
  4589  0CDF  082E               	movf	i1pwm_set@channel,w
  4590  0CE0  3A01               	xorlw	1	; case 1
  4591  0CE1  1903               	skipnz
  4592  0CE2  2CD4               	goto	i1l2481
  4593  0CE3  3A03               	xorlw	3	; case 2
  4594  0CE4  1903               	skipnz
  4595  0CE5  2CD7               	goto	i1l2483
  4596  0CE6  2CE7               	goto	i1l182
  4597  0CE7                     i1l182:	
  4598  0CE7  0008               	return
  4599  0CE8                     __end_ofi1_pwm_set:	
  4600                           
  4601                           	psect	text19
  4602  0BBB                     __ptext19:	
  4603 ;; *************** function i1___lmul *****************
  4604 ;; Defined at:
  4605 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  multiplier      4    0[COMMON] unsigned long 
  4608 ;;  multiplicand    4    4[COMMON] unsigned long 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  __lmul          4    9[COMMON] unsigned long 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  4    0[COMMON] unsigned long 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2, status,0
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4620 ;;      Params:         8       0       0       0       0
  4621 ;;      Locals:         4       0       0       0       0
  4622 ;;      Temps:          1       0       0       0       0
  4623 ;;      Totals:        13       0       0       0       0
  4624 ;;Total ram usage:       13 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; This function calls:
  4627 ;;		Nothing
  4628 ;; This function is called by:
  4629 ;;		i1_pwm_set
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function i1___lmul
  4635  0BBB                     i1___lmul:	
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  4639  0BBB  3000               	movlw	0
  4640  0BBC  00FC               	movwf	i1___lmul@product+3
  4641  0BBD  3000               	movlw	0
  4642  0BBE  00FB               	movwf	i1___lmul@product+2
  4643  0BBF  3000               	movlw	0
  4644  0BC0  00FA               	movwf	i1___lmul@product+1
  4645  0BC1  3000               	movlw	0
  4646  0BC2  00F9               	movwf	i1___lmul@product
  4647  0BC3                     i1l2073:	
  4648  0BC3  1C70               	btfss	i1___lmul@multiplier,0
  4649  0BC4  2BD9               	goto	i1l2077
  4650  0BC5  0874               	movf	i1___lmul@multiplicand,w
  4651  0BC6  07F9               	addwf	i1___lmul@product,f
  4652  0BC7  0875               	movf	i1___lmul@multiplicand+1,w
  4653  0BC8  1103               	clrz
  4654  0BC9  1803               	skipnc
  4655  0BCA  3E01               	addlw	1
  4656  0BCB  1D03               	btfss	3,2
  4657  0BCC  07FA               	addwf	i1___lmul@product+1,f
  4658  0BCD  0876               	movf	i1___lmul@multiplicand+2,w
  4659  0BCE  1103               	clrz
  4660  0BCF  1803               	skipnc
  4661  0BD0  3E01               	addlw	1
  4662  0BD1  1D03               	btfss	3,2
  4663  0BD2  07FB               	addwf	i1___lmul@product+2,f
  4664  0BD3  0877               	movf	i1___lmul@multiplicand+3,w
  4665  0BD4  1103               	clrz
  4666  0BD5  1803               	skipnc
  4667  0BD6  3E01               	addlw	1
  4668  0BD7  1D03               	btfss	3,2
  4669  0BD8  07FC               	addwf	i1___lmul@product+3,f
  4670  0BD9                     i1l2077:	
  4671  0BD9  3001               	movlw	1
  4672  0BDA  00F8               	movwf	??i1___lmul
  4673  0BDB                     u187_25:	
  4674  0BDB  1003               	clrc
  4675  0BDC  0DF4               	rlf	i1___lmul@multiplicand,f
  4676  0BDD  0DF5               	rlf	i1___lmul@multiplicand+1,f
  4677  0BDE  0DF6               	rlf	i1___lmul@multiplicand+2,f
  4678  0BDF  0DF7               	rlf	i1___lmul@multiplicand+3,f
  4679  0BE0  0BF8               	decfsz	??i1___lmul,f
  4680  0BE1  2BDB               	goto	u187_25
  4681  0BE2  3001               	movlw	1
  4682  0BE3                     u188_25:	
  4683  0BE3  1003               	clrc
  4684  0BE4  0CF3               	rrf	i1___lmul@multiplier+3,f
  4685  0BE5  0CF2               	rrf	i1___lmul@multiplier+2,f
  4686  0BE6  0CF1               	rrf	i1___lmul@multiplier+1,f
  4687  0BE7  0CF0               	rrf	i1___lmul@multiplier,f
  4688  0BE8  3EFF               	addlw	-1
  4689  0BE9  1D03               	skipz
  4690  0BEA  2BE3               	goto	u188_25
  4691  0BEB  0873               	movf	i1___lmul@multiplier+3,w
  4692  0BEC  0472               	iorwf	i1___lmul@multiplier+2,w
  4693  0BED  0471               	iorwf	i1___lmul@multiplier+1,w
  4694  0BEE  0470               	iorwf	i1___lmul@multiplier,w
  4695  0BEF  1D03               	skipz
  4696  0BF0  2BC3               	goto	i1l2073
  4697  0BF1  087C               	movf	i1___lmul@product+3,w
  4698  0BF2  00F3               	movwf	?i1___lmul+3
  4699  0BF3  087B               	movf	i1___lmul@product+2,w
  4700  0BF4  00F2               	movwf	?i1___lmul+2
  4701  0BF5  087A               	movf	i1___lmul@product+1,w
  4702  0BF6  00F1               	movwf	?i1___lmul+1
  4703  0BF7  0879               	movf	i1___lmul@product,w
  4704  0BF8  00F0               	movwf	?i1___lmul
  4705  0BF9  0008               	return
  4706  0BFA                     __end_ofi1___lmul:	
  4707                           
  4708                           	psect	text20
  4709  0D6D                     __ptext20:	
  4710 ;; *************** function i1___aldiv *****************
  4711 ;; Defined at:
  4712 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;  divisor         4    0[BANK0 ] long 
  4715 ;;  dividend        4    4[BANK0 ] long 
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  __aldiv         4   10[BANK0 ] long 
  4718 ;;  __aldiv         1    9[BANK0 ] unsigned char 
  4719 ;;  __aldiv         1    8[BANK0 ] unsigned char 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  4    0[BANK0 ] long 
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4729 ;;      Params:         0       8       0       0       0
  4730 ;;      Locals:         0       6       0       0       0
  4731 ;;      Temps:          1       0       0       0       0
  4732 ;;      Totals:         1      14       0       0       0
  4733 ;;Total ram usage:       15 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		i1_pwm_set
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function i1___aldiv
  4744  0D6D                     i1___aldiv:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
  4748  0D6D  1283               	bcf	3,5	;RP0=0, select bank0
  4749  0D6E  1303               	bcf	3,6	;RP1=0, select bank0
  4750  0D6F  01A9               	clrf	i1___aldiv@sign
  4751  0D70  1FA3               	btfss	i1___aldiv@divisor+3,7
  4752  0D71  2D7F               	goto	i1l600
  4753  0D72  09A0               	comf	i1___aldiv@divisor,f
  4754  0D73  09A1               	comf	i1___aldiv@divisor+1,f
  4755  0D74  09A2               	comf	i1___aldiv@divisor+2,f
  4756  0D75  09A3               	comf	i1___aldiv@divisor+3,f
  4757  0D76  0AA0               	incf	i1___aldiv@divisor,f
  4758  0D77  1903               	skipnz
  4759  0D78  0AA1               	incf	i1___aldiv@divisor+1,f
  4760  0D79  1903               	skipnz
  4761  0D7A  0AA2               	incf	i1___aldiv@divisor+2,f
  4762  0D7B  1903               	skipnz
  4763  0D7C  0AA3               	incf	i1___aldiv@divisor+3,f
  4764  0D7D  01A9               	clrf	i1___aldiv@sign
  4765  0D7E  0AA9               	incf	i1___aldiv@sign,f
  4766  0D7F                     i1l600:	
  4767  0D7F  1FA7               	btfss	i1___aldiv@dividend+3,7
  4768  0D80  2D90               	goto	i1l2095
  4769  0D81  09A4               	comf	i1___aldiv@dividend,f
  4770  0D82  09A5               	comf	i1___aldiv@dividend+1,f
  4771  0D83  09A6               	comf	i1___aldiv@dividend+2,f
  4772  0D84  09A7               	comf	i1___aldiv@dividend+3,f
  4773  0D85  0AA4               	incf	i1___aldiv@dividend,f
  4774  0D86  1903               	skipnz
  4775  0D87  0AA5               	incf	i1___aldiv@dividend+1,f
  4776  0D88  1903               	skipnz
  4777  0D89  0AA6               	incf	i1___aldiv@dividend+2,f
  4778  0D8A  1903               	skipnz
  4779  0D8B  0AA7               	incf	i1___aldiv@dividend+3,f
  4780  0D8C  3001               	movlw	1
  4781  0D8D  00FD               	movwf	??i1___aldiv
  4782  0D8E  087D               	movf	??i1___aldiv,w
  4783  0D8F  06A9               	xorwf	i1___aldiv@sign,f
  4784  0D90                     i1l2095:	
  4785  0D90  3000               	movlw	0
  4786  0D91  00AD               	movwf	i1___aldiv@quotient+3
  4787  0D92  3000               	movlw	0
  4788  0D93  00AC               	movwf	i1___aldiv@quotient+2
  4789  0D94  3000               	movlw	0
  4790  0D95  00AB               	movwf	i1___aldiv@quotient+1
  4791  0D96  3000               	movlw	0
  4792  0D97  00AA               	movwf	i1___aldiv@quotient
  4793  0D98  0823               	movf	i1___aldiv@divisor+3,w
  4794  0D99  0422               	iorwf	i1___aldiv@divisor+2,w
  4795  0D9A  0421               	iorwf	i1___aldiv@divisor+1,w
  4796  0D9B  0420               	iorwf	i1___aldiv@divisor,w
  4797  0D9C  1903               	skipnz
  4798  0D9D  2DE5               	goto	i1l2117
  4799  0D9E  01A8               	clrf	i1___aldiv@counter
  4800  0D9F  0AA8               	incf	i1___aldiv@counter,f
  4801  0DA0                     i1l2103:	
  4802  0DA0  1BA3               	btfsc	i1___aldiv@divisor+3,7
  4803  0DA1  2DB0               	goto	i1l2105
  4804  0DA2  3001               	movlw	1
  4805  0DA3  00FD               	movwf	??i1___aldiv
  4806  0DA4                     u193_25:	
  4807  0DA4  1003               	clrc
  4808  0DA5  0DA0               	rlf	i1___aldiv@divisor,f
  4809  0DA6  0DA1               	rlf	i1___aldiv@divisor+1,f
  4810  0DA7  0DA2               	rlf	i1___aldiv@divisor+2,f
  4811  0DA8  0DA3               	rlf	i1___aldiv@divisor+3,f
  4812  0DA9  0BFD               	decfsz	??i1___aldiv,f
  4813  0DAA  2DA4               	goto	u193_25
  4814  0DAB  3001               	movlw	1
  4815  0DAC  00FD               	movwf	??i1___aldiv
  4816  0DAD  087D               	movf	??i1___aldiv,w
  4817  0DAE  07A8               	addwf	i1___aldiv@counter,f
  4818  0DAF  2DA0               	goto	i1l2103
  4819  0DB0                     i1l2105:	
  4820  0DB0  3001               	movlw	1
  4821  0DB1  00FD               	movwf	??i1___aldiv
  4822  0DB2                     u195_25:	
  4823  0DB2  1003               	clrc
  4824  0DB3  0DAA               	rlf	i1___aldiv@quotient,f
  4825  0DB4  0DAB               	rlf	i1___aldiv@quotient+1,f
  4826  0DB5  0DAC               	rlf	i1___aldiv@quotient+2,f
  4827  0DB6  0DAD               	rlf	i1___aldiv@quotient+3,f
  4828  0DB7  0BFD               	decfsz	??i1___aldiv,f
  4829  0DB8  2DB2               	goto	u195_25
  4830  0DB9  0823               	movf	i1___aldiv@divisor+3,w
  4831  0DBA  0227               	subwf	i1___aldiv@dividend+3,w
  4832  0DBB  1D03               	skipz
  4833  0DBC  2DC7               	goto	u196_25
  4834  0DBD  0822               	movf	i1___aldiv@divisor+2,w
  4835  0DBE  0226               	subwf	i1___aldiv@dividend+2,w
  4836  0DBF  1D03               	skipz
  4837  0DC0  2DC7               	goto	u196_25
  4838  0DC1  0821               	movf	i1___aldiv@divisor+1,w
  4839  0DC2  0225               	subwf	i1___aldiv@dividend+1,w
  4840  0DC3  1D03               	skipz
  4841  0DC4  2DC7               	goto	u196_25
  4842  0DC5  0820               	movf	i1___aldiv@divisor,w
  4843  0DC6  0224               	subwf	i1___aldiv@dividend,w
  4844  0DC7                     u196_25:	
  4845  0DC7  1C03               	skipc
  4846  0DC8  2DD8               	goto	i1l2113
  4847  0DC9  0820               	movf	i1___aldiv@divisor,w
  4848  0DCA  02A4               	subwf	i1___aldiv@dividend,f
  4849  0DCB  0821               	movf	i1___aldiv@divisor+1,w
  4850  0DCC  1C03               	skipc
  4851  0DCD  0F21               	incfsz	i1___aldiv@divisor+1,w
  4852  0DCE  02A5               	subwf	i1___aldiv@dividend+1,f
  4853  0DCF  0822               	movf	i1___aldiv@divisor+2,w
  4854  0DD0  1C03               	skipc
  4855  0DD1  0F22               	incfsz	i1___aldiv@divisor+2,w
  4856  0DD2  02A6               	subwf	i1___aldiv@dividend+2,f
  4857  0DD3  0823               	movf	i1___aldiv@divisor+3,w
  4858  0DD4  1C03               	skipc
  4859  0DD5  0F23               	incfsz	i1___aldiv@divisor+3,w
  4860  0DD6  02A7               	subwf	i1___aldiv@dividend+3,f
  4861  0DD7  142A               	bsf	i1___aldiv@quotient,0
  4862  0DD8                     i1l2113:	
  4863  0DD8  3001               	movlw	1
  4864  0DD9                     u197_25:	
  4865  0DD9  1003               	clrc
  4866  0DDA  0CA3               	rrf	i1___aldiv@divisor+3,f
  4867  0DDB  0CA2               	rrf	i1___aldiv@divisor+2,f
  4868  0DDC  0CA1               	rrf	i1___aldiv@divisor+1,f
  4869  0DDD  0CA0               	rrf	i1___aldiv@divisor,f
  4870  0DDE  3EFF               	addlw	-1
  4871  0DDF  1D03               	skipz
  4872  0DE0  2DD9               	goto	u197_25
  4873  0DE1  3001               	movlw	1
  4874  0DE2  02A8               	subwf	i1___aldiv@counter,f
  4875  0DE3  1D03               	btfss	3,2
  4876  0DE4  2DB0               	goto	i1l2105
  4877  0DE5                     i1l2117:	
  4878  0DE5  0829               	movf	i1___aldiv@sign,w
  4879  0DE6  1903               	btfsc	3,2
  4880  0DE7  2DF3               	goto	i1l2121
  4881  0DE8  09AA               	comf	i1___aldiv@quotient,f
  4882  0DE9  09AB               	comf	i1___aldiv@quotient+1,f
  4883  0DEA  09AC               	comf	i1___aldiv@quotient+2,f
  4884  0DEB  09AD               	comf	i1___aldiv@quotient+3,f
  4885  0DEC  0AAA               	incf	i1___aldiv@quotient,f
  4886  0DED  1903               	skipnz
  4887  0DEE  0AAB               	incf	i1___aldiv@quotient+1,f
  4888  0DEF  1903               	skipnz
  4889  0DF0  0AAC               	incf	i1___aldiv@quotient+2,f
  4890  0DF1  1903               	skipnz
  4891  0DF2  0AAD               	incf	i1___aldiv@quotient+3,f
  4892  0DF3                     i1l2121:	
  4893  0DF3  082D               	movf	i1___aldiv@quotient+3,w
  4894  0DF4  00A3               	movwf	?i1___aldiv+3
  4895  0DF5  082C               	movf	i1___aldiv@quotient+2,w
  4896  0DF6  00A2               	movwf	?i1___aldiv+2
  4897  0DF7  082B               	movf	i1___aldiv@quotient+1,w
  4898  0DF8  00A1               	movwf	?i1___aldiv+1
  4899  0DF9  082A               	movf	i1___aldiv@quotient,w
  4900  0DFA  00A0               	movwf	?i1___aldiv
  4901  0DFB  0008               	return
  4902  0DFC                     __end_ofi1___aldiv:	
  4903                           
  4904                           	psect	text21
  4905  0A2D                     __ptext21:	
  4906 ;; *************** function _constrain *****************
  4907 ;; Defined at:
  4908 ;;		line 94 in file "main.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  value           4    0[COMMON] long 
  4911 ;;  lLimit          4    4[COMMON] long 
  4912 ;;  uLimit          4    8[COMMON] long 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  4    0[COMMON] long 
  4917 ;; Registers used:
  4918 ;;		wreg, btemp+1
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4924 ;;      Params:        12       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0
  4926 ;;      Temps:          0       0       0       0       0
  4927 ;;      Totals:        12       0       0       0       0
  4928 ;;Total ram usage:       12 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_SetMotor
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           
  4938                           ;psect for function _constrain
  4939  0A2D                     _constrain:	
  4940                           
  4941                           ;main.c: 95: if (value > uLimit){
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _constrain: [wreg+btemp+1]
  4945  0A2D  087B               	movf	constrain@uLimit+3,w
  4946  0A2E  3A80               	xorlw	128
  4947  0A2F  00FF               	movwf	127
  4948  0A30  0873               	movf	constrain@value+3,w
  4949  0A31  3A80               	xorlw	128
  4950  0A32  027F               	subwf	127,w
  4951  0A33  1D03               	skipz
  4952  0A34  2A3F               	goto	u203_23
  4953  0A35  0872               	movf	constrain@value+2,w
  4954  0A36  027A               	subwf	constrain@uLimit+2,w
  4955  0A37  1D03               	skipz
  4956  0A38  2A3F               	goto	u203_23
  4957  0A39  0871               	movf	constrain@value+1,w
  4958  0A3A  0279               	subwf	constrain@uLimit+1,w
  4959  0A3B  1D03               	skipz
  4960  0A3C  2A3F               	goto	u203_23
  4961  0A3D  0870               	movf	constrain@value,w
  4962  0A3E  0278               	subwf	constrain@uLimit,w
  4963  0A3F                     u203_23:	
  4964  0A3F  1803               	skipnc
  4965  0A40  0008               	return
  4966  0A41  0008               	return
  4967  0A42                     __end_of_constrain:	
  4968                           
  4969                           	psect	text22
  4970  0E8B                     __ptext22:	
  4971 ;; *************** function ___xxtofl *****************
  4972 ;; Defined at:
  4973 ;;		line 10 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  sign            1    wreg     unsigned char 
  4976 ;;  val             4    0[COMMON] long 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  sign            1    8[COMMON] unsigned char 
  4979 ;;  arg             4   10[COMMON] unsigned long 
  4980 ;;  exp             1    9[COMMON] unsigned char 
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  4    0[COMMON] unsigned char 
  4983 ;; Registers used:
  4984 ;;		wreg, status,2, status,0
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 0/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4990 ;;      Params:         4       0       0       0       0
  4991 ;;      Locals:         6       0       0       0       0
  4992 ;;      Temps:          4       0       0       0       0
  4993 ;;      Totals:        14       0       0       0       0
  4994 ;;Total ram usage:       14 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_SetMotor
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function ___xxtofl
  5005  0E8B                     ___xxtofl:	
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  5009                           ;___xxtofl@sign stored from wreg
  5010  0E8B  00F8               	movwf	___xxtofl@sign
  5011  0E8C  0878               	movf	___xxtofl@sign,w
  5012  0E8D  1D03               	btfss	3,2
  5013  0E8E  1FF3               	btfss	___xxtofl@val+3,7
  5014  0E8F  2EA0               	goto	i1l2435
  5015  0E90  0970               	comf	___xxtofl@val,w
  5016  0E91  00FA               	movwf	___xxtofl@arg
  5017  0E92  0971               	comf	___xxtofl@val+1,w
  5018  0E93  00FB               	movwf	___xxtofl@arg+1
  5019  0E94  0972               	comf	___xxtofl@val+2,w
  5020  0E95  00FC               	movwf	___xxtofl@arg+2
  5021  0E96  0973               	comf	___xxtofl@val+3,w
  5022  0E97  00FD               	movwf	___xxtofl@arg+3
  5023  0E98  0AFA               	incf	___xxtofl@arg,f
  5024  0E99  1903               	skipnz
  5025  0E9A  0AFB               	incf	___xxtofl@arg+1,f
  5026  0E9B  1903               	skipnz
  5027  0E9C  0AFC               	incf	___xxtofl@arg+2,f
  5028  0E9D  1903               	skipnz
  5029  0E9E  0AFD               	incf	___xxtofl@arg+3,f
  5030  0E9F  2EA8               	goto	i1l962
  5031  0EA0                     i1l2435:	
  5032  0EA0  0873               	movf	___xxtofl@val+3,w
  5033  0EA1  00FD               	movwf	___xxtofl@arg+3
  5034  0EA2  0872               	movf	___xxtofl@val+2,w
  5035  0EA3  00FC               	movwf	___xxtofl@arg+2
  5036  0EA4  0871               	movf	___xxtofl@val+1,w
  5037  0EA5  00FB               	movwf	___xxtofl@arg+1
  5038  0EA6  0870               	movf	___xxtofl@val,w
  5039  0EA7  00FA               	movwf	___xxtofl@arg
  5040  0EA8                     i1l962:	
  5041  0EA8  0873               	movf	___xxtofl@val+3,w
  5042  0EA9  0472               	iorwf	___xxtofl@val+2,w
  5043  0EAA  0471               	iorwf	___xxtofl@val+1,w
  5044  0EAB  0470               	iorwf	___xxtofl@val,w
  5045  0EAC  1D03               	skipz
  5046  0EAD  2EB7               	goto	i1l2441
  5047  0EAE  3000               	movlw	0
  5048  0EAF  00F3               	movwf	?___xxtofl+3
  5049  0EB0  3000               	movlw	0
  5050  0EB1  00F2               	movwf	?___xxtofl+2
  5051  0EB2  3000               	movlw	0
  5052  0EB3  00F1               	movwf	?___xxtofl+1
  5053  0EB4  3000               	movlw	0
  5054  0EB5  00F0               	movwf	?___xxtofl
  5055  0EB6  0008               	return
  5056  0EB7                     i1l2441:	
  5057  0EB7  3096               	movlw	150
  5058  0EB8  00F4               	movwf	??___xxtofl
  5059  0EB9  0874               	movf	??___xxtofl,w
  5060  0EBA  00F9               	movwf	___xxtofl@exp
  5061  0EBB                     i1l2445:	
  5062  0EBB  30FE               	movlw	254
  5063  0EBC  057D               	andwf	___xxtofl@arg+3,w
  5064  0EBD  1903               	btfsc	3,2
  5065  0EBE  2EE8               	goto	i1l968
  5066  0EBF  3001               	movlw	1
  5067  0EC0  00F4               	movwf	??___xxtofl
  5068  0EC1  0874               	movf	??___xxtofl,w
  5069  0EC2  07F9               	addwf	___xxtofl@exp,f
  5070  0EC3  3001               	movlw	1
  5071  0EC4                     u282_25:	
  5072  0EC4  1003               	clrc
  5073  0EC5  0CFD               	rrf	___xxtofl@arg+3,f
  5074  0EC6  0CFC               	rrf	___xxtofl@arg+2,f
  5075  0EC7  0CFB               	rrf	___xxtofl@arg+1,f
  5076  0EC8  0CFA               	rrf	___xxtofl@arg,f
  5077  0EC9  3EFF               	addlw	-1
  5078  0ECA  1D03               	skipz
  5079  0ECB  2EC4               	goto	u282_25
  5080  0ECC  2EBB               	goto	i1l2445
  5081  0ECD                     i1l2447:	
  5082  0ECD  3001               	movlw	1
  5083  0ECE  00F4               	movwf	??___xxtofl
  5084  0ECF  0874               	movf	??___xxtofl,w
  5085  0ED0  07F9               	addwf	___xxtofl@exp,f
  5086  0ED1  3001               	movlw	1
  5087  0ED2  07FA               	addwf	___xxtofl@arg,f
  5088  0ED3  3000               	movlw	0
  5089  0ED4  1803               	skipnc
  5090  0ED5  3001               	movlw	1
  5091  0ED6  07FB               	addwf	___xxtofl@arg+1,f
  5092  0ED7  3000               	movlw	0
  5093  0ED8  1803               	skipnc
  5094  0ED9  3001               	movlw	1
  5095  0EDA  07FC               	addwf	___xxtofl@arg+2,f
  5096  0EDB  3000               	movlw	0
  5097  0EDC  1803               	skipnc
  5098  0EDD  3001               	movlw	1
  5099  0EDE  07FD               	addwf	___xxtofl@arg+3,f
  5100  0EDF  3001               	movlw	1
  5101  0EE0                     u284_25:	
  5102  0EE0  1003               	clrc
  5103  0EE1  0CFD               	rrf	___xxtofl@arg+3,f
  5104  0EE2  0CFC               	rrf	___xxtofl@arg+2,f
  5105  0EE3  0CFB               	rrf	___xxtofl@arg+1,f
  5106  0EE4  0CFA               	rrf	___xxtofl@arg,f
  5107  0EE5  3EFF               	addlw	-1
  5108  0EE6  1D03               	skipz
  5109  0EE7  2EE0               	goto	u284_25
  5110  0EE8                     i1l968:	
  5111  0EE8  30FF               	movlw	255
  5112  0EE9  057D               	andwf	___xxtofl@arg+3,w
  5113  0EEA  1903               	btfsc	3,2
  5114  0EEB  2EFC               	goto	i1l2455
  5115  0EEC  2ECD               	goto	i1l2447
  5116  0EED                     i1l2457:	
  5117  0EED  3002               	movlw	2
  5118  0EEE  0279               	subwf	___xxtofl@exp,w
  5119  0EEF  1C03               	btfss	3,0
  5120  0EF0  2EFE               	goto	i1l975
  5121  0EF1  3001               	movlw	1
  5122  0EF2  02F9               	subwf	___xxtofl@exp,f
  5123  0EF3  3001               	movlw	1
  5124  0EF4  00F4               	movwf	??___xxtofl
  5125  0EF5                     u286_25:	
  5126  0EF5  1003               	clrc
  5127  0EF6  0DFA               	rlf	___xxtofl@arg,f
  5128  0EF7  0DFB               	rlf	___xxtofl@arg+1,f
  5129  0EF8  0DFC               	rlf	___xxtofl@arg+2,f
  5130  0EF9  0DFD               	rlf	___xxtofl@arg+3,f
  5131  0EFA  0BF4               	decfsz	??___xxtofl,f
  5132  0EFB  2EF5               	goto	u286_25
  5133  0EFC                     i1l2455:	
  5134  0EFC  1FFC               	btfss	___xxtofl@arg+2,7
  5135  0EFD  2EED               	goto	i1l2457
  5136  0EFE                     i1l975:	
  5137  0EFE  1879               	btfsc	___xxtofl@exp,0
  5138  0EFF  2F08               	goto	i1l976
  5139  0F00  30FF               	movlw	255
  5140  0F01  05FA               	andwf	___xxtofl@arg,f
  5141  0F02  30FF               	movlw	255
  5142  0F03  05FB               	andwf	___xxtofl@arg+1,f
  5143  0F04  307F               	movlw	127
  5144  0F05  05FC               	andwf	___xxtofl@arg+2,f
  5145  0F06  30FF               	movlw	255
  5146  0F07  05FD               	andwf	___xxtofl@arg+3,f
  5147  0F08                     i1l976:	
  5148  0F08  1003               	clrc
  5149  0F09  0CF9               	rrf	___xxtofl@exp,f
  5150  0F0A  0879               	movf	___xxtofl@exp,w
  5151  0F0B  00F4               	movwf	??___xxtofl
  5152  0F0C  01F5               	clrf	??___xxtofl+1
  5153  0F0D  01F6               	clrf	??___xxtofl+2
  5154  0F0E  01F7               	clrf	??___xxtofl+3
  5155  0F0F  3018               	movlw	24
  5156  0F10                     u290_25:	
  5157  0F10  1003               	clrc
  5158  0F11  0DF4               	rlf	??___xxtofl,f
  5159  0F12  0DF5               	rlf	??___xxtofl+1,f
  5160  0F13  0DF6               	rlf	??___xxtofl+2,f
  5161  0F14  0DF7               	rlf	??___xxtofl+3,f
  5162  0F15  3EFF               	addlw	-1
  5163  0F16  1D03               	skipz
  5164  0F17  2F10               	goto	u290_25
  5165  0F18  0874               	movf	??___xxtofl,w
  5166  0F19  04FA               	iorwf	___xxtofl@arg,f
  5167  0F1A  0875               	movf	??___xxtofl+1,w
  5168  0F1B  04FB               	iorwf	___xxtofl@arg+1,f
  5169  0F1C  0876               	movf	??___xxtofl+2,w
  5170  0F1D  04FC               	iorwf	___xxtofl@arg+2,f
  5171  0F1E  0877               	movf	??___xxtofl+3,w
  5172  0F1F  04FD               	iorwf	___xxtofl@arg+3,f
  5173  0F20  0878               	movf	___xxtofl@sign,w
  5174  0F21  1D03               	btfss	3,2
  5175  0F22  1FF3               	btfss	___xxtofl@val+3,7
  5176  0F23  2F25               	goto	i1l2469
  5177  0F24  17FD               	bsf	___xxtofl@arg+3,7
  5178  0F25                     i1l2469:	
  5179  0F25  087D               	movf	___xxtofl@arg+3,w
  5180  0F26  00F3               	movwf	?___xxtofl+3
  5181  0F27  087C               	movf	___xxtofl@arg+2,w
  5182  0F28  00F2               	movwf	?___xxtofl+2
  5183  0F29  087B               	movf	___xxtofl@arg+1,w
  5184  0F2A  00F1               	movwf	?___xxtofl+1
  5185  0F2B  087A               	movf	___xxtofl@arg,w
  5186  0F2C  00F0               	movwf	?___xxtofl
  5187  0F2D  0008               	return
  5188  0F2E                     __end_of___xxtofl:	
  5189                           
  5190                           	psect	text23
  5191  0BFA                     __ptext23:	
  5192 ;; *************** function ___fltol *****************
  5193 ;; Defined at:
  5194 ;;		line 43 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  f1              4   26[BANK0 ] unsigned char 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  exp1            1   36[BANK0 ] unsigned char 
  5199 ;;  sign1           1   35[BANK0 ] unsigned char 
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  4   26[BANK0 ] long 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5209 ;;      Params:         0       4       0       0       0
  5210 ;;      Locals:         0       2       0       0       0
  5211 ;;      Temps:          0       5       0       0       0
  5212 ;;      Totals:         0      11       0       0       0
  5213 ;;Total ram usage:       11 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		_SetMotor
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function ___fltol
  5224  0BFA                     ___fltol:	
  5225                           
  5226                           ;incstack = 0
  5227                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  5228  0BFA  1003               	clrc
  5229  0BFB  1283               	bcf	3,5	;RP0=0, select bank0
  5230  0BFC  1303               	bcf	3,6	;RP1=0, select bank0
  5231  0BFD  0D3C               	rlf	___fltol@f1+2,w
  5232  0BFE  0D3D               	rlf	___fltol@f1+3,w
  5233  0BFF  00BE               	movwf	??___fltol
  5234  0C00  083E               	movf	??___fltol,w
  5235  0C01  00C4               	movwf	___fltol@exp1
  5236  0C02  0844               	movf	___fltol@exp1,w
  5237  0C03  1D03               	btfss	3,2
  5238  0C04  2C0E               	goto	i1l2211
  5239  0C05                     i1l2207:	
  5240  0C05  3000               	movlw	0
  5241  0C06  00BD               	movwf	?___fltol+3
  5242  0C07  3000               	movlw	0
  5243  0C08  00BC               	movwf	?___fltol+2
  5244  0C09  3000               	movlw	0
  5245  0C0A  00BB               	movwf	?___fltol+1
  5246  0C0B  3000               	movlw	0
  5247  0C0C  00BA               	movwf	?___fltol
  5248  0C0D  0008               	return
  5249  0C0E                     i1l2211:	
  5250  0C0E  083A               	movf	___fltol@f1,w
  5251  0C0F  00BE               	movwf	??___fltol
  5252  0C10  083B               	movf	___fltol@f1+1,w
  5253  0C11  00BF               	movwf	??___fltol+1
  5254  0C12  083C               	movf	___fltol@f1+2,w
  5255  0C13  00C0               	movwf	??___fltol+2
  5256  0C14  083D               	movf	___fltol@f1+3,w
  5257  0C15  00C1               	movwf	??___fltol+3
  5258  0C16  301F               	movlw	31
  5259  0C17                     u220_25:	
  5260  0C17  1003               	clrc
  5261  0C18  0CC1               	rrf	??___fltol+3,f
  5262  0C19  0CC0               	rrf	??___fltol+2,f
  5263  0C1A  0CBF               	rrf	??___fltol+1,f
  5264  0C1B  0CBE               	rrf	??___fltol,f
  5265  0C1C  3EFF               	addlw	-1
  5266  0C1D  1D03               	skipz
  5267  0C1E  2C17               	goto	u220_25
  5268  0C1F  083E               	movf	??___fltol,w
  5269  0C20  00C2               	movwf	??___fltol+4
  5270  0C21  0842               	movf	??___fltol+4,w
  5271  0C22  00C3               	movwf	___fltol@sign1
  5272  0C23  17BC               	bsf	___fltol@f1+2,7
  5273  0C24  30FF               	movlw	255
  5274  0C25  05BA               	andwf	___fltol@f1,f
  5275  0C26  30FF               	movlw	255
  5276  0C27  05BB               	andwf	___fltol@f1+1,f
  5277  0C28  30FF               	movlw	255
  5278  0C29  05BC               	andwf	___fltol@f1+2,f
  5279  0C2A  3000               	movlw	0
  5280  0C2B  05BD               	andwf	___fltol@f1+3,f
  5281  0C2C  3096               	movlw	150
  5282  0C2D  02C4               	subwf	___fltol@exp1,f
  5283  0C2E  1FC4               	btfss	___fltol@exp1,7
  5284  0C2F  2C45               	goto	i1l2229
  5285  0C30  0844               	movf	___fltol@exp1,w
  5286  0C31  3A80               	xorlw	128
  5287  0C32  3E97               	addlw	151
  5288  0C33  1C03               	btfss	3,0
  5289  0C34  2C05               	goto	i1l2207
  5290  0C35                     i1l2227:	
  5291  0C35  3001               	movlw	1
  5292  0C36                     u223_25:	
  5293  0C36  1003               	clrc
  5294  0C37  0CBD               	rrf	___fltol@f1+3,f
  5295  0C38  0CBC               	rrf	___fltol@f1+2,f
  5296  0C39  0CBB               	rrf	___fltol@f1+1,f
  5297  0C3A  0CBA               	rrf	___fltol@f1,f
  5298  0C3B  3EFF               	addlw	-1
  5299  0C3C  1D03               	skipz
  5300  0C3D  2C36               	goto	u223_25
  5301  0C3E  3001               	movlw	1
  5302  0C3F  00BE               	movwf	??___fltol
  5303  0C40  083E               	movf	??___fltol,w
  5304  0C41  07C4               	addwf	___fltol@exp1,f
  5305  0C42  1903               	btfsc	3,2
  5306  0C43  2C58               	goto	i1l2237
  5307  0C44  2C35               	goto	i1l2227
  5308  0C45                     i1l2229:	
  5309  0C45  3020               	movlw	32
  5310  0C46  0244               	subwf	___fltol@exp1,w
  5311  0C47  1803               	btfsc	3,0
  5312  0C48  2C05               	goto	i1l2207
  5313  0C49                     i1l728:	
  5314  0C49  0844               	movf	___fltol@exp1,w
  5315  0C4A  1903               	btfsc	3,2
  5316  0C4B  2C58               	goto	i1l2237
  5317  0C4C  3001               	movlw	1
  5318  0C4D  00BE               	movwf	??___fltol
  5319  0C4E                     u226_25:	
  5320  0C4E  1003               	clrc
  5321  0C4F  0DBA               	rlf	___fltol@f1,f
  5322  0C50  0DBB               	rlf	___fltol@f1+1,f
  5323  0C51  0DBC               	rlf	___fltol@f1+2,f
  5324  0C52  0DBD               	rlf	___fltol@f1+3,f
  5325  0C53  0BBE               	decfsz	??___fltol,f
  5326  0C54  2C4E               	goto	u226_25
  5327  0C55  3001               	movlw	1
  5328  0C56  02C4               	subwf	___fltol@exp1,f
  5329  0C57  2C49               	goto	i1l728
  5330  0C58                     i1l2237:	
  5331  0C58  0843               	movf	___fltol@sign1,w
  5332  0C59  1903               	btfsc	3,2
  5333  0C5A  0008               	return
  5334  0C5B  09BA               	comf	___fltol@f1,f
  5335  0C5C  09BB               	comf	___fltol@f1+1,f
  5336  0C5D  09BC               	comf	___fltol@f1+2,f
  5337  0C5E  09BD               	comf	___fltol@f1+3,f
  5338  0C5F  0ABA               	incf	___fltol@f1,f
  5339  0C60  1903               	skipnz
  5340  0C61  0ABB               	incf	___fltol@f1+1,f
  5341  0C62  1903               	skipnz
  5342  0C63  0ABC               	incf	___fltol@f1+2,f
  5343  0C64  1903               	skipnz
  5344  0C65  0ABD               	incf	___fltol@f1+3,f
  5345  0C66  0008               	return
  5346  0C67                     __end_of___fltol:	
  5347                           
  5348                           	psect	text24
  5349  0039                     __ptext24:	
  5350 ;; *************** function ___flmul *****************
  5351 ;; Defined at:
  5352 ;;		line 8 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  b               4    0[BANK0 ] long 
  5355 ;;  a               4    4[BANK0 ] long 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  prod            4   20[BANK0 ] struct .
  5358 ;;  grs             4   14[BANK0 ] unsigned long 
  5359 ;;  temp            2   24[BANK0 ] struct .
  5360 ;;  bexp            1   19[BANK0 ] unsigned char 
  5361 ;;  aexp            1   18[BANK0 ] unsigned char 
  5362 ;;  sign            1   13[BANK0 ] unsigned char 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  4    0[BANK0 ] unsigned char 
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5372 ;;      Params:         0       8       0       0       0
  5373 ;;      Locals:         0      13       0       0       0
  5374 ;;      Temps:          0       5       0       0       0
  5375 ;;      Totals:         0      26       0       0       0
  5376 ;;Total ram usage:       26 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    1
  5379 ;; This function calls:
  5380 ;;		__Umul8_16
  5381 ;; This function is called by:
  5382 ;;		_SetMotor
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function ___flmul
  5388  0039                     ___flmul:	
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5392  0039  1283               	bcf	3,5	;RP0=0, select bank0
  5393  003A  1303               	bcf	3,6	;RP1=0, select bank0
  5394  003B  0823               	movf	___flmul@b+3,w
  5395  003C  3980               	andlw	128
  5396  003D  00A8               	movwf	??___flmul
  5397  003E  0828               	movf	??___flmul,w
  5398  003F  00AD               	movwf	___flmul@sign
  5399  0040  0823               	movf	___flmul@b+3,w
  5400  0041  00A8               	movwf	??___flmul
  5401  0042  0728               	addwf	??___flmul,w
  5402  0043  00A9               	movwf	??___flmul+1
  5403  0044  0829               	movf	??___flmul+1,w
  5404  0045  00B3               	movwf	___flmul@bexp
  5405  0046  1BA2               	btfsc	___flmul@b+2,7
  5406  0047  1433               	bsf	___flmul@bexp,0
  5407  0048  0833               	movf	___flmul@bexp,w
  5408  0049  1903               	btfsc	3,2
  5409  004A  2858               	goto	i1l2305
  5410  004B  0A33               	incf	___flmul@bexp,w
  5411  004C  1D03               	btfss	3,2
  5412  004D  2856               	goto	i1l2303
  5413  004E  3000               	movlw	0
  5414  004F  00A3               	movwf	___flmul@b+3
  5415  0050  3000               	movlw	0
  5416  0051  00A2               	movwf	___flmul@b+2
  5417  0052  3000               	movlw	0
  5418  0053  00A1               	movwf	___flmul@b+1
  5419  0054  3000               	movlw	0
  5420  0055  00A0               	movwf	___flmul@b
  5421  0056                     i1l2303:	
  5422  0056  17A2               	bsf	___flmul@b+2,7
  5423  0057  2860               	goto	i1l2307
  5424  0058                     i1l2305:	
  5425  0058  3000               	movlw	0
  5426  0059  00A3               	movwf	___flmul@b+3
  5427  005A  3000               	movlw	0
  5428  005B  00A2               	movwf	___flmul@b+2
  5429  005C  3000               	movlw	0
  5430  005D  00A1               	movwf	___flmul@b+1
  5431  005E  3000               	movlw	0
  5432  005F  00A0               	movwf	___flmul@b
  5433  0060                     i1l2307:	
  5434  0060  0827               	movf	___flmul@a+3,w
  5435  0061  3980               	andlw	128
  5436  0062  00A8               	movwf	??___flmul
  5437  0063  0828               	movf	??___flmul,w
  5438  0064  06AD               	xorwf	___flmul@sign,f
  5439  0065  0827               	movf	___flmul@a+3,w
  5440  0066  00A8               	movwf	??___flmul
  5441  0067  0728               	addwf	??___flmul,w
  5442  0068  00A9               	movwf	??___flmul+1
  5443  0069  0829               	movf	??___flmul+1,w
  5444  006A  00B2               	movwf	___flmul@aexp
  5445  006B  1BA6               	btfsc	___flmul@a+2,7
  5446  006C  1432               	bsf	___flmul@aexp,0
  5447  006D  0832               	movf	___flmul@aexp,w
  5448  006E  1903               	btfsc	3,2
  5449  006F  287D               	goto	i1l2323
  5450  0070  0A32               	incf	___flmul@aexp,w
  5451  0071  1D03               	btfss	3,2
  5452  0072  287B               	goto	i1l2321
  5453  0073  3000               	movlw	0
  5454  0074  00A7               	movwf	___flmul@a+3
  5455  0075  3000               	movlw	0
  5456  0076  00A6               	movwf	___flmul@a+2
  5457  0077  3000               	movlw	0
  5458  0078  00A5               	movwf	___flmul@a+1
  5459  0079  3000               	movlw	0
  5460  007A  00A4               	movwf	___flmul@a
  5461  007B                     i1l2321:	
  5462  007B  17A6               	bsf	___flmul@a+2,7
  5463  007C  2885               	goto	i1l2325
  5464  007D                     i1l2323:	
  5465  007D  3000               	movlw	0
  5466  007E  00A7               	movwf	___flmul@a+3
  5467  007F  3000               	movlw	0
  5468  0080  00A6               	movwf	___flmul@a+2
  5469  0081  3000               	movlw	0
  5470  0082  00A5               	movwf	___flmul@a+1
  5471  0083  3000               	movlw	0
  5472  0084  00A4               	movwf	___flmul@a
  5473  0085                     i1l2325:	
  5474  0085  0832               	movf	___flmul@aexp,w
  5475  0086  1D03               	btfss	3,2
  5476  0087  0833               	movf	___flmul@bexp,w
  5477  0088  1D03               	btfss	3,2
  5478  0089  2893               	goto	i1l2333
  5479  008A  3000               	movlw	0
  5480  008B  00A3               	movwf	?___flmul+3
  5481  008C  3000               	movlw	0
  5482  008D  00A2               	movwf	?___flmul+2
  5483  008E  3000               	movlw	0
  5484  008F  00A1               	movwf	?___flmul+1
  5485  0090  3000               	movlw	0
  5486  0091  00A0               	movwf	?___flmul
  5487  0092  0008               	return
  5488  0093                     i1l2333:	
  5489  0093  0820               	movf	___flmul@b,w
  5490  0094  00A8               	movwf	??___flmul
  5491  0095  0828               	movf	??___flmul,w
  5492  0096  00F0               	movwf	__Umul8_16@multiplicand
  5493  0097  0826               	movf	___flmul@a+2,w
  5494  0098  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5495  009D  0871               	movf	?__Umul8_16+1,w
  5496  009E  1283               	bcf	3,5	;RP0=0, select bank0
  5497  009F  1303               	bcf	3,6	;RP1=0, select bank0
  5498  00A0  00B9               	movwf	___flmul@temp+1
  5499  00A1  0870               	movf	?__Umul8_16,w
  5500  00A2  00B8               	movwf	___flmul@temp
  5501  00A3  0838               	movf	___flmul@temp,w
  5502  00A4  00A8               	movwf	??___flmul
  5503  00A5  01A9               	clrf	??___flmul+1
  5504  00A6  01AA               	clrf	??___flmul+2
  5505  00A7  01AB               	clrf	??___flmul+3
  5506  00A8  082B               	movf	??___flmul+3,w
  5507  00A9  00B1               	movwf	___flmul@grs+3
  5508  00AA  082A               	movf	??___flmul+2,w
  5509  00AB  00B0               	movwf	___flmul@grs+2
  5510  00AC  0829               	movf	??___flmul+1,w
  5511  00AD  00AF               	movwf	___flmul@grs+1
  5512  00AE  0828               	movf	??___flmul,w
  5513  00AF  00AE               	movwf	___flmul@grs
  5514  00B0  0839               	movf	___flmul@temp+1,w
  5515  00B1  00A8               	movwf	??___flmul
  5516  00B2  01A9               	clrf	??___flmul+1
  5517  00B3  01AA               	clrf	??___flmul+2
  5518  00B4  01AB               	clrf	??___flmul+3
  5519  00B5  082B               	movf	??___flmul+3,w
  5520  00B6  00B7               	movwf	___flmul@prod+3
  5521  00B7  082A               	movf	??___flmul+2,w
  5522  00B8  00B6               	movwf	___flmul@prod+2
  5523  00B9  0829               	movf	??___flmul+1,w
  5524  00BA  00B5               	movwf	___flmul@prod+1
  5525  00BB  0828               	movf	??___flmul,w
  5526  00BC  00B4               	movwf	___flmul@prod
  5527  00BD  0821               	movf	___flmul@b+1,w
  5528  00BE  00A8               	movwf	??___flmul
  5529  00BF  0828               	movf	??___flmul,w
  5530  00C0  00F0               	movwf	__Umul8_16@multiplicand
  5531  00C1  0825               	movf	___flmul@a+1,w
  5532  00C2  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5533  00C7  0871               	movf	?__Umul8_16+1,w
  5534  00C8  1283               	bcf	3,5	;RP0=0, select bank0
  5535  00C9  1303               	bcf	3,6	;RP1=0, select bank0
  5536  00CA  00B9               	movwf	___flmul@temp+1
  5537  00CB  0870               	movf	?__Umul8_16,w
  5538  00CC  00B8               	movwf	___flmul@temp
  5539  00CD  0838               	movf	___flmul@temp,w
  5540  00CE  00A8               	movwf	??___flmul
  5541  00CF  01A9               	clrf	??___flmul+1
  5542  00D0  01AA               	clrf	??___flmul+2
  5543  00D1  01AB               	clrf	??___flmul+3
  5544  00D2  0828               	movf	??___flmul,w
  5545  00D3  07AE               	addwf	___flmul@grs,f
  5546  00D4  0829               	movf	??___flmul+1,w
  5547  00D5  1103               	clrz
  5548  00D6  1803               	skipnc
  5549  00D7  3E01               	addlw	1
  5550  00D8  1D03               	btfss	3,2
  5551  00D9  07AF               	addwf	___flmul@grs+1,f
  5552  00DA  082A               	movf	??___flmul+2,w
  5553  00DB  1103               	clrz
  5554  00DC  1803               	skipnc
  5555  00DD  3E01               	addlw	1
  5556  00DE  1D03               	btfss	3,2
  5557  00DF  07B0               	addwf	___flmul@grs+2,f
  5558  00E0  082B               	movf	??___flmul+3,w
  5559  00E1  1103               	clrz
  5560  00E2  1803               	skipnc
  5561  00E3  3E01               	addlw	1
  5562  00E4  1D03               	btfss	3,2
  5563  00E5  07B1               	addwf	___flmul@grs+3,f
  5564  00E6  0839               	movf	___flmul@temp+1,w
  5565  00E7  00A8               	movwf	??___flmul
  5566  00E8  01A9               	clrf	??___flmul+1
  5567  00E9  01AA               	clrf	??___flmul+2
  5568  00EA  01AB               	clrf	??___flmul+3
  5569  00EB  0828               	movf	??___flmul,w
  5570  00EC  07B4               	addwf	___flmul@prod,f
  5571  00ED  0829               	movf	??___flmul+1,w
  5572  00EE  1103               	clrz
  5573  00EF  1803               	skipnc
  5574  00F0  3E01               	addlw	1
  5575  00F1  1D03               	btfss	3,2
  5576  00F2  07B5               	addwf	___flmul@prod+1,f
  5577  00F3  082A               	movf	??___flmul+2,w
  5578  00F4  1103               	clrz
  5579  00F5  1803               	skipnc
  5580  00F6  3E01               	addlw	1
  5581  00F7  1D03               	btfss	3,2
  5582  00F8  07B6               	addwf	___flmul@prod+2,f
  5583  00F9  082B               	movf	??___flmul+3,w
  5584  00FA  1103               	clrz
  5585  00FB  1803               	skipnc
  5586  00FC  3E01               	addlw	1
  5587  00FD  1D03               	btfss	3,2
  5588  00FE  07B7               	addwf	___flmul@prod+3,f
  5589  00FF  0822               	movf	___flmul@b+2,w
  5590  0100  00A8               	movwf	??___flmul
  5591  0101  0828               	movf	??___flmul,w
  5592  0102  00F0               	movwf	__Umul8_16@multiplicand
  5593  0103  0824               	movf	___flmul@a,w
  5594  0104  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5595  0109  0871               	movf	?__Umul8_16+1,w
  5596  010A  1283               	bcf	3,5	;RP0=0, select bank0
  5597  010B  1303               	bcf	3,6	;RP1=0, select bank0
  5598  010C  00B9               	movwf	___flmul@temp+1
  5599  010D  0870               	movf	?__Umul8_16,w
  5600  010E  00B8               	movwf	___flmul@temp
  5601  010F  0838               	movf	___flmul@temp,w
  5602  0110  00A8               	movwf	??___flmul
  5603  0111  01A9               	clrf	??___flmul+1
  5604  0112  01AA               	clrf	??___flmul+2
  5605  0113  01AB               	clrf	??___flmul+3
  5606  0114  0828               	movf	??___flmul,w
  5607  0115  07AE               	addwf	___flmul@grs,f
  5608  0116  0829               	movf	??___flmul+1,w
  5609  0117  1103               	clrz
  5610  0118  1803               	skipnc
  5611  0119  3E01               	addlw	1
  5612  011A  1D03               	btfss	3,2
  5613  011B  07AF               	addwf	___flmul@grs+1,f
  5614  011C  082A               	movf	??___flmul+2,w
  5615  011D  1103               	clrz
  5616  011E  1803               	skipnc
  5617  011F  3E01               	addlw	1
  5618  0120  1D03               	btfss	3,2
  5619  0121  07B0               	addwf	___flmul@grs+2,f
  5620  0122  082B               	movf	??___flmul+3,w
  5621  0123  1103               	clrz
  5622  0124  1803               	skipnc
  5623  0125  3E01               	addlw	1
  5624  0126  1D03               	btfss	3,2
  5625  0127  07B1               	addwf	___flmul@grs+3,f
  5626  0128  0839               	movf	___flmul@temp+1,w
  5627  0129  00A8               	movwf	??___flmul
  5628  012A  01A9               	clrf	??___flmul+1
  5629  012B  01AA               	clrf	??___flmul+2
  5630  012C  01AB               	clrf	??___flmul+3
  5631  012D  0828               	movf	??___flmul,w
  5632  012E  07B4               	addwf	___flmul@prod,f
  5633  012F  0829               	movf	??___flmul+1,w
  5634  0130  1103               	clrz
  5635  0131  1803               	skipnc
  5636  0132  3E01               	addlw	1
  5637  0133  1D03               	btfss	3,2
  5638  0134  07B5               	addwf	___flmul@prod+1,f
  5639  0135  082A               	movf	??___flmul+2,w
  5640  0136  1103               	clrz
  5641  0137  1803               	skipnc
  5642  0138  3E01               	addlw	1
  5643  0139  1D03               	btfss	3,2
  5644  013A  07B6               	addwf	___flmul@prod+2,f
  5645  013B  082B               	movf	??___flmul+3,w
  5646  013C  1103               	clrz
  5647  013D  1803               	skipnc
  5648  013E  3E01               	addlw	1
  5649  013F  1D03               	btfss	3,2
  5650  0140  07B7               	addwf	___flmul@prod+3,f
  5651  0141  3008               	movlw	8
  5652  0142  00A8               	movwf	??___flmul
  5653  0143                     u254_25:	
  5654  0143  1003               	clrc
  5655  0144  0DAE               	rlf	___flmul@grs,f
  5656  0145  0DAF               	rlf	___flmul@grs+1,f
  5657  0146  0DB0               	rlf	___flmul@grs+2,f
  5658  0147  0DB1               	rlf	___flmul@grs+3,f
  5659  0148  0BA8               	decfsz	??___flmul,f
  5660  0149  2943               	goto	u254_25
  5661  014A  0821               	movf	___flmul@b+1,w
  5662  014B  00A8               	movwf	??___flmul
  5663  014C  0828               	movf	??___flmul,w
  5664  014D  00F0               	movwf	__Umul8_16@multiplicand
  5665  014E  0824               	movf	___flmul@a,w
  5666  014F  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5667  0154  0871               	movf	?__Umul8_16+1,w
  5668  0155  1283               	bcf	3,5	;RP0=0, select bank0
  5669  0156  1303               	bcf	3,6	;RP1=0, select bank0
  5670  0157  00B9               	movwf	___flmul@temp+1
  5671  0158  0870               	movf	?__Umul8_16,w
  5672  0159  00B8               	movwf	___flmul@temp
  5673  015A  0838               	movf	___flmul@temp,w
  5674  015B  00A8               	movwf	??___flmul
  5675  015C  0839               	movf	___flmul@temp+1,w
  5676  015D  00A9               	movwf	??___flmul+1
  5677  015E  01AA               	clrf	??___flmul+2
  5678  015F  01AB               	clrf	??___flmul+3
  5679  0160  0828               	movf	??___flmul,w
  5680  0161  07AE               	addwf	___flmul@grs,f
  5681  0162  0829               	movf	??___flmul+1,w
  5682  0163  1103               	clrz
  5683  0164  1803               	skipnc
  5684  0165  3E01               	addlw	1
  5685  0166  1D03               	btfss	3,2
  5686  0167  07AF               	addwf	___flmul@grs+1,f
  5687  0168  082A               	movf	??___flmul+2,w
  5688  0169  1103               	clrz
  5689  016A  1803               	skipnc
  5690  016B  3E01               	addlw	1
  5691  016C  1D03               	btfss	3,2
  5692  016D  07B0               	addwf	___flmul@grs+2,f
  5693  016E  082B               	movf	??___flmul+3,w
  5694  016F  1103               	clrz
  5695  0170  1803               	skipnc
  5696  0171  3E01               	addlw	1
  5697  0172  1D03               	btfss	3,2
  5698  0173  07B1               	addwf	___flmul@grs+3,f
  5699  0174  0820               	movf	___flmul@b,w
  5700  0175  00A8               	movwf	??___flmul
  5701  0176  0828               	movf	??___flmul,w
  5702  0177  00F0               	movwf	__Umul8_16@multiplicand
  5703  0178  0825               	movf	___flmul@a+1,w
  5704  0179  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5705  017E  0871               	movf	?__Umul8_16+1,w
  5706  017F  1283               	bcf	3,5	;RP0=0, select bank0
  5707  0180  1303               	bcf	3,6	;RP1=0, select bank0
  5708  0181  00B9               	movwf	___flmul@temp+1
  5709  0182  0870               	movf	?__Umul8_16,w
  5710  0183  00B8               	movwf	___flmul@temp
  5711  0184  0838               	movf	___flmul@temp,w
  5712  0185  00A8               	movwf	??___flmul
  5713  0186  0839               	movf	___flmul@temp+1,w
  5714  0187  00A9               	movwf	??___flmul+1
  5715  0188  01AA               	clrf	??___flmul+2
  5716  0189  01AB               	clrf	??___flmul+3
  5717  018A  0828               	movf	??___flmul,w
  5718  018B  07AE               	addwf	___flmul@grs,f
  5719  018C  0829               	movf	??___flmul+1,w
  5720  018D  1103               	clrz
  5721  018E  1803               	skipnc
  5722  018F  3E01               	addlw	1
  5723  0190  1D03               	btfss	3,2
  5724  0191  07AF               	addwf	___flmul@grs+1,f
  5725  0192  082A               	movf	??___flmul+2,w
  5726  0193  1103               	clrz
  5727  0194  1803               	skipnc
  5728  0195  3E01               	addlw	1
  5729  0196  1D03               	btfss	3,2
  5730  0197  07B0               	addwf	___flmul@grs+2,f
  5731  0198  082B               	movf	??___flmul+3,w
  5732  0199  1103               	clrz
  5733  019A  1803               	skipnc
  5734  019B  3E01               	addlw	1
  5735  019C  1D03               	btfss	3,2
  5736  019D  07B1               	addwf	___flmul@grs+3,f
  5737  019E  3008               	movlw	8
  5738  019F  00A8               	movwf	??___flmul
  5739  01A0                     u257_25:	
  5740  01A0  1003               	clrc
  5741  01A1  0DAE               	rlf	___flmul@grs,f
  5742  01A2  0DAF               	rlf	___flmul@grs+1,f
  5743  01A3  0DB0               	rlf	___flmul@grs+2,f
  5744  01A4  0DB1               	rlf	___flmul@grs+3,f
  5745  01A5  0BA8               	decfsz	??___flmul,f
  5746  01A6  29A0               	goto	u257_25
  5747  01A7  0820               	movf	___flmul@b,w
  5748  01A8  00A8               	movwf	??___flmul
  5749  01A9  0828               	movf	??___flmul,w
  5750  01AA  00F0               	movwf	__Umul8_16@multiplicand
  5751  01AB  0824               	movf	___flmul@a,w
  5752  01AC  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5753  01B1  0871               	movf	?__Umul8_16+1,w
  5754  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  5755  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  5756  01B4  00B9               	movwf	___flmul@temp+1
  5757  01B5  0870               	movf	?__Umul8_16,w
  5758  01B6  00B8               	movwf	___flmul@temp
  5759  01B7  0838               	movf	___flmul@temp,w
  5760  01B8  00A8               	movwf	??___flmul
  5761  01B9  0839               	movf	___flmul@temp+1,w
  5762  01BA  00A9               	movwf	??___flmul+1
  5763  01BB  01AA               	clrf	??___flmul+2
  5764  01BC  01AB               	clrf	??___flmul+3
  5765  01BD  0828               	movf	??___flmul,w
  5766  01BE  07AE               	addwf	___flmul@grs,f
  5767  01BF  0829               	movf	??___flmul+1,w
  5768  01C0  1103               	clrz
  5769  01C1  1803               	skipnc
  5770  01C2  3E01               	addlw	1
  5771  01C3  1D03               	btfss	3,2
  5772  01C4  07AF               	addwf	___flmul@grs+1,f
  5773  01C5  082A               	movf	??___flmul+2,w
  5774  01C6  1103               	clrz
  5775  01C7  1803               	skipnc
  5776  01C8  3E01               	addlw	1
  5777  01C9  1D03               	btfss	3,2
  5778  01CA  07B0               	addwf	___flmul@grs+2,f
  5779  01CB  082B               	movf	??___flmul+3,w
  5780  01CC  1103               	clrz
  5781  01CD  1803               	skipnc
  5782  01CE  3E01               	addlw	1
  5783  01CF  1D03               	btfss	3,2
  5784  01D0  07B1               	addwf	___flmul@grs+3,f
  5785  01D1  0821               	movf	___flmul@b+1,w
  5786  01D2  00A8               	movwf	??___flmul
  5787  01D3  0828               	movf	??___flmul,w
  5788  01D4  00F0               	movwf	__Umul8_16@multiplicand
  5789  01D5  0826               	movf	___flmul@a+2,w
  5790  01D6  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5791  01DB  0871               	movf	?__Umul8_16+1,w
  5792  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  5793  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  5794  01DE  00B9               	movwf	___flmul@temp+1
  5795  01DF  0870               	movf	?__Umul8_16,w
  5796  01E0  00B8               	movwf	___flmul@temp
  5797  01E1  0838               	movf	___flmul@temp,w
  5798  01E2  00A8               	movwf	??___flmul
  5799  01E3  0839               	movf	___flmul@temp+1,w
  5800  01E4  00A9               	movwf	??___flmul+1
  5801  01E5  01AA               	clrf	??___flmul+2
  5802  01E6  01AB               	clrf	??___flmul+3
  5803  01E7  0828               	movf	??___flmul,w
  5804  01E8  07B4               	addwf	___flmul@prod,f
  5805  01E9  0829               	movf	??___flmul+1,w
  5806  01EA  1103               	clrz
  5807  01EB  1803               	skipnc
  5808  01EC  3E01               	addlw	1
  5809  01ED  1D03               	btfss	3,2
  5810  01EE  07B5               	addwf	___flmul@prod+1,f
  5811  01EF  082A               	movf	??___flmul+2,w
  5812  01F0  1103               	clrz
  5813  01F1  1803               	skipnc
  5814  01F2  3E01               	addlw	1
  5815  01F3  1D03               	btfss	3,2
  5816  01F4  07B6               	addwf	___flmul@prod+2,f
  5817  01F5  082B               	movf	??___flmul+3,w
  5818  01F6  1103               	clrz
  5819  01F7  1803               	skipnc
  5820  01F8  3E01               	addlw	1
  5821  01F9  1D03               	btfss	3,2
  5822  01FA  07B7               	addwf	___flmul@prod+3,f
  5823  01FB  0822               	movf	___flmul@b+2,w
  5824  01FC  00A8               	movwf	??___flmul
  5825  01FD  0828               	movf	??___flmul,w
  5826  01FE  00F0               	movwf	__Umul8_16@multiplicand
  5827  01FF  0825               	movf	___flmul@a+1,w
  5828  0200  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5829  0205  0871               	movf	?__Umul8_16+1,w
  5830  0206  1283               	bcf	3,5	;RP0=0, select bank0
  5831  0207  1303               	bcf	3,6	;RP1=0, select bank0
  5832  0208  00B9               	movwf	___flmul@temp+1
  5833  0209  0870               	movf	?__Umul8_16,w
  5834  020A  00B8               	movwf	___flmul@temp
  5835  020B  0838               	movf	___flmul@temp,w
  5836  020C  00A8               	movwf	??___flmul
  5837  020D  0839               	movf	___flmul@temp+1,w
  5838  020E  00A9               	movwf	??___flmul+1
  5839  020F  01AA               	clrf	??___flmul+2
  5840  0210  01AB               	clrf	??___flmul+3
  5841  0211  0828               	movf	??___flmul,w
  5842  0212  07B4               	addwf	___flmul@prod,f
  5843  0213  0829               	movf	??___flmul+1,w
  5844  0214  1103               	clrz
  5845  0215  1803               	skipnc
  5846  0216  3E01               	addlw	1
  5847  0217  1D03               	btfss	3,2
  5848  0218  07B5               	addwf	___flmul@prod+1,f
  5849  0219  082A               	movf	??___flmul+2,w
  5850  021A  1103               	clrz
  5851  021B  1803               	skipnc
  5852  021C  3E01               	addlw	1
  5853  021D  1D03               	btfss	3,2
  5854  021E  07B6               	addwf	___flmul@prod+2,f
  5855  021F  082B               	movf	??___flmul+3,w
  5856  0220  1103               	clrz
  5857  0221  1803               	skipnc
  5858  0222  3E01               	addlw	1
  5859  0223  1D03               	btfss	3,2
  5860  0224  07B7               	addwf	___flmul@prod+3,f
  5861  0225  0822               	movf	___flmul@b+2,w
  5862  0226  00A8               	movwf	??___flmul
  5863  0227  0828               	movf	??___flmul,w
  5864  0228  00F0               	movwf	__Umul8_16@multiplicand
  5865  0229  0826               	movf	___flmul@a+2,w
  5866  022A  120A  158A  2292  120A  118A  	fcall	__Umul8_16
  5867  022F  0871               	movf	?__Umul8_16+1,w
  5868  0230  1283               	bcf	3,5	;RP0=0, select bank0
  5869  0231  1303               	bcf	3,6	;RP1=0, select bank0
  5870  0232  00B9               	movwf	___flmul@temp+1
  5871  0233  0870               	movf	?__Umul8_16,w
  5872  0234  00B8               	movwf	___flmul@temp
  5873  0235  0838               	movf	___flmul@temp,w
  5874  0236  00A8               	movwf	??___flmul
  5875  0237  0839               	movf	___flmul@temp+1,w
  5876  0238  00A9               	movwf	??___flmul+1
  5877  0239  01AA               	clrf	??___flmul+2
  5878  023A  01AB               	clrf	??___flmul+3
  5879  023B  3008               	movlw	8
  5880  023C                     u261_25:	
  5881  023C  1003               	clrc
  5882  023D  0DA8               	rlf	??___flmul,f
  5883  023E  0DA9               	rlf	??___flmul+1,f
  5884  023F  0DAA               	rlf	??___flmul+2,f
  5885  0240  0DAB               	rlf	??___flmul+3,f
  5886  0241  3EFF               	addlw	-1
  5887  0242  1D03               	skipz
  5888  0243  2A3C               	goto	u261_25
  5889  0244  0828               	movf	??___flmul,w
  5890  0245  07B4               	addwf	___flmul@prod,f
  5891  0246  0829               	movf	??___flmul+1,w
  5892  0247  1103               	clrz
  5893  0248  1803               	skipnc
  5894  0249  3E01               	addlw	1
  5895  024A  1D03               	btfss	3,2
  5896  024B  07B5               	addwf	___flmul@prod+1,f
  5897  024C  082A               	movf	??___flmul+2,w
  5898  024D  1103               	clrz
  5899  024E  1803               	skipnc
  5900  024F  3E01               	addlw	1
  5901  0250  1D03               	btfss	3,2
  5902  0251  07B6               	addwf	___flmul@prod+2,f
  5903  0252  082B               	movf	??___flmul+3,w
  5904  0253  1103               	clrz
  5905  0254  1803               	skipnc
  5906  0255  3E01               	addlw	1
  5907  0256  1D03               	btfss	3,2
  5908  0257  07B7               	addwf	___flmul@prod+3,f
  5909  0258  082E               	movf	___flmul@grs,w
  5910  0259  00A8               	movwf	??___flmul
  5911  025A  082F               	movf	___flmul@grs+1,w
  5912  025B  00A9               	movwf	??___flmul+1
  5913  025C  0830               	movf	___flmul@grs+2,w
  5914  025D  00AA               	movwf	??___flmul+2
  5915  025E  0831               	movf	___flmul@grs+3,w
  5916  025F  00AB               	movwf	??___flmul+3
  5917  0260  3018               	movlw	24
  5918  0261                     u263_25:	
  5919  0261  1003               	clrc
  5920  0262  0CAB               	rrf	??___flmul+3,f
  5921  0263  0CAA               	rrf	??___flmul+2,f
  5922  0264  0CA9               	rrf	??___flmul+1,f
  5923  0265  0CA8               	rrf	??___flmul,f
  5924  0266  3EFF               	addlw	-1
  5925  0267  1D03               	skipz
  5926  0268  2A61               	goto	u263_25
  5927  0269  0828               	movf	??___flmul,w
  5928  026A  07B4               	addwf	___flmul@prod,f
  5929  026B  0829               	movf	??___flmul+1,w
  5930  026C  1103               	clrz
  5931  026D  1803               	skipnc
  5932  026E  3E01               	addlw	1
  5933  026F  1D03               	btfss	3,2
  5934  0270  07B5               	addwf	___flmul@prod+1,f
  5935  0271  082A               	movf	??___flmul+2,w
  5936  0272  1103               	clrz
  5937  0273  1803               	skipnc
  5938  0274  3E01               	addlw	1
  5939  0275  1D03               	btfss	3,2
  5940  0276  07B6               	addwf	___flmul@prod+2,f
  5941  0277  082B               	movf	??___flmul+3,w
  5942  0278  1103               	clrz
  5943  0279  1803               	skipnc
  5944  027A  3E01               	addlw	1
  5945  027B  1D03               	btfss	3,2
  5946  027C  07B7               	addwf	___flmul@prod+3,f
  5947  027D  3008               	movlw	8
  5948  027E  00A8               	movwf	??___flmul
  5949  027F                     u265_25:	
  5950  027F  1003               	clrc
  5951  0280  0DAE               	rlf	___flmul@grs,f
  5952  0281  0DAF               	rlf	___flmul@grs+1,f
  5953  0282  0DB0               	rlf	___flmul@grs+2,f
  5954  0283  0DB1               	rlf	___flmul@grs+3,f
  5955  0284  0BA8               	decfsz	??___flmul,f
  5956  0285  2A7F               	goto	u265_25
  5957  0286  0833               	movf	___flmul@bexp,w
  5958  0287  0732               	addwf	___flmul@aexp,w
  5959  0288  00A8               	movwf	??___flmul
  5960  0289  01A9               	clrf	??___flmul+1
  5961  028A  0DA9               	rlf	??___flmul+1,f
  5962  028B  0828               	movf	??___flmul,w
  5963  028C  3E82               	addlw	130
  5964  028D  00B8               	movwf	___flmul@temp
  5965  028E  0829               	movf	??___flmul+1,w
  5966  028F  1803               	skipnc
  5967  0290  3E01               	addlw	1
  5968  0291  3EFF               	addlw	255
  5969  0292  00B9               	movwf	___flmul@temp+1
  5970  0293                     i1l2385:	
  5971  0293  1BB6               	btfsc	___flmul@prod+2,7
  5972  0294  2AB0               	goto	i1l2387
  5973  0295  3001               	movlw	1
  5974  0296  00A8               	movwf	??___flmul
  5975  0297                     u266_25:	
  5976  0297  1003               	clrc
  5977  0298  0DB4               	rlf	___flmul@prod,f
  5978  0299  0DB5               	rlf	___flmul@prod+1,f
  5979  029A  0DB6               	rlf	___flmul@prod+2,f
  5980  029B  0DB7               	rlf	___flmul@prod+3,f
  5981  029C  0BA8               	decfsz	??___flmul,f
  5982  029D  2A97               	goto	u266_25
  5983  029E  1BB1               	btfsc	___flmul@grs+3,7
  5984  029F  1434               	bsf	___flmul@prod,0
  5985  02A0  3001               	movlw	1
  5986  02A1  00A8               	movwf	??___flmul
  5987  02A2                     u268_25:	
  5988  02A2  1003               	clrc
  5989  02A3  0DAE               	rlf	___flmul@grs,f
  5990  02A4  0DAF               	rlf	___flmul@grs+1,f
  5991  02A5  0DB0               	rlf	___flmul@grs+2,f
  5992  02A6  0DB1               	rlf	___flmul@grs+3,f
  5993  02A7  0BA8               	decfsz	??___flmul,f
  5994  02A8  2AA2               	goto	u268_25
  5995  02A9  30FF               	movlw	255
  5996  02AA  07B8               	addwf	___flmul@temp,f
  5997  02AB  1803               	skipnc
  5998  02AC  0AB9               	incf	___flmul@temp+1,f
  5999  02AD  30FF               	movlw	255
  6000  02AE  07B9               	addwf	___flmul@temp+1,f
  6001  02AF  2A93               	goto	i1l2385
  6002  02B0                     i1l2387:	
  6003  02B0  01B2               	clrf	___flmul@aexp
  6004  02B1  1FB1               	btfss	___flmul@grs+3,7
  6005  02B2  2AC9               	goto	i1l2397
  6006  02B3  30FF               	movlw	255
  6007  02B4  052E               	andwf	___flmul@grs,w
  6008  02B5  00A8               	movwf	??___flmul
  6009  02B6  30FF               	movlw	255
  6010  02B7  052F               	andwf	___flmul@grs+1,w
  6011  02B8  00A9               	movwf	??___flmul+1
  6012  02B9  30FF               	movlw	255
  6013  02BA  0530               	andwf	___flmul@grs+2,w
  6014  02BB  00AA               	movwf	??___flmul+2
  6015  02BC  307F               	movlw	127
  6016  02BD  0531               	andwf	___flmul@grs+3,w
  6017  02BE  00AB               	movwf	??___flmul+3
  6018  02BF  082B               	movf	??___flmul+3,w
  6019  02C0  042A               	iorwf	??___flmul+2,w
  6020  02C1  0429               	iorwf	??___flmul+1,w
  6021  02C2  0428               	iorwf	??___flmul,w
  6022  02C3  1903               	skipnz
  6023  02C4  1834               	btfsc	___flmul@prod,0
  6024  02C5  2AC7               	goto	i1l2393
  6025  02C6  2AC9               	goto	i1l2397
  6026  02C7                     i1l2393:	
  6027  02C7  01B2               	clrf	___flmul@aexp
  6028  02C8  0AB2               	incf	___flmul@aexp,f
  6029  02C9                     i1l2397:	
  6030  02C9  0832               	movf	___flmul@aexp,w
  6031  02CA  1903               	btfsc	3,2
  6032  02CB  2AFB               	goto	i1l2407
  6033  02CC  3001               	movlw	1
  6034  02CD  07B4               	addwf	___flmul@prod,f
  6035  02CE  3000               	movlw	0
  6036  02CF  1803               	skipnc
  6037  02D0  3001               	movlw	1
  6038  02D1  07B5               	addwf	___flmul@prod+1,f
  6039  02D2  3000               	movlw	0
  6040  02D3  1803               	skipnc
  6041  02D4  3001               	movlw	1
  6042  02D5  07B6               	addwf	___flmul@prod+2,f
  6043  02D6  3000               	movlw	0
  6044  02D7  1803               	skipnc
  6045  02D8  3001               	movlw	1
  6046  02D9  07B7               	addwf	___flmul@prod+3,f
  6047  02DA  1C37               	btfss	___flmul@prod+3,0
  6048  02DB  2AFB               	goto	i1l2407
  6049  02DC  0834               	movf	___flmul@prod,w
  6050  02DD  00A8               	movwf	??___flmul
  6051  02DE  0835               	movf	___flmul@prod+1,w
  6052  02DF  00A9               	movwf	??___flmul+1
  6053  02E0  0836               	movf	___flmul@prod+2,w
  6054  02E1  00AA               	movwf	??___flmul+2
  6055  02E2  0837               	movf	___flmul@prod+3,w
  6056  02E3  00AB               	movwf	??___flmul+3
  6057  02E4  3001               	movlw	1
  6058  02E5  00AC               	movwf	??___flmul+4
  6059  02E6                     u275_25:	
  6060  02E6  0D2B               	rlf	??___flmul+3,w
  6061  02E7  0CAB               	rrf	??___flmul+3,f
  6062  02E8  0CAA               	rrf	??___flmul+2,f
  6063  02E9  0CA9               	rrf	??___flmul+1,f
  6064  02EA  0CA8               	rrf	??___flmul,f
  6065  02EB  0BAC               	decfsz	??___flmul+4,f
  6066  02EC  2AE6               	goto	u275_25
  6067  02ED  082B               	movf	??___flmul+3,w
  6068  02EE  00B7               	movwf	___flmul@prod+3
  6069  02EF  082A               	movf	??___flmul+2,w
  6070  02F0  00B6               	movwf	___flmul@prod+2
  6071  02F1  0829               	movf	??___flmul+1,w
  6072  02F2  00B5               	movwf	___flmul@prod+1
  6073  02F3  0828               	movf	??___flmul,w
  6074  02F4  00B4               	movwf	___flmul@prod
  6075  02F5  3001               	movlw	1
  6076  02F6  07B8               	addwf	___flmul@temp,f
  6077  02F7  1803               	skipnc
  6078  02F8  0AB9               	incf	___flmul@temp+1,f
  6079  02F9  3000               	movlw	0
  6080  02FA  07B9               	addwf	___flmul@temp+1,f
  6081  02FB                     i1l2407:	
  6082  02FB  0839               	movf	___flmul@temp+1,w
  6083  02FC  3A80               	xorlw	128
  6084  02FD  00FF               	movwf	127
  6085  02FE  3080               	movlw	128
  6086  02FF  027F               	subwf	127,w
  6087  0300  1D03               	skipz
  6088  0301  2B04               	goto	u276_25
  6089  0302  30FF               	movlw	255
  6090  0303  0238               	subwf	___flmul@temp,w
  6091  0304                     u276_25:	
  6092  0304  1C03               	skipc
  6093  0305  2B11               	goto	i1l2411
  6094  0306  307F               	movlw	127
  6095  0307  1283               	bcf	3,5	;RP0=0, select bank0
  6096  0308  1303               	bcf	3,6	;RP1=0, select bank0
  6097  0309  00B7               	movwf	___flmul@prod+3
  6098  030A  3080               	movlw	128
  6099  030B  00B6               	movwf	___flmul@prod+2
  6100  030C  3000               	movlw	0
  6101  030D  00B5               	movwf	___flmul@prod+1
  6102  030E  3000               	movlw	0
  6103  030F  00B4               	movwf	___flmul@prod
  6104  0310  2B41               	goto	i1l936
  6105  0311                     i1l2411:	
  6106  0311  1283               	bcf	3,5	;RP0=0, select bank0
  6107  0312  1303               	bcf	3,6	;RP1=0, select bank0
  6108  0313  0839               	movf	___flmul@temp+1,w
  6109  0314  3A80               	xorlw	128
  6110  0315  00FF               	movwf	127
  6111  0316  3080               	movlw	128
  6112  0317  027F               	subwf	127,w
  6113  0318  1D03               	skipz
  6114  0319  2B1C               	goto	u277_25
  6115  031A  3001               	movlw	1
  6116  031B  0238               	subwf	___flmul@temp,w
  6117  031C                     u277_25:	
  6118  031C  1803               	skipnc
  6119  031D  2B2A               	goto	i1l2417
  6120  031E  3000               	movlw	0
  6121  031F  1283               	bcf	3,5	;RP0=0, select bank0
  6122  0320  1303               	bcf	3,6	;RP1=0, select bank0
  6123  0321  00B7               	movwf	___flmul@prod+3
  6124  0322  3000               	movlw	0
  6125  0323  00B6               	movwf	___flmul@prod+2
  6126  0324  3000               	movlw	0
  6127  0325  00B5               	movwf	___flmul@prod+1
  6128  0326  3000               	movlw	0
  6129  0327  00B4               	movwf	___flmul@prod
  6130  0328  01AD               	clrf	___flmul@sign
  6131  0329  2B41               	goto	i1l936
  6132  032A                     i1l2417:	
  6133  032A  1283               	bcf	3,5	;RP0=0, select bank0
  6134  032B  1303               	bcf	3,6	;RP1=0, select bank0
  6135  032C  0838               	movf	___flmul@temp,w
  6136  032D  00A8               	movwf	??___flmul
  6137  032E  0828               	movf	??___flmul,w
  6138  032F  00B3               	movwf	___flmul@bexp
  6139  0330  30FF               	movlw	255
  6140  0331  05B4               	andwf	___flmul@prod,f
  6141  0332  30FF               	movlw	255
  6142  0333  05B5               	andwf	___flmul@prod+1,f
  6143  0334  307F               	movlw	127
  6144  0335  05B6               	andwf	___flmul@prod+2,f
  6145  0336  3000               	movlw	0
  6146  0337  05B7               	andwf	___flmul@prod+3,f
  6147  0338  1833               	btfsc	___flmul@bexp,0
  6148  0339  17B6               	bsf	___flmul@prod+2,7
  6149  033A  0833               	movf	___flmul@bexp,w
  6150  033B  00A8               	movwf	??___flmul
  6151  033C  1003               	clrc
  6152  033D  0C28               	rrf	??___flmul,w
  6153  033E  00A9               	movwf	??___flmul+1
  6154  033F  0829               	movf	??___flmul+1,w
  6155  0340  00B7               	movwf	___flmul@prod+3
  6156  0341                     i1l936:	
  6157  0341  082D               	movf	___flmul@sign,w
  6158  0342  00A8               	movwf	??___flmul
  6159  0343  0828               	movf	??___flmul,w
  6160  0344  04B7               	iorwf	___flmul@prod+3,f
  6161  0345  0837               	movf	___flmul@prod+3,w
  6162  0346  00A3               	movwf	?___flmul+3
  6163  0347  0836               	movf	___flmul@prod+2,w
  6164  0348  00A2               	movwf	?___flmul+2
  6165  0349  0835               	movf	___flmul@prod+1,w
  6166  034A  00A1               	movwf	?___flmul+1
  6167  034B  0834               	movf	___flmul@prod,w
  6168  034C  00A0               	movwf	?___flmul
  6169  034D  0008               	return
  6170  034E                     __end_of___flmul:	
  6171                           
  6172                           	psect	text25
  6173  0A92                     __ptext25:	
  6174 ;; *************** function __Umul8_16 *****************
  6175 ;; Defined at:
  6176 ;;		line 4 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  multiplier      1    wreg     unsigned char 
  6179 ;;  multiplicand    1    0[COMMON] unsigned char 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  multiplier      1    8[COMMON] unsigned char 
  6182 ;;  word_mpld       2    6[COMMON] unsigned int 
  6183 ;;  product         2    4[COMMON] unsigned int 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  2    0[COMMON] unsigned int 
  6186 ;; Registers used:
  6187 ;;		wreg, status,2, status,0
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6193 ;;      Params:         2       0       0       0       0
  6194 ;;      Locals:         5       0       0       0       0
  6195 ;;      Temps:          2       0       0       0       0
  6196 ;;      Totals:         9       0       0       0       0
  6197 ;;Total ram usage:        9 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		___flmul
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function __Umul8_16
  6208  0A92                     __Umul8_16:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  6212                           ;__Umul8_16@multiplier stored from wreg
  6213  0A92  00F8               	movwf	__Umul8_16@multiplier
  6214  0A93  01F4               	clrf	__Umul8_16@product
  6215  0A94  01F5               	clrf	__Umul8_16@product+1
  6216  0A95  0870               	movf	__Umul8_16@multiplicand,w
  6217  0A96  00F2               	movwf	??__Umul8_16
  6218  0A97  01F3               	clrf	??__Umul8_16+1
  6219  0A98  0872               	movf	??__Umul8_16,w
  6220  0A99  00F6               	movwf	__Umul8_16@word_mpld
  6221  0A9A  0873               	movf	??__Umul8_16+1,w
  6222  0A9B  00F7               	movwf	__Umul8_16@word_mpld+1
  6223  0A9C                     i1l2061:	
  6224  0A9C  1C78               	btfss	__Umul8_16@multiplier,0
  6225  0A9D  2AA4               	goto	i1l981
  6226  0A9E  0876               	movf	__Umul8_16@word_mpld,w
  6227  0A9F  07F4               	addwf	__Umul8_16@product,f
  6228  0AA0  1803               	skipnc
  6229  0AA1  0AF5               	incf	__Umul8_16@product+1,f
  6230  0AA2  0877               	movf	__Umul8_16@word_mpld+1,w
  6231  0AA3  07F5               	addwf	__Umul8_16@product+1,f
  6232  0AA4                     i1l981:	
  6233  0AA4  3001               	movlw	1
  6234  0AA5                     u183_25:	
  6235  0AA5  1003               	clrc
  6236  0AA6  0DF6               	rlf	__Umul8_16@word_mpld,f
  6237  0AA7  0DF7               	rlf	__Umul8_16@word_mpld+1,f
  6238  0AA8  3EFF               	addlw	-1
  6239  0AA9  1D03               	skipz
  6240  0AAA  2AA5               	goto	u183_25
  6241  0AAB  1003               	clrc
  6242  0AAC  0CF8               	rrf	__Umul8_16@multiplier,f
  6243  0AAD  0878               	movf	__Umul8_16@multiplier,w
  6244  0AAE  1D03               	btfss	3,2
  6245  0AAF  2A9C               	goto	i1l2061
  6246  0AB0  0875               	movf	__Umul8_16@product+1,w
  6247  0AB1  00F1               	movwf	?__Umul8_16+1
  6248  0AB2  0874               	movf	__Umul8_16@product,w
  6249  0AB3  00F0               	movwf	?__Umul8_16
  6250  0AB4  0008               	return
  6251  0AB5                     __end_of__Umul8_16:	
  6252  007E                     btemp	set	126	;btemp
  6253  007E                     wtemp0	set	126


Data Sizes:
    Strings     29
    Constant    10
    Data        0
    BSS         141
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     62      79
    BANK1            80     55      77
    BANK3            96      0      51
    BANK2            96      0      51

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_4(CODE[14]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@sVar(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 10
		 -> main@sVar(BANK1[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _SetMotor->___xxtofl
    i1_pwm_set->i1___aldiv
    i1___aldiv->i1___lmul
    ___fltol->___xxtofl
    ___flmul->___xxtofl

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_SetMotor
    _SetMotor->___fltol
    i1_pwm_set->i1___aldiv
    ___fltol->___flmul

Critical Paths under _main in BANK1

    _main->_pwm_set
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _pwm_set->___aldiv
    ___aldiv->___lmul
    _putst->_putch

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    4228
                                             38 BANK1     17    17      0
                           _SetPoint
                             _chkchr
                      _encoders_init
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                     _spi_slave_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    18      5    1538
                                             14 BANK1     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _spi_slave_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2059
                                             28 BANK1     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK1     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     243
                                              2 BANK1      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPoint                                             2     0      2     174
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  7     7      0    5296
                                             55 BANK0      7     7      0
                           _SetMotor
 ---------------------------------------------------------------------------------
 (4) _SetMotor                                            18    18      0    5273
                                             37 BANK0     18    18      0
                            ___flmul
                            ___fltol
                           ___xxtofl
                          _constrain
                          i1_pwm_set
 ---------------------------------------------------------------------------------
 (5) i1_pwm_set                                           10     4      6     963
                                             14 BANK0     10     4      6
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (6) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (6) i1___aldiv                                           15     7      8     352
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _constrain                                           12     0     12     334
                                              0 COMMON    12     0     12
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4     550
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             11     7      4     457
                                             26 BANK0     11     7      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             26    18      8    2721
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetPoint
   _chkchr
   _encoders_init
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _spi_slave_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _SetMotor
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _constrain
     i1_pwm_set
       i1___aldiv
         i1___lmul (ARG)
       i1___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     110       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3E      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     37      4D       7       96.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      33       9       53.1%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      33      11       53.1%
DATA                 0      0     110      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun May 26 22:49:33 2019

                      pc 0002              __CFG_CP$OFF 0000              _SSPSTATbits 0094  
                     l82 0AF0                       l83 0AFE                       fsr 0004  
    __Umul8_16@word_mpld 0076                      l170 0ACD                      l182 0D6C  
                    l350 0677                      l600 0E0E                      l347 061B  
                    _CKE 04A6                      _CKP 00A4                      _GIE 005F  
                    _RB0 0030                      _RC0 0038                      _RA5 002D  
                    _RA6 002E                      _RB5 0035                      _PR2 0092  
           __CFG_CPD$OFF 0000                      _RX9 00C6                      _SMP 04A7  
                    _TX9 04C6                      _ab1 006B                      _isr 0697  
                    fsr0 0004                      indf 0000             __CFG_IESO$ON 0000  
           __CFG_FOSC$EC 0000             ___flmul@aexp 0032             ___flmul@bexp 0033  
           ___flmul@sign 002D             ___flmul@temp 0038             ___flmul@prod 0034  
       _encoder1_counter 00DF             __CFG_LVP$OFF 0000           i1___aldiv@sign 0029  
           ___fltol@exp1 0044                     l2201 0E82                     l2135 0AE2  
                   l3007 0D64                     l2137 0B00                     l2153 07B4  
                   l2251 0B87                     l2157 07CA                     l2253 0B95  
                   l2183 0E2F                     l2175 0E1F                     l2263 0BB6  
                   l2193 0E67                     l2185 0E3F                     l2601 0D55  
                   l2281 0B37                     l2603 0D5A                     l2259 0BAB  
                   l2275 0B1B                     l2197 0E74                     l2277 0B29  
                   l2285 0B42                     l2607 0D5F                     l2529 0A17  
                   l2705 0FB8                     l2571 0B4A                     l2707 0F35  
        ?_spi_slave_init 0070                     l2565 0B67                     l2709 0FFB  
                   l2663 0F55                     l2569 0B76                     l2691 0FA5  
                   l2597 0CFE                     l2685 0F84                     l2669 0F6B  
                   l2941 05EE                     l2925 05B9                     l2679 0F82  
                   l2697 0FB4                     l2957 0650                     ?_isr 0070  
                   STR_1 081E                     STR_2 0829                     STR_3 0829  
                   STR_4 0810                     _ANS4 0C44                     _ANS8 0C48  
                   _ANS9 0C49                     _BRGH 04C2                     _T0IE 005D  
                   _CREN 00C4                     _T0IF 005A                     _FERR 00C2  
                   u3100 0D41                     _IOCB 0096                     u2125 0E33  
                   u3101 0D42                     u3102 0D47                     u3103 0D48  
                   u2145 0E41                     u2065 07CC                     u2305 0B8A  
                   u2155 0E56                     u2075 07D4                     u2165 0E68  
                   u2325 0B96                     u2405 0B38                     u2335 0BA2  
                   u2345 0BAC                     u3155 0A7B                     u3083 0CFC  
                   u2375 0B1E                     u3185 0F9B                     u2395 0B2F  
                   u3545 05F9                     u3555 0626                     _PEIE 005E  
                   u3565 0682                     _RBIE 005B                     _RBIF 0058  
                   _RCIE 0465                     _RCIF 0065                     _OERR 00C1  
                   _TMR0 0001                     _WCOL 00A7                     _SPEN 00C7  
                   _SREN 00C5                     _TXIE 0464                     _TXEN 04C5  
                   _TXIF 0064                     _SYNC 04C4             __CFG_WRT$OFF 0000  
          __CFG_FCMEN$ON 0000                     _main 055C                     btemp 007E  
                   start 0012            __CFG_MCLRE$ON 0000                    ??_isr 0057  
          ___fltol@sign1 0043          __end_of___aldiv 0E8B                    ?_main 0070  
                  _ANS10 0C4A                    _ANS11 0C4B                    _ANS12 0C4C  
                  _ANS13 0C4D            __CFG_WDTE$OFF 0000          __end_of___flmul 034E  
        __end_of___fltol 0C67          __end_of___lwdiv 0BBB                    i1l182 0CE7  
                  i1l334 079F                    i1l600 0D7F          __end_of___lwmod 0B47  
                  i1l291 050A                    i1l728 0C49                    i1l936 0341  
                  i1l962 0EA8                    i1l981 0AA4                    i1l975 0EFE  
                  i1l976 0F08                    i1l968 0EE8                    _RCREG 001A  
                  _SPBRG 0099                    _PORTB 0006                    _SSPEN 00A5  
                  _SSPIF 0063                    _TXREG 0019      ___lmul@multiplicand 00A4  
        ??_encoders_init 00A0          __end_of_dpowers 0810                    _dummy 006D  
                  _putch 0ADF                    _putst 0B47           __CFG_BOREN$OFF 0000  
       __end_ofi1___lmul 0BFA                    pclath 000A          __end_of_pwm_set 0D6D  
                  status 0003       __size_ofi1___aldiv 008F                    wtemp0 007E  
        __end_of_sprintf 1000          __initialization 0015             __end_of_main 0697  
    i1___lmul@multiplier 0070                   ??_main 00C6       __size_ofi1_pwm_set 0081  
       __end_of_SetMotor 055C         __end_of_SetPoint 0A2D                   _CCPR1L 0015  
                 _CCPR2L 001B                   ?_putch 0070                   ?_putst 0070  
                 i1l2103 0DA0                   i1l2121 0DF3                   i1l2113 0DD8  
                 i1l2105 0DB0                   i1l2211 0C0E                   i1l2061 0A9C  
                 i1l2117 0DE5                   i1l2303 0056                   i1l2207 0C05  
                 i1l2321 007B                   i1l2305 0058                   i1l2073 0BC3  
                 i1l3009 0CDF                   i1l2411 0311                   i1l2323 007D  
                 i1l2307 0060                   i1l2227 0C35                   i1l2333 0093  
                 i1l2325 0085                   i1l2237 0C58                   i1l2229 0C45  
                 i1l2077 0BD9                   i1l2407 02FB                   i1l2095 0D90  
                 i1l2417 032A                   i1l2441 0EB7                   i1l2435 0EA0  
                 i1l2445 0EBB                   i1l2455 0EFC                   i1l2447 0ECD  
                 i1l2393 02C7                   i1l2385 0293                   i1l2457 0EED  
                 i1l2481 0CD4                   i1l2801 06B7                   i1l2387 02B0  
                 i1l2483 0CD7                   i1l2397 02C9                   i1l2469 0F25  
                 i1l2477 0C7D                   i1l2821 06EE                   i1l2813 06D9  
                 i1l2487 0CDA                   i1l2639 0539                   i1l2807 06D0  
                 i1l2833 0700                   i1l2825 06F3                   u203_23 0A3F  
                 i1l2835 0710                   i1l2853 0759                   i1l2845 072B  
                 i1l2829 06FC                   i1l2861 077F                   i1l2839 0726  
                 i1l2849 0743                   i1l2859 0771                   u220_25 0C17  
                 u311_21 0376                   u311_22 0379                   u311_23 0380  
                 u311_24 0383                   u223_25 0C36                   u311_25 038A  
                 u311_26 038D                   u312_20 03D3                   u312_21 03D4  
                 u312_22 03D9                   u312_23 03DA                   u313_25 04E2  
                 u226_25 0C4E                   u261_25 023C                   u341_25 06AD  
                 u254_25 0143                   u183_25 0AA5                   u263_25 0261  
                 u344_25 06E3                   u265_25 027F                   u257_25 01A0  
                 u193_25 0DA4                   u266_25 0297                   u290_25 0F10  
                 u282_25 0EC4                   u275_25 02E6                   u195_25 0DB2  
                 u187_25 0BDB                   u276_25 0304                   u268_25 02A2  
                 u284_25 0EE0                   u196_25 0DC7                   u188_25 0BE3  
                 u277_25 031C                   u197_25 0DD9                   u294_23 0C7B  
                 u286_25 0EF5                   u296_20 0CC0                   u296_21 0CC1  
                 u296_22 0CC6                   u296_23 0CC7                   _TMR1IE 0460  
                 _TRISB0 0430                   _TRISB1 0431                   _TRISB2 0432  
                 _TRISC0 0438                   _TRISC1 0439                   _TRISA5 042D  
                 _TRISB3 0433                   _TRISC2 043A                   _TRISA6 042E  
                 _TRISB4 0434                   _TRISB5 0435                   _TRISC3 043B  
                 _TRISC4 043C                   _TRISB7 0437                   _TRISC5 043D  
                 _SSPBUF 0013         __end_of___xxtofl 0F2E           __CFG_PWRTE$OFF 0000  
           ?_serial_init 0070                   ___lmul 07AA                ??___aldiv 00B5  
              ??___flmul 0028                ??___fltol 003E                   _chkchr 0A11  
              ??___lwdiv 00A4                ??___lwmod 00AC                   _state1 006C  
      __end_ofi1___aldiv 0DFC       __size_of__Umul8_16 0023                   saved_w 007E  
       __end_of_pwm_init 0ADF                   putch@c 00A1                ??_pwm_set 00C2  
              ??_sprintf 00B3             ___xxtofl@arg 007A             ___xxtofl@exp 0079  
           ___xxtofl@val 0070  __end_of__initialization 0035        __end_ofi1_pwm_set 0CE8  
             ___fltol@f1 003A           __pcstackCOMMON 0070            __end_of_putch 0B13  
          __end_of_putst 0B7D                ?i1___lmul 0070           _OPTION_REGbits 0081  
       ??_spi_slave_init 00A0              SetMotor@err 0053        i1___aldiv@divisor 0020  
                ??_putch 00A0        i1___aldiv@counter 0028                  ??_putst 00A2  
             __pbssBANK0 005E               __pbssBANK1 00D7               __pbssBANK2 0110  
             __pbssBANK3 0190       __size_of_constrain 0015                ?_SetMotor 0070  
              ?_SetPoint 00A0        __end_of__Umul8_16 0AB5               __pmaintext 055C  
                ?___lmul 00A0                  ?_chkchr 0070               __pintentry 0004  
         ___lmul@product 00A9               ??i1___lmul 0078                ?___xxtofl 0070  
          ?_resetCounter 0070               __stringtab 0800               ??_SetMotor 0045  
             ??_SetPoint 00A2                  ___aldiv 0DFC          __size_of___lmul 0041  
                ___flmul 0039                  ___fltol 0BFA                ?_pwm_init 0070  
                ___lwdiv 0B7D                  ___lwmod 0B13          __size_of_chkchr 0008  
   __size_of_serial_init 0018        __end_of_constrain 0A42                  __ptext1 0F2E  
                __ptext2 0B13                  __ptext3 0B7D                  __ptext4 0A5A  
                __ptext5 0A42                  __ptext6 07EB                  __ptext7 0CE8  
                __ptext8 07AA                  __ptext9 0DFC                  _dpowers 0806  
              _T2CONbits 0012             __size_of_isr 0113               ??___xxtofl 0074  
       ___aldiv@dividend 00B1                  _samples 0068           ??_resetCounter 00A0  
                _pwm_set 0CE8                  _sprintf 0F2E                  clrloop0 0A1A  
   end_of_initialization 0035    __end_of_encoders_init 0A92                  isr@tick 00E3  
       ___aldiv@quotient 00B8               ??_pwm_init 00A0         SetMotor@last_err 00D7  
       SetMotor@integral 00E9            ___xxtofl@sign 0078                i1___aldiv 0D6D  
     SetMotor@D_Response 004F              ___flmul@grs 002E              _CCP1CONbits 0017  
            _CCP2CONbits 001D                i1_pwm_set 0C67           __end_of___lmul 07EB  
     SetMotor@I_Response 0051           __end_of_chkchr 0A19         _delayus_variable 006E  
  i1___lmul@multiplicand 0074        __size_ofi1___lmul 003F      start_initialization 0015  
             ?i1___aldiv 0020              __end_of_isr 07AA             SetMotor@resp 0055  
             ?i1_pwm_set 002E     __end_of_resetCounter 0800                 ??___lmul 00A8  
      __size_of_SetMotor 020E        __size_of_SetPoint 000C       SetMotor@P_Response 004D  
               ??_chkchr 00A0                __Umul8_16 0A92        pwm_set@duty_cycle 00BE  
     i1___aldiv@dividend 0024                ___flmul@a 0024                ___flmul@b 0020  
              ___latbits 0002            __pcstackBANK0 0020            __pcstackBANK1 00A0  
      __size_of___xxtofl 00A3         i1___lmul@product 0079              sprintf@flag 00B7  
     i1___aldiv@quotient 002A              sprintf@prec 00B8         ___lwdiv@dividend 00A2  
               ?___aldiv 00AD                 ?___flmul 0020                 ?___fltol 003A  
             ?__Umul8_16 0070                 ?___lwdiv 00A0                 ?___lwmod 00A8  
              __pstrings 0800        __size_of_pwm_init 002A           pwm_set@channel 00BC  
              _constrain 0A2D              ??i1___aldiv 007D         ___lwdiv@quotient 00A5  
               ?_pwm_set 00BC                 ?_sprintf 00AE           __size_of_putch 0034  
         __size_of_putst 0036          ___aldiv@divisor 00AD         main@serialIn_346 00D6  
      interrupt_function 0004          ___aldiv@counter 00B6  __size_of_spi_slave_init 001A  
              clear_ram0 0A19                 _PIR1bits 000C            ??_serial_init 00A0  
            ??i1_pwm_set 0034                _set_point 00DB                _motor_pos 0062  
               i1___lmul 0BBB              __stringbase 0805               ?_constrain 0070  
        SetPoint@new_val 00A0        ___lmul@multiplier 00A0    __size_of_resetCounter 0015  
               _SetMotor 034E                 _SetPoint 0A21              ??__Umul8_16 0072  
       __size_of___aldiv 008F         __size_of___flmul 0315         __size_of___fltol 006D  
       __size_of___lwdiv 003E         __size_of___lwmod 0034   __size_of_encoders_init 001E  
    __end_of_serial_init 0A5A       __end_of__stringtab 0806               sprintf@val 00B9  
               ___xxtofl 0E8B          ___lwdiv@divisor 00A0          ___lwdiv@counter 00A7  
               __ptext10 0AB5                 __ptext11 0B47                 __ptext20 0D6D  
               __ptext12 0ADF                 __ptext21 0A2D                 __ptext13 0A74  
               __ptext22 0E8B                 __ptext14 0A11                 __ptext23 0BFA  
               __ptext15 0A21                 __ptext24 0039                 __ptext16 0697  
               __ptext25 0A92                 __ptext17 034E                 __ptext18 0C67  
               __ptext19 0BBB             _resetCounter 07EB        __CFG_BOR4V$BOR21V 0000  
               _com_time 0066         __size_of_pwm_set 0085         __size_of_sprintf 00D2  
               _last_pos 005E            __size_of_main 013B                 _sampling 006A  
               _pos_log1 0190                 _pos_log2 0110       SetMotor@derivative 00E5  
               _pwm_init 0AB5                 main@sVar 00CC              ??_constrain 007C  
               isr@portB 005D          constrain@lLimit 0074          constrain@uLimit 0078  
               intlevel1 0000                sprintf@ap 00B6                sprintf@sp 00BB  
          _encoders_init 0A74           _spi_slave_init 0A5A         ___lwmod@dividend 00AA  
              stringcode 0800              _serial_init 0A42   __Umul8_16@multiplicand 0070  
         constrain@value 0070                 sprintf@c 00BC                 sprintf@f 00AE  
               putst@str 00A3          ___lwmod@divisor 00A8          ___lwmod@counter 00AD  
               stringdir 0800                 stringtab 0800             ___aldiv@sign 00B7  
 __end_of_spi_slave_init 0A74      i1pwm_set@duty_cycle 0030           ?_encoders_init 0070  
       i1pwm_set@channel 002E     __Umul8_16@multiplier 0078               _SSPCONbits 0014  
      __Umul8_16@product 0074  
