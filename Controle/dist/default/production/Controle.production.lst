

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu May 23 16:41:41 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.05
    43                           ; Generated 20/12/2018 GMT
    44                           ; 
    45                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F886 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  000E                     	;# 
    91  000F                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0017                     	;# 
   101  0018                     	;# 
   102  0019                     	;# 
   103  001A                     	;# 
   104  001B                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  001D                     	;# 
   108  001E                     	;# 
   109  001F                     	;# 
   110  0081                     	;# 
   111  0085                     	;# 
   112  0086                     	;# 
   113  0087                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  008F                     	;# 
   119  0090                     	;# 
   120  0091                     	;# 
   121  0092                     	;# 
   122  0093                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0094                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  009F                     	;# 
   137  0105                     	;# 
   138  0107                     	;# 
   139  0108                     	;# 
   140  0109                     	;# 
   141  010C                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  0185                     	;# 
   147  0187                     	;# 
   148  0188                     	;# 
   149  0189                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  0087                     	;# 
   190  0089                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  008F                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  0105                     	;# 
   214  0107                     	;# 
   215  0108                     	;# 
   216  0109                     	;# 
   217  010C                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  0185                     	;# 
   223  0187                     	;# 
   224  0188                     	;# 
   225  0189                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  000E                     	;# 
   243  000F                     	;# 
   244  0010                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0014                     	;# 
   249  0015                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001D                     	;# 
   260  001E                     	;# 
   261  001F                     	;# 
   262  0081                     	;# 
   263  0085                     	;# 
   264  0086                     	;# 
   265  0087                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000E                     	;# 
   319  000F                     	;# 
   320  0010                     	;# 
   321  0011                     	;# 
   322  0012                     	;# 
   323  0013                     	;# 
   324  0014                     	;# 
   325  0015                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  0081                     	;# 
   339  0085                     	;# 
   340  0086                     	;# 
   341  0087                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  000E                     	;# 
   394  000E                     	;# 
   395  000F                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0013                     	;# 
   400  0014                     	;# 
   401  0015                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  001D                     	;# 
   412  001E                     	;# 
   413  001F                     	;# 
   414  0081                     	;# 
   415  0085                     	;# 
   416  0086                     	;# 
   417  0087                     	;# 
   418  0089                     	;# 
   419  008C                     	;# 
   420  008D                     	;# 
   421  008E                     	;# 
   422  008F                     	;# 
   423  0090                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0093                     	;# 
   428  0093                     	;# 
   429  0094                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0098                     	;# 
   434  0099                     	;# 
   435  009A                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  0105                     	;# 
   442  0107                     	;# 
   443  0108                     	;# 
   444  0109                     	;# 
   445  010C                     	;# 
   446  010C                     	;# 
   447  010D                     	;# 
   448  010E                     	;# 
   449  010F                     	;# 
   450  0185                     	;# 
   451  0187                     	;# 
   452  0188                     	;# 
   453  0189                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456                           
   457                           	psect	strings
   458  0000'                    __pstrings:	
   459  0000'                    stringtab:	
   460  0000'                    __stringtab:	
   461  0000'                    stringcode:	
   462                           ;	String table - string pointers are 1 byte each
   463                           
   464  0000'                    stringdir:	
   465  0000' 3000'              	movlw	high stringdir
   466  0001' 008A               	movwf	10
   467  0002' 0804               	movf	4,w
   468  0003' 0A84               	incf	4,f
   469  0004' 0782               	addwf	2,f
   470  0005'                    __stringbase:	
   471  0005' 3400               	retlw	0
   472  0006'                    __end_of__stringtab:	
   473  0006'                    _dpowers:	
   474  0006' 3401               	retlw	1
   475  0007' 3400               	retlw	0
   476  0008' 340A               	retlw	10
   477  0009' 3400               	retlw	0
   478  000A' 3464               	retlw	100
   479  000B' 3400               	retlw	0
   480  000C' 34E8               	retlw	232
   481  000D' 3403               	retlw	3
   482  000E' 3410               	retlw	16
   483  000F' 3427               	retlw	39
   484  0010'                    __end_of_dpowers:	
   485  0006                     _PORTB	set	6
   486  0001                     _TMR0	set	1
   487  0012                     _T2CONbits	set	18
   488  000C                     _PIR1bits	set	12
   489  001B                     _CCPR2L	set	27
   490  0015                     _CCPR1L	set	21
   491  001D                     _CCP2CONbits	set	29
   492  0017                     _CCP1CONbits	set	23
   493  0019                     _TXREG	set	25
   494  001A                     _RCREG	set	26
   495  005F                     _GIE	set	95
   496  005E                     _PEIE	set	94
   497  0035                     _RB5	set	53
   498  0058                     _RBIF	set	88
   499  005B                     _RBIE	set	91
   500  005A                     _T0IF	set	90
   501  005D                     _T0IE	set	93
   502  002E                     _RA6	set	46
   503  002D                     _RA5	set	45
   504  0065                     _RCIF	set	101
   505  0064                     _TXIF	set	100
   506  00C2                     _FERR	set	194
   507  00C1                     _OERR	set	193
   508  00C6                     _RX9	set	198
   509  00C5                     _SREN	set	197
   510  00C4                     _CREN	set	196
   511  00C7                     _SPEN	set	199
   512  0096                     _IOCB	set	150
   513  0081                     _OPTION_REGbits	set	129
   514  0092                     _PR2	set	146
   515  0099                     _SPBRG	set	153
   516  0460                     _TMR1IE	set	1120
   517  0434                     _TRISB4	set	1076
   518  0433                     _TRISB3	set	1075
   519  0432                     _TRISB2	set	1074
   520  0431                     _TRISB1	set	1073
   521  0437                     _TRISB7	set	1079
   522  0435                     _TRISB5	set	1077
   523  042E                     _TRISA6	set	1070
   524  042D                     _TRISA5	set	1069
   525  043A                     _TRISC2	set	1082
   526  0439                     _TRISC1	set	1081
   527  04C5                     _TXEN	set	1221
   528  04C6                     _TX9	set	1222
   529  0465                     _RCIE	set	1125
   530  0464                     _TXIE	set	1124
   531  04C4                     _SYNC	set	1220
   532  04C2                     _BRGH	set	1218
   533  0C4B                     _ANS11	set	3147
   534  0C48                     _ANS8	set	3144
   535  0C49                     _ANS9	set	3145
   536  0C4A                     _ANS10	set	3146
   537  0C4D                     _ANS13	set	3149
   538  0C44                     _ANS4	set	3140
   539  0010'                    STR_4:	
   540  0010' 3446               	retlw	70	;'F'
   541  0011' 3469               	retlw	105	;'i'
   542  0012' 346D               	retlw	109	;'m'
   543  0013' 3420               	retlw	32	;' '
   544  0014' 3464               	retlw	100	;'d'
   545  0015' 346F               	retlw	111	;'o'
   546  0016' 3420               	retlw	32	;' '
   547  0017' 3474               	retlw	116	;'t'
   548  0018' 3465               	retlw	101	;'e'
   549  0019' 3473               	retlw	115	;'s'
   550  001A' 3474               	retlw	116	;'t'
   551  001B' 3465               	retlw	101	;'e'
   552  001C' 3420               	retlw	32	;' '
   553  001D' 3400               	retlw	0
   554  001E'                    STR_1:	
   555  001E' 344B               	retlw	75	;'K'
   556  001F' 3470               	retlw	112	;'p'
   557  0020' 343A               	retlw	58	;':'
   558  0021' 3420               	retlw	32	;' '
   559  0022' 3425               	retlw	37	;'%'
   560  0023' 3464               	retlw	100	;'d'
   561  0024' 3420               	retlw	32	;' '
   562  0025' 342D               	retlw	45	;'-'
   563  0026' 343E               	retlw	62	;'>'
   564  0027' 3420               	retlw	32	;' '
   565  0028' 3400               	retlw	0
   566  0029'                    STR_2:	
   567  0029' 3425               	retlw	37	;'%'
   568  002A' 3464               	retlw	100	;'d'
   569  002B' 3420               	retlw	32	;' '
   570  002C' 3400               	retlw	0
   571  0029'                    
   572                           ; #config settings
   573  0000                     
   574                           	psect	cinit
   575  0000'                    start_initialization:	
   576  0000'                    __initialization:	
   577                           
   578                           ; Clear objects allocated to BANK1
   579  0000' 1383               	bcf	3,7	;select IRP bank0
   580  0001' 3000'              	movlw	low __pbssBANK1
   581  0002' 0084               	movwf	4
   582  0003' 3000'              	movlw	low (__pbssBANK1+25)
   583  0004' 120A' 118A' 2000' 120A' 118A' 	fcall	clear_ram0
   584                           
   585                           ; Clear objects allocated to BANK3
   586  0009' 1783               	bsf	3,7	;select IRP bank2
   587  000A' 3000'              	movlw	low __pbssBANK3
   588  000B' 0084               	movwf	4
   589  000C' 3000'              	movlw	low (__pbssBANK3+83)
   590  000D' 120A' 118A' 2000' 120A' 118A' 	fcall	clear_ram0
   591                           
   592                           ; Clear objects allocated to BANK2
   593  0012' 3000'              	movlw	low __pbssBANK2
   594  0013' 0084               	movwf	4
   595  0014' 3000'              	movlw	low (__pbssBANK2+71)
   596  0015' 120A' 118A' 2000'  	fcall	clear_ram0
   597  0018'                    end_of_initialization:	
   598                           ;End of C runtime variable initialization code
   599                           
   600  0018'                    __end_of__initialization:	
   601  0018' 0183               	clrf	3
   602  0019' 120A' 118A' 2800'  	ljmp	_main	;jump to C main() function
   603                           
   604                           	psect	bssBANK1
   605  0000'                    __pbssBANK1:	
   606  0000'                    _last_pos:	
   607  0000'                    	ds	4
   608  0004'                    _set_point:	
   609  0004'                    	ds	4
   610  0008'                    _motor_pos:	
   611  0008'                    	ds	4
   612  000C'                    _encoder1_counter:	
   613  000C'                    	ds	4
   614  0010'                    isr@tick:	
   615  0010'                    	ds	2
   616  0012'                    _samples:	
   617  0012'                    	ds	2
   618  0014'                    _sampling:	
   619  0014'                    	ds	1
   620  0015'                    _ab1:	
   621  0015'                    	ds	1
   622  0016'                    _state1:	
   623  0016'                    	ds	1
   624  0017'                    _dummy:	
   625  0017'                    	ds	1
   626  0018'                    _delayus_variable:	
   627  0018'                    	ds	1
   628                           
   629                           	psect	bssBANK3
   630  0000'                    __pbssBANK3:	
   631  0000'                    _pos_log1:	
   632  0000'                    	ds	71
   633  0047'                    SetMotor@last_err:	
   634  0047'                    	ds	4
   635  004B'                    SetMotor@derivative:	
   636  004B'                    	ds	4
   637  004F'                    SetMotor@integral:	
   638  004F'                    	ds	4
   639                           
   640                           	psect	bssBANK2
   641  0000'                    __pbssBANK2:	
   642  0000'                    _pos_log2:	
   643  0000'                    	ds	71
   644                           
   645                           	psect	clrtext
   646  0000'                    clear_ram0:	
   647                           ;	Called with FSR containing the base address, and
   648                           ;	W with the last address+1
   649                           
   650  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
   651  0001'                    clrloop0:	
   652  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
   653  0002' 0A84               	incf	4,f	;increment pointer
   654  0003' 0604               	xorwf	4,w	;XOR with final address
   655  0004' 1903               	btfsc	3,2	;have we reached the end yet?
   656  0005' 3400               	retlw	0	;all done for this memory range, return
   657  0006' 0604               	xorwf	4,w	;XOR again to restore value
   658  0007' 2800'              	goto	clrloop0	;do the next byte
   659                           
   660                           	psect	cstackBANK1
   661  0000'                    __pcstackBANK1:	
   662  0000'                    ??_serial_init:	
   663  0000'                    ??_putch:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0000'                    ??_chkchr:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0000'                    ??_pwm_init:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0000'                    ?_SetPoint:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0000'                    ??_resetCounter:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0000'                    ??_encoders_init:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0000'                    ?___lwdiv:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0000'                    ?___lmul:	
   685                           ; 2 bytes @ 0x0
   686                           
   687  0000'                    SetPoint@new_val:	
   688                           ; 4 bytes @ 0x0
   689                           
   690  0000'                    ___lwdiv@divisor:	
   691                           ; 2 bytes @ 0x0
   692                           
   693  0000'                    ___lmul@multiplier:	
   694                           ; 2 bytes @ 0x0
   695                           
   696                           
   697                           ; 4 bytes @ 0x0
   698  0000'                    	ds	1
   699  0001'                    putch@c:	
   700                           
   701                           ; 1 bytes @ 0x1
   702  0001'                    	ds	1
   703  0002'                    ??_putst:	
   704  0002'                    ??_SetPoint:	
   705                           ; 1 bytes @ 0x2
   706                           
   707  0002'                    ___lwdiv@dividend:	
   708                           ; 1 bytes @ 0x2
   709                           
   710                           
   711                           ; 2 bytes @ 0x2
   712  0002'                    	ds	1
   713  0003'                    putst@str:	
   714                           
   715                           ; 1 bytes @ 0x3
   716  0003'                    	ds	1
   717  0004'                    ??___lwdiv:	
   718  0004'                    ___lmul@multiplicand:	
   719                           ; 1 bytes @ 0x4
   720                           
   721                           
   722                           ; 4 bytes @ 0x4
   723  0004'                    	ds	1
   724  0005'                    ___lwdiv@quotient:	
   725                           
   726                           ; 2 bytes @ 0x5
   727  0005'                    	ds	2
   728  0007'                    ___lwdiv@counter:	
   729                           
   730                           ; 1 bytes @ 0x7
   731  0007'                    	ds	1
   732  0008'                    ??___lmul:	
   733  0008'                    ?___lwmod:	
   734                           ; 1 bytes @ 0x8
   735                           
   736  0008'                    ___lwmod@divisor:	
   737                           ; 2 bytes @ 0x8
   738                           
   739                           
   740                           ; 2 bytes @ 0x8
   741  0008'                    	ds	1
   742  0009'                    ___lmul@product:	
   743                           
   744                           ; 4 bytes @ 0x9
   745  0009'                    	ds	1
   746  000A'                    ___lwmod@dividend:	
   747                           
   748                           ; 2 bytes @ 0xA
   749  000A'                    	ds	2
   750  000C'                    ??___lwmod:	
   751                           
   752                           ; 1 bytes @ 0xC
   753  000C'                    	ds	1
   754  000D'                    ?___aldiv:	
   755  000D'                    ___lwmod@counter:	
   756                           ; 4 bytes @ 0xD
   757                           
   758  000D'                    ___aldiv@divisor:	
   759                           ; 1 bytes @ 0xD
   760                           
   761                           
   762                           ; 4 bytes @ 0xD
   763  000D'                    	ds	1
   764  000E'                    ?_sprintf:	
   765  000E'                    sprintf@f:	
   766                           ; 2 bytes @ 0xE
   767                           
   768                           
   769                           ; 1 bytes @ 0xE
   770  000E'                    	ds	3
   771  0011'                    ___aldiv@dividend:	
   772                           
   773                           ; 4 bytes @ 0x11
   774  0011'                    	ds	2
   775  0013'                    ??_sprintf:	
   776                           
   777                           ; 1 bytes @ 0x13
   778  0013'                    	ds	2
   779  0015'                    ??___aldiv:	
   780                           
   781                           ; 1 bytes @ 0x15
   782  0015'                    	ds	1
   783  0016'                    sprintf@ap:	
   784  0016'                    ___aldiv@counter:	
   785                           ; 1 bytes @ 0x16
   786                           
   787                           
   788                           ; 1 bytes @ 0x16
   789  0016'                    	ds	1
   790  0017'                    sprintf@flag:	
   791  0017'                    ___aldiv@sign:	
   792                           ; 1 bytes @ 0x17
   793                           
   794                           
   795                           ; 1 bytes @ 0x17
   796  0017'                    	ds	1
   797  0018'                    sprintf@prec:	
   798  0018'                    ___aldiv@quotient:	
   799                           ; 1 bytes @ 0x18
   800                           
   801                           
   802                           ; 4 bytes @ 0x18
   803  0018'                    	ds	1
   804  0019'                    sprintf@val:	
   805                           
   806                           ; 2 bytes @ 0x19
   807  0019'                    	ds	2
   808  001B'                    sprintf@sp:	
   809                           
   810                           ; 1 bytes @ 0x1B
   811  001B'                    	ds	1
   812  001C'                    ?_pwm_set:	
   813  001C'                    sprintf@c:	
   814                           ; 1 bytes @ 0x1C
   815                           
   816  001C'                    pwm_set@channel:	
   817                           ; 1 bytes @ 0x1C
   818                           
   819                           
   820                           ; 2 bytes @ 0x1C
   821  001C'                    	ds	2
   822  001E'                    pwm_set@duty_cycle:	
   823                           
   824                           ; 4 bytes @ 0x1E
   825  001E'                    	ds	4
   826  0022'                    ??_pwm_set:	
   827                           
   828                           ; 1 bytes @ 0x22
   829  0022'                    	ds	4
   830  0026'                    ??_main:	
   831                           
   832                           ; 1 bytes @ 0x26
   833  0026'                    	ds	6
   834  002C'                    main@sVar:	
   835                           
   836                           ; 10 bytes @ 0x2C
   837  002C'                    	ds	10
   838  0036'                    main@serialIn_335:	
   839                           
   840                           ; 1 bytes @ 0x36
   841  0036'                    	ds	1
   842                           
   843                           	psect	cstackCOMMON
   844  0000'                    __pcstackCOMMON:	
   845  0000'                    ?_serial_init:	
   846  0000'                    ?_putch:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0000'                    ?_chkchr:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0000'                    ?_putst:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0000'                    ?_pwm_init:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0000'                    ?_SetMotor:	
   859                           ; 1 bytes @ 0x0
   860                           
   861  0000'                    ?_resetCounter:	
   862                           ; 1 bytes @ 0x0
   863                           
   864  0000'                    ?_isr:	
   865                           ; 1 bytes @ 0x0
   866                           
   867  0000'                    ?_encoders_init:	
   868                           ; 1 bytes @ 0x0
   869                           
   870  0000'                    ?_main:	
   871                           ; 1 bytes @ 0x0
   872                           
   873  0000'                    ?__Umul8_16:	
   874                           ; 1 bytes @ 0x0
   875                           
   876  0000'                    ?_constrain:	
   877                           ; 2 bytes @ 0x0
   878                           
   879  0000'                    ?___xxtofl:	
   880                           ; 4 bytes @ 0x0
   881                           
   882  0000'                    ?i1___lmul:	
   883                           ; 4 bytes @ 0x0
   884                           
   885  0000'                    __Umul8_16@multiplicand:	
   886                           ; 4 bytes @ 0x0
   887                           
   888  0000'                    constrain@value:	
   889                           ; 1 bytes @ 0x0
   890                           
   891  0000'                    ___xxtofl@val:	
   892                           ; 4 bytes @ 0x0
   893                           
   894  0000'                    i1___lmul@multiplier:	
   895                           ; 4 bytes @ 0x0
   896                           
   897                           
   898                           ; 4 bytes @ 0x0
   899  0000'                    	ds	2
   900  0002'                    ??__Umul8_16:	
   901                           
   902                           ; 1 bytes @ 0x2
   903  0002'                    	ds	2
   904  0004'                    ??___xxtofl:	
   905  0004'                    __Umul8_16@product:	
   906                           ; 1 bytes @ 0x4
   907                           
   908  0004'                    constrain@lLimit:	
   909                           ; 2 bytes @ 0x4
   910                           
   911  0004'                    i1___lmul@multiplicand:	
   912                           ; 4 bytes @ 0x4
   913                           
   914                           
   915                           ; 4 bytes @ 0x4
   916  0004'                    	ds	2
   917  0006'                    __Umul8_16@word_mpld:	
   918                           
   919                           ; 2 bytes @ 0x6
   920  0006'                    	ds	2
   921  0008'                    ??i1___lmul:	
   922  0008'                    ___xxtofl@sign:	
   923                           ; 1 bytes @ 0x8
   924                           
   925  0008'                    __Umul8_16@multiplier:	
   926                           ; 1 bytes @ 0x8
   927                           
   928  0008'                    constrain@uLimit:	
   929                           ; 1 bytes @ 0x8
   930                           
   931                           
   932                           ; 4 bytes @ 0x8
   933  0008'                    	ds	1
   934  0009'                    ___xxtofl@exp:	
   935  0009'                    i1___lmul@product:	
   936                           ; 1 bytes @ 0x9
   937                           
   938                           
   939                           ; 4 bytes @ 0x9
   940  0009'                    	ds	1
   941  000A'                    ___xxtofl@arg:	
   942                           
   943                           ; 4 bytes @ 0xA
   944  000A'                    	ds	2
   945  000C'                    ??_constrain:	
   946                           
   947                           ; 1 bytes @ 0xC
   948  000C'                    	ds	1
   949  000D'                    ??i1___aldiv:	
   950                           
   951                           ; 1 bytes @ 0xD
   952  000D'                    	ds	1
   953                           
   954                           	psect	cstackBANK0
   955  0000'                    __pcstackBANK0:	
   956  0000'                    ?___flmul:	
   957  0000'                    ?i1___aldiv:	
   958                           ; 4 bytes @ 0x0
   959                           
   960  0000'                    ___flmul@b:	
   961                           ; 4 bytes @ 0x0
   962                           
   963  0000'                    i1___aldiv@divisor:	
   964                           ; 4 bytes @ 0x0
   965                           
   966                           
   967                           ; 4 bytes @ 0x0
   968  0000'                    	ds	4
   969  0004'                    ___flmul@a:	
   970  0004'                    i1___aldiv@dividend:	
   971                           ; 4 bytes @ 0x4
   972                           
   973                           
   974                           ; 4 bytes @ 0x4
   975  0004'                    	ds	4
   976  0008'                    ??___flmul:	
   977  0008'                    i1___aldiv@counter:	
   978                           ; 1 bytes @ 0x8
   979                           
   980                           
   981                           ; 1 bytes @ 0x8
   982  0008'                    	ds	1
   983  0009'                    i1___aldiv@sign:	
   984                           
   985                           ; 1 bytes @ 0x9
   986  0009'                    	ds	1
   987  000A'                    i1___aldiv@quotient:	
   988                           
   989                           ; 4 bytes @ 0xA
   990  000A'                    	ds	3
   991  000D'                    ___flmul@sign:	
   992                           
   993                           ; 1 bytes @ 0xD
   994  000D'                    	ds	1
   995  000E'                    ?i1_pwm_set:	
   996  000E'                    i1pwm_set@channel:	
   997                           ; 1 bytes @ 0xE
   998                           
   999  000E'                    ___flmul@grs:	
  1000                           ; 2 bytes @ 0xE
  1001                           
  1002                           
  1003                           ; 4 bytes @ 0xE
  1004  000E'                    	ds	2
  1005  0010'                    i1pwm_set@duty_cycle:	
  1006                           
  1007                           ; 4 bytes @ 0x10
  1008  0010'                    	ds	2
  1009  0012'                    ___flmul@aexp:	
  1010                           
  1011                           ; 1 bytes @ 0x12
  1012  0012'                    	ds	1
  1013  0013'                    ___flmul@bexp:	
  1014                           
  1015                           ; 1 bytes @ 0x13
  1016  0013'                    	ds	1
  1017  0014'                    ??i1_pwm_set:	
  1018  0014'                    ___flmul@prod:	
  1019                           ; 1 bytes @ 0x14
  1020                           
  1021                           
  1022                           ; 4 bytes @ 0x14
  1023  0014'                    	ds	4
  1024  0018'                    ___flmul@temp:	
  1025                           
  1026                           ; 2 bytes @ 0x18
  1027  0018'                    	ds	2
  1028  001A'                    ?___fladd:	
  1029  001A'                    ___fladd@b:	
  1030                           ; 4 bytes @ 0x1A
  1031                           
  1032                           
  1033                           ; 4 bytes @ 0x1A
  1034  001A'                    	ds	4
  1035  001E'                    ___fladd@a:	
  1036                           
  1037                           ; 4 bytes @ 0x1E
  1038  001E'                    	ds	4
  1039  0022'                    ??___fladd:	
  1040                           
  1041                           ; 1 bytes @ 0x22
  1042  0022'                    	ds	8
  1043  002A'                    ___fladd@signs:	
  1044                           
  1045                           ; 1 bytes @ 0x2A
  1046  002A'                    	ds	1
  1047  002B'                    ___fladd@aexp:	
  1048                           
  1049                           ; 1 bytes @ 0x2B
  1050  002B'                    	ds	1
  1051  002C'                    ___fladd@bexp:	
  1052                           
  1053                           ; 1 bytes @ 0x2C
  1054  002C'                    	ds	1
  1055  002D'                    ___fladd@grs:	
  1056                           
  1057                           ; 1 bytes @ 0x2D
  1058  002D'                    	ds	1
  1059  002E'                    ?___fltol:	
  1060  002E'                    ___fltol@f1:	
  1061                           ; 4 bytes @ 0x2E
  1062                           
  1063                           
  1064                           ; 4 bytes @ 0x2E
  1065  002E'                    	ds	4
  1066  0032'                    ??___fltol:	
  1067                           
  1068                           ; 1 bytes @ 0x32
  1069  0032'                    	ds	5
  1070  0037'                    ___fltol@sign1:	
  1071                           
  1072                           ; 1 bytes @ 0x37
  1073  0037'                    	ds	1
  1074  0038'                    ___fltol@exp1:	
  1075                           
  1076                           ; 1 bytes @ 0x38
  1077  0038'                    	ds	1
  1078  0039'                    ??_SetMotor:	
  1079                           
  1080                           ; 1 bytes @ 0x39
  1081  0039'                    	ds	4
  1082  003D'                    _SetMotor$1033:	
  1083                           
  1084                           ; 4 bytes @ 0x3D
  1085  003D'                    	ds	4
  1086  0041'                    SetMotor@err:	
  1087                           
  1088                           ; 4 bytes @ 0x41
  1089  0041'                    	ds	4
  1090  0045'                    SetMotor@resp:	
  1091                           
  1092                           ; 4 bytes @ 0x45
  1093  0045'                    	ds	4
  1094  0049'                    ??_isr:	
  1095                           
  1096                           ; 1 bytes @ 0x49
  1097  0049'                    	ds	6
  1098  004F'                    isr@portB:	
  1099                           
  1100                           ; 1 bytes @ 0x4F
  1101  004F'                    	ds	1
  1102                           
  1103                           	psect	maintext
  1104  0000'                    __pmaintext:	
  1105 ;;
  1106 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1107 ;;
  1108 ;; *************** function _main *****************
  1109 ;; Defined at:
  1110 ;;		line 218 in file "main.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;  sVar           10   44[BANK1 ] unsigned char [10]
  1115 ;;  serialIn        1   54[BANK1 ] unsigned char 
  1116 ;;  i               2    0        int 
  1117 ;;  enc1            2    0        int 
  1118 ;;  serialIn        1    0        unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : B00/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1128 ;;      Params:         0       0       0       0       0
  1129 ;;      Locals:         0       0      16       0       0
  1130 ;;      Temps:          0       0       1       0       0
  1131 ;;      Totals:         0       0      17       0       0
  1132 ;;Total ram usage:       17 bytes
  1133 ;; Hardware stack levels required when called:    6
  1134 ;; This function calls:
  1135 ;;		_SetPoint
  1136 ;;		_chkchr
  1137 ;;		_encoders_init
  1138 ;;		_putst
  1139 ;;		_pwm_init
  1140 ;;		_pwm_set
  1141 ;;		_resetCounter
  1142 ;;		_serial_init
  1143 ;;		_sprintf
  1144 ;; This function is called by:
  1145 ;;		Startup code after reset
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           
  1150                           ;psect for function _main
  1151  0000'                    _main:	
  1152                           
  1153                           ;main.c: 227: OPTION_REGbits.T0CS = 0;
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1157  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1158  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1159  0002' 1281               	bcf	1,5	;volatile
  1160                           
  1161                           ;main.c: 228: OPTION_REGbits.PSA = 0;
  1162  0003' 1181               	bcf	1,3	;volatile
  1163                           
  1164                           ;main.c: 229: OPTION_REGbits.PS = 7;
  1165  0004' 3007               	movlw	7
  1166  0005' 0481               	iorwf	1,f	;volatile
  1167                           
  1168                           ;main.c: 232: TRISB5 = 0;
  1169  0006' 1286               	bcf	6,5	;volatile
  1170                           
  1171                           ;main.c: 233: ANS13 = 0;
  1172  0007' 1683               	bsf	3,5	;RP0=1, select bank3
  1173  0008' 1703               	bsf	3,6	;RP1=1, select bank3
  1174  0009' 1289               	bcf	9,5	;volatile
  1175                           
  1176                           ;main.c: 234: TRISB7 = 0;
  1177  000A' 1683               	bsf	3,5	;RP0=1, select bank1
  1178  000B' 1303               	bcf	3,6	;RP1=0, select bank1
  1179  000C' 1386               	bcf	6,7	;volatile
  1180                           
  1181                           ;main.c: 235: TRISB1 = 1;
  1182  000D' 1486               	bsf	6,1	;volatile
  1183                           
  1184                           ;main.c: 236: TRISB2 = 1;
  1185  000E' 1506               	bsf	6,2	;volatile
  1186                           
  1187                           ;main.c: 237: TRISB3 = 1;
  1188  000F' 1586               	bsf	6,3	;volatile
  1189                           
  1190                           ;main.c: 238: TRISB4 = 1;
  1191  0010' 1606               	bsf	6,4	;volatile
  1192                           
  1193                           ;main.c: 239: ANS10 = 0;
  1194  0011' 1683               	bsf	3,5	;RP0=1, select bank3
  1195  0012' 1703               	bsf	3,6	;RP1=1, select bank3
  1196  0013' 1109               	bcf	9,2	;volatile
  1197                           
  1198                           ;main.c: 240: ANS9 = 0;
  1199  0014' 1089               	bcf	9,1	;volatile
  1200                           
  1201                           ;main.c: 241: ANS8 = 0;
  1202  0015' 1009               	bcf	9,0	;volatile
  1203                           
  1204                           ;main.c: 242: ANS11 = 0;
  1205  0016' 1189               	bcf	9,3	;volatile
  1206                           
  1207                           ;main.c: 243: RB5=1;
  1208  0017' 1283               	bcf	3,5	;RP0=0, select bank0
  1209  0018' 1303               	bcf	3,6	;RP1=0, select bank0
  1210  0019' 1686               	bsf	6,5	;volatile
  1211                           
  1212                           ;main.c: 246: T0IE = 1;
  1213  001A' 168B               	bsf	11,5	;volatile
  1214                           
  1215                           ;main.c: 247: TMR1IE = 0;
  1216  001B' 1683               	bsf	3,5	;RP0=1, select bank1
  1217  001C' 1303               	bcf	3,6	;RP1=0, select bank1
  1218  001D' 100C               	bcf	12,0	;volatile
  1219                           
  1220                           ;main.c: 248: PEIE = 1;
  1221  001E' 170B               	bsf	11,6	;volatile
  1222                           
  1223                           ;main.c: 249: GIE = 1;
  1224  001F' 178B               	bsf	11,7	;volatile
  1225                           
  1226                           ;main.c: 250: IOCB=0b00011000;
  1227  0020' 3018               	movlw	24
  1228  0021' 0096               	movwf	22	;volatile
  1229                           
  1230                           ;main.c: 251: RBIE = 1;
  1231  0022' 158B               	bsf	11,3	;volatile
  1232                           
  1233                           ;main.c: 255: serial_init();
  1234  0023' 120A' 118A' 2000' 120A' 118A' 	fcall	_serial_init
  1235                           
  1236                           ;main.c: 258: pwm_init();
  1237  0028' 120A' 118A' 2000' 120A' 118A' 	fcall	_pwm_init
  1238                           
  1239                           ;main.c: 265: encoders_init();
  1240  002D' 120A' 118A' 2000' 120A' 118A' 	fcall	_encoders_init
  1241                           
  1242                           ;main.c: 273: pwm_set(1, 0);
  1243  0032' 3001               	movlw	1
  1244  0033' 1683               	bsf	3,5	;RP0=1, select bank1
  1245  0034' 1303               	bcf	3,6	;RP1=0, select bank1
  1246  0035' 0080'              	movwf	pwm_set@channel^(0+128)
  1247  0036' 3000               	movlw	0
  1248  0037' 0081'              	movwf	(pwm_set@channel^(0+128)+1)
  1249  0038' 3000               	movlw	0
  1250  0039' 0080'              	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1251  003A' 3000               	movlw	0
  1252  003B' 0080'              	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1253  003C' 3000               	movlw	0
  1254  003D' 0080'              	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1255  003E' 3000               	movlw	0
  1256  003F' 0080'              	movwf	pwm_set@duty_cycle^(0+128)
  1257  0040' 120A' 118A' 2000' 120A' 118A' 	fcall	_pwm_set
  1258                           
  1259                           ;main.c: 274: pwm_set(2, 0);
  1260  0045' 3002               	movlw	2
  1261  0046' 1683               	bsf	3,5	;RP0=1, select bank1
  1262  0047' 1303               	bcf	3,6	;RP1=0, select bank1
  1263  0048' 0080'              	movwf	pwm_set@channel^(0+128)
  1264  0049' 3000               	movlw	0
  1265  004A' 0081'              	movwf	(pwm_set@channel^(0+128)+1)
  1266  004B' 3000               	movlw	0
  1267  004C' 0080'              	movwf	(pwm_set@duty_cycle+3)^(0+128)
  1268  004D' 3000               	movlw	0
  1269  004E' 0080'              	movwf	(pwm_set@duty_cycle+2)^(0+128)
  1270  004F' 3000               	movlw	0
  1271  0050' 0080'              	movwf	(pwm_set@duty_cycle+1)^(0+128)
  1272  0051' 3000               	movlw	0
  1273  0052' 0080'              	movwf	pwm_set@duty_cycle^(0+128)
  1274  0053' 120A' 118A' 2000' 120A' 118A' 	fcall	_pwm_set
  1275  0058'                    l3156:	
  1276                           
  1277                           ;main.c: 279: char serialIn = chkchr();
  1278  0058' 120A' 118A' 2000' 120A' 118A' 	fcall	_chkchr
  1279  005D' 1683               	bsf	3,5	;RP0=1, select bank1
  1280  005E' 1303               	bcf	3,6	;RP1=0, select bank1
  1281  005F' 0080'              	movwf	??_main^(0+128)
  1282  0060' 0800'              	movf	??_main^(0+128),w
  1283  0061' 0080'              	movwf	main@serialIn_335^(0+128)
  1284                           
  1285                           ;main.c: 280: if (serialIn == 'a'){
  1286  0062' 3061               	movlw	97
  1287  0063' 0600'              	xorwf	main@serialIn_335^(0+128),w
  1288  0064' 1D03               	btfss	3,2
  1289  0065' 2800'              	goto	l3156
  1290                           
  1291                           ;main.c: 281: resetCounter();
  1292  0066' 120A' 118A' 2000' 120A' 118A' 	fcall	_resetCounter
  1293                           
  1294                           ;main.c: 283: last_pos = 0;
  1295  006B' 3000               	movlw	0
  1296  006C' 1683               	bsf	3,5	;RP0=1, select bank1
  1297  006D' 1303               	bcf	3,6	;RP1=0, select bank1
  1298  006E' 0080'              	movwf	(_last_pos+3)^(0+128)	;volatile
  1299  006F' 3000               	movlw	0
  1300  0070' 0080'              	movwf	(_last_pos+2)^(0+128)	;volatile
  1301  0071' 3000               	movlw	0
  1302  0072' 0080'              	movwf	(_last_pos+1)^(0+128)	;volatile
  1303  0073' 3000               	movlw	0
  1304  0074' 0080'              	movwf	_last_pos^(0+128)	;volatile
  1305                           
  1306                           ;main.c: 284: samples = 0;
  1307  0075' 0180'              	clrf	_samples^(0+128)	;volatile
  1308  0076' 0180'              	clrf	(_samples+1)^(0+128)	;volatile
  1309                           
  1310                           ;main.c: 285: sampling = 1;
  1311  0077' 3001               	movlw	1
  1312  0078' 0080'              	movwf	??_main^(0+128)
  1313  0079' 0800'              	movf	??_main^(0+128),w
  1314  007A' 0080'              	movwf	_sampling^(0+128)	;volatile
  1315                           
  1316                           ;main.c: 286: SetPoint(100);
  1317  007B' 3064               	movlw	100
  1318  007C' 0080'              	movwf	SetPoint@new_val^(0+128)
  1319  007D' 3000               	movlw	0
  1320  007E' 0081'              	movwf	(SetPoint@new_val^(0+128)+1)
  1321  007F' 120A' 118A' 2000' 120A' 118A' 	fcall	_SetPoint
  1322                           
  1323                           ;main.c: 287: RB5=0;
  1324  0084' 1283               	bcf	3,5	;RP0=0, select bank0
  1325  0085' 1303               	bcf	3,6	;RP1=0, select bank0
  1326  0086' 1286               	bcf	6,5	;volatile
  1327  0087'                    l3172:	
  1328                           ;main.c: 288: while (samples < 140){
  1329                           
  1330  0087' 1683               	bsf	3,5	;RP0=1, select bank1
  1331  0088' 1303               	bcf	3,6	;RP1=0, select bank1
  1332  0089' 0800'              	movf	(_samples+1)^(0+128),w	;volatile
  1333  008A' 3A80               	xorlw	128
  1334  008B' 00FF               	movwf	127
  1335  008C' 3080               	movlw	128
  1336  008D' 027F               	subwf	127,w
  1337  008E' 1D03               	skipz
  1338  008F' 2800'              	goto	u4435
  1339  0090' 308C               	movlw	140
  1340  0091' 0200'              	subwf	_samples^(0+128),w	;volatile
  1341  0092'                    u4435:	
  1342  0092' 1C03               	skipc
  1343  0093' 2800'              	goto	l3172
  1344                           
  1345                           ;main.c: 290: };main.c: 291: sampling = 0;
  1346  0094' 1683               	bsf	3,5	;RP0=1, select bank1
  1347  0095' 1303               	bcf	3,6	;RP1=0, select bank1
  1348  0096' 0180'              	clrf	_sampling^(0+128)	;volatile
  1349                           
  1350                           ;main.c: 292: RB5=1;
  1351  0097' 1283               	bcf	3,5	;RP0=0, select bank0
  1352  0098' 1303               	bcf	3,6	;RP1=0, select bank0
  1353  0099' 1686               	bsf	6,5	;volatile
  1354                           
  1355                           ;main.c: 294: char sVar[10];;main.c: 295: samples = 0;
  1356  009A' 1683               	bsf	3,5	;RP0=1, select bank1
  1357  009B' 1303               	bcf	3,6	;RP1=0, select bank1
  1358  009C' 0180'              	clrf	_samples^(0+128)	;volatile
  1359  009D' 0180'              	clrf	(_samples+1)^(0+128)	;volatile
  1360                           
  1361                           ;main.c: 296: sprintf(sVar, "Kp: %d -> ", 2.0);
  1362  009E' 3019               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1363  009F' 0080'              	movwf	??_main^(0+128)
  1364  00A0' 0800'              	movf	??_main^(0+128),w
  1365  00A1' 0080'              	movwf	sprintf@f^(0+128)
  1366  00A2' 3040               	movlw	64
  1367  00A3' 0081'              	movwf	((?_sprintf+3)^(0+128)+1)
  1368  00A4' 3000               	movlw	0
  1369  00A5' 0081'              	movwf	((?_sprintf+2)^(0+128)+1)
  1370  00A6' 3000               	movlw	0
  1371  00A7' 0081'              	movwf	((?_sprintf+1)^(0+128)+1)
  1372  00A8' 3000               	movlw	0
  1373  00A9' 0081'              	movwf	(?_sprintf^(0+128)+1)
  1374  00AA' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1375  00AB' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  1376                           
  1377                           ;main.c: 297: putst(sVar);
  1378  00B0' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1379  00B1' 120A' 118A' 2000' 120A' 118A' 	fcall	_putst
  1380  00B6'                    l340:	
  1381                           ;main.c: 298: while (samples <= 140 /2){
  1382                           
  1383  00B6' 1683               	bsf	3,5	;RP0=1, select bank1
  1384  00B7' 1303               	bcf	3,6	;RP1=0, select bank1
  1385  00B8' 0800'              	movf	(_samples+1)^(0+128),w	;volatile
  1386  00B9' 3A80               	xorlw	128
  1387  00BA' 00FF               	movwf	127
  1388  00BB' 3080               	movlw	128
  1389  00BC' 027F               	subwf	127,w
  1390  00BD' 1D03               	skipz
  1391  00BE' 2800'              	goto	u4445
  1392  00BF' 3047               	movlw	71
  1393  00C0' 0200'              	subwf	_samples^(0+128),w	;volatile
  1394  00C1'                    u4445:	
  1395  00C1' 1803               	btfsc	3,0
  1396  00C2' 2800'              	goto	l343
  1397                           
  1398                           ;main.c: 299: sprintf(sVar, "%d ", pos_log1[samples]);
  1399  00C3' 3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1400  00C4' 1683               	bsf	3,5	;RP0=1, select bank1
  1401  00C5' 1303               	bcf	3,6	;RP1=0, select bank1
  1402  00C6' 0080'              	movwf	??_main^(0+128)
  1403  00C7' 0800'              	movf	??_main^(0+128),w
  1404  00C8' 0080'              	movwf	sprintf@f^(0+128)
  1405  00C9' 0800'              	movf	_samples^(0+128),w	;volatile
  1406  00CA' 3E00'              	addlw	(low (_pos_log1| (0+256)))& (0+255)
  1407  00CB' 0084               	movwf	4
  1408  00CC' 1783               	bsf	3,7	;select IRP bank3
  1409  00CD' 0800               	movf	0,w
  1410  00CE' 0081'              	movwf	(?_sprintf^(0+128)+1)
  1411  00CF' 0181'              	clrf	((?_sprintf+1)^(0+128)+1)
  1412  00D0' 1B81'              	btfsc	(?_sprintf^(0+128)+1),7
  1413  00D1' 0381'              	decf	((?_sprintf+1)^(0+128)+1),f
  1414  00D2' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1415  00D3' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  1416                           
  1417                           ;main.c: 300: putst(sVar);
  1418  00D8' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1419  00D9' 120A' 118A' 2000' 120A' 118A' 	fcall	_putst
  1420                           
  1421                           ;main.c: 301: samples++;
  1422  00DE' 3001               	movlw	1
  1423  00DF' 1683               	bsf	3,5	;RP0=1, select bank1
  1424  00E0' 1303               	bcf	3,6	;RP1=0, select bank1
  1425  00E1' 0780'              	addwf	_samples^(0+128),f	;volatile
  1426  00E2' 1803               	skipnc
  1427  00E3' 0A80'              	incf	(_samples+1)^(0+128),f	;volatile
  1428  00E4' 3000               	movlw	0
  1429  00E5' 0780'              	addwf	(_samples+1)^(0+128),f	;volatile
  1430  00E6' 2800'              	goto	l340
  1431  00E7'                    l3188:	
  1432                           
  1433                           ;main.c: 304: sprintf(sVar, "%d ", pos_log2[samples - 140 / 2]);
  1434  00E7' 3024               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1435  00E8' 1683               	bsf	3,5	;RP0=1, select bank1
  1436  00E9' 1303               	bcf	3,6	;RP1=0, select bank1
  1437  00EA' 0080'              	movwf	??_main^(0+128)
  1438  00EB' 0800'              	movf	??_main^(0+128),w
  1439  00EC' 0080'              	movwf	sprintf@f^(0+128)
  1440  00ED' 0800'              	movf	_samples^(0+128),w	;volatile
  1441  00EE' 3E00'              	addlw	(low ((_pos_log2| (0+256)+186)))& (0+255)
  1442  00EF' 0084               	movwf	4
  1443  00F0' 1783               	bsf	3,7	;select IRP bank2
  1444  00F1' 0800               	movf	0,w
  1445  00F2' 0081'              	movwf	(?_sprintf^(0+128)+1)
  1446  00F3' 0181'              	clrf	((?_sprintf+1)^(0+128)+1)
  1447  00F4' 1B81'              	btfsc	(?_sprintf^(0+128)+1),7
  1448  00F5' 0381'              	decf	((?_sprintf+1)^(0+128)+1),f
  1449  00F6' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1450  00F7' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  1451                           
  1452                           ;main.c: 305: putst(sVar);
  1453  00FC' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1454  00FD' 120A' 118A' 2000' 120A' 118A' 	fcall	_putst
  1455                           
  1456                           ;main.c: 306: samples++;
  1457  0102' 3001               	movlw	1
  1458  0103' 1683               	bsf	3,5	;RP0=1, select bank1
  1459  0104' 1303               	bcf	3,6	;RP1=0, select bank1
  1460  0105' 0780'              	addwf	_samples^(0+128),f	;volatile
  1461  0106' 1803               	skipnc
  1462  0107' 0A80'              	incf	(_samples+1)^(0+128),f	;volatile
  1463  0108' 3000               	movlw	0
  1464  0109' 0780'              	addwf	(_samples+1)^(0+128),f	;volatile
  1465  010A'                    l343:	
  1466  010A' 1683               	bsf	3,5	;RP0=1, select bank1
  1467  010B' 1303               	bcf	3,6	;RP1=0, select bank1
  1468  010C' 0800'              	movf	(_samples+1)^(0+128),w	;volatile
  1469  010D' 3A80               	xorlw	128
  1470  010E' 00FF               	movwf	127
  1471  010F' 3080               	movlw	128
  1472  0110' 027F               	subwf	127,w
  1473  0111' 1D03               	skipz
  1474  0112' 2800'              	goto	u4455
  1475  0113' 308C               	movlw	140
  1476  0114' 0200'              	subwf	_samples^(0+128),w	;volatile
  1477  0115'                    u4455:	
  1478  0115' 1C03               	skipc
  1479  0116' 2800'              	goto	l3188
  1480                           
  1481                           ;main.c: 307: };main.c: 308: sprintf(sVar, "Fim do teste ");
  1482  0117' 300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1483  0118' 1683               	bsf	3,5	;RP0=1, select bank1
  1484  0119' 1303               	bcf	3,6	;RP1=0, select bank1
  1485  011A' 0080'              	movwf	??_main^(0+128)
  1486  011B' 0800'              	movf	??_main^(0+128),w
  1487  011C' 0080'              	movwf	sprintf@f^(0+128)
  1488  011D' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1489  011E' 120A' 118A' 2000' 120A' 118A' 	fcall	_sprintf
  1490                           
  1491                           ;main.c: 309: putst(sVar);
  1492  0123' 3000'              	movlw	(low (main@sVar| 0))& (0+255)
  1493  0124' 120A' 118A' 2000' 120A' 118A' 	fcall	_putst
  1494  0129' 2800'              	goto	l3156
  1495  012A'                    __end_of_main:	
  1496                           
  1497                           	psect	text1
  1498  0000'                    __ptext1:	
  1499 ;; *************** function _sprintf *****************
  1500 ;; Defined at:
  1501 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;  sp              1    wreg     PTR unsigned char 
  1504 ;;		 -> main@sVar(10), 
  1505 ;;  f               1   14[BANK1 ] PTR const unsigned char 
  1506 ;;		 -> STR_4(14), STR_3(4), STR_2(4), STR_1(11), 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  sp              1   27[BANK1 ] PTR unsigned char 
  1509 ;;		 -> main@sVar(10), 
  1510 ;;  tmpval          4    0        struct .
  1511 ;;  val             2   25[BANK1 ] unsigned int 
  1512 ;;  cp              2    0        PTR const unsigned char 
  1513 ;;  len             2    0        unsigned int 
  1514 ;;  c               1   28[BANK1 ] unsigned char 
  1515 ;;  prec            1   24[BANK1 ] char 
  1516 ;;  flag            1   23[BANK1 ] unsigned char 
  1517 ;;  ap              1   22[BANK1 ] PTR void [1]
  1518 ;;		 -> ?_sprintf(2), 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  2   14[BANK1 ] int 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       5       0       0
  1529 ;;      Locals:         0       0       7       0       0
  1530 ;;      Temps:          0       0       3       0       0
  1531 ;;      Totals:         0       0      15       0       0
  1532 ;;Total ram usage:       15 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    5
  1535 ;; This function calls:
  1536 ;;		___lwdiv
  1537 ;;		___lwmod
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function _sprintf
  1545  0000'                    _sprintf:	
  1546                           
  1547                           ;incstack = 0
  1548                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1549                           ;sprintf@sp stored from wreg
  1550  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1551  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1552  0002' 0080'              	movwf	sprintf@sp^(0+128)
  1553                           
  1554                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1555  0003' 3000'              	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1556  0004' 0080'              	movwf	??_sprintf^(0+128)
  1557  0005' 0800'              	movf	??_sprintf^(0+128),w
  1558  0006' 0080'              	movwf	sprintf@ap^(0+128)
  1559  0007'                    l2948:	
  1560                           ;doprnt.c: 548: while((c = *f++)) {
  1561                           
  1562  0007' 3001               	movlw	1
  1563  0008' 0780'              	addwf	sprintf@f^(0+128),f
  1564  0009' 30FF               	movlw	-1
  1565  000A' 0700'              	addwf	sprintf@f^(0+128),w
  1566  000B' 0084               	movwf	4
  1567  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1568  0011' 0080'              	movwf	??_sprintf^(0+128)
  1569  0012' 0800'              	movf	??_sprintf^(0+128),w
  1570  0013' 0080'              	movwf	sprintf@c^(0+128)
  1571  0014' 0800'              	movf	sprintf@c^(0+128),w
  1572  0015' 1903               	btfsc	3,2
  1573  0016' 2800'              	goto	l2950
  1574                           
  1575                           ;doprnt.c: 550: if(c != '%')
  1576  0017' 3025               	movlw	37
  1577  0018' 0600'              	xorwf	sprintf@c^(0+128),w
  1578  0019' 1903               	btfsc	3,2
  1579  001A' 2800'              	goto	l2904
  1580                           
  1581                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1582  001B' 0800'              	movf	sprintf@c^(0+128),w
  1583  001C' 0080'              	movwf	??_sprintf^(0+128)
  1584  001D' 0800'              	movf	sprintf@sp^(0+128),w
  1585  001E' 0084               	movwf	4
  1586  001F' 0800'              	movf	??_sprintf^(0+128),w
  1587  0020' 1383               	bcf	3,7	;select IRP bank0
  1588  0021' 0080               	movwf	0
  1589  0022' 3001               	movlw	1
  1590  0023' 0080'              	movwf	??_sprintf^(0+128)
  1591  0024' 0800'              	movf	??_sprintf^(0+128),w
  1592  0025' 0780'              	addwf	sprintf@sp^(0+128),f
  1593                           
  1594                           ;doprnt.c: 554: continue;
  1595  0026' 2800'              	goto	l2948
  1596  0027'                    l2904:	
  1597                           
  1598                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1599  0027' 0180'              	clrf	sprintf@flag^(0+128)
  1600                           
  1601                           ;doprnt.c: 654: switch(c = *f++) {
  1602  0028' 3001               	movlw	1
  1603  0029' 0780'              	addwf	sprintf@f^(0+128),f
  1604  002A' 30FF               	movlw	-1
  1605  002B' 0700'              	addwf	sprintf@f^(0+128),w
  1606  002C' 0084               	movwf	4
  1607  002D' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1608  0032' 0080'              	movwf	sprintf@c^(0+128)
  1609                           
  1610                           ; Switch size 1, requested type "simple"
  1611                           ; Number of cases is 3, Range of values is 0 to 105
  1612                           ; switch strategies available:
  1613                           ; Name         Instructions Cycles
  1614                           ; simple_byte           10     6 (average)
  1615                           ; jumptable            260     6 (fixed)
  1616                           ;	Chosen strategy is simple_byte
  1617  0033' 3A00               	xorlw	0	; case 0
  1618  0034' 1903               	skipnz
  1619  0035' 2800'              	goto	l2950
  1620  0036' 3A64               	xorlw	100	; case 100
  1621  0037' 1903               	skipnz
  1622  0038' 2800'              	goto	l2910
  1623  0039' 3A0D               	xorlw	13	; case 105
  1624  003A' 1903               	skipnz
  1625  003B' 2800'              	goto	l2910
  1626  003C' 2800'              	goto	l2948
  1627  003D'                    l2910:	
  1628                           
  1629                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1630  003D' 0800'              	movf	sprintf@ap^(0+128),w
  1631  003E' 0084               	movwf	4
  1632  003F' 1383               	bcf	3,7	;select IRP bank0
  1633  0040' 0800               	movf	0,w
  1634  0041' 0080'              	movwf	sprintf@val^(0+128)
  1635  0042' 0A84               	incf	4,f
  1636  0043' 0800               	movf	0,w
  1637  0044' 0080'              	movwf	(sprintf@val+1)^(0+128)
  1638  0045' 3002               	movlw	2
  1639  0046' 0080'              	movwf	??_sprintf^(0+128)
  1640  0047' 0800'              	movf	??_sprintf^(0+128),w
  1641  0048' 0780'              	addwf	sprintf@ap^(0+128),f
  1642                           
  1643                           ;doprnt.c: 1280: if((int)val < 0) {
  1644  0049' 1F80'              	btfss	(sprintf@val+1)^(0+128),7
  1645  004A' 2800'              	goto	l2920
  1646                           
  1647                           ;doprnt.c: 1281: flag |= 0x03;
  1648  004B' 3003               	movlw	3
  1649  004C' 0080'              	movwf	??_sprintf^(0+128)
  1650  004D' 0800'              	movf	??_sprintf^(0+128),w
  1651  004E' 0480'              	iorwf	sprintf@flag^(0+128),f
  1652                           
  1653                           ;doprnt.c: 1282: val = -val;
  1654  004F' 0980'              	comf	sprintf@val^(0+128),f
  1655  0050' 0980'              	comf	(sprintf@val+1)^(0+128),f
  1656  0051' 0A80'              	incf	sprintf@val^(0+128),f
  1657  0052' 1903               	skipnz
  1658  0053' 0A80'              	incf	(sprintf@val+1)^(0+128),f
  1659  0054'                    l2920:	
  1660                           
  1661                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1662  0054' 0180'              	clrf	sprintf@c^(0+128)
  1663  0055' 0A80'              	incf	sprintf@c^(0+128),f
  1664  0056'                    l2926:	
  1665                           
  1666                           ;doprnt.c: 1325: if(val < dpowers[c])
  1667  0056' 0800'              	movf	sprintf@c^(0+128),w
  1668  0057' 0080'              	movwf	??_sprintf^(0+128)
  1669  0058' 0700'              	addwf	??_sprintf^(0+128),w
  1670  0059' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1671  005A' 0084               	movwf	4
  1672  005B' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1673  0060' 0080'              	movwf	(??_sprintf+1)^(0+128)
  1674  0061' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1675  0066' 0081'              	movwf	((??_sprintf+1)^(0+128)+1)
  1676  0067' 0800'              	movf	(??_sprintf+2)^(0+128),w
  1677  0068' 0200'              	subwf	(sprintf@val+1)^(0+128),w
  1678  0069' 1D03               	skipz
  1679  006A' 2800'              	goto	u4075
  1680  006B' 0800'              	movf	(??_sprintf+1)^(0+128),w
  1681  006C' 0200'              	subwf	sprintf@val^(0+128),w
  1682  006D'                    u4075:	
  1683  006D' 1C03               	btfss	3,0
  1684  006E' 2800'              	goto	l2932
  1685  006F' 3001               	movlw	1
  1686  0070' 0080'              	movwf	??_sprintf^(0+128)
  1687  0071' 0800'              	movf	??_sprintf^(0+128),w
  1688  0072' 0780'              	addwf	sprintf@c^(0+128),f
  1689  0073' 3005               	movlw	5
  1690  0074' 0600'              	xorwf	sprintf@c^(0+128),w
  1691  0075' 1D03               	btfss	3,2
  1692  0076' 2800'              	goto	l2926
  1693  0077'                    l2932:	
  1694                           
  1695                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1696  0077' 0800'              	movf	sprintf@flag^(0+128),w
  1697  0078' 3903               	andlw	3
  1698  0079' 1903               	btfsc	3,2
  1699  007A' 2800'              	goto	l2938
  1700                           
  1701                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  1702  007B' 302D               	movlw	45
  1703  007C' 0080'              	movwf	??_sprintf^(0+128)
  1704  007D' 0800'              	movf	sprintf@sp^(0+128),w
  1705  007E' 0084               	movwf	4
  1706  007F' 0800'              	movf	??_sprintf^(0+128),w
  1707  0080' 1383               	bcf	3,7	;select IRP bank0
  1708  0081' 0080               	movwf	0
  1709  0082' 3001               	movlw	1
  1710  0083' 0080'              	movwf	??_sprintf^(0+128)
  1711  0084' 0800'              	movf	??_sprintf^(0+128),w
  1712  0085' 0780'              	addwf	sprintf@sp^(0+128),f
  1713  0086'                    l2938:	
  1714                           
  1715                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1716  0086' 0800'              	movf	sprintf@c^(0+128),w
  1717  0087' 0080'              	movwf	??_sprintf^(0+128)
  1718  0088' 0800'              	movf	??_sprintf^(0+128),w
  1719  0089' 0080'              	movwf	sprintf@prec^(0+128)
  1720  008A'                    l2946:	
  1721                           ;doprnt.c: 1493: while(prec--) {
  1722                           
  1723  008A' 30FF               	movlw	255
  1724  008B' 0080'              	movwf	??_sprintf^(0+128)
  1725  008C' 0800'              	movf	??_sprintf^(0+128),w
  1726  008D' 0780'              	addwf	sprintf@prec^(0+128),f
  1727  008E' 0A00'              	incf	sprintf@prec^(0+128),w
  1728  008F' 1903               	btfsc	3,2
  1729  0090' 2800'              	goto	l2948
  1730                           
  1731                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1732  0091' 300A               	movlw	10
  1733  0092' 0080'              	movwf	___lwmod@divisor^(0+128)
  1734  0093' 3000               	movlw	0
  1735  0094' 0081'              	movwf	(___lwmod@divisor^(0+128)+1)
  1736  0095' 0800'              	movf	sprintf@prec^(0+128),w
  1737  0096' 0080'              	movwf	??_sprintf^(0+128)
  1738  0097' 0700'              	addwf	??_sprintf^(0+128),w
  1739  0098' 3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1740  0099' 0084               	movwf	4
  1741  009A' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1742  009F' 0080'              	movwf	___lwdiv@divisor^(0+128)
  1743  00A0' 120A' 118A' 2000' 120A' 118A' 	fcall	stringdir
  1744  00A5' 0080'              	movwf	(___lwdiv@divisor+1)^(0+128)
  1745  00A6' 0800'              	movf	(sprintf@val+1)^(0+128),w
  1746  00A7' 0080'              	movwf	(___lwdiv@dividend+1)^(0+128)
  1747  00A8' 0800'              	movf	sprintf@val^(0+128),w
  1748  00A9' 0080'              	movwf	___lwdiv@dividend^(0+128)
  1749  00AA' 120A' 118A' 2000' 120A' 118A' 	fcall	___lwdiv
  1750  00AF' 1683               	bsf	3,5	;RP0=1, select bank1
  1751  00B0' 1303               	bcf	3,6	;RP1=0, select bank1
  1752  00B1' 0800'              	movf	(?___lwdiv+1)^(0+128),w
  1753  00B2' 0080'              	movwf	(___lwmod@dividend+1)^(0+128)
  1754  00B3' 0800'              	movf	?___lwdiv^(0+128),w
  1755  00B4' 0080'              	movwf	___lwmod@dividend^(0+128)
  1756  00B5' 120A' 118A' 2000' 120A' 118A' 	fcall	___lwmod
  1757  00BA' 1683               	bsf	3,5	;RP0=1, select bank1
  1758  00BB' 1303               	bcf	3,6	;RP1=0, select bank1
  1759  00BC' 0800'              	movf	?___lwmod^(0+128),w
  1760  00BD' 3E30               	addlw	48
  1761  00BE' 0080'              	movwf	(??_sprintf+1)^(0+128)
  1762  00BF' 0800'              	movf	(??_sprintf+1)^(0+128),w
  1763  00C0' 0080'              	movwf	sprintf@c^(0+128)
  1764                           
  1765                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1766  00C1' 0800'              	movf	sprintf@c^(0+128),w
  1767  00C2' 0080'              	movwf	??_sprintf^(0+128)
  1768  00C3' 0800'              	movf	sprintf@sp^(0+128),w
  1769  00C4' 0084               	movwf	4
  1770  00C5' 0800'              	movf	??_sprintf^(0+128),w
  1771  00C6' 1383               	bcf	3,7	;select IRP bank0
  1772  00C7' 0080               	movwf	0
  1773  00C8' 3001               	movlw	1
  1774  00C9' 0080'              	movwf	??_sprintf^(0+128)
  1775  00CA' 0800'              	movf	??_sprintf^(0+128),w
  1776  00CB' 0780'              	addwf	sprintf@sp^(0+128),f
  1777  00CC' 2800'              	goto	l2946
  1778  00CD'                    l2950:	
  1779                           
  1780                           ;doprnt.c: 1557: *sp = 0;
  1781  00CD' 0800'              	movf	sprintf@sp^(0+128),w
  1782  00CE' 0084               	movwf	4
  1783  00CF' 1383               	bcf	3,7	;select IRP bank0
  1784  00D0' 0180               	clrf	0
  1785  00D1' 0008               	return
  1786  00D2'                    __end_of_sprintf:	
  1787                           
  1788                           	psect	text2
  1789  0000'                    __ptext2:	
  1790 ;; *************** function ___lwmod *****************
  1791 ;; Defined at:
  1792 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  divisor         2    8[BANK1 ] unsigned int 
  1795 ;;  dividend        2   10[BANK1 ] unsigned int 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  counter         1   13[BANK1 ] unsigned char 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  2    8[BANK1 ] unsigned int 
  1800 ;; Registers used:
  1801 ;;		wreg, status,2, status,0
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1807 ;;      Params:         0       0       4       0       0
  1808 ;;      Locals:         0       0       1       0       0
  1809 ;;      Temps:          0       0       1       0       0
  1810 ;;      Totals:         0       0       6       0       0
  1811 ;;Total ram usage:        6 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    4
  1814 ;; This function calls:
  1815 ;;		Nothing
  1816 ;; This function is called by:
  1817 ;;		_sprintf
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           
  1822                           ;psect for function ___lwmod
  1823  0000'                    ___lwmod:	
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1827  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1828  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1829  0002' 0800'              	movf	___lwmod@divisor^(0+128),w
  1830  0003' 0400'              	iorwf	(___lwmod@divisor+1)^(0+128),w
  1831  0004' 1903               	btfsc	3,2
  1832  0005' 2800'              	goto	l2346
  1833  0006' 0180'              	clrf	___lwmod@counter^(0+128)
  1834  0007' 0A80'              	incf	___lwmod@counter^(0+128),f
  1835  0008'                    l2336:	
  1836  0008' 1B80'              	btfsc	(___lwmod@divisor+1)^(0+128),7
  1837  0009' 2800'              	goto	l2338
  1838  000A' 3001               	movlw	1
  1839  000B'                    u2805:	
  1840  000B' 1003               	clrc
  1841  000C' 0D80'              	rlf	___lwmod@divisor^(0+128),f
  1842  000D' 0D80'              	rlf	(___lwmod@divisor+1)^(0+128),f
  1843  000E' 3EFF               	addlw	-1
  1844  000F' 1D03               	skipz
  1845  0010' 2800'              	goto	u2805
  1846  0011' 3001               	movlw	1
  1847  0012' 0080'              	movwf	??___lwmod^(0+128)
  1848  0013' 0800'              	movf	??___lwmod^(0+128),w
  1849  0014' 0780'              	addwf	___lwmod@counter^(0+128),f
  1850  0015' 2800'              	goto	l2336
  1851  0016'                    l2338:	
  1852  0016' 0800'              	movf	(___lwmod@divisor+1)^(0+128),w
  1853  0017' 0200'              	subwf	(___lwmod@dividend+1)^(0+128),w
  1854  0018' 1D03               	skipz
  1855  0019' 2800'              	goto	u2825
  1856  001A' 0800'              	movf	___lwmod@divisor^(0+128),w
  1857  001B' 0200'              	subwf	___lwmod@dividend^(0+128),w
  1858  001C'                    u2825:	
  1859  001C' 1C03               	skipc
  1860  001D' 2800'              	goto	l2342
  1861  001E' 0800'              	movf	___lwmod@divisor^(0+128),w
  1862  001F' 0280'              	subwf	___lwmod@dividend^(0+128),f
  1863  0020' 0800'              	movf	(___lwmod@divisor+1)^(0+128),w
  1864  0021' 1C03               	skipc
  1865  0022' 0380'              	decf	(___lwmod@dividend+1)^(0+128),f
  1866  0023' 0280'              	subwf	(___lwmod@dividend+1)^(0+128),f
  1867  0024'                    l2342:	
  1868  0024' 3001               	movlw	1
  1869  0025'                    u2835:	
  1870  0025' 1003               	clrc
  1871  0026' 0C80'              	rrf	(___lwmod@divisor+1)^(0+128),f
  1872  0027' 0C80'              	rrf	___lwmod@divisor^(0+128),f
  1873  0028' 3EFF               	addlw	-1
  1874  0029' 1D03               	skipz
  1875  002A' 2800'              	goto	u2835
  1876  002B' 3001               	movlw	1
  1877  002C' 0280'              	subwf	___lwmod@counter^(0+128),f
  1878  002D' 1D03               	btfss	3,2
  1879  002E' 2800'              	goto	l2338
  1880  002F'                    l2346:	
  1881  002F' 0800'              	movf	(___lwmod@dividend+1)^(0+128),w
  1882  0030' 0080'              	movwf	(?___lwmod+1)^(0+128)
  1883  0031' 0800'              	movf	___lwmod@dividend^(0+128),w
  1884  0032' 0080'              	movwf	?___lwmod^(0+128)
  1885  0033' 0008               	return
  1886  0034'                    __end_of___lwmod:	
  1887                           
  1888                           	psect	text3
  1889  0000'                    __ptext3:	
  1890 ;; *************** function ___lwdiv *****************
  1891 ;; Defined at:
  1892 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  divisor         2    0[BANK1 ] unsigned int 
  1895 ;;  dividend        2    2[BANK1 ] unsigned int 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  quotient        2    5[BANK1 ] unsigned int 
  1898 ;;  counter         1    7[BANK1 ] unsigned char 
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  2    0[BANK1 ] unsigned int 
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1908 ;;      Params:         0       0       4       0       0
  1909 ;;      Locals:         0       0       3       0       0
  1910 ;;      Temps:          0       0       1       0       0
  1911 ;;      Totals:         0       0       8       0       0
  1912 ;;Total ram usage:        8 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    4
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_sprintf
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           
  1923                           ;psect for function ___lwdiv
  1924  0000'                    ___lwdiv:	
  1925                           
  1926                           ;incstack = 0
  1927                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1928  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  1929  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  1930  0002' 0180'              	clrf	___lwdiv@quotient^(0+128)
  1931  0003' 0180'              	clrf	(___lwdiv@quotient+1)^(0+128)
  1932  0004' 0800'              	movf	___lwdiv@divisor^(0+128),w
  1933  0005' 0400'              	iorwf	(___lwdiv@divisor+1)^(0+128),w
  1934  0006' 1903               	btfsc	3,2
  1935  0007' 2800'              	goto	l2324
  1936  0008' 0180'              	clrf	___lwdiv@counter^(0+128)
  1937  0009' 0A80'              	incf	___lwdiv@counter^(0+128),f
  1938  000A'                    l2312:	
  1939  000A' 1B80'              	btfsc	(___lwdiv@divisor+1)^(0+128),7
  1940  000B' 2800'              	goto	l2314
  1941  000C' 3001               	movlw	1
  1942  000D'                    u2735:	
  1943  000D' 1003               	clrc
  1944  000E' 0D80'              	rlf	___lwdiv@divisor^(0+128),f
  1945  000F' 0D80'              	rlf	(___lwdiv@divisor+1)^(0+128),f
  1946  0010' 3EFF               	addlw	-1
  1947  0011' 1D03               	skipz
  1948  0012' 2800'              	goto	u2735
  1949  0013' 3001               	movlw	1
  1950  0014' 0080'              	movwf	??___lwdiv^(0+128)
  1951  0015' 0800'              	movf	??___lwdiv^(0+128),w
  1952  0016' 0780'              	addwf	___lwdiv@counter^(0+128),f
  1953  0017' 2800'              	goto	l2312
  1954  0018'                    l2314:	
  1955  0018' 3001               	movlw	1
  1956  0019'                    u2755:	
  1957  0019' 1003               	clrc
  1958  001A' 0D80'              	rlf	___lwdiv@quotient^(0+128),f
  1959  001B' 0D80'              	rlf	(___lwdiv@quotient+1)^(0+128),f
  1960  001C' 3EFF               	addlw	-1
  1961  001D' 1D03               	skipz
  1962  001E' 2800'              	goto	u2755
  1963  001F' 0800'              	movf	(___lwdiv@divisor+1)^(0+128),w
  1964  0020' 0200'              	subwf	(___lwdiv@dividend+1)^(0+128),w
  1965  0021' 1D03               	skipz
  1966  0022' 2800'              	goto	u2765
  1967  0023' 0800'              	movf	___lwdiv@divisor^(0+128),w
  1968  0024' 0200'              	subwf	___lwdiv@dividend^(0+128),w
  1969  0025'                    u2765:	
  1970  0025' 1C03               	skipc
  1971  0026' 2800'              	goto	l2320
  1972  0027' 0800'              	movf	___lwdiv@divisor^(0+128),w
  1973  0028' 0280'              	subwf	___lwdiv@dividend^(0+128),f
  1974  0029' 0800'              	movf	(___lwdiv@divisor+1)^(0+128),w
  1975  002A' 1C03               	skipc
  1976  002B' 0380'              	decf	(___lwdiv@dividend+1)^(0+128),f
  1977  002C' 0280'              	subwf	(___lwdiv@dividend+1)^(0+128),f
  1978  002D' 1400'              	bsf	___lwdiv@quotient^(0+128),0
  1979  002E'                    l2320:	
  1980  002E' 3001               	movlw	1
  1981  002F'                    u2775:	
  1982  002F' 1003               	clrc
  1983  0030' 0C80'              	rrf	(___lwdiv@divisor+1)^(0+128),f
  1984  0031' 0C80'              	rrf	___lwdiv@divisor^(0+128),f
  1985  0032' 3EFF               	addlw	-1
  1986  0033' 1D03               	skipz
  1987  0034' 2800'              	goto	u2775
  1988  0035' 3001               	movlw	1
  1989  0036' 0280'              	subwf	___lwdiv@counter^(0+128),f
  1990  0037' 1D03               	btfss	3,2
  1991  0038' 2800'              	goto	l2314
  1992  0039'                    l2324:	
  1993  0039' 0800'              	movf	(___lwdiv@quotient+1)^(0+128),w
  1994  003A' 0080'              	movwf	(?___lwdiv+1)^(0+128)
  1995  003B' 0800'              	movf	___lwdiv@quotient^(0+128),w
  1996  003C' 0080'              	movwf	?___lwdiv^(0+128)
  1997  003D' 0008               	return
  1998  003E'                    __end_of___lwdiv:	
  1999                           
  2000                           	psect	text4
  2001  0000'                    __ptext4:	
  2002 ;; *************** function _serial_init *****************
  2003 ;; Defined at:
  2004 ;;		line 29 in file "serial.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;		None
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;		None
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  1    wreg      void 
  2011 ;; Registers used:
  2012 ;;		wreg
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2018 ;;      Params:         0       0       0       0       0
  2019 ;;      Locals:         0       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0
  2021 ;;      Totals:         0       0       0       0       0
  2022 ;;Total ram usage:        0 bytes
  2023 ;; Hardware stack levels used:    1
  2024 ;; Hardware stack levels required when called:    4
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_main
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           
  2033                           ;psect for function _serial_init
  2034  0000'                    _serial_init:	
  2035                           
  2036                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in _serial_init: [wreg]
  2040  0000' 3040               	movlw	64
  2041  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  2042  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  2043  0003' 0099               	movwf	25	;volatile
  2044                           
  2045                           ;serial.c: 66: BRGH=1;
  2046  0004' 1518               	bsf	24,2	;volatile
  2047                           
  2048                           ;serial.c: 67: SYNC=0;
  2049  0005' 1218               	bcf	24,4	;volatile
  2050                           
  2051                           ;serial.c: 68: SPEN=1;
  2052  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  2053  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  2054  0008' 1798               	bsf	24,7	;volatile
  2055                           
  2056                           ;serial.c: 69: CREN=1;
  2057  0009' 1618               	bsf	24,4	;volatile
  2058                           
  2059                           ;serial.c: 70: SREN=0;
  2060  000A' 1298               	bcf	24,5	;volatile
  2061                           
  2062                           ;serial.c: 71: TXIE=0;
  2063  000B' 1683               	bsf	3,5	;RP0=1, select bank1
  2064  000C' 1303               	bcf	3,6	;RP1=0, select bank1
  2065  000D' 120C               	bcf	12,4	;volatile
  2066                           
  2067                           ;serial.c: 72: RCIE=0;
  2068  000E' 128C               	bcf	12,5	;volatile
  2069                           
  2070                           ;serial.c: 73: TX9=0;
  2071  000F' 1318               	bcf	24,6	;volatile
  2072                           
  2073                           ;serial.c: 74: RX9=0;
  2074  0010' 1283               	bcf	3,5	;RP0=0, select bank0
  2075  0011' 1303               	bcf	3,6	;RP1=0, select bank0
  2076  0012' 1318               	bcf	24,6	;volatile
  2077                           
  2078                           ;serial.c: 75: TXEN=0;
  2079  0013' 1683               	bsf	3,5	;RP0=1, select bank1
  2080  0014' 1303               	bcf	3,6	;RP1=0, select bank1
  2081  0015' 1298               	bcf	24,5	;volatile
  2082                           
  2083                           ;serial.c: 76: TXEN=1;
  2084  0016' 1698               	bsf	24,5	;volatile
  2085  0017' 0008               	return
  2086  0018'                    __end_of_serial_init:	
  2087                           
  2088                           	psect	text5
  2089  0000'                    __ptext5:	
  2090 ;; *************** function _resetCounter *****************
  2091 ;; Defined at:
  2092 ;;		line 125 in file "main.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2106 ;;      Params:         0       0       0       0       0
  2107 ;;      Locals:         0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0
  2109 ;;      Totals:         0       0       0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    4
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           
  2121                           ;psect for function _resetCounter
  2122  0000'                    _resetCounter:	
  2123                           
  2124                           ;main.c: 126: encoder1_counter = 0;
  2125                           
  2126                           ;incstack = 0
  2127                           ; Regs used in _resetCounter: [wreg]
  2128  0000' 3000               	movlw	0
  2129  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  2130  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  2131  0003' 0080'              	movwf	(_encoder1_counter+3)^(0+128)	;volatile
  2132  0004' 3000               	movlw	0
  2133  0005' 0080'              	movwf	(_encoder1_counter+2)^(0+128)	;volatile
  2134  0006' 3000               	movlw	0
  2135  0007' 0080'              	movwf	(_encoder1_counter+1)^(0+128)	;volatile
  2136  0008' 3000               	movlw	0
  2137  0009' 0080'              	movwf	_encoder1_counter^(0+128)	;volatile
  2138                           
  2139                           ;main.c: 127: motor_pos = 0;
  2140  000A' 3000               	movlw	0
  2141  000B' 0080'              	movwf	(_motor_pos+3)^(0+128)	;volatile
  2142  000C' 3000               	movlw	0
  2143  000D' 0080'              	movwf	(_motor_pos+2)^(0+128)	;volatile
  2144  000E' 3000               	movlw	0
  2145  000F' 0080'              	movwf	(_motor_pos+1)^(0+128)	;volatile
  2146  0010' 3000               	movlw	0
  2147  0011' 0080'              	movwf	_motor_pos^(0+128)	;volatile
  2148  0012' 0008               	return
  2149  0013'                    __end_of_resetCounter:	
  2150                           
  2151                           	psect	text6
  2152  0000'                    __ptext6:	
  2153 ;; *************** function _pwm_set *****************
  2154 ;; Defined at:
  2155 ;;		line 72 in file "pwm.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  channel         2   28[BANK1 ] int 
  2158 ;;  duty_cycle      4   30[BANK1 ] long 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2170 ;;      Params:         0       0       6       0       0
  2171 ;;      Locals:         0       0       0       0       0
  2172 ;;      Temps:          0       0       4       0       0
  2173 ;;      Totals:         0       0      10       0       0
  2174 ;;Total ram usage:       10 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    5
  2177 ;; This function calls:
  2178 ;;		___aldiv
  2179 ;;		___lmul
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185                           
  2186                           ;psect for function _pwm_set
  2187  0000'                    _pwm_set:	
  2188                           
  2189                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2190                           
  2191                           ;incstack = 0
  2192                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2193  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2194  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2195  0002' 1B80'              	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2196  0003' 0008               	return
  2197  0004' 1B80'              	btfsc	(pwm_set@duty_cycle+3)^(0+128),7
  2198  0005' 2800'              	goto	l2852
  2199  0006' 0800'              	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2200  0007' 1D03               	btfss	3,2
  2201  0008' 0008               	return
  2202  0009' 0800'              	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2203  000A' 1D03               	btfss	3,2
  2204  000B' 0008               	return
  2205  000C' 3001               	movlw	1
  2206  000D' 0200'              	subwf	(pwm_set@duty_cycle+1)^(0+128),w
  2207  000E' 1D03               	skipz
  2208  000F' 2800'              	goto	u3973
  2209  0010' 3000               	movlw	0
  2210  0011' 0200'              	subwf	pwm_set@duty_cycle^(0+128),w
  2211  0012' 1D03               	skipz
  2212  0013' 2800'              	goto	u3973
  2213  0014'                    u3973:	
  2214  0014' 1803               	btfsc	3,0
  2215  0015' 0008               	return
  2216  0016'                    l2852:	
  2217                           
  2218                           ;pwm.c: 77: if (duty_cycle !=0){
  2219  0016' 0800'              	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2220  0017' 0400'              	iorwf	(pwm_set@duty_cycle+2)^(0+128),w
  2221  0018' 0400'              	iorwf	(pwm_set@duty_cycle+1)^(0+128),w
  2222  0019' 0400'              	iorwf	pwm_set@duty_cycle^(0+128),w
  2223  001A' 1903               	skipnz
  2224  001B' 2800'              	goto	l2862
  2225                           
  2226                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  2227  001C' 3020               	movlw	32
  2228  001D' 0080'              	movwf	??_pwm_set^(0+128)
  2229  001E' 3000               	movlw	0
  2230  001F' 0081'              	movwf	(??_pwm_set^(0+128)+1)
  2231  0020' 3000               	movlw	0
  2232  0021' 0082'              	movwf	(??_pwm_set^(0+128)+2)
  2233  0022' 3000               	movlw	0
  2234  0023' 0083'              	movwf	(??_pwm_set^(0+128)+3)
  2235  0024' 3000               	movlw	0
  2236  0025' 0080'              	movwf	(___aldiv@divisor+3)^(0+128)
  2237  0026' 3000               	movlw	0
  2238  0027' 0080'              	movwf	(___aldiv@divisor+2)^(0+128)
  2239  0028' 3000               	movlw	0
  2240  0029' 0080'              	movwf	(___aldiv@divisor+1)^(0+128)
  2241  002A' 30FF               	movlw	255
  2242  002B' 0080'              	movwf	___aldiv@divisor^(0+128)
  2243  002C' 0800'              	movf	(pwm_set@duty_cycle+3)^(0+128),w
  2244  002D' 0080'              	movwf	(___lmul@multiplier+3)^(0+128)
  2245  002E' 0800'              	movf	(pwm_set@duty_cycle+2)^(0+128),w
  2246  002F' 0080'              	movwf	(___lmul@multiplier+2)^(0+128)
  2247  0030' 0800'              	movf	(pwm_set@duty_cycle+1)^(0+128),w
  2248  0031' 0080'              	movwf	(___lmul@multiplier+1)^(0+128)
  2249  0032' 0800'              	movf	pwm_set@duty_cycle^(0+128),w
  2250  0033' 0080'              	movwf	___lmul@multiplier^(0+128)
  2251  0034' 3000               	movlw	0
  2252  0035' 0080'              	movwf	(___lmul@multiplicand+3)^(0+128)
  2253  0036' 3000               	movlw	0
  2254  0037' 0080'              	movwf	(___lmul@multiplicand+2)^(0+128)
  2255  0038' 3000               	movlw	0
  2256  0039' 0080'              	movwf	(___lmul@multiplicand+1)^(0+128)
  2257  003A' 30DF               	movlw	223
  2258  003B' 0080'              	movwf	___lmul@multiplicand^(0+128)
  2259  003C' 120A' 118A' 2000' 120A' 118A' 	fcall	___lmul
  2260  0041' 1683               	bsf	3,5	;RP0=1, select bank1
  2261  0042' 1303               	bcf	3,6	;RP1=0, select bank1
  2262  0043' 0800'              	movf	(?___lmul+3)^(0+128),w
  2263  0044' 0080'              	movwf	(___aldiv@dividend+3)^(0+128)
  2264  0045' 0800'              	movf	(?___lmul+2)^(0+128),w
  2265  0046' 0080'              	movwf	(___aldiv@dividend+2)^(0+128)
  2266  0047' 0800'              	movf	(?___lmul+1)^(0+128),w
  2267  0048' 0080'              	movwf	(___aldiv@dividend+1)^(0+128)
  2268  0049' 0800'              	movf	?___lmul^(0+128),w
  2269  004A' 0080'              	movwf	___aldiv@dividend^(0+128)
  2270  004B' 120A' 118A' 2000' 120A' 118A' 	fcall	___aldiv
  2271  0050' 1683               	bsf	3,5	;RP0=1, select bank1
  2272  0051' 1303               	bcf	3,6	;RP1=0, select bank1
  2273  0052' 0800'              	movf	?___aldiv^(0+128),w
  2274  0053' 0780'              	addwf	??_pwm_set^(0+128),f
  2275  0054' 0800'              	movf	(?___aldiv+1)^(0+128),w
  2276  0055' 1803               	skipnc
  2277  0056' 0F00'              	incfsz	(?___aldiv+1)^(0+128),w
  2278  0057' 2800'              	goto	u3990
  2279  0058' 2800'              	goto	u3991
  2280  0059'                    u3990:	
  2281  0059' 0781'              	addwf	(??_pwm_set^(0+128)+1),f
  2282  005A'                    u3991:	
  2283  005A' 0800'              	movf	(?___aldiv+2)^(0+128),w
  2284  005B' 1803               	skipnc
  2285  005C' 0F00'              	incfsz	(?___aldiv+2)^(0+128),w
  2286  005D' 2800'              	goto	u3992
  2287  005E' 2800'              	goto	u3993
  2288  005F'                    u3992:	
  2289  005F' 0782'              	addwf	(??_pwm_set^(0+128)+2),f
  2290  0060'                    u3993:	
  2291  0060' 0800'              	movf	(?___aldiv+3)^(0+128),w
  2292  0061' 1803               	skipnc
  2293  0062' 0A00'              	incf	(?___aldiv+3)^(0+128),w
  2294  0063' 0783'              	addwf	(??_pwm_set^(0+128)+3),f
  2295  0064' 0800'              	movf	(??_pwm_set+3)^(0+128),w
  2296  0065' 0080'              	movwf	(pwm_set@duty_cycle+3)^(0+128)
  2297  0066' 0800'              	movf	(??_pwm_set+2)^(0+128),w
  2298  0067' 0080'              	movwf	(pwm_set@duty_cycle+2)^(0+128)
  2299  0068' 0800'              	movf	(??_pwm_set+1)^(0+128),w
  2300  0069' 0080'              	movwf	(pwm_set@duty_cycle+1)^(0+128)
  2301  006A' 0800'              	movf	??_pwm_set^(0+128),w
  2302  006B' 0080'              	movwf	pwm_set@duty_cycle^(0+128)
  2303  006C' 2800'              	goto	l2862
  2304  006D'                    l2856:	
  2305                           
  2306                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2307  006D' 0800'              	movf	pwm_set@duty_cycle^(0+128),w
  2308  006E' 1283               	bcf	3,5	;RP0=0, select bank0
  2309  006F' 1303               	bcf	3,6	;RP1=0, select bank0
  2310  0070' 0095               	movwf	21	;volatile
  2311                           
  2312                           ;pwm.c: 83: break;
  2313  0071' 0008               	return
  2314  0072'                    l2858:	
  2315                           
  2316                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2317  0072' 0800'              	movf	pwm_set@duty_cycle^(0+128),w
  2318  0073' 1283               	bcf	3,5	;RP0=0, select bank0
  2319  0074' 1303               	bcf	3,6	;RP1=0, select bank0
  2320  0075' 009B               	movwf	27	;volatile
  2321                           
  2322                           ;pwm.c: 86: break;
  2323  0076' 0008               	return
  2324  0077'                    l2862:	
  2325                           
  2326                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2327                           ; Switch size 1, requested type "simple"
  2328                           ; Number of cases is 1, Range of values is 0 to 0
  2329                           ; switch strategies available:
  2330                           ; Name         Instructions Cycles
  2331                           ; simple_byte            4     3 (average)
  2332                           ; direct_byte           11     8 (fixed)
  2333                           ; jumptable            260     6 (fixed)
  2334                           ;	Chosen strategy is simple_byte
  2335  0077' 0800'              	movf	(pwm_set@channel+1)^(0+128),w
  2336  0078' 3A00               	xorlw	0	; case 0
  2337  0079' 1903               	skipnz
  2338  007A' 2800'              	goto	l3238
  2339  007B' 2800'              	goto	l182
  2340  007C'                    l3238:	
  2341                           
  2342                           ; Switch size 1, requested type "simple"
  2343                           ; Number of cases is 2, Range of values is 1 to 2
  2344                           ; switch strategies available:
  2345                           ; Name         Instructions Cycles
  2346                           ; simple_byte            7     4 (average)
  2347                           ; direct_byte           17    11 (fixed)
  2348                           ; jumptable            263     9 (fixed)
  2349                           ;	Chosen strategy is simple_byte
  2350  007C' 0800'              	movf	pwm_set@channel^(0+128),w
  2351  007D' 3A01               	xorlw	1	; case 1
  2352  007E' 1903               	skipnz
  2353  007F' 2800'              	goto	l2856
  2354  0080' 3A03               	xorlw	3	; case 2
  2355  0081' 1903               	skipnz
  2356  0082' 2800'              	goto	l2858
  2357  0083' 2800'              	goto	l182
  2358  0084'                    l182:	
  2359  0084' 0008               	return
  2360  0085'                    __end_of_pwm_set:	
  2361                           
  2362                           	psect	text7
  2363  0000'                    __ptext7:	
  2364 ;; *************** function ___lmul *****************
  2365 ;; Defined at:
  2366 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  multiplier      4    0[BANK1 ] unsigned long 
  2369 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  product         4    9[BANK1 ] unsigned long 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  4    0[BANK1 ] unsigned long 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2, status,0
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2381 ;;      Params:         0       0       8       0       0
  2382 ;;      Locals:         0       0       4       0       0
  2383 ;;      Temps:          0       0       1       0       0
  2384 ;;      Totals:         0       0      13       0       0
  2385 ;;Total ram usage:       13 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    4
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_pwm_set
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function ___lmul
  2397  0000'                    ___lmul:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2401  0000' 3000               	movlw	0
  2402  0001' 1683               	bsf	3,5	;RP0=1, select bank1
  2403  0002' 1303               	bcf	3,6	;RP1=0, select bank1
  2404  0003' 0080'              	movwf	(___lmul@product+3)^(0+128)
  2405  0004' 3000               	movlw	0
  2406  0005' 0080'              	movwf	(___lmul@product+2)^(0+128)
  2407  0006' 3000               	movlw	0
  2408  0007' 0080'              	movwf	(___lmul@product+1)^(0+128)
  2409  0008' 3000               	movlw	0
  2410  0009' 0080'              	movwf	___lmul@product^(0+128)
  2411  000A'                    l2214:	
  2412  000A' 1C00'              	btfss	___lmul@multiplier^(0+128),0
  2413  000B' 2800'              	goto	l2218
  2414  000C' 0800'              	movf	___lmul@multiplicand^(0+128),w
  2415  000D' 0780'              	addwf	___lmul@product^(0+128),f
  2416  000E' 0800'              	movf	(___lmul@multiplicand+1)^(0+128),w
  2417  000F' 1103               	clrz
  2418  0010' 1803               	skipnc
  2419  0011' 3E01               	addlw	1
  2420  0012' 1D03               	btfss	3,2
  2421  0013' 0780'              	addwf	(___lmul@product+1)^(0+128),f
  2422  0014' 0800'              	movf	(___lmul@multiplicand+2)^(0+128),w
  2423  0015' 1103               	clrz
  2424  0016' 1803               	skipnc
  2425  0017' 3E01               	addlw	1
  2426  0018' 1D03               	btfss	3,2
  2427  0019' 0780'              	addwf	(___lmul@product+2)^(0+128),f
  2428  001A' 0800'              	movf	(___lmul@multiplicand+3)^(0+128),w
  2429  001B' 1103               	clrz
  2430  001C' 1803               	skipnc
  2431  001D' 3E01               	addlw	1
  2432  001E' 1D03               	btfss	3,2
  2433  001F' 0780'              	addwf	(___lmul@product+3)^(0+128),f
  2434  0020'                    l2218:	
  2435  0020' 3001               	movlw	1
  2436  0021' 0080'              	movwf	??___lmul^(0+128)
  2437  0022'                    u2495:	
  2438  0022' 1003               	clrc
  2439  0023' 0D80'              	rlf	___lmul@multiplicand^(0+128),f
  2440  0024' 0D80'              	rlf	(___lmul@multiplicand+1)^(0+128),f
  2441  0025' 0D80'              	rlf	(___lmul@multiplicand+2)^(0+128),f
  2442  0026' 0D80'              	rlf	(___lmul@multiplicand+3)^(0+128),f
  2443  0027' 0B80'              	decfsz	??___lmul^(0+128),f
  2444  0028' 2800'              	goto	u2495
  2445  0029' 3001               	movlw	1
  2446  002A'                    u2505:	
  2447  002A' 1003               	clrc
  2448  002B' 0C80'              	rrf	(___lmul@multiplier+3)^(0+128),f
  2449  002C' 0C80'              	rrf	(___lmul@multiplier+2)^(0+128),f
  2450  002D' 0C80'              	rrf	(___lmul@multiplier+1)^(0+128),f
  2451  002E' 0C80'              	rrf	___lmul@multiplier^(0+128),f
  2452  002F' 3EFF               	addlw	-1
  2453  0030' 1D03               	skipz
  2454  0031' 2800'              	goto	u2505
  2455  0032' 0800'              	movf	(___lmul@multiplier+3)^(0+128),w
  2456  0033' 0400'              	iorwf	(___lmul@multiplier+2)^(0+128),w
  2457  0034' 0400'              	iorwf	(___lmul@multiplier+1)^(0+128),w
  2458  0035' 0400'              	iorwf	___lmul@multiplier^(0+128),w
  2459  0036' 1D03               	skipz
  2460  0037' 2800'              	goto	l2214
  2461  0038' 0800'              	movf	(___lmul@product+3)^(0+128),w
  2462  0039' 0080'              	movwf	(?___lmul+3)^(0+128)
  2463  003A' 0800'              	movf	(___lmul@product+2)^(0+128),w
  2464  003B' 0080'              	movwf	(?___lmul+2)^(0+128)
  2465  003C' 0800'              	movf	(___lmul@product+1)^(0+128),w
  2466  003D' 0080'              	movwf	(?___lmul+1)^(0+128)
  2467  003E' 0800'              	movf	___lmul@product^(0+128),w
  2468  003F' 0080'              	movwf	?___lmul^(0+128)
  2469  0040' 0008               	return
  2470  0041'                    __end_of___lmul:	
  2471                           
  2472                           	psect	text8
  2473  0000'                    __ptext8:	
  2474 ;; *************** function ___aldiv *****************
  2475 ;; Defined at:
  2476 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  divisor         4   13[BANK1 ] long 
  2479 ;;  dividend        4   17[BANK1 ] long 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  quotient        4   24[BANK1 ] long 
  2482 ;;  sign            1   23[BANK1 ] unsigned char 
  2483 ;;  counter         1   22[BANK1 ] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  4   13[BANK1 ] long 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2493 ;;      Params:         0       0       8       0       0
  2494 ;;      Locals:         0       0       6       0       0
  2495 ;;      Temps:          0       0       1       0       0
  2496 ;;      Totals:         0       0      15       0       0
  2497 ;;Total ram usage:       15 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    4
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_pwm_set
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           
  2508                           ;psect for function ___aldiv
  2509  0000'                    ___aldiv:	
  2510                           
  2511                           ;incstack = 0
  2512                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2513  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2514  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2515  0002' 0180'              	clrf	___aldiv@sign^(0+128)
  2516  0003' 1F80'              	btfss	(___aldiv@divisor+3)^(0+128),7
  2517  0004' 2800'              	goto	l527
  2518  0005' 0980'              	comf	___aldiv@divisor^(0+128),f
  2519  0006' 0980'              	comf	(___aldiv@divisor+1)^(0+128),f
  2520  0007' 0980'              	comf	(___aldiv@divisor+2)^(0+128),f
  2521  0008' 0980'              	comf	(___aldiv@divisor+3)^(0+128),f
  2522  0009' 0A80'              	incf	___aldiv@divisor^(0+128),f
  2523  000A' 1903               	skipnz
  2524  000B' 0A80'              	incf	(___aldiv@divisor+1)^(0+128),f
  2525  000C' 1903               	skipnz
  2526  000D' 0A80'              	incf	(___aldiv@divisor+2)^(0+128),f
  2527  000E' 1903               	skipnz
  2528  000F' 0A80'              	incf	(___aldiv@divisor+3)^(0+128),f
  2529  0010' 0180'              	clrf	___aldiv@sign^(0+128)
  2530  0011' 0A80'              	incf	___aldiv@sign^(0+128),f
  2531  0012'                    l527:	
  2532  0012' 1F80'              	btfss	(___aldiv@dividend+3)^(0+128),7
  2533  0013' 2800'              	goto	l2236
  2534  0014' 0980'              	comf	___aldiv@dividend^(0+128),f
  2535  0015' 0980'              	comf	(___aldiv@dividend+1)^(0+128),f
  2536  0016' 0980'              	comf	(___aldiv@dividend+2)^(0+128),f
  2537  0017' 0980'              	comf	(___aldiv@dividend+3)^(0+128),f
  2538  0018' 0A80'              	incf	___aldiv@dividend^(0+128),f
  2539  0019' 1903               	skipnz
  2540  001A' 0A80'              	incf	(___aldiv@dividend+1)^(0+128),f
  2541  001B' 1903               	skipnz
  2542  001C' 0A80'              	incf	(___aldiv@dividend+2)^(0+128),f
  2543  001D' 1903               	skipnz
  2544  001E' 0A80'              	incf	(___aldiv@dividend+3)^(0+128),f
  2545  001F' 3001               	movlw	1
  2546  0020' 0080'              	movwf	??___aldiv^(0+128)
  2547  0021' 0800'              	movf	??___aldiv^(0+128),w
  2548  0022' 0680'              	xorwf	___aldiv@sign^(0+128),f
  2549  0023'                    l2236:	
  2550  0023' 3000               	movlw	0
  2551  0024' 0080'              	movwf	(___aldiv@quotient+3)^(0+128)
  2552  0025' 3000               	movlw	0
  2553  0026' 0080'              	movwf	(___aldiv@quotient+2)^(0+128)
  2554  0027' 3000               	movlw	0
  2555  0028' 0080'              	movwf	(___aldiv@quotient+1)^(0+128)
  2556  0029' 3000               	movlw	0
  2557  002A' 0080'              	movwf	___aldiv@quotient^(0+128)
  2558  002B' 0800'              	movf	(___aldiv@divisor+3)^(0+128),w
  2559  002C' 0400'              	iorwf	(___aldiv@divisor+2)^(0+128),w
  2560  002D' 0400'              	iorwf	(___aldiv@divisor+1)^(0+128),w
  2561  002E' 0400'              	iorwf	___aldiv@divisor^(0+128),w
  2562  002F' 1903               	skipnz
  2563  0030' 2800'              	goto	l2258
  2564  0031' 0180'              	clrf	___aldiv@counter^(0+128)
  2565  0032' 0A80'              	incf	___aldiv@counter^(0+128),f
  2566  0033'                    l2244:	
  2567  0033' 1B80'              	btfsc	(___aldiv@divisor+3)^(0+128),7
  2568  0034' 2800'              	goto	l2246
  2569  0035' 3001               	movlw	1
  2570  0036' 0080'              	movwf	??___aldiv^(0+128)
  2571  0037'                    u2555:	
  2572  0037' 1003               	clrc
  2573  0038' 0D80'              	rlf	___aldiv@divisor^(0+128),f
  2574  0039' 0D80'              	rlf	(___aldiv@divisor+1)^(0+128),f
  2575  003A' 0D80'              	rlf	(___aldiv@divisor+2)^(0+128),f
  2576  003B' 0D80'              	rlf	(___aldiv@divisor+3)^(0+128),f
  2577  003C' 0B80'              	decfsz	??___aldiv^(0+128),f
  2578  003D' 2800'              	goto	u2555
  2579  003E' 3001               	movlw	1
  2580  003F' 0080'              	movwf	??___aldiv^(0+128)
  2581  0040' 0800'              	movf	??___aldiv^(0+128),w
  2582  0041' 0780'              	addwf	___aldiv@counter^(0+128),f
  2583  0042' 2800'              	goto	l2244
  2584  0043'                    l2246:	
  2585  0043' 3001               	movlw	1
  2586  0044' 0080'              	movwf	??___aldiv^(0+128)
  2587  0045'                    u2575:	
  2588  0045' 1003               	clrc
  2589  0046' 0D80'              	rlf	___aldiv@quotient^(0+128),f
  2590  0047' 0D80'              	rlf	(___aldiv@quotient+1)^(0+128),f
  2591  0048' 0D80'              	rlf	(___aldiv@quotient+2)^(0+128),f
  2592  0049' 0D80'              	rlf	(___aldiv@quotient+3)^(0+128),f
  2593  004A' 0B80'              	decfsz	??___aldiv^(0+128),f
  2594  004B' 2800'              	goto	u2575
  2595  004C' 0800'              	movf	(___aldiv@divisor+3)^(0+128),w
  2596  004D' 0200'              	subwf	(___aldiv@dividend+3)^(0+128),w
  2597  004E' 1D03               	skipz
  2598  004F' 2800'              	goto	u2585
  2599  0050' 0800'              	movf	(___aldiv@divisor+2)^(0+128),w
  2600  0051' 0200'              	subwf	(___aldiv@dividend+2)^(0+128),w
  2601  0052' 1D03               	skipz
  2602  0053' 2800'              	goto	u2585
  2603  0054' 0800'              	movf	(___aldiv@divisor+1)^(0+128),w
  2604  0055' 0200'              	subwf	(___aldiv@dividend+1)^(0+128),w
  2605  0056' 1D03               	skipz
  2606  0057' 2800'              	goto	u2585
  2607  0058' 0800'              	movf	___aldiv@divisor^(0+128),w
  2608  0059' 0200'              	subwf	___aldiv@dividend^(0+128),w
  2609  005A'                    u2585:	
  2610  005A' 1C03               	skipc
  2611  005B' 2800'              	goto	l2254
  2612  005C' 0800'              	movf	___aldiv@divisor^(0+128),w
  2613  005D' 0280'              	subwf	___aldiv@dividend^(0+128),f
  2614  005E' 0800'              	movf	(___aldiv@divisor+1)^(0+128),w
  2615  005F' 1C03               	skipc
  2616  0060' 0F00'              	incfsz	(___aldiv@divisor+1)^(0+128),w
  2617  0061' 0280'              	subwf	(___aldiv@dividend+1)^(0+128),f
  2618  0062' 0800'              	movf	(___aldiv@divisor+2)^(0+128),w
  2619  0063' 1C03               	skipc
  2620  0064' 0F00'              	incfsz	(___aldiv@divisor+2)^(0+128),w
  2621  0065' 0280'              	subwf	(___aldiv@dividend+2)^(0+128),f
  2622  0066' 0800'              	movf	(___aldiv@divisor+3)^(0+128),w
  2623  0067' 1C03               	skipc
  2624  0068' 0F00'              	incfsz	(___aldiv@divisor+3)^(0+128),w
  2625  0069' 0280'              	subwf	(___aldiv@dividend+3)^(0+128),f
  2626  006A' 1400'              	bsf	___aldiv@quotient^(0+128),0
  2627  006B'                    l2254:	
  2628  006B' 3001               	movlw	1
  2629  006C'                    u2595:	
  2630  006C' 1003               	clrc
  2631  006D' 0C80'              	rrf	(___aldiv@divisor+3)^(0+128),f
  2632  006E' 0C80'              	rrf	(___aldiv@divisor+2)^(0+128),f
  2633  006F' 0C80'              	rrf	(___aldiv@divisor+1)^(0+128),f
  2634  0070' 0C80'              	rrf	___aldiv@divisor^(0+128),f
  2635  0071' 3EFF               	addlw	-1
  2636  0072' 1D03               	skipz
  2637  0073' 2800'              	goto	u2595
  2638  0074' 3001               	movlw	1
  2639  0075' 0280'              	subwf	___aldiv@counter^(0+128),f
  2640  0076' 1D03               	btfss	3,2
  2641  0077' 2800'              	goto	l2246
  2642  0078'                    l2258:	
  2643  0078' 0800'              	movf	___aldiv@sign^(0+128),w
  2644  0079' 1903               	btfsc	3,2
  2645  007A' 2800'              	goto	l2262
  2646  007B' 0980'              	comf	___aldiv@quotient^(0+128),f
  2647  007C' 0980'              	comf	(___aldiv@quotient+1)^(0+128),f
  2648  007D' 0980'              	comf	(___aldiv@quotient+2)^(0+128),f
  2649  007E' 0980'              	comf	(___aldiv@quotient+3)^(0+128),f
  2650  007F' 0A80'              	incf	___aldiv@quotient^(0+128),f
  2651  0080' 1903               	skipnz
  2652  0081' 0A80'              	incf	(___aldiv@quotient+1)^(0+128),f
  2653  0082' 1903               	skipnz
  2654  0083' 0A80'              	incf	(___aldiv@quotient+2)^(0+128),f
  2655  0084' 1903               	skipnz
  2656  0085' 0A80'              	incf	(___aldiv@quotient+3)^(0+128),f
  2657  0086'                    l2262:	
  2658  0086' 0800'              	movf	(___aldiv@quotient+3)^(0+128),w
  2659  0087' 0080'              	movwf	(?___aldiv+3)^(0+128)
  2660  0088' 0800'              	movf	(___aldiv@quotient+2)^(0+128),w
  2661  0089' 0080'              	movwf	(?___aldiv+2)^(0+128)
  2662  008A' 0800'              	movf	(___aldiv@quotient+1)^(0+128),w
  2663  008B' 0080'              	movwf	(?___aldiv+1)^(0+128)
  2664  008C' 0800'              	movf	___aldiv@quotient^(0+128),w
  2665  008D' 0080'              	movwf	?___aldiv^(0+128)
  2666  008E' 0008               	return
  2667  008F'                    __end_of___aldiv:	
  2668                           
  2669                           	psect	text9
  2670  0000'                    __ptext9:	
  2671 ;; *************** function _pwm_init *****************
  2672 ;; Defined at:
  2673 ;;		line 25 in file "pwm.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, status,2, status,0
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2687 ;;      Params:         0       0       0       0       0
  2688 ;;      Locals:         0       0       0       0       0
  2689 ;;      Temps:          0       0       0       0       0
  2690 ;;      Totals:         0       0       0       0       0
  2691 ;;Total ram usage:        0 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    4
  2694 ;; This function calls:
  2695 ;;		Nothing
  2696 ;; This function is called by:
  2697 ;;		_main
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _pwm_init
  2703  0000'                    _pwm_init:	
  2704                           
  2705                           ;pwm.c: 28: TRISC1 = 1;
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2709  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2710  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2711  0002' 1487               	bsf	7,1	;volatile
  2712                           
  2713                           ;pwm.c: 29: TRISC2 = 1;
  2714  0003' 1507               	bsf	7,2	;volatile
  2715                           
  2716                           ;pwm.c: 32: PR2 = 0xFF;
  2717  0004' 30FF               	movlw	255
  2718  0005' 0092               	movwf	18	;volatile
  2719                           
  2720                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  2721  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  2722  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  2723  0008' 0817               	movf	23,w	;volatile
  2724  0009' 39F0               	andlw	-16
  2725  000A' 380C               	iorlw	12
  2726  000B' 0097               	movwf	23	;volatile
  2727                           
  2728                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  2729  000C' 081D               	movf	29,w	;volatile
  2730  000D' 39F0               	andlw	-16
  2731  000E' 380C               	iorlw	12
  2732  000F' 009D               	movwf	29	;volatile
  2733                           
  2734                           ;pwm.c: 39: CCPR1L = 0;
  2735  0010' 0195               	clrf	21	;volatile
  2736                           
  2737                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  2738  0011' 30CF               	movlw	-49
  2739  0012' 0597               	andwf	23,f	;volatile
  2740                           
  2741                           ;pwm.c: 41: CCPR2L = 0;
  2742  0013' 019B               	clrf	27	;volatile
  2743                           
  2744                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  2745  0014' 108C               	bcf	12,1	;volatile
  2746                           
  2747                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  2748  0015' 30FC               	movlw	-4
  2749  0016' 0592               	andwf	18,f	;volatile
  2750                           
  2751                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  2752  0017' 1512               	bsf	18,2	;volatile
  2753  0018'                    l170:	
  2754                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  2755                           
  2756  0018' 1C8C               	btfss	12,1	;volatile
  2757  0019' 2800'              	goto	l170
  2758                           
  2759                           ;pwm.c: 53: TRISC1 = 0;
  2760  001A' 1683               	bsf	3,5	;RP0=1, select bank1
  2761  001B' 1303               	bcf	3,6	;RP1=0, select bank1
  2762  001C' 1087               	bcf	7,1	;volatile
  2763                           
  2764                           ;pwm.c: 54: TRISC2 = 0;
  2765  001D' 1107               	bcf	7,2	;volatile
  2766                           
  2767                           ;pwm.c: 59: ANS4 = 0;
  2768  001E' 1683               	bsf	3,5	;RP0=1, select bank3
  2769  001F' 1703               	bsf	3,6	;RP1=1, select bank3
  2770  0020' 1208               	bcf	8,4	;volatile
  2771                           
  2772                           ;pwm.c: 60: TRISA5 = 0;
  2773  0021' 1683               	bsf	3,5	;RP0=1, select bank1
  2774  0022' 1303               	bcf	3,6	;RP1=0, select bank1
  2775  0023' 1285               	bcf	5,5	;volatile
  2776                           
  2777                           ;pwm.c: 61: TRISA6 = 0;
  2778  0024' 1305               	bcf	5,6	;volatile
  2779                           
  2780                           ;pwm.c: 62: RA5 = 0;
  2781  0025' 1283               	bcf	3,5	;RP0=0, select bank0
  2782  0026' 1303               	bcf	3,6	;RP1=0, select bank0
  2783  0027' 1285               	bcf	5,5	;volatile
  2784                           
  2785                           ;pwm.c: 63: RA6 = 0;
  2786  0028' 1305               	bcf	5,6	;volatile
  2787  0029' 0008               	return
  2788  002A'                    __end_of_pwm_init:	
  2789                           
  2790                           	psect	text10
  2791  0000'                    __ptext10:	
  2792 ;; *************** function _putst *****************
  2793 ;; Defined at:
  2794 ;;		line 211 in file "serial.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  str             1    wreg     PTR const unsigned char 
  2797 ;;		 -> main@sVar(10), 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  str             1    3[BANK1 ] PTR const unsigned char 
  2800 ;;		 -> main@sVar(10), 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2810 ;;      Params:         0       0       0       0       0
  2811 ;;      Locals:         0       0       1       0       0
  2812 ;;      Temps:          0       0       1       0       0
  2813 ;;      Totals:         0       0       2       0       0
  2814 ;;Total ram usage:        2 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    5
  2817 ;; This function calls:
  2818 ;;		_putch
  2819 ;; This function is called by:
  2820 ;;		_main
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           
  2825                           ;psect for function _putst
  2826  0000'                    _putst:	
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2830                           ;putst@str stored from wreg
  2831  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2832  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2833  0002' 0080'              	movwf	putst@str^(0+128)
  2834  0003'                    l2826:	
  2835                           ;serial.c: 212: while((*str)!=0) {
  2836                           
  2837  0003' 0800'              	movf	putst@str^(0+128),w
  2838  0004' 0084               	movwf	4
  2839  0005' 1383               	bcf	3,7	;select IRP bank0
  2840  0006' 0800               	movf	0,w
  2841  0007' 1903               	btfsc	3,2
  2842  0008' 0008               	return
  2843                           
  2844                           ;serial.c: 213: putch(*str);
  2845  0009' 0800'              	movf	putst@str^(0+128),w
  2846  000A' 0084               	movwf	4
  2847  000B' 0800               	movf	0,w
  2848  000C' 120A' 118A' 2000' 120A' 118A' 	fcall	_putch
  2849                           
  2850                           ;serial.c: 214: if (*str==13) putch(10);
  2851  0011' 1683               	bsf	3,5	;RP0=1, select bank1
  2852  0012' 1303               	bcf	3,6	;RP1=0, select bank1
  2853  0013' 0800'              	movf	putst@str^(0+128),w
  2854  0014' 0084               	movwf	4
  2855  0015' 300D               	movlw	13
  2856  0016' 1383               	bcf	3,7	;select IRP bank0
  2857  0017' 0600               	xorwf	0,w
  2858  0018' 1D03               	btfss	3,2
  2859  0019' 2800'              	goto	l2820
  2860  001A' 300A               	movlw	10
  2861  001B' 120A' 118A' 2000' 120A' 118A' 	fcall	_putch
  2862  0020'                    l2820:	
  2863                           
  2864                           ;serial.c: 215: if (*str==10) putch(13);
  2865  0020' 1683               	bsf	3,5	;RP0=1, select bank1
  2866  0021' 1303               	bcf	3,6	;RP1=0, select bank1
  2867  0022' 0800'              	movf	putst@str^(0+128),w
  2868  0023' 0084               	movwf	4
  2869  0024' 300A               	movlw	10
  2870  0025' 1383               	bcf	3,7	;select IRP bank0
  2871  0026' 0600               	xorwf	0,w
  2872  0027' 1D03               	btfss	3,2
  2873  0028' 2800'              	goto	l2824
  2874  0029' 300D               	movlw	13
  2875  002A' 120A' 118A' 2000' 120A' 118A' 	fcall	_putch
  2876  002F'                    l2824:	
  2877                           
  2878                           ;serial.c: 216: str++;
  2879  002F' 3001               	movlw	1
  2880  0030' 1683               	bsf	3,5	;RP0=1, select bank1
  2881  0031' 1303               	bcf	3,6	;RP1=0, select bank1
  2882  0032' 0080'              	movwf	??_putst^(0+128)
  2883  0033' 0800'              	movf	??_putst^(0+128),w
  2884  0034' 0780'              	addwf	putst@str^(0+128),f
  2885  0035' 2800'              	goto	l2826
  2886  0036'                    __end_of_putst:	
  2887                           
  2888                           	psect	text11
  2889  0000'                    __ptext11:	
  2890 ;; *************** function _putch *****************
  2891 ;; Defined at:
  2892 ;;		line 95 in file "serial.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  c               1    wreg     unsigned char 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  c               1    1[BANK1 ] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         0       0       0       0       0
  2907 ;;      Locals:         0       0       1       0       0
  2908 ;;      Temps:          0       0       1       0       0
  2909 ;;      Totals:         0       0       2       0       0
  2910 ;;Total ram usage:        2 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    4
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_putst
  2917 ;;		_putchhex
  2918 ;;		_putchdec
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _putch
  2924  0000'                    _putch:	
  2925                           
  2926                           ;incstack = 0
  2927                           ; Regs used in _putch: [wreg]
  2928                           ;putch@c stored from wreg
  2929  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  2930  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  2931  0002' 0080'              	movwf	putch@c^(0+128)
  2932  0003'                    l2196:	
  2933                           ;serial.c: 96: while(!TXIF) {
  2934                           
  2935  0003' 1283               	bcf	3,5	;RP0=0, select bank0
  2936  0004' 1303               	bcf	3,6	;RP1=0, select bank0
  2937  0005' 1A0C               	btfsc	12,4	;volatile
  2938  0006' 2800'              	goto	l2198
  2939                           
  2940                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  2941  0007' 1C98               	btfss	24,1	;volatile
  2942  0008' 2800'              	goto	l82
  2943  0009' 1683               	bsf	3,5	;RP0=1, select bank1
  2944  000A' 1303               	bcf	3,6	;RP1=0, select bank1
  2945  000B' 1298               	bcf	24,5	;volatile
  2946  000C' 1698               	bsf	24,5	;volatile
  2947  000D' 1283               	bcf	3,5	;RP0=0, select bank0
  2948  000E' 1303               	bcf	3,6	;RP1=0, select bank0
  2949  000F' 1218               	bcf	24,4	;volatile
  2950  0010' 1618               	bsf	24,4	;volatile
  2951  0011'                    l82:	
  2952  0011' 1D18               	btfss	24,2	;volatile
  2953  0012' 2800'              	goto	l83
  2954  0013' 081A               	movf	26,w	;volatile
  2955  0014' 1683               	bsf	3,5	;RP0=1, select bank1
  2956  0015' 1303               	bcf	3,6	;RP1=0, select bank1
  2957  0016' 0080'              	movwf	??_putch^(0+128)
  2958  0017' 0800'              	movf	??_putch^(0+128),w
  2959  0018' 0080'              	movwf	_dummy^(0+128)
  2960  0019' 1298               	bcf	24,5	;volatile
  2961  001A' 1698               	bsf	24,5	;volatile
  2962  001B'                    l83:	
  2963  001B' 0064               	clrwdt	;# 
  2964  001C' 2800'              	goto	l2196
  2965  001D'                    l2198:	
  2966                           
  2967                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  2968  001D' 1683               	bsf	3,5	;RP0=1, select bank1
  2969  001E' 1303               	bcf	3,6	;RP1=0, select bank1
  2970  001F' 0800'              	movf	putch@c^(0+128),w
  2971  0020' 1283               	bcf	3,5	;RP0=0, select bank0
  2972  0021' 1303               	bcf	3,6	;RP1=0, select bank0
  2973  0022' 0099               	movwf	25	;volatile
  2974                           
  2975                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  2976  0023' 303C               	movlw	60
  2977  0024' 1683               	bsf	3,5	;RP0=1, select bank1
  2978  0025' 1303               	bcf	3,6	;RP1=0, select bank1
  2979  0026' 0080'              	movwf	??_putch^(0+128)
  2980  0027' 0800'              	movf	??_putch^(0+128),w
  2981  0028' 0080'              	movwf	_delayus_variable^(0+128)
  2982  0029' 0000               	nop	;# 
  2983  002A' 0000               	nop	;# 
  2984  002B' 0B98'              	decfsz	_delayus_variable,f	;# 
  2985  002C' 2800'              	goto	($+-3)	;# 
  2986  002D' 0008               	return
  2987  002E'                    __end_of_putch:	
  2988                           
  2989                           	psect	text12
  2990  0000'                    __ptext12:	
  2991 ;; *************** function _encoders_init *****************
  2992 ;; Defined at:
  2993 ;;		line 210 in file "main.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;		None
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         0       0       0       0       0
  3009 ;;      Temps:          0       0       2       0       0
  3010 ;;      Totals:         0       0       2       0       0
  3011 ;;Total ram usage:        2 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    4
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _encoders_init
  3023  0000'                    _encoders_init:	
  3024                           
  3025                           ;main.c: 213: state1 = (PORTB & 0b00011000) >>3;
  3026                           
  3027                           ;incstack = 0
  3028                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  3029  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3030  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3031  0002' 0806               	movf	6,w	;volatile
  3032  0003' 1683               	bsf	3,5	;RP0=1, select bank1
  3033  0004' 1303               	bcf	3,6	;RP1=0, select bank1
  3034  0005' 0080'              	movwf	??_encoders_init^(0+128)
  3035  0006' 3003               	movlw	3
  3036  0007'                    u4045:	
  3037  0007' 1003               	clrc
  3038  0008' 0C80'              	rrf	??_encoders_init^(0+128),f
  3039  0009' 3EFF               	addlw	-1
  3040  000A' 1D03               	skipz
  3041  000B' 2800'              	goto	u4045
  3042  000C' 0800'              	movf	??_encoders_init^(0+128),w
  3043  000D' 3903               	andlw	3
  3044  000E' 0080'              	movwf	(??_encoders_init+1)^(0+128)
  3045  000F' 0800'              	movf	(??_encoders_init+1)^(0+128),w
  3046  0010' 0080'              	movwf	_state1^(0+128)	;volatile
  3047                           
  3048                           ;main.c: 214: encoder1_counter = 0;
  3049  0011' 3000               	movlw	0
  3050  0012' 0080'              	movwf	(_encoder1_counter+3)^(0+128)	;volatile
  3051  0013' 3000               	movlw	0
  3052  0014' 0080'              	movwf	(_encoder1_counter+2)^(0+128)	;volatile
  3053  0015' 3000               	movlw	0
  3054  0016' 0080'              	movwf	(_encoder1_counter+1)^(0+128)	;volatile
  3055  0017' 3000               	movlw	0
  3056  0018' 0080'              	movwf	_encoder1_counter^(0+128)	;volatile
  3057  0019' 0008               	return
  3058  001A'                    __end_of_encoders_init:	
  3059                           
  3060                           	psect	text13
  3061  0000'                    __ptext13:	
  3062 ;; *************** function _chkchr *****************
  3063 ;; Defined at:
  3064 ;;		line 142 in file "serial.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      unsigned char 
  3071 ;; Registers used:
  3072 ;;		wreg
  3073 ;; Tracked objects:
  3074 ;;		On entry : 0/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3078 ;;      Params:         0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0
  3080 ;;      Temps:          0       0       0       0       0
  3081 ;;      Totals:         0       0       0       0       0
  3082 ;;Total ram usage:        0 bytes
  3083 ;; Hardware stack levels used:    1
  3084 ;; Hardware stack levels required when called:    4
  3085 ;; This function calls:
  3086 ;;		Nothing
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           
  3093                           ;psect for function _chkchr
  3094  0000'                    _chkchr:	
  3095                           
  3096                           ;serial.c: 143: if (RCIF) {
  3097                           
  3098                           ;incstack = 0
  3099                           ; Regs used in _chkchr: [wreg]
  3100  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  3101  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  3102  0002' 1E8C               	btfss	12,5	;volatile
  3103  0003' 2800'              	goto	l2784
  3104                           
  3105                           ;serial.c: 144: return RCREG;
  3106  0004' 081A               	movf	26,w	;volatile
  3107  0005' 0008               	return
  3108  0006'                    l2784:	
  3109                           
  3110                           ;serial.c: 145: };serial.c: 146: return 255;
  3111  0006' 30FF               	movlw	255
  3112  0007' 0008               	return
  3113  0008'                    __end_of_chkchr:	
  3114                           
  3115                           	psect	text14
  3116  0000'                    __ptext14:	
  3117 ;; *************** function _SetPoint *****************
  3118 ;; Defined at:
  3119 ;;		line 121 in file "main.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  new_val         2    0[BANK1 ] int 
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3133 ;;      Params:         0       0       2       0       0
  3134 ;;      Locals:         0       0       0       0       0
  3135 ;;      Temps:          0       0       0       0       0
  3136 ;;      Totals:         0       0       2       0       0
  3137 ;;Total ram usage:        2 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    4
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _SetPoint
  3149  0000'                    _SetPoint:	
  3150                           
  3151                           ;main.c: 122: set_point = new_val;
  3152                           
  3153                           ;incstack = 0
  3154                           ; Regs used in _SetPoint: [wreg]
  3155  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  3156  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  3157  0002' 0800'              	movf	SetPoint@new_val^(0+128),w
  3158  0003' 0080'              	movwf	_set_point^(0+128)	;volatile
  3159  0004' 0800'              	movf	(SetPoint@new_val+1)^(0+128),w
  3160  0005' 0080'              	movwf	(_set_point+1)^(0+128)	;volatile
  3161  0006' 3000               	movlw	0
  3162  0007' 1B80'              	btfsc	(_set_point+1)^(0+128),7	;volatile
  3163  0008' 30FF               	movlw	255
  3164  0009' 0080'              	movwf	(_set_point+2)^(0+128)	;volatile
  3165  000A' 0080'              	movwf	(_set_point+3)^(0+128)	;volatile
  3166  000B' 0008               	return
  3167  000C'                    __end_of_SetPoint:	
  3168                           
  3169                           	psect	text15
  3170  0000'                    __ptext15:	
  3171 ;; *************** function _isr *****************
  3172 ;; Defined at:
  3173 ;;		line 132 in file "main.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  portB           1   79[BANK0 ] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3187 ;;      Params:         0       0       0       0       0
  3188 ;;      Locals:         0       1       0       0       0
  3189 ;;      Temps:          0       6       0       0       0
  3190 ;;      Totals:         0       7       0       0       0
  3191 ;;Total ram usage:        7 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    3
  3194 ;; This function calls:
  3195 ;;		_SetMotor
  3196 ;; This function is called by:
  3197 ;;		Interrupt level 1
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _isr
  3203  0000'                    _isr:	
  3204                           
  3205                           ;main.c: 133: static int tick;;main.c: 137: if (T0IE && T0IF) {
  3206  0000' 1A8B               	btfsc	11,5	;volatile
  3207  0001' 1D0B               	btfss	11,2	;volatile
  3208  0002' 2800'              	goto	i1l3046
  3209                           
  3210                           ;main.c: 139: SetMotor();
  3211  0003' 120A' 118A' 2000' 120A' 118A' 	fcall	_SetMotor
  3212                           
  3213                           ;main.c: 140: if (sampling){
  3214  0008' 1683               	bsf	3,5	;RP0=1, select bank1
  3215  0009' 1303               	bcf	3,6	;RP1=0, select bank1
  3216  000A' 0800'              	movf	_sampling^(0+128),w	;volatile
  3217  000B' 1903               	btfsc	3,2
  3218  000C' 2800'              	goto	i1l3042
  3219                           
  3220                           ;main.c: 141: if (samples < 140/2){
  3221  000D' 0800'              	movf	(_samples+1)^(0+128),w	;volatile
  3222  000E' 3A80               	xorlw	128
  3223  000F' 00FF               	movwf	127
  3224  0010' 3080               	movlw	128
  3225  0011' 027F               	subwf	127,w
  3226  0012' 1D03               	skipz
  3227  0013' 2800'              	goto	u430_25
  3228  0014' 3046               	movlw	70
  3229  0015' 0200'              	subwf	_samples^(0+128),w	;volatile
  3230  0016'                    u430_25:	
  3231  0016' 1803               	skipnc
  3232  0017' 2800'              	goto	i1l3036
  3233                           
  3234                           ;main.c: 142: pos_log1[samples] = motor_pos-last_pos;
  3235  0018' 1683               	bsf	3,5	;RP0=1, select bank1
  3236  0019' 1303               	bcf	3,6	;RP1=0, select bank1
  3237  001A' 0800'              	movf	_last_pos^(0+128),w	;volatile
  3238  001B' 0200'              	subwf	_motor_pos^(0+128),w	;volatile
  3239  001C' 1283               	bcf	3,5	;RP0=0, select bank0
  3240  001D' 1303               	bcf	3,6	;RP1=0, select bank0
  3241  001E' 00C9'              	movwf	??_isr
  3242  001F' 1683               	bsf	3,5	;RP0=1, select bank1
  3243  0020' 1303               	bcf	3,6	;RP1=0, select bank1
  3244  0021' 0800'              	movf	_samples^(0+128),w	;volatile
  3245  0022' 3E00'              	addlw	(low (_pos_log1| (0+256)))& (0+255)
  3246  0023' 2800'              	goto	L1
  3247  0024'                    i1l3036:	
  3248                           ;main.c: 143: }else{
  3249                           
  3250                           
  3251                           ;main.c: 144: pos_log2[samples-(140/2)] = motor_pos-last_pos;
  3252  0024' 1683               	bsf	3,5	;RP0=1, select bank1
  3253  0025' 1303               	bcf	3,6	;RP1=0, select bank1
  3254  0026' 0800'              	movf	_last_pos^(0+128),w	;volatile
  3255  0027' 0200'              	subwf	_motor_pos^(0+128),w	;volatile
  3256  0028' 1283               	bcf	3,5	;RP0=0, select bank0
  3257  0029' 1303               	bcf	3,6	;RP1=0, select bank0
  3258  002A' 00C9'              	movwf	??_isr
  3259  002B' 1683               	bsf	3,5	;RP0=1, select bank1
  3260  002C' 1303               	bcf	3,6	;RP1=0, select bank1
  3261  002D' 0800'              	movf	_samples^(0+128),w	;volatile
  3262  002E' 3E00'              	addlw	(low ((_pos_log2| (0+256)+186)))& (0+255)
  3263  002F'                    L1:	
  3264  002F' 0084               	movwf	4
  3265  0030' 1283               	bcf	3,5	;RP0=0, select bank0
  3266  0031' 1303               	bcf	3,6	;RP1=0, select bank0
  3267  0032' 0849'              	movf	??_isr,w
  3268  0033' 1783               	bsf	3,7	;select IRP bank2
  3269  0034' 0080               	movwf	0
  3270                           
  3271                           ;main.c: 145: };main.c: 146: last_pos = motor_pos;
  3272  0035' 1683               	bsf	3,5	;RP0=1, select bank1
  3273  0036' 1303               	bcf	3,6	;RP1=0, select bank1
  3274  0037' 0800'              	movf	(_motor_pos+3)^(0+128),w	;volatile
  3275  0038' 0080'              	movwf	(_last_pos+3)^(0+128)	;volatile
  3276  0039' 0800'              	movf	(_motor_pos+2)^(0+128),w	;volatile
  3277  003A' 0080'              	movwf	(_last_pos+2)^(0+128)	;volatile
  3278  003B' 0800'              	movf	(_motor_pos+1)^(0+128),w	;volatile
  3279  003C' 0080'              	movwf	(_last_pos+1)^(0+128)	;volatile
  3280  003D' 0800'              	movf	_motor_pos^(0+128),w	;volatile
  3281  003E' 0080'              	movwf	_last_pos^(0+128)	;volatile
  3282                           
  3283                           ;main.c: 147: samples++;
  3284  003F' 3001               	movlw	1
  3285  0040' 0780'              	addwf	_samples^(0+128),f	;volatile
  3286  0041' 1803               	skipnc
  3287  0042' 0A80'              	incf	(_samples+1)^(0+128),f	;volatile
  3288  0043' 3000               	movlw	0
  3289  0044' 0780'              	addwf	(_samples+1)^(0+128),f	;volatile
  3290  0045'                    i1l3042:	
  3291                           
  3292                           ;main.c: 148: };main.c: 150: TMR0 = (0xff - 195);
  3293  0045' 303C               	movlw	60
  3294  0046' 1283               	bcf	3,5	;RP0=0, select bank0
  3295  0047' 1303               	bcf	3,6	;RP1=0, select bank0
  3296  0048' 0081               	movwf	1	;volatile
  3297                           
  3298                           ;main.c: 151: T0IF = 0;
  3299  0049' 110B               	bcf	11,2	;volatile
  3300  004A'                    i1l3046:	
  3301                           
  3302                           ;main.c: 152: };main.c: 155: if (RBIE && RBIF) {
  3303  004A' 198B               	btfsc	11,3	;volatile
  3304  004B' 1C0B               	btfss	11,0	;volatile
  3305  004C' 2800'              	goto	i1l327
  3306                           
  3307                           ;main.c: 156: char portB = PORTB;
  3308  004D' 0806               	movf	6,w	;volatile
  3309  004E' 00C9'              	movwf	??_isr
  3310  004F' 0849'              	movf	??_isr,w
  3311  0050' 00CF'              	movwf	isr@portB
  3312                           
  3313                           ;main.c: 158: ab1 = (portB & 0b00011000) >>3;
  3314  0051' 084F'              	movf	isr@portB,w
  3315  0052' 00C9'              	movwf	??_isr
  3316  0053' 3003               	movlw	3
  3317  0054'                    u433_25:	
  3318  0054' 1003               	clrc
  3319  0055' 0CC9'              	rrf	??_isr,f
  3320  0056' 3EFF               	addlw	-1
  3321  0057' 1D03               	skipz
  3322  0058' 2800'              	goto	u433_25
  3323  0059' 0849'              	movf	??_isr,w
  3324  005A' 3903               	andlw	3
  3325  005B' 00CA'              	movwf	??_isr+1
  3326  005C' 084A'              	movf	??_isr+1,w
  3327  005D' 1683               	bsf	3,5	;RP0=1, select bank1
  3328  005E' 1303               	bcf	3,6	;RP1=0, select bank1
  3329  005F' 0080'              	movwf	_ab1^(0+128)	;volatile
  3330                           
  3331                           ;main.c: 159: switch(state1)
  3332  0060' 2800'              	goto	i1l3092
  3333  0061'                    i1l3054:	
  3334                           
  3335                           ;main.c: 162: if(ab1 == 1){
  3336  0061' 0300'              	decf	_ab1^(0+128),w	;volatile
  3337  0062' 1D03               	btfss	3,2
  3338  0063' 2800'              	goto	i1l3058
  3339                           
  3340                           ;main.c: 163: state1 = 1;
  3341  0064' 3001               	movlw	1
  3342  0065' 2800'              	goto	L2
  3343  0066'                    i1l3058:	
  3344                           ;main.c: 165: }
  3345                           
  3346                           ;main.c: 164: encoder1_counter--;
  3347                           
  3348                           
  3349                           ;main.c: 166: else if(ab1 == 2){
  3350  0066' 3002               	movlw	2
  3351  0067' 0600'              	xorwf	_ab1^(0+128),w	;volatile
  3352  0068' 1D03               	btfss	3,2
  3353  0069' 2800'              	goto	i1l3094
  3354                           
  3355                           ;main.c: 167: state1 = 2;
  3356  006A' 3002               	movlw	2
  3357  006B' 1283               	bcf	3,5	;RP0=0, select bank0
  3358  006C' 1303               	bcf	3,6	;RP1=0, select bank0
  3359  006D' 00C9'              	movwf	??_isr
  3360  006E' 0849'              	movf	??_isr,w
  3361  006F' 1683               	bsf	3,5	;RP0=1, select bank1
  3362  0070' 1303               	bcf	3,6	;RP1=0, select bank1
  3363  0071' 0080'              	movwf	_state1^(0+128)	;volatile
  3364  0072' 2800'              	goto	i1l3066
  3365  0073'                    i1l3062:	
  3366                           ;main.c: 168: encoder1_counter++;
  3367                           
  3368                           
  3369                           ;main.c: 172: if(ab1 == 0){
  3370  0073' 0800'              	movf	_ab1^(0+128),w	;volatile
  3371  0074' 1D03               	btfss	3,2
  3372  0075' 2800'              	goto	i1l3068
  3373                           
  3374                           ;main.c: 173: state1 = 0;
  3375  0076' 0180'              	clrf	_state1^(0+128)	;volatile
  3376  0077'                    i1l3066:	
  3377                           
  3378                           ;main.c: 174: encoder1_counter++;
  3379  0077' 3001               	movlw	1
  3380  0078' 0780'              	addwf	_encoder1_counter^(0+128),f	;volatile
  3381  0079' 3000               	movlw	0
  3382  007A' 1803               	skipnc
  3383  007B' 3001               	movlw	1
  3384  007C' 0780'              	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3385  007D' 3000               	movlw	0
  3386  007E' 1803               	skipnc
  3387  007F' 3001               	movlw	1
  3388  0080' 0780'              	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3389  0081' 3000               	movlw	0
  3390  0082' 1803               	skipnc
  3391  0083' 3001               	movlw	1
  3392  0084' 2800'              	goto	L3
  3393  0085'                    i1l3068:	
  3394                           ;main.c: 175: }
  3395                           
  3396                           
  3397                           ;main.c: 176: else if (ab1 == 3){
  3398  0085' 3003               	movlw	3
  3399  0086' 0600'              	xorwf	_ab1^(0+128),w	;volatile
  3400  0087' 1D03               	btfss	3,2
  3401  0088' 2800'              	goto	i1l3094
  3402                           
  3403                           ;main.c: 177: state1 = 3;
  3404  0089' 3003               	movlw	3
  3405  008A'                    L2:	
  3406  008A' 1283               	bcf	3,5	;RP0=0, select bank0
  3407  008B' 1303               	bcf	3,6	;RP1=0, select bank0
  3408  008C' 00C9'              	movwf	??_isr
  3409  008D' 0849'              	movf	??_isr,w
  3410  008E' 1683               	bsf	3,5	;RP0=1, select bank1
  3411  008F' 1303               	bcf	3,6	;RP1=0, select bank1
  3412  0090' 0080'              	movwf	_state1^(0+128)	;volatile
  3413                           
  3414                           ;main.c: 178: encoder1_counter--;
  3415  0091' 30FF               	movlw	255
  3416  0092' 0780'              	addwf	_encoder1_counter^(0+128),f	;volatile
  3417  0093' 30FF               	movlw	255
  3418  0094' 1C03               	skipc
  3419  0095' 0780'              	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3420  0096' 30FF               	movlw	255
  3421  0097' 1C03               	skipc
  3422  0098' 0780'              	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3423  0099' 30FF               	movlw	255
  3424  009A' 1C03               	skipc
  3425  009B'                    L3:	
  3426  009B' 0780'              	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  3427  009C' 2800'              	goto	i1l3094
  3428  009D'                    i1l3072:	
  3429                           
  3430                           ;main.c: 182: if(ab1 == 0){
  3431  009D' 0800'              	movf	_ab1^(0+128),w	;volatile
  3432  009E' 1D03               	btfss	3,2
  3433  009F' 2800'              	goto	i1l3078
  3434                           
  3435                           ;main.c: 183: state1 = 0;
  3436  00A0' 0180'              	clrf	_state1^(0+128)	;volatile
  3437  00A1' 2800'              	goto	L4
  3438  00A2'                    i1l3078:	
  3439                           ;main.c: 185: }
  3440                           
  3441                           ;main.c: 184: encoder1_counter--;
  3442                           
  3443                           
  3444                           ;main.c: 186: else if(ab1 == 3){
  3445  00A2' 3003               	movlw	3
  3446  00A3' 0600'              	xorwf	_ab1^(0+128),w	;volatile
  3447  00A4' 1D03               	btfss	3,2
  3448  00A5' 2800'              	goto	i1l3094
  3449                           
  3450                           ;main.c: 187: state1 = 3;
  3451  00A6' 3003               	movlw	3
  3452  00A7' 1283               	bcf	3,5	;RP0=0, select bank0
  3453  00A8' 1303               	bcf	3,6	;RP1=0, select bank0
  3454  00A9' 00C9'              	movwf	??_isr
  3455  00AA' 0849'              	movf	??_isr,w
  3456  00AB' 1683               	bsf	3,5	;RP0=1, select bank1
  3457  00AC' 1303               	bcf	3,6	;RP1=0, select bank1
  3458  00AD' 0080'              	movwf	_state1^(0+128)	;volatile
  3459                           
  3460                           ;main.c: 188: encoder1_counter++;
  3461  00AE' 3001               	movlw	1
  3462  00AF' 0780'              	addwf	_encoder1_counter^(0+128),f	;volatile
  3463  00B0' 3000               	movlw	0
  3464  00B1' 1803               	skipnc
  3465  00B2' 3001               	movlw	1
  3466  00B3' 0780'              	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3467  00B4' 3000               	movlw	0
  3468  00B5' 1803               	skipnc
  3469  00B6' 3001               	movlw	1
  3470  00B7' 0780'              	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3471  00B8' 3000               	movlw	0
  3472  00B9' 1803               	skipnc
  3473  00BA' 3001               	movlw	1
  3474  00BB' 2800'              	goto	L5
  3475  00BC'                    i1l3082:	
  3476                           
  3477                           ;main.c: 192: if(ab1 == 2){
  3478  00BC' 3002               	movlw	2
  3479  00BD' 0600'              	xorwf	_ab1^(0+128),w	;volatile
  3480  00BE' 1D03               	btfss	3,2
  3481  00BF' 2800'              	goto	i1l3086
  3482                           
  3483                           ;main.c: 193: state1 = 2;
  3484  00C0' 3002               	movlw	2
  3485  00C1' 1283               	bcf	3,5	;RP0=0, select bank0
  3486  00C2' 1303               	bcf	3,6	;RP1=0, select bank0
  3487  00C3' 00C9'              	movwf	??_isr
  3488  00C4' 0849'              	movf	??_isr,w
  3489  00C5' 1683               	bsf	3,5	;RP0=1, select bank1
  3490  00C6' 1303               	bcf	3,6	;RP1=0, select bank1
  3491  00C7' 0080'              	movwf	_state1^(0+128)	;volatile
  3492  00C8'                    L4:	
  3493                           
  3494                           ;main.c: 194: encoder1_counter--;
  3495  00C8' 30FF               	movlw	255
  3496  00C9' 0780'              	addwf	_encoder1_counter^(0+128),f	;volatile
  3497  00CA' 30FF               	movlw	255
  3498  00CB' 1C03               	skipc
  3499  00CC' 0780'              	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3500  00CD' 30FF               	movlw	255
  3501  00CE' 1C03               	skipc
  3502  00CF' 0780'              	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3503  00D0' 30FF               	movlw	255
  3504  00D1' 1C03               	skipc
  3505  00D2'                    L5:	
  3506  00D2' 0780'              	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  3507                           
  3508                           ;main.c: 195: }
  3509  00D3' 2800'              	goto	i1l3094
  3510  00D4'                    i1l3086:	
  3511                           
  3512                           ;main.c: 196: else if (ab1 == 1){
  3513  00D4' 0300'              	decf	_ab1^(0+128),w	;volatile
  3514  00D5' 1D03               	btfss	3,2
  3515  00D6' 2800'              	goto	i1l3094
  3516                           
  3517                           ;main.c: 197: state1 = 1;
  3518  00D7' 3001               	movlw	1
  3519  00D8' 1283               	bcf	3,5	;RP0=0, select bank0
  3520  00D9' 1303               	bcf	3,6	;RP1=0, select bank0
  3521  00DA' 00C9'              	movwf	??_isr
  3522  00DB' 0849'              	movf	??_isr,w
  3523  00DC' 1683               	bsf	3,5	;RP0=1, select bank1
  3524  00DD' 1303               	bcf	3,6	;RP1=0, select bank1
  3525  00DE' 0080'              	movwf	_state1^(0+128)	;volatile
  3526                           
  3527                           ;main.c: 198: encoder1_counter++;
  3528  00DF' 3001               	movlw	1
  3529  00E0' 0780'              	addwf	_encoder1_counter^(0+128),f	;volatile
  3530  00E1' 3000               	movlw	0
  3531  00E2' 1803               	skipnc
  3532  00E3' 3001               	movlw	1
  3533  00E4' 0780'              	addwf	(_encoder1_counter+1)^(0+128),f	;volatile
  3534  00E5' 3000               	movlw	0
  3535  00E6' 1803               	skipnc
  3536  00E7' 3001               	movlw	1
  3537  00E8' 0780'              	addwf	(_encoder1_counter+2)^(0+128),f	;volatile
  3538  00E9' 3000               	movlw	0
  3539  00EA' 1803               	skipnc
  3540  00EB' 3001               	movlw	1
  3541  00EC' 0780'              	addwf	(_encoder1_counter+3)^(0+128),f	;volatile
  3542  00ED' 2800'              	goto	i1l3094
  3543  00EE'                    i1l3092:	
  3544  00EE' 0800'              	movf	_state1^(0+128),w	;volatile
  3545                           
  3546                           ; Switch size 1, requested type "simple"
  3547                           ; Number of cases is 4, Range of values is 0 to 3
  3548                           ; switch strategies available:
  3549                           ; Name         Instructions Cycles
  3550                           ; simple_byte           13     7 (average)
  3551                           ; direct_byte           20     8 (fixed)
  3552                           ; jumptable            260     6 (fixed)
  3553                           ;	Chosen strategy is simple_byte
  3554  00EF' 3A00               	xorlw	0	; case 0
  3555  00F0' 1903               	skipnz
  3556  00F1' 2800'              	goto	i1l3054
  3557  00F2' 3A01               	xorlw	1	; case 1
  3558  00F3' 1903               	skipnz
  3559  00F4' 2800'              	goto	i1l3062
  3560  00F5' 3A03               	xorlw	3	; case 2
  3561  00F6' 1903               	skipnz
  3562  00F7' 2800'              	goto	i1l3072
  3563  00F8' 3A01               	xorlw	1	; case 3
  3564  00F9' 1903               	skipnz
  3565  00FA' 2800'              	goto	i1l3082
  3566  00FB' 2800'              	goto	i1l3094
  3567  00FC'                    i1l3094:	
  3568                           
  3569                           ;main.c: 203: motor_pos = -encoder1_counter;
  3570  00FC' 0900'              	comf	_encoder1_counter^(0+128),w	;volatile
  3571  00FD' 0080'              	movwf	_motor_pos^(0+128)	;volatile
  3572  00FE' 0901'              	comf	(_encoder1_counter^(0+128)+1),w	;volatile
  3573  00FF' 0080'              	movwf	(_motor_pos+1)^(0+128)	;volatile
  3574  0100' 0902'              	comf	(_encoder1_counter^(0+128)+2),w	;volatile
  3575  0101' 0080'              	movwf	(_motor_pos+2)^(0+128)	;volatile
  3576  0102' 0903'              	comf	(_encoder1_counter^(0+128)+3),w	;volatile
  3577  0103' 0080'              	movwf	(_motor_pos+3)^(0+128)	;volatile
  3578  0104' 0A80'              	incf	_motor_pos^(0+128),f	;volatile
  3579  0105' 1903               	skipnz
  3580  0106' 0A80'              	incf	(_motor_pos+1)^(0+128),f	;volatile
  3581  0107' 1903               	skipnz
  3582  0108' 0A80'              	incf	(_motor_pos+2)^(0+128),f	;volatile
  3583  0109' 1903               	skipnz
  3584  010A' 0A80'              	incf	(_motor_pos+3)^(0+128),f	;volatile
  3585                           
  3586                           ;main.c: 204: RBIF = 0;
  3587  010B' 100B               	bcf	11,0	;volatile
  3588  010C'                    i1l327:	
  3589  010C' 1283               	bcf	3,5	;RP0=0, select bank0
  3590  010D' 084E'              	movf	??_isr+5,w
  3591  010E' 00FF               	movwf	127
  3592  010F' 084D'              	movf	??_isr+4,w
  3593  0110' 008A               	movwf	10
  3594  0111' 084C'              	movf	??_isr+3,w
  3595  0112' 0084               	movwf	4
  3596  0113' 0E00'              	swapf	(??_isr+2)^0,w
  3597  0114' 0083               	movwf	3
  3598  0115' 0EFE               	swapf	126,f
  3599  0116' 0E7E               	swapf	126,w
  3600  0117' 0009               	retfie
  3601  0118'                    __end_of_isr:	
  3602                           
  3603                           	psect	intentry
  3604  0000'                    __pintentry:	
  3605                           ;incstack = 0
  3606                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3607                           
  3608  0000'                    interrupt_function:	
  3609  007E                     saved_w	set	btemp
  3610  0000' 00FE               	movwf	btemp
  3611  0001' 0E03               	swapf	3,w
  3612  0002' 1283               	bcf	3,5	;RP0=0, select bank0
  3613  0003' 1303               	bcf	3,6	;RP1=0, select bank0
  3614  0004' 00CB'              	movwf	??_isr+2
  3615  0005' 0804               	movf	4,w
  3616  0006' 00CC'              	movwf	??_isr+3
  3617  0007' 080A               	movf	10,w
  3618  0008' 00CD'              	movwf	??_isr+4
  3619  0009' 087F               	movf	btemp+1,w
  3620  000A' 00CE'              	movwf	??_isr+5
  3621  000B' 120A' 118A' 2800'  	ljmp	_isr
  3622                           
  3623                           	psect	text16
  3624  0000'                    __ptext16:	
  3625 ;; *************** function _SetMotor *****************
  3626 ;; Defined at:
  3627 ;;		line 90 in file "main.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;  resp            4   69[BANK0 ] long 
  3632 ;;  err             4   65[BANK0 ] long 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3642 ;;      Params:         0       0       0       0       0
  3643 ;;      Locals:         0      12       0       0       0
  3644 ;;      Temps:          0       4       0       0       0
  3645 ;;      Totals:         0      16       0       0       0
  3646 ;;Total ram usage:       16 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    2
  3649 ;; This function calls:
  3650 ;;		___fladd
  3651 ;;		___flmul
  3652 ;;		___fltol
  3653 ;;		___xxtofl
  3654 ;;		_constrain
  3655 ;;		i1_pwm_set
  3656 ;; This function is called by:
  3657 ;;		_isr
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function _SetMotor
  3663  0000'                    _SetMotor:	
  3664                           
  3665                           ;main.c: 91: static long integral;;main.c: 92: static long derivative;;main.c: 93: stati
      +                          c long last_err;;main.c: 95: long err = set_point - motor_pos;
  3666                           
  3667                           ;incstack = 0
  3668                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3669  0000' 1683               	bsf	3,5	;RP0=1, select bank1
  3670  0001' 1303               	bcf	3,6	;RP1=0, select bank1
  3671  0002' 0800'              	movf	_set_point^(0+128),w	;volatile
  3672  0003' 1283               	bcf	3,5	;RP0=0, select bank0
  3673  0004' 1303               	bcf	3,6	;RP1=0, select bank0
  3674  0005' 00B9'              	movwf	??_SetMotor
  3675  0006' 1683               	bsf	3,5	;RP0=1, select bank1
  3676  0007' 1303               	bcf	3,6	;RP1=0, select bank1
  3677  0008' 0800'              	movf	(_set_point+1)^(0+128),w	;volatile
  3678  0009' 1283               	bcf	3,5	;RP0=0, select bank0
  3679  000A' 1303               	bcf	3,6	;RP1=0, select bank0
  3680  000B' 00BA'              	movwf	??_SetMotor+1
  3681  000C' 1683               	bsf	3,5	;RP0=1, select bank1
  3682  000D' 1303               	bcf	3,6	;RP1=0, select bank1
  3683  000E' 0800'              	movf	(_set_point+2)^(0+128),w	;volatile
  3684  000F' 1283               	bcf	3,5	;RP0=0, select bank0
  3685  0010' 1303               	bcf	3,6	;RP1=0, select bank0
  3686  0011' 00BB'              	movwf	??_SetMotor+2
  3687  0012' 1683               	bsf	3,5	;RP0=1, select bank1
  3688  0013' 1303               	bcf	3,6	;RP1=0, select bank1
  3689  0014' 0800'              	movf	(_set_point+3)^(0+128),w	;volatile
  3690  0015' 1283               	bcf	3,5	;RP0=0, select bank0
  3691  0016' 1303               	bcf	3,6	;RP1=0, select bank0
  3692  0017' 00BC'              	movwf	??_SetMotor+3
  3693  0018' 1683               	bsf	3,5	;RP0=1, select bank1
  3694  0019' 1303               	bcf	3,6	;RP1=0, select bank1
  3695  001A' 0800'              	movf	_motor_pos^(0+128),w	;volatile
  3696  001B' 1283               	bcf	3,5	;RP0=0, select bank0
  3697  001C' 1303               	bcf	3,6	;RP1=0, select bank0
  3698  001D' 02B9'              	subwf	??_SetMotor,f
  3699  001E' 1683               	bsf	3,5	;RP0=1, select bank1
  3700  001F' 1303               	bcf	3,6	;RP1=0, select bank1
  3701  0020' 0800'              	movf	(_motor_pos+1)^(0+128),w	;volatile
  3702  0021' 1C03               	skipc
  3703  0022' 0F00'              	incfsz	(_motor_pos+1)^(0+128),w	;volatile
  3704  0023' 2800'              	goto	u400_21
  3705  0024' 2800'              	goto	u400_22
  3706  0025'                    u400_21:	
  3707  0025' 1283               	bcf	3,5	;RP0=0, select bank0
  3708  0026' 1303               	bcf	3,6	;RP1=0, select bank0
  3709  0027' 02BA'              	subwf	??_SetMotor+1,f
  3710  0028'                    u400_22:	
  3711  0028' 1683               	bsf	3,5	;RP0=1, select bank1
  3712  0029' 1303               	bcf	3,6	;RP1=0, select bank1
  3713  002A' 0800'              	movf	(_motor_pos+2)^(0+128),w	;volatile
  3714  002B' 1C03               	skipc
  3715  002C' 0F00'              	incfsz	(_motor_pos+2)^(0+128),w	;volatile
  3716  002D' 2800'              	goto	u400_23
  3717  002E' 2800'              	goto	u400_24
  3718  002F'                    u400_23:	
  3719  002F' 1283               	bcf	3,5	;RP0=0, select bank0
  3720  0030' 1303               	bcf	3,6	;RP1=0, select bank0
  3721  0031' 02BB'              	subwf	??_SetMotor+2,f
  3722  0032'                    u400_24:	
  3723  0032' 1683               	bsf	3,5	;RP0=1, select bank1
  3724  0033' 1303               	bcf	3,6	;RP1=0, select bank1
  3725  0034' 0800'              	movf	(_motor_pos+3)^(0+128),w	;volatile
  3726  0035' 1C03               	skipc
  3727  0036' 0F00'              	incfsz	(_motor_pos+3)^(0+128),w	;volatile
  3728  0037' 2800'              	goto	u400_25
  3729  0038' 2800'              	goto	u400_26
  3730  0039'                    u400_25:	
  3731  0039' 1283               	bcf	3,5	;RP0=0, select bank0
  3732  003A' 1303               	bcf	3,6	;RP1=0, select bank0
  3733  003B' 02BC'              	subwf	??_SetMotor+3,f
  3734  003C'                    u400_26:	
  3735  003C' 1683               	bsf	3,5	;RP0=1, select bank1
  3736  003D' 1303               	bcf	3,6	;RP1=0, select bank1
  3737  003E' 1283               	bcf	3,5	;RP0=0, select bank0
  3738  003F' 1303               	bcf	3,6	;RP1=0, select bank0
  3739  0040' 083C'              	movf	??_SetMotor+3,w
  3740  0041' 00C4'              	movwf	SetMotor@err+3
  3741  0042' 083B'              	movf	??_SetMotor+2,w
  3742  0043' 00C3'              	movwf	SetMotor@err+2
  3743  0044' 083A'              	movf	??_SetMotor+1,w
  3744  0045' 00C2'              	movwf	SetMotor@err+1
  3745  0046' 0839'              	movf	??_SetMotor,w
  3746  0047' 00C1'              	movwf	SetMotor@err
  3747                           
  3748                           ;main.c: 98: derivative = (err - last_err);
  3749  0048' 0841'              	movf	SetMotor@err,w
  3750  0049' 00B9'              	movwf	??_SetMotor
  3751  004A' 0842'              	movf	SetMotor@err+1,w
  3752  004B' 00BA'              	movwf	??_SetMotor+1
  3753  004C' 0843'              	movf	SetMotor@err+2,w
  3754  004D' 00BB'              	movwf	??_SetMotor+2
  3755  004E' 0844'              	movf	SetMotor@err+3,w
  3756  004F' 00BC'              	movwf	??_SetMotor+3
  3757  0050' 1683               	bsf	3,5	;RP0=1, select bank3
  3758  0051' 1703               	bsf	3,6	;RP1=1, select bank3
  3759  0052' 0800'              	movf	SetMotor@last_err^(0+384),w
  3760  0053' 1283               	bcf	3,5	;RP0=0, select bank0
  3761  0054' 1303               	bcf	3,6	;RP1=0, select bank0
  3762  0055' 02B9'              	subwf	??_SetMotor,f
  3763  0056' 1683               	bsf	3,5	;RP0=1, select bank3
  3764  0057' 1703               	bsf	3,6	;RP1=1, select bank3
  3765  0058' 0800'              	movf	(SetMotor@last_err+1)^(0+384),w
  3766  0059' 1C03               	skipc
  3767  005A' 0F00'              	incfsz	(SetMotor@last_err+1)^(0+384),w
  3768  005B' 2800'              	goto	u401_21
  3769  005C' 2800'              	goto	u401_22
  3770  005D'                    u401_21:	
  3771  005D' 1283               	bcf	3,5	;RP0=0, select bank0
  3772  005E' 1303               	bcf	3,6	;RP1=0, select bank0
  3773  005F' 02BA'              	subwf	??_SetMotor+1,f
  3774  0060'                    u401_22:	
  3775  0060' 1683               	bsf	3,5	;RP0=1, select bank3
  3776  0061' 1703               	bsf	3,6	;RP1=1, select bank3
  3777  0062' 0800'              	movf	(SetMotor@last_err+2)^(0+384),w
  3778  0063' 1C03               	skipc
  3779  0064' 0F00'              	incfsz	(SetMotor@last_err+2)^(0+384),w
  3780  0065' 2800'              	goto	u401_23
  3781  0066' 2800'              	goto	u401_24
  3782  0067'                    u401_23:	
  3783  0067' 1283               	bcf	3,5	;RP0=0, select bank0
  3784  0068' 1303               	bcf	3,6	;RP1=0, select bank0
  3785  0069' 02BB'              	subwf	??_SetMotor+2,f
  3786  006A'                    u401_24:	
  3787  006A' 1683               	bsf	3,5	;RP0=1, select bank3
  3788  006B' 1703               	bsf	3,6	;RP1=1, select bank3
  3789  006C' 0800'              	movf	(SetMotor@last_err+3)^(0+384),w
  3790  006D' 1C03               	skipc
  3791  006E' 0F00'              	incfsz	(SetMotor@last_err+3)^(0+384),w
  3792  006F' 2800'              	goto	u401_25
  3793  0070' 2800'              	goto	u401_26
  3794  0071'                    u401_25:	
  3795  0071' 1283               	bcf	3,5	;RP0=0, select bank0
  3796  0072' 1303               	bcf	3,6	;RP1=0, select bank0
  3797  0073' 02BC'              	subwf	??_SetMotor+3,f
  3798  0074'                    u401_26:	
  3799  0074' 1683               	bsf	3,5	;RP0=1, select bank3
  3800  0075' 1703               	bsf	3,6	;RP1=1, select bank3
  3801  0076' 1283               	bcf	3,5	;RP0=0, select bank0
  3802  0077' 1303               	bcf	3,6	;RP1=0, select bank0
  3803  0078' 083C'              	movf	??_SetMotor+3,w
  3804  0079' 1683               	bsf	3,5	;RP0=1, select bank3
  3805  007A' 1703               	bsf	3,6	;RP1=1, select bank3
  3806  007B' 0080'              	movwf	(SetMotor@derivative+3)^(0+384)
  3807  007C' 1283               	bcf	3,5	;RP0=0, select bank0
  3808  007D' 1303               	bcf	3,6	;RP1=0, select bank0
  3809  007E' 083B'              	movf	??_SetMotor+2,w
  3810  007F' 1683               	bsf	3,5	;RP0=1, select bank3
  3811  0080' 1703               	bsf	3,6	;RP1=1, select bank3
  3812  0081' 0080'              	movwf	(SetMotor@derivative+2)^(0+384)
  3813  0082' 1283               	bcf	3,5	;RP0=0, select bank0
  3814  0083' 1303               	bcf	3,6	;RP1=0, select bank0
  3815  0084' 083A'              	movf	??_SetMotor+1,w
  3816  0085' 1683               	bsf	3,5	;RP0=1, select bank3
  3817  0086' 1703               	bsf	3,6	;RP1=1, select bank3
  3818  0087' 0080'              	movwf	(SetMotor@derivative+1)^(0+384)
  3819  0088' 1283               	bcf	3,5	;RP0=0, select bank0
  3820  0089' 1303               	bcf	3,6	;RP1=0, select bank0
  3821  008A' 0839'              	movf	??_SetMotor,w
  3822  008B' 1683               	bsf	3,5	;RP0=1, select bank3
  3823  008C' 1703               	bsf	3,6	;RP1=1, select bank3
  3824  008D' 0080'              	movwf	SetMotor@derivative^(0+384)
  3825                           
  3826                           ;main.c: 100: if (err = 0){
  3827  008E' 3000               	movlw	0
  3828  008F' 1283               	bcf	3,5	;RP0=0, select bank0
  3829  0090' 1303               	bcf	3,6	;RP1=0, select bank0
  3830  0091' 00C4'              	movwf	SetMotor@err+3
  3831  0092' 3000               	movlw	0
  3832  0093' 00C3'              	movwf	SetMotor@err+2
  3833  0094' 3000               	movlw	0
  3834  0095' 00C2'              	movwf	SetMotor@err+1
  3835  0096' 3000               	movlw	0
  3836  0097' 00C1'              	movwf	SetMotor@err
  3837                           
  3838                           ;main.c: 103: integral = integral + err;
  3839  0098' 1683               	bsf	3,5	;RP0=1, select bank3
  3840  0099' 1703               	bsf	3,6	;RP1=1, select bank3
  3841  009A' 0800'              	movf	SetMotor@integral^(0+384),w
  3842  009B' 1283               	bcf	3,5	;RP0=0, select bank0
  3843  009C' 1303               	bcf	3,6	;RP1=0, select bank0
  3844  009D' 0741'              	addwf	SetMotor@err,w
  3845  009E' 00B9'              	movwf	??_SetMotor
  3846  009F' 3000               	movlw	0
  3847  00A0' 1803               	skipnc
  3848  00A1' 3001               	movlw	1
  3849  00A2' 1683               	bsf	3,5	;RP0=1, select bank3
  3850  00A3' 1703               	bsf	3,6	;RP1=1, select bank3
  3851  00A4' 0700'              	addwf	(SetMotor@integral+1)^(0+384),w
  3852  00A5' 1283               	bcf	3,5	;RP0=0, select bank0
  3853  00A6' 1303               	bcf	3,6	;RP1=0, select bank0
  3854  00A7' 01BB'              	clrf	??_SetMotor+2
  3855  00A8' 1803               	skipnc
  3856  00A9' 0ABB'              	incf	??_SetMotor+2,f
  3857  00AA' 0742'              	addwf	SetMotor@err+1,w
  3858  00AB' 00BA'              	movwf	??_SetMotor+1
  3859  00AC' 1803               	skipnc
  3860  00AD' 0ABB'              	incf	??_SetMotor+2,f
  3861  00AE' 1683               	bsf	3,5	;RP0=1, select bank3
  3862  00AF' 1703               	bsf	3,6	;RP1=1, select bank3
  3863  00B0' 0800'              	movf	(SetMotor@integral+2)^(0+384),w
  3864  00B1' 1283               	bcf	3,5	;RP0=0, select bank0
  3865  00B2' 1303               	bcf	3,6	;RP1=0, select bank0
  3866  00B3' 073B'              	addwf	??_SetMotor+2,w
  3867  00B4' 01BC'              	clrf	??_SetMotor+3
  3868  00B5' 1803               	skipnc
  3869  00B6' 0ABC'              	incf	??_SetMotor+3,f
  3870  00B7' 0743'              	addwf	SetMotor@err+2,w
  3871  00B8' 00BB'              	movwf	??_SetMotor+2
  3872  00B9' 1803               	skipnc
  3873  00BA' 0ABC'              	incf	??_SetMotor+3,f
  3874  00BB' 1683               	bsf	3,5	;RP0=1, select bank3
  3875  00BC' 1703               	bsf	3,6	;RP1=1, select bank3
  3876  00BD' 0800'              	movf	(SetMotor@integral+3)^(0+384),w
  3877  00BE' 1283               	bcf	3,5	;RP0=0, select bank0
  3878  00BF' 1303               	bcf	3,6	;RP1=0, select bank0
  3879  00C0' 073C'              	addwf	??_SetMotor+3,w
  3880  00C1' 0744'              	addwf	SetMotor@err+3,w
  3881  00C2' 00BC'              	movwf	??_SetMotor+3
  3882  00C3' 083C'              	movf	??_SetMotor+3,w
  3883  00C4' 1683               	bsf	3,5	;RP0=1, select bank3
  3884  00C5' 1703               	bsf	3,6	;RP1=1, select bank3
  3885  00C6' 0080'              	movwf	(SetMotor@integral+3)^(0+384)
  3886  00C7' 1283               	bcf	3,5	;RP0=0, select bank0
  3887  00C8' 1303               	bcf	3,6	;RP1=0, select bank0
  3888  00C9' 083B'              	movf	??_SetMotor+2,w
  3889  00CA' 1683               	bsf	3,5	;RP0=1, select bank3
  3890  00CB' 1703               	bsf	3,6	;RP1=1, select bank3
  3891  00CC' 0080'              	movwf	(SetMotor@integral+2)^(0+384)
  3892  00CD' 1283               	bcf	3,5	;RP0=0, select bank0
  3893  00CE' 1303               	bcf	3,6	;RP1=0, select bank0
  3894  00CF' 083A'              	movf	??_SetMotor+1,w
  3895  00D0' 1683               	bsf	3,5	;RP0=1, select bank3
  3896  00D1' 1703               	bsf	3,6	;RP1=1, select bank3
  3897  00D2' 0080'              	movwf	(SetMotor@integral+1)^(0+384)
  3898  00D3' 1283               	bcf	3,5	;RP0=0, select bank0
  3899  00D4' 1303               	bcf	3,6	;RP1=0, select bank0
  3900  00D5' 0839'              	movf	??_SetMotor,w
  3901  00D6' 1683               	bsf	3,5	;RP0=1, select bank3
  3902  00D7' 1703               	bsf	3,6	;RP1=1, select bank3
  3903  00D8' 0080'              	movwf	SetMotor@integral^(0+384)
  3904                           
  3905                           ;main.c: 104: };main.c: 106: long resp = 2.0 * err + 1.0 * derivative + 0.0 * integral;
  3906  00D9' 1283               	bcf	3,5	;RP0=0, select bank0
  3907  00DA' 1303               	bcf	3,6	;RP1=0, select bank0
  3908  00DB' 0844'              	movf	SetMotor@err+3,w
  3909  00DC' 0083'              	movwf	___xxtofl@val+3
  3910  00DD' 0843'              	movf	SetMotor@err+2,w
  3911  00DE' 0082'              	movwf	___xxtofl@val+2
  3912  00DF' 0842'              	movf	SetMotor@err+1,w
  3913  00E0' 0081'              	movwf	___xxtofl@val+1
  3914  00E1' 0841'              	movf	SetMotor@err,w
  3915  00E2' 0080'              	movwf	___xxtofl@val
  3916  00E3' 3001               	movlw	1
  3917  00E4' 120A' 118A' 2000' 120A' 118A' 	fcall	___xxtofl
  3918  00E9' 0803'              	movf	?___xxtofl+3,w
  3919  00EA' 1283               	bcf	3,5	;RP0=0, select bank0
  3920  00EB' 1303               	bcf	3,6	;RP1=0, select bank0
  3921  00EC' 0087'              	movwf	___flmul@a+3
  3922  00ED' 0802'              	movf	?___xxtofl+2,w
  3923  00EE' 0086'              	movwf	___flmul@a+2
  3924  00EF' 0801'              	movf	?___xxtofl+1,w
  3925  00F0' 0085'              	movwf	___flmul@a+1
  3926  00F1' 0800'              	movf	?___xxtofl,w
  3927  00F2' 0084'              	movwf	___flmul@a
  3928  00F3' 3040               	movlw	64
  3929  00F4' 0083'              	movwf	___flmul@b+3
  3930  00F5' 3000               	movlw	0
  3931  00F6' 0082'              	movwf	___flmul@b+2
  3932  00F7' 3000               	movlw	0
  3933  00F8' 0081'              	movwf	___flmul@b+1
  3934  00F9' 3000               	movlw	0
  3935  00FA' 0080'              	movwf	___flmul@b
  3936  00FB' 120A' 118A' 2000' 120A' 118A' 	fcall	___flmul
  3937  0100' 1283               	bcf	3,5	;RP0=0, select bank0
  3938  0101' 1303               	bcf	3,6	;RP1=0, select bank0
  3939  0102' 0803'              	movf	?___flmul+3,w
  3940  0103' 00A1'              	movwf	___fladd@a+3
  3941  0104' 0802'              	movf	?___flmul+2,w
  3942  0105' 00A0'              	movwf	___fladd@a+2
  3943  0106' 0801'              	movf	?___flmul+1,w
  3944  0107' 009F'              	movwf	___fladd@a+1
  3945  0108' 0800'              	movf	?___flmul,w
  3946  0109' 009E'              	movwf	___fladd@a
  3947  010A' 1683               	bsf	3,5	;RP0=1, select bank3
  3948  010B' 1703               	bsf	3,6	;RP1=1, select bank3
  3949  010C' 0800'              	movf	(SetMotor@derivative+3)^(0+384),w
  3950  010D' 0083'              	movwf	___xxtofl@val+3
  3951  010E' 0800'              	movf	(SetMotor@derivative+2)^(0+384),w
  3952  010F' 0082'              	movwf	___xxtofl@val+2
  3953  0110' 0800'              	movf	(SetMotor@derivative+1)^(0+384),w
  3954  0111' 0081'              	movwf	___xxtofl@val+1
  3955  0112' 0800'              	movf	SetMotor@derivative^(0+384),w
  3956  0113' 0080'              	movwf	___xxtofl@val
  3957  0114' 3001               	movlw	1
  3958  0115' 120A' 118A' 2000' 120A' 118A' 	fcall	___xxtofl
  3959  011A' 0803'              	movf	?___xxtofl+3,w
  3960  011B' 1283               	bcf	3,5	;RP0=0, select bank0
  3961  011C' 1303               	bcf	3,6	;RP1=0, select bank0
  3962  011D' 0087'              	movwf	___flmul@a+3
  3963  011E' 0802'              	movf	?___xxtofl+2,w
  3964  011F' 0086'              	movwf	___flmul@a+2
  3965  0120' 0801'              	movf	?___xxtofl+1,w
  3966  0121' 0085'              	movwf	___flmul@a+1
  3967  0122' 0800'              	movf	?___xxtofl,w
  3968  0123' 0084'              	movwf	___flmul@a
  3969  0124' 303F               	movlw	63
  3970  0125' 0083'              	movwf	___flmul@b+3
  3971  0126' 3080               	movlw	128
  3972  0127' 0082'              	movwf	___flmul@b+2
  3973  0128' 3000               	movlw	0
  3974  0129' 0081'              	movwf	___flmul@b+1
  3975  012A' 3000               	movlw	0
  3976  012B' 0080'              	movwf	___flmul@b
  3977  012C' 120A' 118A' 2000' 120A' 118A' 	fcall	___flmul
  3978  0131' 1283               	bcf	3,5	;RP0=0, select bank0
  3979  0132' 1303               	bcf	3,6	;RP1=0, select bank0
  3980  0133' 0803'              	movf	?___flmul+3,w
  3981  0134' 009D'              	movwf	___fladd@b+3
  3982  0135' 0802'              	movf	?___flmul+2,w
  3983  0136' 009C'              	movwf	___fladd@b+2
  3984  0137' 0801'              	movf	?___flmul+1,w
  3985  0138' 009B'              	movwf	___fladd@b+1
  3986  0139' 0800'              	movf	?___flmul,w
  3987  013A' 009A'              	movwf	___fladd@b
  3988  013B' 120A' 118A' 2000' 120A' 118A' 	fcall	___fladd
  3989  0140' 1283               	bcf	3,5	;RP0=0, select bank0
  3990  0141' 1303               	bcf	3,6	;RP1=0, select bank0
  3991  0142' 081D'              	movf	?___fladd+3,w
  3992  0143' 00C0'              	movwf	_SetMotor$1033+3
  3993  0144' 081C'              	movf	?___fladd+2,w
  3994  0145' 00BF'              	movwf	_SetMotor$1033+2
  3995  0146' 081B'              	movf	?___fladd+1,w
  3996  0147' 00BE'              	movwf	_SetMotor$1033+1
  3997  0148' 081A'              	movf	?___fladd,w
  3998  0149' 00BD'              	movwf	_SetMotor$1033
  3999                           
  4000                           ;main.c: 104: };main.c: 106: long resp = 2.0 * err + 1.0 * derivative + 0.0 * integral;
  4001  014A' 0840'              	movf	_SetMotor$1033+3,w
  4002  014B' 00A1'              	movwf	___fladd@a+3
  4003  014C' 083F'              	movf	_SetMotor$1033+2,w
  4004  014D' 00A0'              	movwf	___fladd@a+2
  4005  014E' 083E'              	movf	_SetMotor$1033+1,w
  4006  014F' 009F'              	movwf	___fladd@a+1
  4007  0150' 083D'              	movf	_SetMotor$1033,w
  4008  0151' 009E'              	movwf	___fladd@a
  4009  0152' 1683               	bsf	3,5	;RP0=1, select bank3
  4010  0153' 1703               	bsf	3,6	;RP1=1, select bank3
  4011  0154' 0800'              	movf	(SetMotor@integral+3)^(0+384),w
  4012  0155' 0083'              	movwf	___xxtofl@val+3
  4013  0156' 0800'              	movf	(SetMotor@integral+2)^(0+384),w
  4014  0157' 0082'              	movwf	___xxtofl@val+2
  4015  0158' 0800'              	movf	(SetMotor@integral+1)^(0+384),w
  4016  0159' 0081'              	movwf	___xxtofl@val+1
  4017  015A' 0800'              	movf	SetMotor@integral^(0+384),w
  4018  015B' 0080'              	movwf	___xxtofl@val
  4019  015C' 3001               	movlw	1
  4020  015D' 120A' 118A' 2000' 120A' 118A' 	fcall	___xxtofl
  4021  0162' 0803'              	movf	?___xxtofl+3,w
  4022  0163' 1283               	bcf	3,5	;RP0=0, select bank0
  4023  0164' 1303               	bcf	3,6	;RP1=0, select bank0
  4024  0165' 0087'              	movwf	___flmul@a+3
  4025  0166' 0802'              	movf	?___xxtofl+2,w
  4026  0167' 0086'              	movwf	___flmul@a+2
  4027  0168' 0801'              	movf	?___xxtofl+1,w
  4028  0169' 0085'              	movwf	___flmul@a+1
  4029  016A' 0800'              	movf	?___xxtofl,w
  4030  016B' 0084'              	movwf	___flmul@a
  4031  016C' 3000               	movlw	0
  4032  016D' 0083'              	movwf	___flmul@b+3
  4033  016E' 3000               	movlw	0
  4034  016F' 0082'              	movwf	___flmul@b+2
  4035  0170' 3000               	movlw	0
  4036  0171' 0081'              	movwf	___flmul@b+1
  4037  0172' 3000               	movlw	0
  4038  0173' 0080'              	movwf	___flmul@b
  4039  0174' 120A' 118A' 2000' 120A' 118A' 	fcall	___flmul
  4040  0179' 1283               	bcf	3,5	;RP0=0, select bank0
  4041  017A' 1303               	bcf	3,6	;RP1=0, select bank0
  4042  017B' 0803'              	movf	?___flmul+3,w
  4043  017C' 009D'              	movwf	___fladd@b+3
  4044  017D' 0802'              	movf	?___flmul+2,w
  4045  017E' 009C'              	movwf	___fladd@b+2
  4046  017F' 0801'              	movf	?___flmul+1,w
  4047  0180' 009B'              	movwf	___fladd@b+1
  4048  0181' 0800'              	movf	?___flmul,w
  4049  0182' 009A'              	movwf	___fladd@b
  4050  0183' 120A' 118A' 2000' 120A' 118A' 	fcall	___fladd
  4051  0188' 1283               	bcf	3,5	;RP0=0, select bank0
  4052  0189' 1303               	bcf	3,6	;RP1=0, select bank0
  4053  018A' 081D'              	movf	?___fladd+3,w
  4054  018B' 00B1'              	movwf	___fltol@f1+3
  4055  018C' 081C'              	movf	?___fladd+2,w
  4056  018D' 00B0'              	movwf	___fltol@f1+2
  4057  018E' 081B'              	movf	?___fladd+1,w
  4058  018F' 00AF'              	movwf	___fltol@f1+1
  4059  0190' 081A'              	movf	?___fladd,w
  4060  0191' 00AE'              	movwf	___fltol@f1
  4061  0192' 120A' 118A' 2000' 120A' 118A' 	fcall	___fltol
  4062  0197' 1283               	bcf	3,5	;RP0=0, select bank0
  4063  0198' 1303               	bcf	3,6	;RP1=0, select bank0
  4064  0199' 0831'              	movf	?___fltol+3,w
  4065  019A' 00C8'              	movwf	SetMotor@resp+3
  4066  019B' 0830'              	movf	?___fltol+2,w
  4067  019C' 00C7'              	movwf	SetMotor@resp+2
  4068  019D' 082F'              	movf	?___fltol+1,w
  4069  019E' 00C6'              	movwf	SetMotor@resp+1
  4070  019F' 082E'              	movf	?___fltol,w
  4071  01A0' 00C5'              	movwf	SetMotor@resp
  4072                           
  4073                           ;main.c: 108: constrain(resp, -255,255 );
  4074  01A1' 0848'              	movf	SetMotor@resp+3,w
  4075  01A2' 0083'              	movwf	constrain@value+3
  4076  01A3' 0847'              	movf	SetMotor@resp+2,w
  4077  01A4' 0082'              	movwf	constrain@value+2
  4078  01A5' 0846'              	movf	SetMotor@resp+1,w
  4079  01A6' 0081'              	movwf	constrain@value+1
  4080  01A7' 0845'              	movf	SetMotor@resp,w
  4081  01A8' 0080'              	movwf	constrain@value
  4082  01A9' 30FF               	movlw	255
  4083  01AA' 0087'              	movwf	constrain@lLimit+3
  4084  01AB' 30FF               	movlw	255
  4085  01AC' 0086'              	movwf	constrain@lLimit+2
  4086  01AD' 30FF               	movlw	255
  4087  01AE' 0085'              	movwf	constrain@lLimit+1
  4088  01AF' 3001               	movlw	1
  4089  01B0' 0084'              	movwf	constrain@lLimit
  4090  01B1' 3000               	movlw	0
  4091  01B2' 008B'              	movwf	constrain@uLimit+3
  4092  01B3' 3000               	movlw	0
  4093  01B4' 008A'              	movwf	constrain@uLimit+2
  4094  01B5' 3000               	movlw	0
  4095  01B6' 0089'              	movwf	constrain@uLimit+1
  4096  01B7' 30FF               	movlw	255
  4097  01B8' 0088'              	movwf	constrain@uLimit
  4098  01B9' 120A' 118A' 2000' 120A' 118A' 	fcall	_constrain
  4099                           
  4100                           ;main.c: 109: if (resp > 0){
  4101  01BE' 1283               	bcf	3,5	;RP0=0, select bank0
  4102  01BF' 1303               	bcf	3,6	;RP1=0, select bank0
  4103  01C0' 1BC8'              	btfsc	SetMotor@resp+3,7
  4104  01C1' 2800'              	goto	i1l287
  4105  01C2' 0848'              	movf	SetMotor@resp+3,w
  4106  01C3' 1D03               	btfss	3,2
  4107  01C4' 2800'              	goto	i1l2882
  4108  01C5' 0847'              	movf	SetMotor@resp+2,w
  4109  01C6' 1D03               	btfss	3,2
  4110  01C7' 2800'              	goto	i1l2882
  4111  01C8' 0846'              	movf	SetMotor@resp+1,w
  4112  01C9' 1D03               	btfss	3,2
  4113  01CA' 2800'              	goto	i1l2882
  4114  01CB' 3001               	movlw	1
  4115  01CC' 0245'              	subwf	SetMotor@resp,w
  4116  01CD' 1D03               	skipz
  4117  01CE' 2800'              	goto	u402_23
  4118  01CF'                    u402_23:	
  4119  01CF' 1C03               	btfss	3,0
  4120  01D0' 2800'              	goto	i1l287
  4121  01D1'                    i1l2882:	
  4122                           
  4123                           ;main.c: 110: pwm_set(1, resp );
  4124  01D1' 3001               	movlw	1
  4125  01D2' 008E'              	movwf	i1pwm_set@channel
  4126  01D3' 3000               	movlw	0
  4127  01D4' 008F'              	movwf	i1pwm_set@channel+1
  4128  01D5' 0848'              	movf	SetMotor@resp+3,w
  4129  01D6' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4130  01D7' 0847'              	movf	SetMotor@resp+2,w
  4131  01D8' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4132  01D9' 0846'              	movf	SetMotor@resp+1,w
  4133  01DA' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4134  01DB' 0845'              	movf	SetMotor@resp,w
  4135  01DC' 0090'              	movwf	i1pwm_set@duty_cycle
  4136  01DD' 120A' 118A' 2000' 120A' 118A' 	fcall	i1_pwm_set
  4137                           
  4138                           ;main.c: 111: pwm_set(2, 0 );
  4139  01E2' 3002               	movlw	2
  4140  01E3' 1283               	bcf	3,5	;RP0=0, select bank0
  4141  01E4' 1303               	bcf	3,6	;RP1=0, select bank0
  4142  01E5' 008E'              	movwf	i1pwm_set@channel
  4143  01E6' 3000               	movlw	0
  4144  01E7' 008F'              	movwf	i1pwm_set@channel+1
  4145  01E8' 3000               	movlw	0
  4146  01E9' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4147  01EA' 3000               	movlw	0
  4148  01EB' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4149  01EC' 3000               	movlw	0
  4150  01ED' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4151  01EE' 3000               	movlw	0
  4152  01EF' 0090'              	movwf	i1pwm_set@duty_cycle
  4153  01F0' 120A' 118A' 2000'  	fcall	i1_pwm_set
  4154                           
  4155                           ;main.c: 112: }else if(resp < 0){
  4156  01F3' 0008               	return
  4157  01F4'                    i1l287:	
  4158  01F4' 1FC8'              	btfss	SetMotor@resp+3,7
  4159  01F5' 2800'              	goto	i1l2886
  4160                           
  4161                           ;main.c: 113: pwm_set(1, 0 );
  4162  01F6' 3001               	movlw	1
  4163  01F7' 008E'              	movwf	i1pwm_set@channel
  4164  01F8' 3000               	movlw	0
  4165  01F9' 008F'              	movwf	i1pwm_set@channel+1
  4166  01FA' 3000               	movlw	0
  4167  01FB' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4168  01FC' 3000               	movlw	0
  4169  01FD' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4170  01FE' 3000               	movlw	0
  4171  01FF' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4172  0200' 3000               	movlw	0
  4173  0201' 0090'              	movwf	i1pwm_set@duty_cycle
  4174  0202' 120A' 118A' 2000' 120A' 118A' 	fcall	i1_pwm_set
  4175                           
  4176                           ;main.c: 114: pwm_set(2, -resp );
  4177  0207' 3002               	movlw	2
  4178  0208' 1283               	bcf	3,5	;RP0=0, select bank0
  4179  0209' 1303               	bcf	3,6	;RP1=0, select bank0
  4180  020A' 008E'              	movwf	i1pwm_set@channel
  4181  020B' 3000               	movlw	0
  4182  020C' 008F'              	movwf	i1pwm_set@channel+1
  4183  020D' 0945'              	comf	SetMotor@resp,w
  4184  020E' 0090'              	movwf	i1pwm_set@duty_cycle
  4185  020F' 0946'              	comf	SetMotor@resp+1,w
  4186  0210' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4187  0211' 0947'              	comf	SetMotor@resp+2,w
  4188  0212' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4189  0213' 0948'              	comf	SetMotor@resp+3,w
  4190  0214' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4191  0215' 0A90'              	incf	i1pwm_set@duty_cycle,f
  4192  0216' 1903               	skipnz
  4193  0217' 0A91'              	incf	i1pwm_set@duty_cycle+1,f
  4194  0218' 1903               	skipnz
  4195  0219' 0A92'              	incf	i1pwm_set@duty_cycle+2,f
  4196  021A' 1903               	skipnz
  4197  021B' 0A93'              	incf	i1pwm_set@duty_cycle+3,f
  4198  021C' 120A' 118A' 2000'  	fcall	i1_pwm_set
  4199                           
  4200                           ;main.c: 115: }else{
  4201  021F' 0008               	return
  4202  0220'                    i1l2886:	
  4203                           
  4204                           ;main.c: 116: pwm_set(1, 0 );
  4205  0220' 3001               	movlw	1
  4206  0221' 008E'              	movwf	i1pwm_set@channel
  4207  0222' 3000               	movlw	0
  4208  0223' 008F'              	movwf	i1pwm_set@channel+1
  4209  0224' 3000               	movlw	0
  4210  0225' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4211  0226' 3000               	movlw	0
  4212  0227' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4213  0228' 3000               	movlw	0
  4214  0229' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4215  022A' 3000               	movlw	0
  4216  022B' 0090'              	movwf	i1pwm_set@duty_cycle
  4217  022C' 120A' 118A' 2000' 120A' 118A' 	fcall	i1_pwm_set
  4218                           
  4219                           ;main.c: 117: pwm_set(2, 0 );
  4220  0231' 3002               	movlw	2
  4221  0232' 1283               	bcf	3,5	;RP0=0, select bank0
  4222  0233' 1303               	bcf	3,6	;RP1=0, select bank0
  4223  0234' 008E'              	movwf	i1pwm_set@channel
  4224  0235' 3000               	movlw	0
  4225  0236' 008F'              	movwf	i1pwm_set@channel+1
  4226  0237' 3000               	movlw	0
  4227  0238' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4228  0239' 3000               	movlw	0
  4229  023A' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4230  023B' 3000               	movlw	0
  4231  023C' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4232  023D' 3000               	movlw	0
  4233  023E' 0090'              	movwf	i1pwm_set@duty_cycle
  4234  023F' 120A' 118A' 2000'  	fcall	i1_pwm_set
  4235  0242' 0008               	return
  4236  0243'                    __end_of_SetMotor:	
  4237                           
  4238                           	psect	text17
  4239  0000'                    __ptext17:	
  4240 ;; *************** function i1_pwm_set *****************
  4241 ;; Defined at:
  4242 ;;		line 72 in file "pwm.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  channel         2   14[BANK0 ] int 
  4245 ;;  duty_cycle      4   16[BANK0 ] long 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4257 ;;      Params:         0       6       0       0       0
  4258 ;;      Locals:         0       0       0       0       0
  4259 ;;      Temps:          0       4       0       0       0
  4260 ;;      Totals:         0      10       0       0       0
  4261 ;;Total ram usage:       10 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    1
  4264 ;; This function calls:
  4265 ;;		i1___aldiv
  4266 ;;		i1___lmul
  4267 ;; This function is called by:
  4268 ;;		_SetMotor
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           
  4273                           ;psect for function i1_pwm_set
  4274  0000'                    i1_pwm_set:	
  4275                           
  4276                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in i1_pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4280  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4281  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4282  0002' 1B93'              	btfsc	i1pwm_set@duty_cycle+3,7
  4283  0003' 0008               	return
  4284  0004' 1B93'              	btfsc	i1pwm_set@duty_cycle+3,7
  4285  0005' 2800'              	goto	i1l2732
  4286  0006' 0813'              	movf	i1pwm_set@duty_cycle+3,w
  4287  0007' 1D03               	btfss	3,2
  4288  0008' 0008               	return
  4289  0009' 0812'              	movf	i1pwm_set@duty_cycle+2,w
  4290  000A' 1D03               	btfss	3,2
  4291  000B' 0008               	return
  4292  000C' 3001               	movlw	1
  4293  000D' 0211'              	subwf	i1pwm_set@duty_cycle+1,w
  4294  000E' 1D03               	skipz
  4295  000F' 2800'              	goto	u383_23
  4296  0010' 3000               	movlw	0
  4297  0011' 0210'              	subwf	i1pwm_set@duty_cycle,w
  4298  0012' 1D03               	skipz
  4299  0013' 2800'              	goto	u383_23
  4300  0014'                    u383_23:	
  4301  0014' 1803               	btfsc	3,0
  4302  0015' 0008               	return
  4303  0016'                    i1l2732:	
  4304                           
  4305                           ;pwm.c: 77: if (duty_cycle !=0){
  4306  0016' 0813'              	movf	i1pwm_set@duty_cycle+3,w
  4307  0017' 0412'              	iorwf	i1pwm_set@duty_cycle+2,w
  4308  0018' 0411'              	iorwf	i1pwm_set@duty_cycle+1,w
  4309  0019' 0410'              	iorwf	i1pwm_set@duty_cycle,w
  4310  001A' 1903               	skipnz
  4311  001B' 2800'              	goto	i1l2742
  4312                           
  4313                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  4314  001C' 3020               	movlw	32
  4315  001D' 0094'              	movwf	??i1_pwm_set
  4316  001E' 3000               	movlw	0
  4317  001F' 0095'              	movwf	??i1_pwm_set+1
  4318  0020' 3000               	movlw	0
  4319  0021' 0096'              	movwf	??i1_pwm_set+2
  4320  0022' 3000               	movlw	0
  4321  0023' 0097'              	movwf	??i1_pwm_set+3
  4322  0024' 3000               	movlw	0
  4323  0025' 0083'              	movwf	i1___aldiv@divisor+3
  4324  0026' 3000               	movlw	0
  4325  0027' 0082'              	movwf	i1___aldiv@divisor+2
  4326  0028' 3000               	movlw	0
  4327  0029' 0081'              	movwf	i1___aldiv@divisor+1
  4328  002A' 30FF               	movlw	255
  4329  002B' 0080'              	movwf	i1___aldiv@divisor
  4330  002C' 0813'              	movf	i1pwm_set@duty_cycle+3,w
  4331  002D' 0083'              	movwf	i1___lmul@multiplier+3
  4332  002E' 0812'              	movf	i1pwm_set@duty_cycle+2,w
  4333  002F' 0082'              	movwf	i1___lmul@multiplier+2
  4334  0030' 0811'              	movf	i1pwm_set@duty_cycle+1,w
  4335  0031' 0081'              	movwf	i1___lmul@multiplier+1
  4336  0032' 0810'              	movf	i1pwm_set@duty_cycle,w
  4337  0033' 0080'              	movwf	i1___lmul@multiplier
  4338  0034' 3000               	movlw	0
  4339  0035' 0087'              	movwf	i1___lmul@multiplicand+3
  4340  0036' 3000               	movlw	0
  4341  0037' 0086'              	movwf	i1___lmul@multiplicand+2
  4342  0038' 3000               	movlw	0
  4343  0039' 0085'              	movwf	i1___lmul@multiplicand+1
  4344  003A' 30DF               	movlw	223
  4345  003B' 0084'              	movwf	i1___lmul@multiplicand
  4346  003C' 120A' 118A' 2000' 120A' 118A' 	fcall	i1___lmul
  4347  0041' 0803'              	movf	?i1___lmul+3,w
  4348  0042' 1283               	bcf	3,5	;RP0=0, select bank0
  4349  0043' 1303               	bcf	3,6	;RP1=0, select bank0
  4350  0044' 0087'              	movwf	i1___aldiv@dividend+3
  4351  0045' 0802'              	movf	?i1___lmul+2,w
  4352  0046' 0086'              	movwf	i1___aldiv@dividend+2
  4353  0047' 0801'              	movf	?i1___lmul+1,w
  4354  0048' 0085'              	movwf	i1___aldiv@dividend+1
  4355  0049' 0800'              	movf	?i1___lmul,w
  4356  004A' 0084'              	movwf	i1___aldiv@dividend
  4357  004B' 120A' 118A' 2000' 120A' 118A' 	fcall	i1___aldiv
  4358  0050' 1283               	bcf	3,5	;RP0=0, select bank0
  4359  0051' 1303               	bcf	3,6	;RP1=0, select bank0
  4360  0052' 0800'              	movf	?i1___aldiv,w
  4361  0053' 0794'              	addwf	??i1_pwm_set,f
  4362  0054' 0801'              	movf	?i1___aldiv+1,w
  4363  0055' 1803               	skipnc
  4364  0056' 0F01'              	incfsz	?i1___aldiv+1,w
  4365  0057' 2800'              	goto	u385_20
  4366  0058' 2800'              	goto	u385_21
  4367  0059'                    u385_20:	
  4368  0059' 0795'              	addwf	??i1_pwm_set+1,f
  4369  005A'                    u385_21:	
  4370  005A' 0802'              	movf	?i1___aldiv+2,w
  4371  005B' 1803               	skipnc
  4372  005C' 0F02'              	incfsz	?i1___aldiv+2,w
  4373  005D' 2800'              	goto	u385_22
  4374  005E' 2800'              	goto	u385_23
  4375  005F'                    u385_22:	
  4376  005F' 0796'              	addwf	??i1_pwm_set+2,f
  4377  0060'                    u385_23:	
  4378  0060' 0803'              	movf	?i1___aldiv+3,w
  4379  0061' 1803               	skipnc
  4380  0062' 0A03'              	incf	?i1___aldiv+3,w
  4381  0063' 0797'              	addwf	??i1_pwm_set+3,f
  4382  0064' 0817'              	movf	??i1_pwm_set+3,w
  4383  0065' 0093'              	movwf	i1pwm_set@duty_cycle+3
  4384  0066' 0816'              	movf	??i1_pwm_set+2,w
  4385  0067' 0092'              	movwf	i1pwm_set@duty_cycle+2
  4386  0068' 0815'              	movf	??i1_pwm_set+1,w
  4387  0069' 0091'              	movwf	i1pwm_set@duty_cycle+1
  4388  006A' 0814'              	movf	??i1_pwm_set,w
  4389  006B' 0090'              	movwf	i1pwm_set@duty_cycle
  4390  006C' 2800'              	goto	i1l2742
  4391  006D'                    i1l2736:	
  4392                           
  4393                           ;pwm.c: 82: CCPR1L = duty_cycle;
  4394  006D' 0810'              	movf	i1pwm_set@duty_cycle,w
  4395  006E' 0095               	movwf	21	;volatile
  4396                           
  4397                           ;pwm.c: 83: break;
  4398  006F' 0008               	return
  4399  0070'                    i1l2738:	
  4400                           
  4401                           ;pwm.c: 85: CCPR2L = duty_cycle;
  4402  0070' 0810'              	movf	i1pwm_set@duty_cycle,w
  4403  0071' 009B               	movwf	27	;volatile
  4404                           
  4405                           ;pwm.c: 86: break;
  4406  0072' 0008               	return
  4407  0073'                    i1l2742:	
  4408                           
  4409                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4410                           ; Switch size 1, requested type "simple"
  4411                           ; Number of cases is 1, Range of values is 0 to 0
  4412                           ; switch strategies available:
  4413                           ; Name         Instructions Cycles
  4414                           ; simple_byte            4     3 (average)
  4415                           ; direct_byte           11     8 (fixed)
  4416                           ; jumptable            260     6 (fixed)
  4417                           ;	Chosen strategy is simple_byte
  4418  0073' 080F'              	movf	i1pwm_set@channel+1,w
  4419  0074' 3A00               	xorlw	0	; case 0
  4420  0075' 1903               	skipnz
  4421  0076' 2800'              	goto	i1l3240
  4422  0077' 2800'              	goto	i1l182
  4423  0078'                    i1l3240:	
  4424                           
  4425                           ; Switch size 1, requested type "simple"
  4426                           ; Number of cases is 2, Range of values is 1 to 2
  4427                           ; switch strategies available:
  4428                           ; Name         Instructions Cycles
  4429                           ; simple_byte            7     4 (average)
  4430                           ; direct_byte           17    11 (fixed)
  4431                           ; jumptable            263     9 (fixed)
  4432                           ;	Chosen strategy is simple_byte
  4433  0078' 080E'              	movf	i1pwm_set@channel,w
  4434  0079' 3A01               	xorlw	1	; case 1
  4435  007A' 1903               	skipnz
  4436  007B' 2800'              	goto	i1l2736
  4437  007C' 3A03               	xorlw	3	; case 2
  4438  007D' 1903               	skipnz
  4439  007E' 2800'              	goto	i1l2738
  4440  007F' 2800'              	goto	i1l182
  4441  0080'                    i1l182:	
  4442  0080' 0008               	return
  4443  0081'                    __end_ofi1_pwm_set:	
  4444                           
  4445                           	psect	text18
  4446  0000'                    __ptext18:	
  4447 ;; *************** function i1___lmul *****************
  4448 ;; Defined at:
  4449 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  multiplier      4    0[COMMON] unsigned long 
  4452 ;;  multiplicand    4    4[COMMON] unsigned long 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  __lmul          4    9[COMMON] unsigned long 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  4    0[COMMON] unsigned long 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4464 ;;      Params:         8       0       0       0       0
  4465 ;;      Locals:         4       0       0       0       0
  4466 ;;      Temps:          1       0       0       0       0
  4467 ;;      Totals:        13       0       0       0       0
  4468 ;;Total ram usage:       13 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; This function calls:
  4471 ;;		Nothing
  4472 ;; This function is called by:
  4473 ;;		i1_pwm_set
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function i1___lmul
  4479  0000'                    i1___lmul:	
  4480                           
  4481                           ;incstack = 0
  4482                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
  4483  0000' 3000               	movlw	0
  4484  0001' 008C'              	movwf	i1___lmul@product+3
  4485  0002' 3000               	movlw	0
  4486  0003' 008B'              	movwf	i1___lmul@product+2
  4487  0004' 3000               	movlw	0
  4488  0005' 008A'              	movwf	i1___lmul@product+1
  4489  0006' 3000               	movlw	0
  4490  0007' 0089'              	movwf	i1___lmul@product
  4491  0008'                    i1l2134:	
  4492  0008' 1C00'              	btfss	i1___lmul@multiplier,0
  4493  0009' 2800'              	goto	i1l2138
  4494  000A' 0804'              	movf	i1___lmul@multiplicand,w
  4495  000B' 0789'              	addwf	i1___lmul@product,f
  4496  000C' 0805'              	movf	i1___lmul@multiplicand+1,w
  4497  000D' 1103               	clrz
  4498  000E' 1803               	skipnc
  4499  000F' 3E01               	addlw	1
  4500  0010' 1D03               	btfss	3,2
  4501  0011' 078A'              	addwf	i1___lmul@product+1,f
  4502  0012' 0806'              	movf	i1___lmul@multiplicand+2,w
  4503  0013' 1103               	clrz
  4504  0014' 1803               	skipnc
  4505  0015' 3E01               	addlw	1
  4506  0016' 1D03               	btfss	3,2
  4507  0017' 078B'              	addwf	i1___lmul@product+2,f
  4508  0018' 0807'              	movf	i1___lmul@multiplicand+3,w
  4509  0019' 1103               	clrz
  4510  001A' 1803               	skipnc
  4511  001B' 3E01               	addlw	1
  4512  001C' 1D03               	btfss	3,2
  4513  001D' 078C'              	addwf	i1___lmul@product+3,f
  4514  001E'                    i1l2138:	
  4515  001E' 3001               	movlw	1
  4516  001F' 0088'              	movwf	??i1___lmul
  4517  0020'                    u230_25:	
  4518  0020' 1003               	clrc
  4519  0021' 0D84'              	rlf	i1___lmul@multiplicand,f
  4520  0022' 0D85'              	rlf	i1___lmul@multiplicand+1,f
  4521  0023' 0D86'              	rlf	i1___lmul@multiplicand+2,f
  4522  0024' 0D87'              	rlf	i1___lmul@multiplicand+3,f
  4523  0025' 0B88'              	decfsz	??i1___lmul,f
  4524  0026' 2800'              	goto	u230_25
  4525  0027' 3001               	movlw	1
  4526  0028'                    u231_25:	
  4527  0028' 1003               	clrc
  4528  0029' 0C83'              	rrf	i1___lmul@multiplier+3,f
  4529  002A' 0C82'              	rrf	i1___lmul@multiplier+2,f
  4530  002B' 0C81'              	rrf	i1___lmul@multiplier+1,f
  4531  002C' 0C80'              	rrf	i1___lmul@multiplier,f
  4532  002D' 3EFF               	addlw	-1
  4533  002E' 1D03               	skipz
  4534  002F' 2800'              	goto	u231_25
  4535  0030' 0803'              	movf	i1___lmul@multiplier+3,w
  4536  0031' 0402'              	iorwf	i1___lmul@multiplier+2,w
  4537  0032' 0401'              	iorwf	i1___lmul@multiplier+1,w
  4538  0033' 0400'              	iorwf	i1___lmul@multiplier,w
  4539  0034' 1D03               	skipz
  4540  0035' 2800'              	goto	i1l2134
  4541  0036' 080C'              	movf	i1___lmul@product+3,w
  4542  0037' 0083'              	movwf	?i1___lmul+3
  4543  0038' 080B'              	movf	i1___lmul@product+2,w
  4544  0039' 0082'              	movwf	?i1___lmul+2
  4545  003A' 080A'              	movf	i1___lmul@product+1,w
  4546  003B' 0081'              	movwf	?i1___lmul+1
  4547  003C' 0809'              	movf	i1___lmul@product,w
  4548  003D' 0080'              	movwf	?i1___lmul
  4549  003E' 0008               	return
  4550  003F'                    __end_ofi1___lmul:	
  4551                           
  4552                           	psect	text19
  4553  0000'                    __ptext19:	
  4554 ;; *************** function i1___aldiv *****************
  4555 ;; Defined at:
  4556 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  divisor         4    0[BANK0 ] long 
  4559 ;;  dividend        4    4[BANK0 ] long 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  __aldiv         4   10[BANK0 ] long 
  4562 ;;  __aldiv         1    9[BANK0 ] unsigned char 
  4563 ;;  __aldiv         1    8[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  4    0[BANK0 ] long 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4573 ;;      Params:         0       8       0       0       0
  4574 ;;      Locals:         0       6       0       0       0
  4575 ;;      Temps:          1       0       0       0       0
  4576 ;;      Totals:         1      14       0       0       0
  4577 ;;Total ram usage:       15 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		i1_pwm_set
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function i1___aldiv
  4588  0000'                    i1___aldiv:	
  4589                           
  4590                           ;incstack = 0
  4591                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
  4592  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  4593  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  4594  0002' 0189'              	clrf	i1___aldiv@sign
  4595  0003' 1F83'              	btfss	i1___aldiv@divisor+3,7
  4596  0004' 2800'              	goto	i1l527
  4597  0005' 0980'              	comf	i1___aldiv@divisor,f
  4598  0006' 0981'              	comf	i1___aldiv@divisor+1,f
  4599  0007' 0982'              	comf	i1___aldiv@divisor+2,f
  4600  0008' 0983'              	comf	i1___aldiv@divisor+3,f
  4601  0009' 0A80'              	incf	i1___aldiv@divisor,f
  4602  000A' 1903               	skipnz
  4603  000B' 0A81'              	incf	i1___aldiv@divisor+1,f
  4604  000C' 1903               	skipnz
  4605  000D' 0A82'              	incf	i1___aldiv@divisor+2,f
  4606  000E' 1903               	skipnz
  4607  000F' 0A83'              	incf	i1___aldiv@divisor+3,f
  4608  0010' 0189'              	clrf	i1___aldiv@sign
  4609  0011' 0A89'              	incf	i1___aldiv@sign,f
  4610  0012'                    i1l527:	
  4611  0012' 1F87'              	btfss	i1___aldiv@dividend+3,7
  4612  0013' 2800'              	goto	i1l2156
  4613  0014' 0984'              	comf	i1___aldiv@dividend,f
  4614  0015' 0985'              	comf	i1___aldiv@dividend+1,f
  4615  0016' 0986'              	comf	i1___aldiv@dividend+2,f
  4616  0017' 0987'              	comf	i1___aldiv@dividend+3,f
  4617  0018' 0A84'              	incf	i1___aldiv@dividend,f
  4618  0019' 1903               	skipnz
  4619  001A' 0A85'              	incf	i1___aldiv@dividend+1,f
  4620  001B' 1903               	skipnz
  4621  001C' 0A86'              	incf	i1___aldiv@dividend+2,f
  4622  001D' 1903               	skipnz
  4623  001E' 0A87'              	incf	i1___aldiv@dividend+3,f
  4624  001F' 3001               	movlw	1
  4625  0020' 008D'              	movwf	??i1___aldiv
  4626  0021' 080D'              	movf	??i1___aldiv,w
  4627  0022' 0689'              	xorwf	i1___aldiv@sign,f
  4628  0023'                    i1l2156:	
  4629  0023' 3000               	movlw	0
  4630  0024' 008D'              	movwf	i1___aldiv@quotient+3
  4631  0025' 3000               	movlw	0
  4632  0026' 008C'              	movwf	i1___aldiv@quotient+2
  4633  0027' 3000               	movlw	0
  4634  0028' 008B'              	movwf	i1___aldiv@quotient+1
  4635  0029' 3000               	movlw	0
  4636  002A' 008A'              	movwf	i1___aldiv@quotient
  4637  002B' 0803'              	movf	i1___aldiv@divisor+3,w
  4638  002C' 0402'              	iorwf	i1___aldiv@divisor+2,w
  4639  002D' 0401'              	iorwf	i1___aldiv@divisor+1,w
  4640  002E' 0400'              	iorwf	i1___aldiv@divisor,w
  4641  002F' 1903               	skipnz
  4642  0030' 2800'              	goto	i1l2178
  4643  0031' 0188'              	clrf	i1___aldiv@counter
  4644  0032' 0A88'              	incf	i1___aldiv@counter,f
  4645  0033'                    i1l2164:	
  4646  0033' 1B83'              	btfsc	i1___aldiv@divisor+3,7
  4647  0034' 2800'              	goto	i1l2166
  4648  0035' 3001               	movlw	1
  4649  0036' 008D'              	movwf	??i1___aldiv
  4650  0037'                    u236_25:	
  4651  0037' 1003               	clrc
  4652  0038' 0D80'              	rlf	i1___aldiv@divisor,f
  4653  0039' 0D81'              	rlf	i1___aldiv@divisor+1,f
  4654  003A' 0D82'              	rlf	i1___aldiv@divisor+2,f
  4655  003B' 0D83'              	rlf	i1___aldiv@divisor+3,f
  4656  003C' 0B8D'              	decfsz	??i1___aldiv,f
  4657  003D' 2800'              	goto	u236_25
  4658  003E' 3001               	movlw	1
  4659  003F' 008D'              	movwf	??i1___aldiv
  4660  0040' 080D'              	movf	??i1___aldiv,w
  4661  0041' 0788'              	addwf	i1___aldiv@counter,f
  4662  0042' 2800'              	goto	i1l2164
  4663  0043'                    i1l2166:	
  4664  0043' 3001               	movlw	1
  4665  0044' 008D'              	movwf	??i1___aldiv
  4666  0045'                    u238_25:	
  4667  0045' 1003               	clrc
  4668  0046' 0D8A'              	rlf	i1___aldiv@quotient,f
  4669  0047' 0D8B'              	rlf	i1___aldiv@quotient+1,f
  4670  0048' 0D8C'              	rlf	i1___aldiv@quotient+2,f
  4671  0049' 0D8D'              	rlf	i1___aldiv@quotient+3,f
  4672  004A' 0B8D'              	decfsz	??i1___aldiv,f
  4673  004B' 2800'              	goto	u238_25
  4674  004C' 0803'              	movf	i1___aldiv@divisor+3,w
  4675  004D' 0207'              	subwf	i1___aldiv@dividend+3,w
  4676  004E' 1D03               	skipz
  4677  004F' 2800'              	goto	u239_25
  4678  0050' 0802'              	movf	i1___aldiv@divisor+2,w
  4679  0051' 0206'              	subwf	i1___aldiv@dividend+2,w
  4680  0052' 1D03               	skipz
  4681  0053' 2800'              	goto	u239_25
  4682  0054' 0801'              	movf	i1___aldiv@divisor+1,w
  4683  0055' 0205'              	subwf	i1___aldiv@dividend+1,w
  4684  0056' 1D03               	skipz
  4685  0057' 2800'              	goto	u239_25
  4686  0058' 0800'              	movf	i1___aldiv@divisor,w
  4687  0059' 0204'              	subwf	i1___aldiv@dividend,w
  4688  005A'                    u239_25:	
  4689  005A' 1C03               	skipc
  4690  005B' 2800'              	goto	i1l2174
  4691  005C' 0800'              	movf	i1___aldiv@divisor,w
  4692  005D' 0284'              	subwf	i1___aldiv@dividend,f
  4693  005E' 0801'              	movf	i1___aldiv@divisor+1,w
  4694  005F' 1C03               	skipc
  4695  0060' 0F01'              	incfsz	i1___aldiv@divisor+1,w
  4696  0061' 0285'              	subwf	i1___aldiv@dividend+1,f
  4697  0062' 0802'              	movf	i1___aldiv@divisor+2,w
  4698  0063' 1C03               	skipc
  4699  0064' 0F02'              	incfsz	i1___aldiv@divisor+2,w
  4700  0065' 0286'              	subwf	i1___aldiv@dividend+2,f
  4701  0066' 0803'              	movf	i1___aldiv@divisor+3,w
  4702  0067' 1C03               	skipc
  4703  0068' 0F03'              	incfsz	i1___aldiv@divisor+3,w
  4704  0069' 0287'              	subwf	i1___aldiv@dividend+3,f
  4705  006A' 140A'              	bsf	i1___aldiv@quotient,0
  4706  006B'                    i1l2174:	
  4707  006B' 3001               	movlw	1
  4708  006C'                    u240_25:	
  4709  006C' 1003               	clrc
  4710  006D' 0C83'              	rrf	i1___aldiv@divisor+3,f
  4711  006E' 0C82'              	rrf	i1___aldiv@divisor+2,f
  4712  006F' 0C81'              	rrf	i1___aldiv@divisor+1,f
  4713  0070' 0C80'              	rrf	i1___aldiv@divisor,f
  4714  0071' 3EFF               	addlw	-1
  4715  0072' 1D03               	skipz
  4716  0073' 2800'              	goto	u240_25
  4717  0074' 3001               	movlw	1
  4718  0075' 0288'              	subwf	i1___aldiv@counter,f
  4719  0076' 1D03               	btfss	3,2
  4720  0077' 2800'              	goto	i1l2166
  4721  0078'                    i1l2178:	
  4722  0078' 0809'              	movf	i1___aldiv@sign,w
  4723  0079' 1903               	btfsc	3,2
  4724  007A' 2800'              	goto	i1l2182
  4725  007B' 098A'              	comf	i1___aldiv@quotient,f
  4726  007C' 098B'              	comf	i1___aldiv@quotient+1,f
  4727  007D' 098C'              	comf	i1___aldiv@quotient+2,f
  4728  007E' 098D'              	comf	i1___aldiv@quotient+3,f
  4729  007F' 0A8A'              	incf	i1___aldiv@quotient,f
  4730  0080' 1903               	skipnz
  4731  0081' 0A8B'              	incf	i1___aldiv@quotient+1,f
  4732  0082' 1903               	skipnz
  4733  0083' 0A8C'              	incf	i1___aldiv@quotient+2,f
  4734  0084' 1903               	skipnz
  4735  0085' 0A8D'              	incf	i1___aldiv@quotient+3,f
  4736  0086'                    i1l2182:	
  4737  0086' 080D'              	movf	i1___aldiv@quotient+3,w
  4738  0087' 0083'              	movwf	?i1___aldiv+3
  4739  0088' 080C'              	movf	i1___aldiv@quotient+2,w
  4740  0089' 0082'              	movwf	?i1___aldiv+2
  4741  008A' 080B'              	movf	i1___aldiv@quotient+1,w
  4742  008B' 0081'              	movwf	?i1___aldiv+1
  4743  008C' 080A'              	movf	i1___aldiv@quotient,w
  4744  008D' 0080'              	movwf	?i1___aldiv
  4745  008E' 0008               	return
  4746  008F'                    __end_ofi1___aldiv:	
  4747                           
  4748                           	psect	text20
  4749  0000'                    __ptext20:	
  4750 ;; *************** function _constrain *****************
  4751 ;; Defined at:
  4752 ;;		line 78 in file "main.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  value           4    0[COMMON] long 
  4755 ;;  lLimit          4    4[COMMON] long 
  4756 ;;  uLimit          4    8[COMMON] long 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  4    0[COMMON] long 
  4761 ;; Registers used:
  4762 ;;		wreg, btemp+1
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4768 ;;      Params:        12       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0
  4771 ;;      Totals:        12       0       0       0       0
  4772 ;;Total ram usage:       12 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; This function calls:
  4775 ;;		Nothing
  4776 ;; This function is called by:
  4777 ;;		_SetMotor
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           
  4782                           ;psect for function _constrain
  4783  0000'                    _constrain:	
  4784                           
  4785                           ;main.c: 79: if (value > uLimit){
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _constrain: [wreg+btemp+1]
  4789  0000' 080B'              	movf	constrain@uLimit+3,w
  4790  0001' 3A80               	xorlw	128
  4791  0002' 00FF               	movwf	127
  4792  0003' 0803'              	movf	constrain@value+3,w
  4793  0004' 3A80               	xorlw	128
  4794  0005' 027F               	subwf	127,w
  4795  0006' 1D03               	skipz
  4796  0007' 2800'              	goto	u246_23
  4797  0008' 0802'              	movf	constrain@value+2,w
  4798  0009' 020A'              	subwf	constrain@uLimit+2,w
  4799  000A' 1D03               	skipz
  4800  000B' 2800'              	goto	u246_23
  4801  000C' 0801'              	movf	constrain@value+1,w
  4802  000D' 0209'              	subwf	constrain@uLimit+1,w
  4803  000E' 1D03               	skipz
  4804  000F' 2800'              	goto	u246_23
  4805  0010' 0800'              	movf	constrain@value,w
  4806  0011' 0208'              	subwf	constrain@uLimit,w
  4807  0012'                    u246_23:	
  4808  0012' 1803               	skipnc
  4809  0013' 0008               	return
  4810  0014' 0008               	return
  4811  0015'                    __end_of_constrain:	
  4812                           
  4813                           	psect	text21
  4814  0000'                    __ptext21:	
  4815 ;; *************** function ___xxtofl *****************
  4816 ;; Defined at:
  4817 ;;		line 10 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  sign            1    wreg     unsigned char 
  4820 ;;  val             4    0[COMMON] long 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  sign            1    8[COMMON] unsigned char 
  4823 ;;  arg             4   10[COMMON] unsigned long 
  4824 ;;  exp             1    9[COMMON] unsigned char 
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  4    0[COMMON] unsigned char 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2, status,0
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4834 ;;      Params:         4       0       0       0       0
  4835 ;;      Locals:         6       0       0       0       0
  4836 ;;      Temps:          4       0       0       0       0
  4837 ;;      Totals:        14       0       0       0       0
  4838 ;;Total ram usage:       14 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_SetMotor
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function ___xxtofl
  4849  0000'                    ___xxtofl:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  4853                           ;___xxtofl@sign stored from wreg
  4854  0000' 0088'              	movwf	___xxtofl@sign
  4855  0001' 0808'              	movf	___xxtofl@sign,w
  4856  0002' 1D03               	btfss	3,2
  4857  0003' 1F83'              	btfss	___xxtofl@val+3,7
  4858  0004' 2800'              	goto	i1l2690
  4859  0005' 0900'              	comf	___xxtofl@val,w
  4860  0006' 008A'              	movwf	___xxtofl@arg
  4861  0007' 0901'              	comf	___xxtofl@val+1,w
  4862  0008' 008B'              	movwf	___xxtofl@arg+1
  4863  0009' 0902'              	comf	___xxtofl@val+2,w
  4864  000A' 008C'              	movwf	___xxtofl@arg+2
  4865  000B' 0903'              	comf	___xxtofl@val+3,w
  4866  000C' 008D'              	movwf	___xxtofl@arg+3
  4867  000D' 0A8A'              	incf	___xxtofl@arg,f
  4868  000E' 1903               	skipnz
  4869  000F' 0A8B'              	incf	___xxtofl@arg+1,f
  4870  0010' 1903               	skipnz
  4871  0011' 0A8C'              	incf	___xxtofl@arg+2,f
  4872  0012' 1903               	skipnz
  4873  0013' 0A8D'              	incf	___xxtofl@arg+3,f
  4874  0014' 2800'              	goto	i1l889
  4875  0015'                    i1l2690:	
  4876  0015' 0803'              	movf	___xxtofl@val+3,w
  4877  0016' 008D'              	movwf	___xxtofl@arg+3
  4878  0017' 0802'              	movf	___xxtofl@val+2,w
  4879  0018' 008C'              	movwf	___xxtofl@arg+2
  4880  0019' 0801'              	movf	___xxtofl@val+1,w
  4881  001A' 008B'              	movwf	___xxtofl@arg+1
  4882  001B' 0800'              	movf	___xxtofl@val,w
  4883  001C' 008A'              	movwf	___xxtofl@arg
  4884  001D'                    i1l889:	
  4885  001D' 0803'              	movf	___xxtofl@val+3,w
  4886  001E' 0402'              	iorwf	___xxtofl@val+2,w
  4887  001F' 0401'              	iorwf	___xxtofl@val+1,w
  4888  0020' 0400'              	iorwf	___xxtofl@val,w
  4889  0021' 1D03               	skipz
  4890  0022' 2800'              	goto	i1l2696
  4891  0023' 3000               	movlw	0
  4892  0024' 0083'              	movwf	?___xxtofl+3
  4893  0025' 3000               	movlw	0
  4894  0026' 0082'              	movwf	?___xxtofl+2
  4895  0027' 3000               	movlw	0
  4896  0028' 0081'              	movwf	?___xxtofl+1
  4897  0029' 3000               	movlw	0
  4898  002A' 0080'              	movwf	?___xxtofl
  4899  002B' 0008               	return
  4900  002C'                    i1l2696:	
  4901  002C' 3096               	movlw	150
  4902  002D' 0084'              	movwf	??___xxtofl
  4903  002E' 0804'              	movf	??___xxtofl,w
  4904  002F' 0089'              	movwf	___xxtofl@exp
  4905  0030'                    i1l2700:	
  4906  0030' 30FE               	movlw	254
  4907  0031' 050D'              	andwf	___xxtofl@arg+3,w
  4908  0032' 1903               	btfsc	3,2
  4909  0033' 2800'              	goto	i1l895
  4910  0034' 3001               	movlw	1
  4911  0035' 0084'              	movwf	??___xxtofl
  4912  0036' 0804'              	movf	??___xxtofl,w
  4913  0037' 0789'              	addwf	___xxtofl@exp,f
  4914  0038' 3001               	movlw	1
  4915  0039'                    u371_25:	
  4916  0039' 1003               	clrc
  4917  003A' 0C8D'              	rrf	___xxtofl@arg+3,f
  4918  003B' 0C8C'              	rrf	___xxtofl@arg+2,f
  4919  003C' 0C8B'              	rrf	___xxtofl@arg+1,f
  4920  003D' 0C8A'              	rrf	___xxtofl@arg,f
  4921  003E' 3EFF               	addlw	-1
  4922  003F' 1D03               	skipz
  4923  0040' 2800'              	goto	u371_25
  4924  0041' 2800'              	goto	i1l2700
  4925  0042'                    i1l2702:	
  4926  0042' 3001               	movlw	1
  4927  0043' 0084'              	movwf	??___xxtofl
  4928  0044' 0804'              	movf	??___xxtofl,w
  4929  0045' 0789'              	addwf	___xxtofl@exp,f
  4930  0046' 3001               	movlw	1
  4931  0047' 078A'              	addwf	___xxtofl@arg,f
  4932  0048' 3000               	movlw	0
  4933  0049' 1803               	skipnc
  4934  004A' 3001               	movlw	1
  4935  004B' 078B'              	addwf	___xxtofl@arg+1,f
  4936  004C' 3000               	movlw	0
  4937  004D' 1803               	skipnc
  4938  004E' 3001               	movlw	1
  4939  004F' 078C'              	addwf	___xxtofl@arg+2,f
  4940  0050' 3000               	movlw	0
  4941  0051' 1803               	skipnc
  4942  0052' 3001               	movlw	1
  4943  0053' 078D'              	addwf	___xxtofl@arg+3,f
  4944  0054' 3001               	movlw	1
  4945  0055'                    u373_25:	
  4946  0055' 1003               	clrc
  4947  0056' 0C8D'              	rrf	___xxtofl@arg+3,f
  4948  0057' 0C8C'              	rrf	___xxtofl@arg+2,f
  4949  0058' 0C8B'              	rrf	___xxtofl@arg+1,f
  4950  0059' 0C8A'              	rrf	___xxtofl@arg,f
  4951  005A' 3EFF               	addlw	-1
  4952  005B' 1D03               	skipz
  4953  005C' 2800'              	goto	u373_25
  4954  005D'                    i1l895:	
  4955  005D' 30FF               	movlw	255
  4956  005E' 050D'              	andwf	___xxtofl@arg+3,w
  4957  005F' 1903               	btfsc	3,2
  4958  0060' 2800'              	goto	i1l2710
  4959  0061' 2800'              	goto	i1l2702
  4960  0062'                    i1l2712:	
  4961  0062' 3002               	movlw	2
  4962  0063' 0209'              	subwf	___xxtofl@exp,w
  4963  0064' 1C03               	btfss	3,0
  4964  0065' 2800'              	goto	i1l902
  4965  0066' 3001               	movlw	1
  4966  0067' 0289'              	subwf	___xxtofl@exp,f
  4967  0068' 3001               	movlw	1
  4968  0069' 0084'              	movwf	??___xxtofl
  4969  006A'                    u375_25:	
  4970  006A' 1003               	clrc
  4971  006B' 0D8A'              	rlf	___xxtofl@arg,f
  4972  006C' 0D8B'              	rlf	___xxtofl@arg+1,f
  4973  006D' 0D8C'              	rlf	___xxtofl@arg+2,f
  4974  006E' 0D8D'              	rlf	___xxtofl@arg+3,f
  4975  006F' 0B84'              	decfsz	??___xxtofl,f
  4976  0070' 2800'              	goto	u375_25
  4977  0071'                    i1l2710:	
  4978  0071' 1F8C'              	btfss	___xxtofl@arg+2,7
  4979  0072' 2800'              	goto	i1l2712
  4980  0073'                    i1l902:	
  4981  0073' 1809'              	btfsc	___xxtofl@exp,0
  4982  0074' 2800'              	goto	i1l903
  4983  0075' 30FF               	movlw	255
  4984  0076' 058A'              	andwf	___xxtofl@arg,f
  4985  0077' 30FF               	movlw	255
  4986  0078' 058B'              	andwf	___xxtofl@arg+1,f
  4987  0079' 307F               	movlw	127
  4988  007A' 058C'              	andwf	___xxtofl@arg+2,f
  4989  007B' 30FF               	movlw	255
  4990  007C' 058D'              	andwf	___xxtofl@arg+3,f
  4991  007D'                    i1l903:	
  4992  007D' 1003               	clrc
  4993  007E' 0C89'              	rrf	___xxtofl@exp,f
  4994  007F' 0809'              	movf	___xxtofl@exp,w
  4995  0080' 0084'              	movwf	??___xxtofl
  4996  0081' 0185'              	clrf	??___xxtofl+1
  4997  0082' 0186'              	clrf	??___xxtofl+2
  4998  0083' 0187'              	clrf	??___xxtofl+3
  4999  0084' 3018               	movlw	24
  5000  0085'                    u379_25:	
  5001  0085' 1003               	clrc
  5002  0086' 0D84'              	rlf	??___xxtofl,f
  5003  0087' 0D85'              	rlf	??___xxtofl+1,f
  5004  0088' 0D86'              	rlf	??___xxtofl+2,f
  5005  0089' 0D87'              	rlf	??___xxtofl+3,f
  5006  008A' 3EFF               	addlw	-1
  5007  008B' 1D03               	skipz
  5008  008C' 2800'              	goto	u379_25
  5009  008D' 0804'              	movf	??___xxtofl,w
  5010  008E' 048A'              	iorwf	___xxtofl@arg,f
  5011  008F' 0805'              	movf	??___xxtofl+1,w
  5012  0090' 048B'              	iorwf	___xxtofl@arg+1,f
  5013  0091' 0806'              	movf	??___xxtofl+2,w
  5014  0092' 048C'              	iorwf	___xxtofl@arg+2,f
  5015  0093' 0807'              	movf	??___xxtofl+3,w
  5016  0094' 048D'              	iorwf	___xxtofl@arg+3,f
  5017  0095' 0808'              	movf	___xxtofl@sign,w
  5018  0096' 1D03               	btfss	3,2
  5019  0097' 1F83'              	btfss	___xxtofl@val+3,7
  5020  0098' 2800'              	goto	i1l2724
  5021  0099' 178D'              	bsf	___xxtofl@arg+3,7
  5022  009A'                    i1l2724:	
  5023  009A' 080D'              	movf	___xxtofl@arg+3,w
  5024  009B' 0083'              	movwf	?___xxtofl+3
  5025  009C' 080C'              	movf	___xxtofl@arg+2,w
  5026  009D' 0082'              	movwf	?___xxtofl+2
  5027  009E' 080B'              	movf	___xxtofl@arg+1,w
  5028  009F' 0081'              	movwf	?___xxtofl+1
  5029  00A0' 080A'              	movf	___xxtofl@arg,w
  5030  00A1' 0080'              	movwf	?___xxtofl
  5031  00A2' 0008               	return
  5032  00A3'                    __end_of___xxtofl:	
  5033                           
  5034                           	psect	text22
  5035  0000'                    __ptext22:	
  5036 ;; *************** function ___fltol *****************
  5037 ;; Defined at:
  5038 ;;		line 43 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;  f1              4   46[BANK0 ] unsigned char 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  exp1            1   56[BANK0 ] unsigned char 
  5043 ;;  sign1           1   55[BANK0 ] unsigned char 
  5044 ;; Return value:  Size  Location     Type
  5045 ;;                  4   46[BANK0 ] long 
  5046 ;; Registers used:
  5047 ;;		wreg, status,2, status,0
  5048 ;; Tracked objects:
  5049 ;;		On entry : 0/0
  5050 ;;		On exit  : 0/0
  5051 ;;		Unchanged: 0/0
  5052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5053 ;;      Params:         0       4       0       0       0
  5054 ;;      Locals:         0       2       0       0       0
  5055 ;;      Temps:          0       5       0       0       0
  5056 ;;      Totals:         0      11       0       0       0
  5057 ;;Total ram usage:       11 bytes
  5058 ;; Hardware stack levels used:    1
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_SetMotor
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function ___fltol
  5068  0000'                    ___fltol:	
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  5072  0000' 1003               	clrc
  5073  0001' 1283               	bcf	3,5	;RP0=0, select bank0
  5074  0002' 1303               	bcf	3,6	;RP1=0, select bank0
  5075  0003' 0D30'              	rlf	___fltol@f1+2,w
  5076  0004' 0D31'              	rlf	___fltol@f1+3,w
  5077  0005' 00B2'              	movwf	??___fltol
  5078  0006' 0832'              	movf	??___fltol,w
  5079  0007' 00B8'              	movwf	___fltol@exp1
  5080  0008' 0838'              	movf	___fltol@exp1,w
  5081  0009' 1D03               	btfss	3,2
  5082  000A' 2800'              	goto	i1l2272
  5083  000B'                    i1l2268:	
  5084  000B' 3000               	movlw	0
  5085  000C' 00B1'              	movwf	?___fltol+3
  5086  000D' 3000               	movlw	0
  5087  000E' 00B0'              	movwf	?___fltol+2
  5088  000F' 3000               	movlw	0
  5089  0010' 00AF'              	movwf	?___fltol+1
  5090  0011' 3000               	movlw	0
  5091  0012' 00AE'              	movwf	?___fltol
  5092  0013' 0008               	return
  5093  0014'                    i1l2272:	
  5094  0014' 082E'              	movf	___fltol@f1,w
  5095  0015' 00B2'              	movwf	??___fltol
  5096  0016' 082F'              	movf	___fltol@f1+1,w
  5097  0017' 00B3'              	movwf	??___fltol+1
  5098  0018' 0830'              	movf	___fltol@f1+2,w
  5099  0019' 00B4'              	movwf	??___fltol+2
  5100  001A' 0831'              	movf	___fltol@f1+3,w
  5101  001B' 00B5'              	movwf	??___fltol+3
  5102  001C' 301F               	movlw	31
  5103  001D'                    u263_25:	
  5104  001D' 1003               	clrc
  5105  001E' 0CB5'              	rrf	??___fltol+3,f
  5106  001F' 0CB4'              	rrf	??___fltol+2,f
  5107  0020' 0CB3'              	rrf	??___fltol+1,f
  5108  0021' 0CB2'              	rrf	??___fltol,f
  5109  0022' 3EFF               	addlw	-1
  5110  0023' 1D03               	skipz
  5111  0024' 2800'              	goto	u263_25
  5112  0025' 0832'              	movf	??___fltol,w
  5113  0026' 00B6'              	movwf	??___fltol+4
  5114  0027' 0836'              	movf	??___fltol+4,w
  5115  0028' 00B7'              	movwf	___fltol@sign1
  5116  0029' 17B0'              	bsf	___fltol@f1+2,7
  5117  002A' 30FF               	movlw	255
  5118  002B' 05AE'              	andwf	___fltol@f1,f
  5119  002C' 30FF               	movlw	255
  5120  002D' 05AF'              	andwf	___fltol@f1+1,f
  5121  002E' 30FF               	movlw	255
  5122  002F' 05B0'              	andwf	___fltol@f1+2,f
  5123  0030' 3000               	movlw	0
  5124  0031' 05B1'              	andwf	___fltol@f1+3,f
  5125  0032' 3096               	movlw	150
  5126  0033' 02B8'              	subwf	___fltol@exp1,f
  5127  0034' 1FB8'              	btfss	___fltol@exp1,7
  5128  0035' 2800'              	goto	i1l2290
  5129  0036' 0838'              	movf	___fltol@exp1,w
  5130  0037' 3A80               	xorlw	128
  5131  0038' 3E97               	addlw	151
  5132  0039' 1C03               	btfss	3,0
  5133  003A' 2800'              	goto	i1l2268
  5134  003B'                    i1l2288:	
  5135  003B' 3001               	movlw	1
  5136  003C'                    u266_25:	
  5137  003C' 1003               	clrc
  5138  003D' 0CB1'              	rrf	___fltol@f1+3,f
  5139  003E' 0CB0'              	rrf	___fltol@f1+2,f
  5140  003F' 0CAF'              	rrf	___fltol@f1+1,f
  5141  0040' 0CAE'              	rrf	___fltol@f1,f
  5142  0041' 3EFF               	addlw	-1
  5143  0042' 1D03               	skipz
  5144  0043' 2800'              	goto	u266_25
  5145  0044' 3001               	movlw	1
  5146  0045' 00B2'              	movwf	??___fltol
  5147  0046' 0832'              	movf	??___fltol,w
  5148  0047' 07B8'              	addwf	___fltol@exp1,f
  5149  0048' 1903               	btfsc	3,2
  5150  0049' 2800'              	goto	i1l2298
  5151  004A' 2800'              	goto	i1l2288
  5152  004B'                    i1l2290:	
  5153  004B' 3020               	movlw	32
  5154  004C' 0238'              	subwf	___fltol@exp1,w
  5155  004D' 1803               	btfsc	3,0
  5156  004E' 2800'              	goto	i1l2268
  5157  004F'                    i1l655:	
  5158  004F' 0838'              	movf	___fltol@exp1,w
  5159  0050' 1903               	btfsc	3,2
  5160  0051' 2800'              	goto	i1l2298
  5161  0052' 3001               	movlw	1
  5162  0053' 00B2'              	movwf	??___fltol
  5163  0054'                    u269_25:	
  5164  0054' 1003               	clrc
  5165  0055' 0DAE'              	rlf	___fltol@f1,f
  5166  0056' 0DAF'              	rlf	___fltol@f1+1,f
  5167  0057' 0DB0'              	rlf	___fltol@f1+2,f
  5168  0058' 0DB1'              	rlf	___fltol@f1+3,f
  5169  0059' 0BB2'              	decfsz	??___fltol,f
  5170  005A' 2800'              	goto	u269_25
  5171  005B' 3001               	movlw	1
  5172  005C' 02B8'              	subwf	___fltol@exp1,f
  5173  005D' 2800'              	goto	i1l655
  5174  005E'                    i1l2298:	
  5175  005E' 0837'              	movf	___fltol@sign1,w
  5176  005F' 1903               	btfsc	3,2
  5177  0060' 0008               	return
  5178  0061' 09AE'              	comf	___fltol@f1,f
  5179  0062' 09AF'              	comf	___fltol@f1+1,f
  5180  0063' 09B0'              	comf	___fltol@f1+2,f
  5181  0064' 09B1'              	comf	___fltol@f1+3,f
  5182  0065' 0AAE'              	incf	___fltol@f1,f
  5183  0066' 1903               	skipnz
  5184  0067' 0AAF'              	incf	___fltol@f1+1,f
  5185  0068' 1903               	skipnz
  5186  0069' 0AB0'              	incf	___fltol@f1+2,f
  5187  006A' 1903               	skipnz
  5188  006B' 0AB1'              	incf	___fltol@f1+3,f
  5189  006C' 0008               	return
  5190  006D'                    __end_of___fltol:	
  5191                           
  5192                           	psect	text23
  5193  0000'                    __ptext23:	
  5194 ;; *************** function ___flmul *****************
  5195 ;; Defined at:
  5196 ;;		line 8 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  b               4    0[BANK0 ] long 
  5199 ;;  a               4    4[BANK0 ] long 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  prod            4   20[BANK0 ] struct .
  5202 ;;  grs             4   14[BANK0 ] unsigned long 
  5203 ;;  temp            2   24[BANK0 ] struct .
  5204 ;;  bexp            1   19[BANK0 ] unsigned char 
  5205 ;;  aexp            1   18[BANK0 ] unsigned char 
  5206 ;;  sign            1   13[BANK0 ] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  4    0[BANK0 ] unsigned char 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5216 ;;      Params:         0       8       0       0       0
  5217 ;;      Locals:         0      13       0       0       0
  5218 ;;      Temps:          0       5       0       0       0
  5219 ;;      Totals:         0      26       0       0       0
  5220 ;;Total ram usage:       26 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    1
  5223 ;; This function calls:
  5224 ;;		__Umul8_16
  5225 ;; This function is called by:
  5226 ;;		_SetMotor
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           
  5231                           ;psect for function ___flmul
  5232  0000'                    ___flmul:	
  5233                           
  5234                           ;incstack = 0
  5235                           ; Regs used in ___flmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5236  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  5237  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  5238  0002' 0803'              	movf	___flmul@b+3,w
  5239  0003' 3980               	andlw	128
  5240  0004' 0088'              	movwf	??___flmul
  5241  0005' 0808'              	movf	??___flmul,w
  5242  0006' 008D'              	movwf	___flmul@sign
  5243  0007' 0803'              	movf	___flmul@b+3,w
  5244  0008' 0088'              	movwf	??___flmul
  5245  0009' 0708'              	addwf	??___flmul,w
  5246  000A' 0089'              	movwf	??___flmul+1
  5247  000B' 0809'              	movf	??___flmul+1,w
  5248  000C' 0093'              	movwf	___flmul@bexp
  5249  000D' 1B82'              	btfsc	___flmul@b+2,7
  5250  000E' 1413'              	bsf	___flmul@bexp,0
  5251  000F' 0813'              	movf	___flmul@bexp,w
  5252  0010' 1903               	btfsc	3,2
  5253  0011' 2800'              	goto	i1l2560
  5254  0012' 0A13'              	incf	___flmul@bexp,w
  5255  0013' 1D03               	btfss	3,2
  5256  0014' 2800'              	goto	i1l2558
  5257  0015' 3000               	movlw	0
  5258  0016' 0083'              	movwf	___flmul@b+3
  5259  0017' 3000               	movlw	0
  5260  0018' 0082'              	movwf	___flmul@b+2
  5261  0019' 3000               	movlw	0
  5262  001A' 0081'              	movwf	___flmul@b+1
  5263  001B' 3000               	movlw	0
  5264  001C' 0080'              	movwf	___flmul@b
  5265  001D'                    i1l2558:	
  5266  001D' 1782'              	bsf	___flmul@b+2,7
  5267  001E' 2800'              	goto	i1l2562
  5268  001F'                    i1l2560:	
  5269  001F' 3000               	movlw	0
  5270  0020' 0083'              	movwf	___flmul@b+3
  5271  0021' 3000               	movlw	0
  5272  0022' 0082'              	movwf	___flmul@b+2
  5273  0023' 3000               	movlw	0
  5274  0024' 0081'              	movwf	___flmul@b+1
  5275  0025' 3000               	movlw	0
  5276  0026' 0080'              	movwf	___flmul@b
  5277  0027'                    i1l2562:	
  5278  0027' 0807'              	movf	___flmul@a+3,w
  5279  0028' 3980               	andlw	128
  5280  0029' 0088'              	movwf	??___flmul
  5281  002A' 0808'              	movf	??___flmul,w
  5282  002B' 068D'              	xorwf	___flmul@sign,f
  5283  002C' 0807'              	movf	___flmul@a+3,w
  5284  002D' 0088'              	movwf	??___flmul
  5285  002E' 0708'              	addwf	??___flmul,w
  5286  002F' 0089'              	movwf	??___flmul+1
  5287  0030' 0809'              	movf	??___flmul+1,w
  5288  0031' 0092'              	movwf	___flmul@aexp
  5289  0032' 1B86'              	btfsc	___flmul@a+2,7
  5290  0033' 1412'              	bsf	___flmul@aexp,0
  5291  0034' 0812'              	movf	___flmul@aexp,w
  5292  0035' 1903               	btfsc	3,2
  5293  0036' 2800'              	goto	i1l2578
  5294  0037' 0A12'              	incf	___flmul@aexp,w
  5295  0038' 1D03               	btfss	3,2
  5296  0039' 2800'              	goto	i1l2576
  5297  003A' 3000               	movlw	0
  5298  003B' 0087'              	movwf	___flmul@a+3
  5299  003C' 3000               	movlw	0
  5300  003D' 0086'              	movwf	___flmul@a+2
  5301  003E' 3000               	movlw	0
  5302  003F' 0085'              	movwf	___flmul@a+1
  5303  0040' 3000               	movlw	0
  5304  0041' 0084'              	movwf	___flmul@a
  5305  0042'                    i1l2576:	
  5306  0042' 1786'              	bsf	___flmul@a+2,7
  5307  0043' 2800'              	goto	i1l2580
  5308  0044'                    i1l2578:	
  5309  0044' 3000               	movlw	0
  5310  0045' 0087'              	movwf	___flmul@a+3
  5311  0046' 3000               	movlw	0
  5312  0047' 0086'              	movwf	___flmul@a+2
  5313  0048' 3000               	movlw	0
  5314  0049' 0085'              	movwf	___flmul@a+1
  5315  004A' 3000               	movlw	0
  5316  004B' 0084'              	movwf	___flmul@a
  5317  004C'                    i1l2580:	
  5318  004C' 0812'              	movf	___flmul@aexp,w
  5319  004D' 1D03               	btfss	3,2
  5320  004E' 0813'              	movf	___flmul@bexp,w
  5321  004F' 1D03               	btfss	3,2
  5322  0050' 2800'              	goto	i1l2588
  5323  0051' 3000               	movlw	0
  5324  0052' 0083'              	movwf	?___flmul+3
  5325  0053' 3000               	movlw	0
  5326  0054' 0082'              	movwf	?___flmul+2
  5327  0055' 3000               	movlw	0
  5328  0056' 0081'              	movwf	?___flmul+1
  5329  0057' 3000               	movlw	0
  5330  0058' 0080'              	movwf	?___flmul
  5331  0059' 0008               	return
  5332  005A'                    i1l2588:	
  5333  005A' 0800'              	movf	___flmul@b,w
  5334  005B' 0088'              	movwf	??___flmul
  5335  005C' 0808'              	movf	??___flmul,w
  5336  005D' 0080'              	movwf	__Umul8_16@multiplicand
  5337  005E' 0806'              	movf	___flmul@a+2,w
  5338  005F' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5339  0064' 0801'              	movf	?__Umul8_16+1,w
  5340  0065' 1283               	bcf	3,5	;RP0=0, select bank0
  5341  0066' 1303               	bcf	3,6	;RP1=0, select bank0
  5342  0067' 0099'              	movwf	___flmul@temp+1
  5343  0068' 0800'              	movf	?__Umul8_16,w
  5344  0069' 0098'              	movwf	___flmul@temp
  5345  006A' 0818'              	movf	___flmul@temp,w
  5346  006B' 0088'              	movwf	??___flmul
  5347  006C' 0189'              	clrf	??___flmul+1
  5348  006D' 018A'              	clrf	??___flmul+2
  5349  006E' 018B'              	clrf	??___flmul+3
  5350  006F' 080B'              	movf	??___flmul+3,w
  5351  0070' 0091'              	movwf	___flmul@grs+3
  5352  0071' 080A'              	movf	??___flmul+2,w
  5353  0072' 0090'              	movwf	___flmul@grs+2
  5354  0073' 0809'              	movf	??___flmul+1,w
  5355  0074' 008F'              	movwf	___flmul@grs+1
  5356  0075' 0808'              	movf	??___flmul,w
  5357  0076' 008E'              	movwf	___flmul@grs
  5358  0077' 0819'              	movf	___flmul@temp+1,w
  5359  0078' 0088'              	movwf	??___flmul
  5360  0079' 0189'              	clrf	??___flmul+1
  5361  007A' 018A'              	clrf	??___flmul+2
  5362  007B' 018B'              	clrf	??___flmul+3
  5363  007C' 080B'              	movf	??___flmul+3,w
  5364  007D' 0097'              	movwf	___flmul@prod+3
  5365  007E' 080A'              	movf	??___flmul+2,w
  5366  007F' 0096'              	movwf	___flmul@prod+2
  5367  0080' 0809'              	movf	??___flmul+1,w
  5368  0081' 0095'              	movwf	___flmul@prod+1
  5369  0082' 0808'              	movf	??___flmul,w
  5370  0083' 0094'              	movwf	___flmul@prod
  5371  0084' 0801'              	movf	___flmul@b+1,w
  5372  0085' 0088'              	movwf	??___flmul
  5373  0086' 0808'              	movf	??___flmul,w
  5374  0087' 0080'              	movwf	__Umul8_16@multiplicand
  5375  0088' 0805'              	movf	___flmul@a+1,w
  5376  0089' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5377  008E' 0801'              	movf	?__Umul8_16+1,w
  5378  008F' 1283               	bcf	3,5	;RP0=0, select bank0
  5379  0090' 1303               	bcf	3,6	;RP1=0, select bank0
  5380  0091' 0099'              	movwf	___flmul@temp+1
  5381  0092' 0800'              	movf	?__Umul8_16,w
  5382  0093' 0098'              	movwf	___flmul@temp
  5383  0094' 0818'              	movf	___flmul@temp,w
  5384  0095' 0088'              	movwf	??___flmul
  5385  0096' 0189'              	clrf	??___flmul+1
  5386  0097' 018A'              	clrf	??___flmul+2
  5387  0098' 018B'              	clrf	??___flmul+3
  5388  0099' 0808'              	movf	??___flmul,w
  5389  009A' 078E'              	addwf	___flmul@grs,f
  5390  009B' 0809'              	movf	??___flmul+1,w
  5391  009C' 1103               	clrz
  5392  009D' 1803               	skipnc
  5393  009E' 3E01               	addlw	1
  5394  009F' 1D03               	btfss	3,2
  5395  00A0' 078F'              	addwf	___flmul@grs+1,f
  5396  00A1' 080A'              	movf	??___flmul+2,w
  5397  00A2' 1103               	clrz
  5398  00A3' 1803               	skipnc
  5399  00A4' 3E01               	addlw	1
  5400  00A5' 1D03               	btfss	3,2
  5401  00A6' 0790'              	addwf	___flmul@grs+2,f
  5402  00A7' 080B'              	movf	??___flmul+3,w
  5403  00A8' 1103               	clrz
  5404  00A9' 1803               	skipnc
  5405  00AA' 3E01               	addlw	1
  5406  00AB' 1D03               	btfss	3,2
  5407  00AC' 0791'              	addwf	___flmul@grs+3,f
  5408  00AD' 0819'              	movf	___flmul@temp+1,w
  5409  00AE' 0088'              	movwf	??___flmul
  5410  00AF' 0189'              	clrf	??___flmul+1
  5411  00B0' 018A'              	clrf	??___flmul+2
  5412  00B1' 018B'              	clrf	??___flmul+3
  5413  00B2' 0808'              	movf	??___flmul,w
  5414  00B3' 0794'              	addwf	___flmul@prod,f
  5415  00B4' 0809'              	movf	??___flmul+1,w
  5416  00B5' 1103               	clrz
  5417  00B6' 1803               	skipnc
  5418  00B7' 3E01               	addlw	1
  5419  00B8' 1D03               	btfss	3,2
  5420  00B9' 0795'              	addwf	___flmul@prod+1,f
  5421  00BA' 080A'              	movf	??___flmul+2,w
  5422  00BB' 1103               	clrz
  5423  00BC' 1803               	skipnc
  5424  00BD' 3E01               	addlw	1
  5425  00BE' 1D03               	btfss	3,2
  5426  00BF' 0796'              	addwf	___flmul@prod+2,f
  5427  00C0' 080B'              	movf	??___flmul+3,w
  5428  00C1' 1103               	clrz
  5429  00C2' 1803               	skipnc
  5430  00C3' 3E01               	addlw	1
  5431  00C4' 1D03               	btfss	3,2
  5432  00C5' 0797'              	addwf	___flmul@prod+3,f
  5433  00C6' 0802'              	movf	___flmul@b+2,w
  5434  00C7' 0088'              	movwf	??___flmul
  5435  00C8' 0808'              	movf	??___flmul,w
  5436  00C9' 0080'              	movwf	__Umul8_16@multiplicand
  5437  00CA' 0804'              	movf	___flmul@a,w
  5438  00CB' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5439  00D0' 0801'              	movf	?__Umul8_16+1,w
  5440  00D1' 1283               	bcf	3,5	;RP0=0, select bank0
  5441  00D2' 1303               	bcf	3,6	;RP1=0, select bank0
  5442  00D3' 0099'              	movwf	___flmul@temp+1
  5443  00D4' 0800'              	movf	?__Umul8_16,w
  5444  00D5' 0098'              	movwf	___flmul@temp
  5445  00D6' 0818'              	movf	___flmul@temp,w
  5446  00D7' 0088'              	movwf	??___flmul
  5447  00D8' 0189'              	clrf	??___flmul+1
  5448  00D9' 018A'              	clrf	??___flmul+2
  5449  00DA' 018B'              	clrf	??___flmul+3
  5450  00DB' 0808'              	movf	??___flmul,w
  5451  00DC' 078E'              	addwf	___flmul@grs,f
  5452  00DD' 0809'              	movf	??___flmul+1,w
  5453  00DE' 1103               	clrz
  5454  00DF' 1803               	skipnc
  5455  00E0' 3E01               	addlw	1
  5456  00E1' 1D03               	btfss	3,2
  5457  00E2' 078F'              	addwf	___flmul@grs+1,f
  5458  00E3' 080A'              	movf	??___flmul+2,w
  5459  00E4' 1103               	clrz
  5460  00E5' 1803               	skipnc
  5461  00E6' 3E01               	addlw	1
  5462  00E7' 1D03               	btfss	3,2
  5463  00E8' 0790'              	addwf	___flmul@grs+2,f
  5464  00E9' 080B'              	movf	??___flmul+3,w
  5465  00EA' 1103               	clrz
  5466  00EB' 1803               	skipnc
  5467  00EC' 3E01               	addlw	1
  5468  00ED' 1D03               	btfss	3,2
  5469  00EE' 0791'              	addwf	___flmul@grs+3,f
  5470  00EF' 0819'              	movf	___flmul@temp+1,w
  5471  00F0' 0088'              	movwf	??___flmul
  5472  00F1' 0189'              	clrf	??___flmul+1
  5473  00F2' 018A'              	clrf	??___flmul+2
  5474  00F3' 018B'              	clrf	??___flmul+3
  5475  00F4' 0808'              	movf	??___flmul,w
  5476  00F5' 0794'              	addwf	___flmul@prod,f
  5477  00F6' 0809'              	movf	??___flmul+1,w
  5478  00F7' 1103               	clrz
  5479  00F8' 1803               	skipnc
  5480  00F9' 3E01               	addlw	1
  5481  00FA' 1D03               	btfss	3,2
  5482  00FB' 0795'              	addwf	___flmul@prod+1,f
  5483  00FC' 080A'              	movf	??___flmul+2,w
  5484  00FD' 1103               	clrz
  5485  00FE' 1803               	skipnc
  5486  00FF' 3E01               	addlw	1
  5487  0100' 1D03               	btfss	3,2
  5488  0101' 0796'              	addwf	___flmul@prod+2,f
  5489  0102' 080B'              	movf	??___flmul+3,w
  5490  0103' 1103               	clrz
  5491  0104' 1803               	skipnc
  5492  0105' 3E01               	addlw	1
  5493  0106' 1D03               	btfss	3,2
  5494  0107' 0797'              	addwf	___flmul@prod+3,f
  5495  0108' 3008               	movlw	8
  5496  0109' 0088'              	movwf	??___flmul
  5497  010A'                    u343_25:	
  5498  010A' 1003               	clrc
  5499  010B' 0D8E'              	rlf	___flmul@grs,f
  5500  010C' 0D8F'              	rlf	___flmul@grs+1,f
  5501  010D' 0D90'              	rlf	___flmul@grs+2,f
  5502  010E' 0D91'              	rlf	___flmul@grs+3,f
  5503  010F' 0B88'              	decfsz	??___flmul,f
  5504  0110' 2800'              	goto	u343_25
  5505  0111' 0801'              	movf	___flmul@b+1,w
  5506  0112' 0088'              	movwf	??___flmul
  5507  0113' 0808'              	movf	??___flmul,w
  5508  0114' 0080'              	movwf	__Umul8_16@multiplicand
  5509  0115' 0804'              	movf	___flmul@a,w
  5510  0116' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5511  011B' 0801'              	movf	?__Umul8_16+1,w
  5512  011C' 1283               	bcf	3,5	;RP0=0, select bank0
  5513  011D' 1303               	bcf	3,6	;RP1=0, select bank0
  5514  011E' 0099'              	movwf	___flmul@temp+1
  5515  011F' 0800'              	movf	?__Umul8_16,w
  5516  0120' 0098'              	movwf	___flmul@temp
  5517  0121' 0818'              	movf	___flmul@temp,w
  5518  0122' 0088'              	movwf	??___flmul
  5519  0123' 0819'              	movf	___flmul@temp+1,w
  5520  0124' 0089'              	movwf	??___flmul+1
  5521  0125' 018A'              	clrf	??___flmul+2
  5522  0126' 018B'              	clrf	??___flmul+3
  5523  0127' 0808'              	movf	??___flmul,w
  5524  0128' 078E'              	addwf	___flmul@grs,f
  5525  0129' 0809'              	movf	??___flmul+1,w
  5526  012A' 1103               	clrz
  5527  012B' 1803               	skipnc
  5528  012C' 3E01               	addlw	1
  5529  012D' 1D03               	btfss	3,2
  5530  012E' 078F'              	addwf	___flmul@grs+1,f
  5531  012F' 080A'              	movf	??___flmul+2,w
  5532  0130' 1103               	clrz
  5533  0131' 1803               	skipnc
  5534  0132' 3E01               	addlw	1
  5535  0133' 1D03               	btfss	3,2
  5536  0134' 0790'              	addwf	___flmul@grs+2,f
  5537  0135' 080B'              	movf	??___flmul+3,w
  5538  0136' 1103               	clrz
  5539  0137' 1803               	skipnc
  5540  0138' 3E01               	addlw	1
  5541  0139' 1D03               	btfss	3,2
  5542  013A' 0791'              	addwf	___flmul@grs+3,f
  5543  013B' 0800'              	movf	___flmul@b,w
  5544  013C' 0088'              	movwf	??___flmul
  5545  013D' 0808'              	movf	??___flmul,w
  5546  013E' 0080'              	movwf	__Umul8_16@multiplicand
  5547  013F' 0805'              	movf	___flmul@a+1,w
  5548  0140' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5549  0145' 0801'              	movf	?__Umul8_16+1,w
  5550  0146' 1283               	bcf	3,5	;RP0=0, select bank0
  5551  0147' 1303               	bcf	3,6	;RP1=0, select bank0
  5552  0148' 0099'              	movwf	___flmul@temp+1
  5553  0149' 0800'              	movf	?__Umul8_16,w
  5554  014A' 0098'              	movwf	___flmul@temp
  5555  014B' 0818'              	movf	___flmul@temp,w
  5556  014C' 0088'              	movwf	??___flmul
  5557  014D' 0819'              	movf	___flmul@temp+1,w
  5558  014E' 0089'              	movwf	??___flmul+1
  5559  014F' 018A'              	clrf	??___flmul+2
  5560  0150' 018B'              	clrf	??___flmul+3
  5561  0151' 0808'              	movf	??___flmul,w
  5562  0152' 078E'              	addwf	___flmul@grs,f
  5563  0153' 0809'              	movf	??___flmul+1,w
  5564  0154' 1103               	clrz
  5565  0155' 1803               	skipnc
  5566  0156' 3E01               	addlw	1
  5567  0157' 1D03               	btfss	3,2
  5568  0158' 078F'              	addwf	___flmul@grs+1,f
  5569  0159' 080A'              	movf	??___flmul+2,w
  5570  015A' 1103               	clrz
  5571  015B' 1803               	skipnc
  5572  015C' 3E01               	addlw	1
  5573  015D' 1D03               	btfss	3,2
  5574  015E' 0790'              	addwf	___flmul@grs+2,f
  5575  015F' 080B'              	movf	??___flmul+3,w
  5576  0160' 1103               	clrz
  5577  0161' 1803               	skipnc
  5578  0162' 3E01               	addlw	1
  5579  0163' 1D03               	btfss	3,2
  5580  0164' 0791'              	addwf	___flmul@grs+3,f
  5581  0165' 3008               	movlw	8
  5582  0166' 0088'              	movwf	??___flmul
  5583  0167'                    u346_25:	
  5584  0167' 1003               	clrc
  5585  0168' 0D8E'              	rlf	___flmul@grs,f
  5586  0169' 0D8F'              	rlf	___flmul@grs+1,f
  5587  016A' 0D90'              	rlf	___flmul@grs+2,f
  5588  016B' 0D91'              	rlf	___flmul@grs+3,f
  5589  016C' 0B88'              	decfsz	??___flmul,f
  5590  016D' 2800'              	goto	u346_25
  5591  016E' 0800'              	movf	___flmul@b,w
  5592  016F' 0088'              	movwf	??___flmul
  5593  0170' 0808'              	movf	??___flmul,w
  5594  0171' 0080'              	movwf	__Umul8_16@multiplicand
  5595  0172' 0804'              	movf	___flmul@a,w
  5596  0173' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5597  0178' 0801'              	movf	?__Umul8_16+1,w
  5598  0179' 1283               	bcf	3,5	;RP0=0, select bank0
  5599  017A' 1303               	bcf	3,6	;RP1=0, select bank0
  5600  017B' 0099'              	movwf	___flmul@temp+1
  5601  017C' 0800'              	movf	?__Umul8_16,w
  5602  017D' 0098'              	movwf	___flmul@temp
  5603  017E' 0818'              	movf	___flmul@temp,w
  5604  017F' 0088'              	movwf	??___flmul
  5605  0180' 0819'              	movf	___flmul@temp+1,w
  5606  0181' 0089'              	movwf	??___flmul+1
  5607  0182' 018A'              	clrf	??___flmul+2
  5608  0183' 018B'              	clrf	??___flmul+3
  5609  0184' 0808'              	movf	??___flmul,w
  5610  0185' 078E'              	addwf	___flmul@grs,f
  5611  0186' 0809'              	movf	??___flmul+1,w
  5612  0187' 1103               	clrz
  5613  0188' 1803               	skipnc
  5614  0189' 3E01               	addlw	1
  5615  018A' 1D03               	btfss	3,2
  5616  018B' 078F'              	addwf	___flmul@grs+1,f
  5617  018C' 080A'              	movf	??___flmul+2,w
  5618  018D' 1103               	clrz
  5619  018E' 1803               	skipnc
  5620  018F' 3E01               	addlw	1
  5621  0190' 1D03               	btfss	3,2
  5622  0191' 0790'              	addwf	___flmul@grs+2,f
  5623  0192' 080B'              	movf	??___flmul+3,w
  5624  0193' 1103               	clrz
  5625  0194' 1803               	skipnc
  5626  0195' 3E01               	addlw	1
  5627  0196' 1D03               	btfss	3,2
  5628  0197' 0791'              	addwf	___flmul@grs+3,f
  5629  0198' 0801'              	movf	___flmul@b+1,w
  5630  0199' 0088'              	movwf	??___flmul
  5631  019A' 0808'              	movf	??___flmul,w
  5632  019B' 0080'              	movwf	__Umul8_16@multiplicand
  5633  019C' 0806'              	movf	___flmul@a+2,w
  5634  019D' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5635  01A2' 0801'              	movf	?__Umul8_16+1,w
  5636  01A3' 1283               	bcf	3,5	;RP0=0, select bank0
  5637  01A4' 1303               	bcf	3,6	;RP1=0, select bank0
  5638  01A5' 0099'              	movwf	___flmul@temp+1
  5639  01A6' 0800'              	movf	?__Umul8_16,w
  5640  01A7' 0098'              	movwf	___flmul@temp
  5641  01A8' 0818'              	movf	___flmul@temp,w
  5642  01A9' 0088'              	movwf	??___flmul
  5643  01AA' 0819'              	movf	___flmul@temp+1,w
  5644  01AB' 0089'              	movwf	??___flmul+1
  5645  01AC' 018A'              	clrf	??___flmul+2
  5646  01AD' 018B'              	clrf	??___flmul+3
  5647  01AE' 0808'              	movf	??___flmul,w
  5648  01AF' 0794'              	addwf	___flmul@prod,f
  5649  01B0' 0809'              	movf	??___flmul+1,w
  5650  01B1' 1103               	clrz
  5651  01B2' 1803               	skipnc
  5652  01B3' 3E01               	addlw	1
  5653  01B4' 1D03               	btfss	3,2
  5654  01B5' 0795'              	addwf	___flmul@prod+1,f
  5655  01B6' 080A'              	movf	??___flmul+2,w
  5656  01B7' 1103               	clrz
  5657  01B8' 1803               	skipnc
  5658  01B9' 3E01               	addlw	1
  5659  01BA' 1D03               	btfss	3,2
  5660  01BB' 0796'              	addwf	___flmul@prod+2,f
  5661  01BC' 080B'              	movf	??___flmul+3,w
  5662  01BD' 1103               	clrz
  5663  01BE' 1803               	skipnc
  5664  01BF' 3E01               	addlw	1
  5665  01C0' 1D03               	btfss	3,2
  5666  01C1' 0797'              	addwf	___flmul@prod+3,f
  5667  01C2' 0802'              	movf	___flmul@b+2,w
  5668  01C3' 0088'              	movwf	??___flmul
  5669  01C4' 0808'              	movf	??___flmul,w
  5670  01C5' 0080'              	movwf	__Umul8_16@multiplicand
  5671  01C6' 0805'              	movf	___flmul@a+1,w
  5672  01C7' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5673  01CC' 0801'              	movf	?__Umul8_16+1,w
  5674  01CD' 1283               	bcf	3,5	;RP0=0, select bank0
  5675  01CE' 1303               	bcf	3,6	;RP1=0, select bank0
  5676  01CF' 0099'              	movwf	___flmul@temp+1
  5677  01D0' 0800'              	movf	?__Umul8_16,w
  5678  01D1' 0098'              	movwf	___flmul@temp
  5679  01D2' 0818'              	movf	___flmul@temp,w
  5680  01D3' 0088'              	movwf	??___flmul
  5681  01D4' 0819'              	movf	___flmul@temp+1,w
  5682  01D5' 0089'              	movwf	??___flmul+1
  5683  01D6' 018A'              	clrf	??___flmul+2
  5684  01D7' 018B'              	clrf	??___flmul+3
  5685  01D8' 0808'              	movf	??___flmul,w
  5686  01D9' 0794'              	addwf	___flmul@prod,f
  5687  01DA' 0809'              	movf	??___flmul+1,w
  5688  01DB' 1103               	clrz
  5689  01DC' 1803               	skipnc
  5690  01DD' 3E01               	addlw	1
  5691  01DE' 1D03               	btfss	3,2
  5692  01DF' 0795'              	addwf	___flmul@prod+1,f
  5693  01E0' 080A'              	movf	??___flmul+2,w
  5694  01E1' 1103               	clrz
  5695  01E2' 1803               	skipnc
  5696  01E3' 3E01               	addlw	1
  5697  01E4' 1D03               	btfss	3,2
  5698  01E5' 0796'              	addwf	___flmul@prod+2,f
  5699  01E6' 080B'              	movf	??___flmul+3,w
  5700  01E7' 1103               	clrz
  5701  01E8' 1803               	skipnc
  5702  01E9' 3E01               	addlw	1
  5703  01EA' 1D03               	btfss	3,2
  5704  01EB' 0797'              	addwf	___flmul@prod+3,f
  5705  01EC' 0802'              	movf	___flmul@b+2,w
  5706  01ED' 0088'              	movwf	??___flmul
  5707  01EE' 0808'              	movf	??___flmul,w
  5708  01EF' 0080'              	movwf	__Umul8_16@multiplicand
  5709  01F0' 0806'              	movf	___flmul@a+2,w
  5710  01F1' 120A' 118A' 2000' 120A' 118A' 	fcall	__Umul8_16
  5711  01F6' 0801'              	movf	?__Umul8_16+1,w
  5712  01F7' 1283               	bcf	3,5	;RP0=0, select bank0
  5713  01F8' 1303               	bcf	3,6	;RP1=0, select bank0
  5714  01F9' 0099'              	movwf	___flmul@temp+1
  5715  01FA' 0800'              	movf	?__Umul8_16,w
  5716  01FB' 0098'              	movwf	___flmul@temp
  5717  01FC' 0818'              	movf	___flmul@temp,w
  5718  01FD' 0088'              	movwf	??___flmul
  5719  01FE' 0819'              	movf	___flmul@temp+1,w
  5720  01FF' 0089'              	movwf	??___flmul+1
  5721  0200' 018A'              	clrf	??___flmul+2
  5722  0201' 018B'              	clrf	??___flmul+3
  5723  0202' 3008               	movlw	8
  5724  0203'                    u350_25:	
  5725  0203' 1003               	clrc
  5726  0204' 0D88'              	rlf	??___flmul,f
  5727  0205' 0D89'              	rlf	??___flmul+1,f
  5728  0206' 0D8A'              	rlf	??___flmul+2,f
  5729  0207' 0D8B'              	rlf	??___flmul+3,f
  5730  0208' 3EFF               	addlw	-1
  5731  0209' 1D03               	skipz
  5732  020A' 2800'              	goto	u350_25
  5733  020B' 0808'              	movf	??___flmul,w
  5734  020C' 0794'              	addwf	___flmul@prod,f
  5735  020D' 0809'              	movf	??___flmul+1,w
  5736  020E' 1103               	clrz
  5737  020F' 1803               	skipnc
  5738  0210' 3E01               	addlw	1
  5739  0211' 1D03               	btfss	3,2
  5740  0212' 0795'              	addwf	___flmul@prod+1,f
  5741  0213' 080A'              	movf	??___flmul+2,w
  5742  0214' 1103               	clrz
  5743  0215' 1803               	skipnc
  5744  0216' 3E01               	addlw	1
  5745  0217' 1D03               	btfss	3,2
  5746  0218' 0796'              	addwf	___flmul@prod+2,f
  5747  0219' 080B'              	movf	??___flmul+3,w
  5748  021A' 1103               	clrz
  5749  021B' 1803               	skipnc
  5750  021C' 3E01               	addlw	1
  5751  021D' 1D03               	btfss	3,2
  5752  021E' 0797'              	addwf	___flmul@prod+3,f
  5753  021F' 080E'              	movf	___flmul@grs,w
  5754  0220' 0088'              	movwf	??___flmul
  5755  0221' 080F'              	movf	___flmul@grs+1,w
  5756  0222' 0089'              	movwf	??___flmul+1
  5757  0223' 0810'              	movf	___flmul@grs+2,w
  5758  0224' 008A'              	movwf	??___flmul+2
  5759  0225' 0811'              	movf	___flmul@grs+3,w
  5760  0226' 008B'              	movwf	??___flmul+3
  5761  0227' 3018               	movlw	24
  5762  0228'                    u352_25:	
  5763  0228' 1003               	clrc
  5764  0229' 0C8B'              	rrf	??___flmul+3,f
  5765  022A' 0C8A'              	rrf	??___flmul+2,f
  5766  022B' 0C89'              	rrf	??___flmul+1,f
  5767  022C' 0C88'              	rrf	??___flmul,f
  5768  022D' 3EFF               	addlw	-1
  5769  022E' 1D03               	skipz
  5770  022F' 2800'              	goto	u352_25
  5771  0230' 0808'              	movf	??___flmul,w
  5772  0231' 0794'              	addwf	___flmul@prod,f
  5773  0232' 0809'              	movf	??___flmul+1,w
  5774  0233' 1103               	clrz
  5775  0234' 1803               	skipnc
  5776  0235' 3E01               	addlw	1
  5777  0236' 1D03               	btfss	3,2
  5778  0237' 0795'              	addwf	___flmul@prod+1,f
  5779  0238' 080A'              	movf	??___flmul+2,w
  5780  0239' 1103               	clrz
  5781  023A' 1803               	skipnc
  5782  023B' 3E01               	addlw	1
  5783  023C' 1D03               	btfss	3,2
  5784  023D' 0796'              	addwf	___flmul@prod+2,f
  5785  023E' 080B'              	movf	??___flmul+3,w
  5786  023F' 1103               	clrz
  5787  0240' 1803               	skipnc
  5788  0241' 3E01               	addlw	1
  5789  0242' 1D03               	btfss	3,2
  5790  0243' 0797'              	addwf	___flmul@prod+3,f
  5791  0244' 3008               	movlw	8
  5792  0245' 0088'              	movwf	??___flmul
  5793  0246'                    u354_25:	
  5794  0246' 1003               	clrc
  5795  0247' 0D8E'              	rlf	___flmul@grs,f
  5796  0248' 0D8F'              	rlf	___flmul@grs+1,f
  5797  0249' 0D90'              	rlf	___flmul@grs+2,f
  5798  024A' 0D91'              	rlf	___flmul@grs+3,f
  5799  024B' 0B88'              	decfsz	??___flmul,f
  5800  024C' 2800'              	goto	u354_25
  5801  024D' 0813'              	movf	___flmul@bexp,w
  5802  024E' 0712'              	addwf	___flmul@aexp,w
  5803  024F' 0088'              	movwf	??___flmul
  5804  0250' 0189'              	clrf	??___flmul+1
  5805  0251' 0D89'              	rlf	??___flmul+1,f
  5806  0252' 0808'              	movf	??___flmul,w
  5807  0253' 3E82               	addlw	130
  5808  0254' 0098'              	movwf	___flmul@temp
  5809  0255' 0809'              	movf	??___flmul+1,w
  5810  0256' 1803               	skipnc
  5811  0257' 3E01               	addlw	1
  5812  0258' 3EFF               	addlw	255
  5813  0259' 0099'              	movwf	___flmul@temp+1
  5814  025A'                    i1l2640:	
  5815  025A' 1B96'              	btfsc	___flmul@prod+2,7
  5816  025B' 2800'              	goto	i1l2642
  5817  025C' 3001               	movlw	1
  5818  025D' 0088'              	movwf	??___flmul
  5819  025E'                    u355_25:	
  5820  025E' 1003               	clrc
  5821  025F' 0D94'              	rlf	___flmul@prod,f
  5822  0260' 0D95'              	rlf	___flmul@prod+1,f
  5823  0261' 0D96'              	rlf	___flmul@prod+2,f
  5824  0262' 0D97'              	rlf	___flmul@prod+3,f
  5825  0263' 0B88'              	decfsz	??___flmul,f
  5826  0264' 2800'              	goto	u355_25
  5827  0265' 1B91'              	btfsc	___flmul@grs+3,7
  5828  0266' 1414'              	bsf	___flmul@prod,0
  5829  0267' 3001               	movlw	1
  5830  0268' 0088'              	movwf	??___flmul
  5831  0269'                    u357_25:	
  5832  0269' 1003               	clrc
  5833  026A' 0D8E'              	rlf	___flmul@grs,f
  5834  026B' 0D8F'              	rlf	___flmul@grs+1,f
  5835  026C' 0D90'              	rlf	___flmul@grs+2,f
  5836  026D' 0D91'              	rlf	___flmul@grs+3,f
  5837  026E' 0B88'              	decfsz	??___flmul,f
  5838  026F' 2800'              	goto	u357_25
  5839  0270' 30FF               	movlw	255
  5840  0271' 0798'              	addwf	___flmul@temp,f
  5841  0272' 1803               	skipnc
  5842  0273' 0A99'              	incf	___flmul@temp+1,f
  5843  0274' 30FF               	movlw	255
  5844  0275' 0799'              	addwf	___flmul@temp+1,f
  5845  0276' 2800'              	goto	i1l2640
  5846  0277'                    i1l2642:	
  5847  0277' 0192'              	clrf	___flmul@aexp
  5848  0278' 1F91'              	btfss	___flmul@grs+3,7
  5849  0279' 2800'              	goto	i1l2652
  5850  027A' 30FF               	movlw	255
  5851  027B' 050E'              	andwf	___flmul@grs,w
  5852  027C' 0088'              	movwf	??___flmul
  5853  027D' 30FF               	movlw	255
  5854  027E' 050F'              	andwf	___flmul@grs+1,w
  5855  027F' 0089'              	movwf	??___flmul+1
  5856  0280' 30FF               	movlw	255
  5857  0281' 0510'              	andwf	___flmul@grs+2,w
  5858  0282' 008A'              	movwf	??___flmul+2
  5859  0283' 307F               	movlw	127
  5860  0284' 0511'              	andwf	___flmul@grs+3,w
  5861  0285' 008B'              	movwf	??___flmul+3
  5862  0286' 080B'              	movf	??___flmul+3,w
  5863  0287' 040A'              	iorwf	??___flmul+2,w
  5864  0288' 0409'              	iorwf	??___flmul+1,w
  5865  0289' 0408'              	iorwf	??___flmul,w
  5866  028A' 1903               	skipnz
  5867  028B' 1814'              	btfsc	___flmul@prod,0
  5868  028C' 2800'              	goto	i1l2648
  5869  028D' 2800'              	goto	i1l2652
  5870  028E'                    i1l2648:	
  5871  028E' 0192'              	clrf	___flmul@aexp
  5872  028F' 0A92'              	incf	___flmul@aexp,f
  5873  0290'                    i1l2652:	
  5874  0290' 0812'              	movf	___flmul@aexp,w
  5875  0291' 1903               	btfsc	3,2
  5876  0292' 2800'              	goto	i1l2662
  5877  0293' 3001               	movlw	1
  5878  0294' 0794'              	addwf	___flmul@prod,f
  5879  0295' 3000               	movlw	0
  5880  0296' 1803               	skipnc
  5881  0297' 3001               	movlw	1
  5882  0298' 0795'              	addwf	___flmul@prod+1,f
  5883  0299' 3000               	movlw	0
  5884  029A' 1803               	skipnc
  5885  029B' 3001               	movlw	1
  5886  029C' 0796'              	addwf	___flmul@prod+2,f
  5887  029D' 3000               	movlw	0
  5888  029E' 1803               	skipnc
  5889  029F' 3001               	movlw	1
  5890  02A0' 0797'              	addwf	___flmul@prod+3,f
  5891  02A1' 1C17'              	btfss	___flmul@prod+3,0
  5892  02A2' 2800'              	goto	i1l2662
  5893  02A3' 0814'              	movf	___flmul@prod,w
  5894  02A4' 0088'              	movwf	??___flmul
  5895  02A5' 0815'              	movf	___flmul@prod+1,w
  5896  02A6' 0089'              	movwf	??___flmul+1
  5897  02A7' 0816'              	movf	___flmul@prod+2,w
  5898  02A8' 008A'              	movwf	??___flmul+2
  5899  02A9' 0817'              	movf	___flmul@prod+3,w
  5900  02AA' 008B'              	movwf	??___flmul+3
  5901  02AB' 3001               	movlw	1
  5902  02AC' 008C'              	movwf	??___flmul+4
  5903  02AD'                    u364_25:	
  5904  02AD' 0D0B'              	rlf	??___flmul+3,w
  5905  02AE' 0C8B'              	rrf	??___flmul+3,f
  5906  02AF' 0C8A'              	rrf	??___flmul+2,f
  5907  02B0' 0C89'              	rrf	??___flmul+1,f
  5908  02B1' 0C88'              	rrf	??___flmul,f
  5909  02B2' 0B8C'              	decfsz	??___flmul+4,f
  5910  02B3' 2800'              	goto	u364_25
  5911  02B4' 080B'              	movf	??___flmul+3,w
  5912  02B5' 0097'              	movwf	___flmul@prod+3
  5913  02B6' 080A'              	movf	??___flmul+2,w
  5914  02B7' 0096'              	movwf	___flmul@prod+2
  5915  02B8' 0809'              	movf	??___flmul+1,w
  5916  02B9' 0095'              	movwf	___flmul@prod+1
  5917  02BA' 0808'              	movf	??___flmul,w
  5918  02BB' 0094'              	movwf	___flmul@prod
  5919  02BC' 3001               	movlw	1
  5920  02BD' 0798'              	addwf	___flmul@temp,f
  5921  02BE' 1803               	skipnc
  5922  02BF' 0A99'              	incf	___flmul@temp+1,f
  5923  02C0' 3000               	movlw	0
  5924  02C1' 0799'              	addwf	___flmul@temp+1,f
  5925  02C2'                    i1l2662:	
  5926  02C2' 0819'              	movf	___flmul@temp+1,w
  5927  02C3' 3A80               	xorlw	128
  5928  02C4' 00FF               	movwf	127
  5929  02C5' 3080               	movlw	128
  5930  02C6' 027F               	subwf	127,w
  5931  02C7' 1D03               	skipz
  5932  02C8' 2800'              	goto	u365_25
  5933  02C9' 30FF               	movlw	255
  5934  02CA' 0218'              	subwf	___flmul@temp,w
  5935  02CB'                    u365_25:	
  5936  02CB' 1C03               	skipc
  5937  02CC' 2800'              	goto	i1l2666
  5938  02CD' 307F               	movlw	127
  5939  02CE' 1283               	bcf	3,5	;RP0=0, select bank0
  5940  02CF' 1303               	bcf	3,6	;RP1=0, select bank0
  5941  02D0' 0097'              	movwf	___flmul@prod+3
  5942  02D1' 3080               	movlw	128
  5943  02D2' 0096'              	movwf	___flmul@prod+2
  5944  02D3' 3000               	movlw	0
  5945  02D4' 0095'              	movwf	___flmul@prod+1
  5946  02D5' 3000               	movlw	0
  5947  02D6' 0094'              	movwf	___flmul@prod
  5948  02D7' 2800'              	goto	i1l863
  5949  02D8'                    i1l2666:	
  5950  02D8' 1283               	bcf	3,5	;RP0=0, select bank0
  5951  02D9' 1303               	bcf	3,6	;RP1=0, select bank0
  5952  02DA' 0819'              	movf	___flmul@temp+1,w
  5953  02DB' 3A80               	xorlw	128
  5954  02DC' 00FF               	movwf	127
  5955  02DD' 3080               	movlw	128
  5956  02DE' 027F               	subwf	127,w
  5957  02DF' 1D03               	skipz
  5958  02E0' 2800'              	goto	u366_25
  5959  02E1' 3001               	movlw	1
  5960  02E2' 0218'              	subwf	___flmul@temp,w
  5961  02E3'                    u366_25:	
  5962  02E3' 1803               	skipnc
  5963  02E4' 2800'              	goto	i1l2672
  5964  02E5' 3000               	movlw	0
  5965  02E6' 1283               	bcf	3,5	;RP0=0, select bank0
  5966  02E7' 1303               	bcf	3,6	;RP1=0, select bank0
  5967  02E8' 0097'              	movwf	___flmul@prod+3
  5968  02E9' 3000               	movlw	0
  5969  02EA' 0096'              	movwf	___flmul@prod+2
  5970  02EB' 3000               	movlw	0
  5971  02EC' 0095'              	movwf	___flmul@prod+1
  5972  02ED' 3000               	movlw	0
  5973  02EE' 0094'              	movwf	___flmul@prod
  5974  02EF' 018D'              	clrf	___flmul@sign
  5975  02F0' 2800'              	goto	i1l863
  5976  02F1'                    i1l2672:	
  5977  02F1' 1283               	bcf	3,5	;RP0=0, select bank0
  5978  02F2' 1303               	bcf	3,6	;RP1=0, select bank0
  5979  02F3' 0818'              	movf	___flmul@temp,w
  5980  02F4' 0088'              	movwf	??___flmul
  5981  02F5' 0808'              	movf	??___flmul,w
  5982  02F6' 0093'              	movwf	___flmul@bexp
  5983  02F7' 30FF               	movlw	255
  5984  02F8' 0594'              	andwf	___flmul@prod,f
  5985  02F9' 30FF               	movlw	255
  5986  02FA' 0595'              	andwf	___flmul@prod+1,f
  5987  02FB' 307F               	movlw	127
  5988  02FC' 0596'              	andwf	___flmul@prod+2,f
  5989  02FD' 3000               	movlw	0
  5990  02FE' 0597'              	andwf	___flmul@prod+3,f
  5991  02FF' 1813'              	btfsc	___flmul@bexp,0
  5992  0300' 1796'              	bsf	___flmul@prod+2,7
  5993  0301' 0813'              	movf	___flmul@bexp,w
  5994  0302' 0088'              	movwf	??___flmul
  5995  0303' 1003               	clrc
  5996  0304' 0C08'              	rrf	??___flmul,w
  5997  0305' 0089'              	movwf	??___flmul+1
  5998  0306' 0809'              	movf	??___flmul+1,w
  5999  0307' 0097'              	movwf	___flmul@prod+3
  6000  0308'                    i1l863:	
  6001  0308' 080D'              	movf	___flmul@sign,w
  6002  0309' 0088'              	movwf	??___flmul
  6003  030A' 0808'              	movf	??___flmul,w
  6004  030B' 0497'              	iorwf	___flmul@prod+3,f
  6005  030C' 0817'              	movf	___flmul@prod+3,w
  6006  030D' 0083'              	movwf	?___flmul+3
  6007  030E' 0816'              	movf	___flmul@prod+2,w
  6008  030F' 0082'              	movwf	?___flmul+2
  6009  0310' 0815'              	movf	___flmul@prod+1,w
  6010  0311' 0081'              	movwf	?___flmul+1
  6011  0312' 0814'              	movf	___flmul@prod,w
  6012  0313' 0080'              	movwf	?___flmul
  6013  0314' 0008               	return
  6014  0315'                    __end_of___flmul:	
  6015                           
  6016                           	psect	text24
  6017  0000'                    __ptext24:	
  6018 ;; *************** function __Umul8_16 *****************
  6019 ;; Defined at:
  6020 ;;		line 4 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8_16.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  multiplier      1    wreg     unsigned char 
  6023 ;;  multiplicand    1    0[COMMON] unsigned char 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  multiplier      1    8[COMMON] unsigned char 
  6026 ;;  word_mpld       2    6[COMMON] unsigned int 
  6027 ;;  product         2    4[COMMON] unsigned int 
  6028 ;; Return value:  Size  Location     Type
  6029 ;;                  2    0[COMMON] unsigned int 
  6030 ;; Registers used:
  6031 ;;		wreg, status,2, status,0
  6032 ;; Tracked objects:
  6033 ;;		On entry : 0/0
  6034 ;;		On exit  : 0/0
  6035 ;;		Unchanged: 0/0
  6036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6037 ;;      Params:         2       0       0       0       0
  6038 ;;      Locals:         5       0       0       0       0
  6039 ;;      Temps:          2       0       0       0       0
  6040 ;;      Totals:         9       0       0       0       0
  6041 ;;Total ram usage:        9 bytes
  6042 ;; Hardware stack levels used:    1
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		___flmul
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           
  6051                           ;psect for function __Umul8_16
  6052  0000'                    __Umul8_16:	
  6053                           
  6054                           ;incstack = 0
  6055                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  6056                           ;__Umul8_16@multiplier stored from wreg
  6057  0000' 0088'              	movwf	__Umul8_16@multiplier
  6058  0001' 0184'              	clrf	__Umul8_16@product
  6059  0002' 0185'              	clrf	__Umul8_16@product+1
  6060  0003' 0800'              	movf	__Umul8_16@multiplicand,w
  6061  0004' 0082'              	movwf	??__Umul8_16
  6062  0005' 0183'              	clrf	??__Umul8_16+1
  6063  0006' 0802'              	movf	??__Umul8_16,w
  6064  0007' 0086'              	movwf	__Umul8_16@word_mpld
  6065  0008' 0803'              	movf	??__Umul8_16+1,w
  6066  0009' 0087'              	movwf	__Umul8_16@word_mpld+1
  6067  000A'                    i1l2122:	
  6068  000A' 1C08'              	btfss	__Umul8_16@multiplier,0
  6069  000B' 2800'              	goto	i1l908
  6070  000C' 0806'              	movf	__Umul8_16@word_mpld,w
  6071  000D' 0784'              	addwf	__Umul8_16@product,f
  6072  000E' 1803               	skipnc
  6073  000F' 0A85'              	incf	__Umul8_16@product+1,f
  6074  0010' 0807'              	movf	__Umul8_16@word_mpld+1,w
  6075  0011' 0785'              	addwf	__Umul8_16@product+1,f
  6076  0012'                    i1l908:	
  6077  0012' 3001               	movlw	1
  6078  0013'                    u226_25:	
  6079  0013' 1003               	clrc
  6080  0014' 0D86'              	rlf	__Umul8_16@word_mpld,f
  6081  0015' 0D87'              	rlf	__Umul8_16@word_mpld+1,f
  6082  0016' 3EFF               	addlw	-1
  6083  0017' 1D03               	skipz
  6084  0018' 2800'              	goto	u226_25
  6085  0019' 1003               	clrc
  6086  001A' 0C88'              	rrf	__Umul8_16@multiplier,f
  6087  001B' 0808'              	movf	__Umul8_16@multiplier,w
  6088  001C' 1D03               	btfss	3,2
  6089  001D' 2800'              	goto	i1l2122
  6090  001E' 0805'              	movf	__Umul8_16@product+1,w
  6091  001F' 0081'              	movwf	?__Umul8_16+1
  6092  0020' 0804'              	movf	__Umul8_16@product,w
  6093  0021' 0080'              	movwf	?__Umul8_16
  6094  0022' 0008               	return
  6095  0023'                    __end_of__Umul8_16:	
  6096                           
  6097                           	psect	text25
  6098  0000'                    __ptext25:	
  6099 ;; *************** function ___fladd *****************
  6100 ;; Defined at:
  6101 ;;		line 10 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  b               4   26[BANK0 ] unsigned int 
  6104 ;;  a               4   30[BANK0 ] unsigned int 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  grs             1   45[BANK0 ] unsigned char 
  6107 ;;  bexp            1   44[BANK0 ] unsigned char 
  6108 ;;  aexp            1   43[BANK0 ] unsigned char 
  6109 ;;  signs           1   42[BANK0 ] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  4   26[BANK0 ] unsigned char 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0, btemp+1
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6119 ;;      Params:         0       8       0       0       0
  6120 ;;      Locals:         0       4       0       0       0
  6121 ;;      Temps:          0       8       0       0       0
  6122 ;;      Totals:         0      20       0       0       0
  6123 ;;Total ram usage:       20 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		_SetMotor
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           
  6133                           ;psect for function ___fladd
  6134  0000'                    ___fladd:	
  6135                           
  6136                           ;incstack = 0
  6137                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  6138  0000' 1283               	bcf	3,5	;RP0=0, select bank0
  6139  0001' 1303               	bcf	3,6	;RP1=0, select bank0
  6140  0002' 081D'              	movf	___fladd@b+3,w
  6141  0003' 3980               	andlw	128
  6142  0004' 00A2'              	movwf	??___fladd
  6143  0005' 0822'              	movf	??___fladd,w
  6144  0006' 00AA'              	movwf	___fladd@signs
  6145  0007' 081D'              	movf	___fladd@b+3,w
  6146  0008' 00A2'              	movwf	??___fladd
  6147  0009' 0722'              	addwf	??___fladd,w
  6148  000A' 00A3'              	movwf	??___fladd+1
  6149  000B' 0823'              	movf	??___fladd+1,w
  6150  000C' 00AC'              	movwf	___fladd@bexp
  6151  000D' 1B9C'              	btfsc	___fladd@b+2,7
  6152  000E' 142C'              	bsf	___fladd@bexp,0
  6153  000F' 082C'              	movf	___fladd@bexp,w
  6154  0010' 1903               	btfsc	3,2
  6155  0011' 2800'              	goto	i1l2368
  6156  0012' 0A2C'              	incf	___fladd@bexp,w
  6157  0013' 1D03               	btfss	3,2
  6158  0014' 2800'              	goto	i1l2364
  6159  0015' 3000               	movlw	0
  6160  0016' 009D'              	movwf	___fladd@b+3
  6161  0017' 3000               	movlw	0
  6162  0018' 009C'              	movwf	___fladd@b+2
  6163  0019' 3000               	movlw	0
  6164  001A' 009B'              	movwf	___fladd@b+1
  6165  001B' 3000               	movlw	0
  6166  001C' 009A'              	movwf	___fladd@b
  6167  001D'                    i1l2364:	
  6168  001D' 179C'              	bsf	___fladd@b+2,7
  6169  001E' 019D'              	clrf	___fladd@b+3
  6170  001F' 2800'              	goto	i1l2370
  6171  0020'                    i1l2368:	
  6172  0020' 3000               	movlw	0
  6173  0021' 009D'              	movwf	___fladd@b+3
  6174  0022' 3000               	movlw	0
  6175  0023' 009C'              	movwf	___fladd@b+2
  6176  0024' 3000               	movlw	0
  6177  0025' 009B'              	movwf	___fladd@b+1
  6178  0026' 3000               	movlw	0
  6179  0027' 009A'              	movwf	___fladd@b
  6180  0028'                    i1l2370:	
  6181  0028' 0821'              	movf	___fladd@a+3,w
  6182  0029' 3980               	andlw	128
  6183  002A' 00A2'              	movwf	??___fladd
  6184  002B' 0822'              	movf	??___fladd,w
  6185  002C' 00AB'              	movwf	___fladd@aexp
  6186  002D' 082B'              	movf	___fladd@aexp,w
  6187  002E' 062A'              	xorwf	___fladd@signs,w
  6188  002F' 1D03               	btfss	3,2
  6189  0030' 172A'              	bsf	___fladd@signs,6
  6190  0031' 0821'              	movf	___fladd@a+3,w
  6191  0032' 00A2'              	movwf	??___fladd
  6192  0033' 0722'              	addwf	??___fladd,w
  6193  0034' 00A3'              	movwf	??___fladd+1
  6194  0035' 0823'              	movf	??___fladd+1,w
  6195  0036' 00AB'              	movwf	___fladd@aexp
  6196  0037' 1BA0'              	btfsc	___fladd@a+2,7
  6197  0038' 142B'              	bsf	___fladd@aexp,0
  6198  0039' 082B'              	movf	___fladd@aexp,w
  6199  003A' 1903               	btfsc	3,2
  6200  003B' 2800'              	goto	i1l2392
  6201  003C' 0A2B'              	incf	___fladd@aexp,w
  6202  003D' 1D03               	btfss	3,2
  6203  003E' 2800'              	goto	i1l2388
  6204  003F' 3000               	movlw	0
  6205  0040' 00A1'              	movwf	___fladd@a+3
  6206  0041' 3000               	movlw	0
  6207  0042' 00A0'              	movwf	___fladd@a+2
  6208  0043' 3000               	movlw	0
  6209  0044' 009F'              	movwf	___fladd@a+1
  6210  0045' 3000               	movlw	0
  6211  0046' 009E'              	movwf	___fladd@a
  6212  0047'                    i1l2388:	
  6213  0047' 17A0'              	bsf	___fladd@a+2,7
  6214  0048' 01A1'              	clrf	___fladd@a+3
  6215  0049' 2800'              	goto	i1l755
  6216  004A'                    i1l2392:	
  6217  004A' 3000               	movlw	0
  6218  004B' 00A1'              	movwf	___fladd@a+3
  6219  004C' 3000               	movlw	0
  6220  004D' 00A0'              	movwf	___fladd@a+2
  6221  004E' 3000               	movlw	0
  6222  004F' 009F'              	movwf	___fladd@a+1
  6223  0050' 3000               	movlw	0
  6224  0051' 009E'              	movwf	___fladd@a
  6225  0052'                    i1l755:	
  6226  0052' 082C'              	movf	___fladd@bexp,w
  6227  0053' 022B'              	subwf	___fladd@aexp,w
  6228  0054' 1803               	skipnc
  6229  0055' 2800'              	goto	i1l2428
  6230  0056' 1F2A'              	btfss	___fladd@signs,6
  6231  0057' 2800'              	goto	i1l2398
  6232  0058' 3080               	movlw	128
  6233  0059' 00A2'              	movwf	??___fladd
  6234  005A' 0822'              	movf	??___fladd,w
  6235  005B' 06AA'              	xorwf	___fladd@signs,f
  6236  005C'                    i1l2398:	
  6237  005C' 082C'              	movf	___fladd@bexp,w
  6238  005D' 00A2'              	movwf	??___fladd
  6239  005E' 0822'              	movf	??___fladd,w
  6240  005F' 00AD'              	movwf	___fladd@grs
  6241  0060' 082B'              	movf	___fladd@aexp,w
  6242  0061' 00A2'              	movwf	??___fladd
  6243  0062' 0822'              	movf	??___fladd,w
  6244  0063' 00AC'              	movwf	___fladd@bexp
  6245  0064' 082D'              	movf	___fladd@grs,w
  6246  0065' 00A2'              	movwf	??___fladd
  6247  0066' 0822'              	movf	??___fladd,w
  6248  0067' 00AB'              	movwf	___fladd@aexp
  6249  0068' 081A'              	movf	___fladd@b,w
  6250  0069' 00A2'              	movwf	??___fladd
  6251  006A' 0822'              	movf	??___fladd,w
  6252  006B' 00AD'              	movwf	___fladd@grs
  6253  006C' 081E'              	movf	___fladd@a,w
  6254  006D' 00A2'              	movwf	??___fladd
  6255  006E' 0822'              	movf	??___fladd,w
  6256  006F' 009A'              	movwf	___fladd@b
  6257  0070' 082D'              	movf	___fladd@grs,w
  6258  0071' 00A2'              	movwf	??___fladd
  6259  0072' 0822'              	movf	??___fladd,w
  6260  0073' 009E'              	movwf	___fladd@a
  6261  0074' 081B'              	movf	___fladd@b+1,w
  6262  0075' 00A2'              	movwf	??___fladd
  6263  0076' 0822'              	movf	??___fladd,w
  6264  0077' 00AD'              	movwf	___fladd@grs
  6265  0078' 081F'              	movf	___fladd@a+1,w
  6266  0079' 00A2'              	movwf	??___fladd
  6267  007A' 0822'              	movf	??___fladd,w
  6268  007B' 009B'              	movwf	___fladd@b+1
  6269  007C' 082D'              	movf	___fladd@grs,w
  6270  007D' 00A2'              	movwf	??___fladd
  6271  007E' 0822'              	movf	??___fladd,w
  6272  007F' 009F'              	movwf	___fladd@a+1
  6273  0080' 081C'              	movf	___fladd@b+2,w
  6274  0081' 00A2'              	movwf	??___fladd
  6275  0082' 0822'              	movf	??___fladd,w
  6276  0083' 00AD'              	movwf	___fladd@grs
  6277  0084' 0820'              	movf	___fladd@a+2,w
  6278  0085' 00A2'              	movwf	??___fladd
  6279  0086' 0822'              	movf	??___fladd,w
  6280  0087' 009C'              	movwf	___fladd@b+2
  6281  0088' 082D'              	movf	___fladd@grs,w
  6282  0089' 00A2'              	movwf	??___fladd
  6283  008A' 0822'              	movf	??___fladd,w
  6284  008B' 00A0'              	movwf	___fladd@a+2
  6285  008C' 081D'              	movf	___fladd@b+3,w
  6286  008D' 00A2'              	movwf	??___fladd
  6287  008E' 0822'              	movf	??___fladd,w
  6288  008F' 00AD'              	movwf	___fladd@grs
  6289  0090' 0821'              	movf	___fladd@a+3,w
  6290  0091' 00A2'              	movwf	??___fladd
  6291  0092' 0822'              	movf	??___fladd,w
  6292  0093' 009D'              	movwf	___fladd@b+3
  6293  0094' 082D'              	movf	___fladd@grs,w
  6294  0095' 00A2'              	movwf	??___fladd
  6295  0096' 0822'              	movf	??___fladd,w
  6296  0097' 00A1'              	movwf	___fladd@a+3
  6297  0098'                    i1l2428:	
  6298  0098' 01AD'              	clrf	___fladd@grs
  6299  0099' 082B'              	movf	___fladd@aexp,w
  6300  009A' 00A2'              	movwf	??___fladd
  6301  009B' 01A3'              	clrf	??___fladd+1
  6302  009C' 0823'              	movf	??___fladd+1,w
  6303  009D' 00A5'              	movwf	??___fladd+3
  6304  009E' 082C'              	movf	___fladd@bexp,w
  6305  009F' 0222'              	subwf	??___fladd,w
  6306  00A0' 00A4'              	movwf	??___fladd+2
  6307  00A1' 1C03               	skipc
  6308  00A2' 03A5'              	decf	??___fladd+3,f
  6309  00A3' 0825'              	movf	??___fladd+3,w
  6310  00A4' 3A80               	xorlw	128
  6311  00A5' 00FF               	movwf	127
  6312  00A6' 3080               	movlw	128
  6313  00A7' 027F               	subwf	127,w
  6314  00A8' 1D03               	skipz
  6315  00A9' 2800'              	goto	u294_25
  6316  00AA' 301A               	movlw	26
  6317  00AB' 0224'              	subwf	??___fladd+2,w
  6318  00AC'                    u294_25:	
  6319  00AC' 1C03               	skipc
  6320  00AD' 2800'              	goto	i1l2446
  6321  00AE' 1283               	bcf	3,5	;RP0=0, select bank0
  6322  00AF' 1303               	bcf	3,6	;RP1=0, select bank0
  6323  00B0' 081D'              	movf	___fladd@b+3,w
  6324  00B1' 041C'              	iorwf	___fladd@b+2,w
  6325  00B2' 041B'              	iorwf	___fladd@b+1,w
  6326  00B3' 041A'              	iorwf	___fladd@b,w
  6327  00B4' 1903               	btfsc	3,2
  6328  00B5' 2800'              	goto	u295_20
  6329  00B6' 3001               	movlw	1
  6330  00B7' 2800'              	goto	u296_20
  6331  00B8'                    u295_20:	
  6332  00B8' 3000               	movlw	0
  6333  00B9'                    u296_20:	
  6334  00B9' 00A2'              	movwf	??___fladd
  6335  00BA' 0822'              	movf	??___fladd,w
  6336  00BB' 00AD'              	movwf	___fladd@grs
  6337  00BC' 3000               	movlw	0
  6338  00BD' 009D'              	movwf	___fladd@b+3
  6339  00BE' 3000               	movlw	0
  6340  00BF' 009C'              	movwf	___fladd@b+2
  6341  00C0' 3000               	movlw	0
  6342  00C1' 009B'              	movwf	___fladd@b+1
  6343  00C2' 3000               	movlw	0
  6344  00C3' 009A'              	movwf	___fladd@b
  6345  00C4' 082B'              	movf	___fladd@aexp,w
  6346  00C5' 00A2'              	movwf	??___fladd
  6347  00C6' 0822'              	movf	??___fladd,w
  6348  00C7' 00AC'              	movwf	___fladd@bexp
  6349  00C8' 2800'              	goto	i1l759
  6350  00C9'                    i1l761:	
  6351  00C9' 1C2D'              	btfss	___fladd@grs,0
  6352  00CA' 2800'              	goto	i1l2436
  6353  00CB' 082D'              	movf	___fladd@grs,w
  6354  00CC' 00A2'              	movwf	??___fladd
  6355  00CD' 1003               	clrc
  6356  00CE' 0C22'              	rrf	??___fladd,w
  6357  00CF' 3801               	iorlw	1
  6358  00D0' 00A3'              	movwf	??___fladd+1
  6359  00D1' 0823'              	movf	??___fladd+1,w
  6360  00D2' 00AD'              	movwf	___fladd@grs
  6361  00D3' 2800'              	goto	i1l2438
  6362  00D4'                    i1l2436:	
  6363  00D4' 1003               	clrc
  6364  00D5' 0CAD'              	rrf	___fladd@grs,f
  6365  00D6'                    i1l2438:	
  6366  00D6' 181A'              	btfsc	___fladd@b,0
  6367  00D7' 17AD'              	bsf	___fladd@grs,7
  6368  00D8' 3001               	movlw	1
  6369  00D9' 00A2'              	movwf	??___fladd
  6370  00DA'                    u299_25:	
  6371  00DA' 0D1D'              	rlf	___fladd@b+3,w
  6372  00DB' 0C9D'              	rrf	___fladd@b+3,f
  6373  00DC' 0C9C'              	rrf	___fladd@b+2,f
  6374  00DD' 0C9B'              	rrf	___fladd@b+1,f
  6375  00DE' 0C9A'              	rrf	___fladd@b,f
  6376  00DF' 0B80'              	decfsz	??___fladd& (0+127),f
  6377  00E0' 2800'              	goto	u299_25
  6378  00E1' 3001               	movlw	1
  6379  00E2' 00A2'              	movwf	??___fladd
  6380  00E3' 0822'              	movf	??___fladd,w
  6381  00E4' 07AC'              	addwf	___fladd@bexp,f
  6382  00E5'                    i1l2446:	
  6383  00E5' 1283               	bcf	3,5	;RP0=0, select bank0
  6384  00E6' 1303               	bcf	3,6	;RP1=0, select bank0
  6385  00E7' 082B'              	movf	___fladd@aexp,w
  6386  00E8' 022C'              	subwf	___fladd@bexp,w
  6387  00E9' 1C03               	skipc
  6388  00EA' 2800'              	goto	i1l761
  6389  00EB'                    i1l759:	
  6390  00EB' 1B2A'              	btfsc	___fladd@signs,6
  6391  00EC' 2800'              	goto	i1l2472
  6392  00ED' 082C'              	movf	___fladd@bexp,w
  6393  00EE' 1D03               	btfss	3,2
  6394  00EF' 2800'              	goto	i1l2454
  6395  00F0' 3000               	movlw	0
  6396  00F1' 009D'              	movwf	?___fladd+3
  6397  00F2' 3000               	movlw	0
  6398  00F3' 009C'              	movwf	?___fladd+2
  6399  00F4' 3000               	movlw	0
  6400  00F5' 009B'              	movwf	?___fladd+1
  6401  00F6' 3000               	movlw	0
  6402  00F7' 009A'              	movwf	?___fladd
  6403  00F8' 0008               	return
  6404  00F9'                    i1l2454:	
  6405  00F9' 081E'              	movf	___fladd@a,w
  6406  00FA' 079A'              	addwf	___fladd@b,f
  6407  00FB' 081F'              	movf	___fladd@a+1,w
  6408  00FC' 1103               	clrz
  6409  00FD' 1803               	skipnc
  6410  00FE' 3E01               	addlw	1
  6411  00FF' 1D03               	btfss	3,2
  6412  0100' 079B'              	addwf	___fladd@b+1,f
  6413  0101' 0820'              	movf	___fladd@a+2,w
  6414  0102' 1103               	clrz
  6415  0103' 1803               	skipnc
  6416  0104' 3E01               	addlw	1
  6417  0105' 1D03               	btfss	3,2
  6418  0106' 079C'              	addwf	___fladd@b+2,f
  6419  0107' 0821'              	movf	___fladd@a+3,w
  6420  0108' 1103               	clrz
  6421  0109' 1803               	skipnc
  6422  010A' 3E01               	addlw	1
  6423  010B' 1D03               	btfss	3,2
  6424  010C' 079D'              	addwf	___fladd@b+3,f
  6425  010D' 1C1D'              	btfss	___fladd@b+3,0
  6426  010E' 2800'              	goto	i1l2506
  6427  010F' 1C2D'              	btfss	___fladd@grs,0
  6428  0110' 2800'              	goto	i1l2462
  6429  0111' 082D'              	movf	___fladd@grs,w
  6430  0112' 00A2'              	movwf	??___fladd
  6431  0113' 1003               	clrc
  6432  0114' 0C22'              	rrf	??___fladd,w
  6433  0115' 3801               	iorlw	1
  6434  0116' 00A3'              	movwf	??___fladd+1
  6435  0117' 0823'              	movf	??___fladd+1,w
  6436  0118' 00AD'              	movwf	___fladd@grs
  6437  0119' 2800'              	goto	i1l2464
  6438  011A'                    i1l2462:	
  6439  011A' 1003               	clrc
  6440  011B' 0CAD'              	rrf	___fladd@grs,f
  6441  011C'                    i1l2464:	
  6442  011C' 181A'              	btfsc	___fladd@b,0
  6443  011D' 17AD'              	bsf	___fladd@grs,7
  6444  011E' 3001               	movlw	1
  6445  011F' 00A2'              	movwf	??___fladd
  6446  0120'                    u307_25:	
  6447  0120' 0D1D'              	rlf	___fladd@b+3,w
  6448  0121' 0C9D'              	rrf	___fladd@b+3,f
  6449  0122' 0C9C'              	rrf	___fladd@b+2,f
  6450  0123' 0C9B'              	rrf	___fladd@b+1,f
  6451  0124' 0C9A'              	rrf	___fladd@b,f
  6452  0125' 0B80'              	decfsz	??___fladd& (0+127),f
  6453  0126' 2800'              	goto	u307_25
  6454  0127' 3001               	movlw	1
  6455  0128' 00A2'              	movwf	??___fladd
  6456  0129' 0822'              	movf	??___fladd,w
  6457  012A' 07AC'              	addwf	___fladd@bexp,f
  6458  012B' 2800'              	goto	i1l2506
  6459  012C'                    i1l2472:	
  6460  012C' 081D'              	movf	___fladd@b+3,w
  6461  012D' 3A80               	xorlw	128
  6462  012E' 00FF               	movwf	127
  6463  012F' 0821'              	movf	___fladd@a+3,w
  6464  0130' 3A80               	xorlw	128
  6465  0131' 027F               	subwf	127,w
  6466  0132' 1D03               	skipz
  6467  0133' 2800'              	goto	u308_23
  6468  0134' 0820'              	movf	___fladd@a+2,w
  6469  0135' 021C'              	subwf	___fladd@b+2,w
  6470  0136' 1D03               	skipz
  6471  0137' 2800'              	goto	u308_23
  6472  0138' 081F'              	movf	___fladd@a+1,w
  6473  0139' 021B'              	subwf	___fladd@b+1,w
  6474  013A' 1D03               	skipz
  6475  013B' 2800'              	goto	u308_23
  6476  013C' 081E'              	movf	___fladd@a,w
  6477  013D' 021A'              	subwf	___fladd@b,w
  6478  013E'                    u308_23:	
  6479  013E' 1803               	skipnc
  6480  013F' 2800'              	goto	i1l2482
  6481  0140' 30FF               	movlw	255
  6482  0141' 00A2'              	movwf	??___fladd
  6483  0142' 30FF               	movlw	255
  6484  0143' 00A3'              	movwf	??___fladd+1
  6485  0144' 30FF               	movlw	255
  6486  0145' 00A4'              	movwf	??___fladd+2
  6487  0146' 30FF               	movlw	255
  6488  0147' 00A5'              	movwf	??___fladd+3
  6489  0148' 081E'              	movf	___fladd@a,w
  6490  0149' 00A6'              	movwf	??___fladd+4
  6491  014A' 081F'              	movf	___fladd@a+1,w
  6492  014B' 00A7'              	movwf	??___fladd+5
  6493  014C' 0820'              	movf	___fladd@a+2,w
  6494  014D' 00A8'              	movwf	??___fladd+6
  6495  014E' 0821'              	movf	___fladd@a+3,w
  6496  014F' 00A9'              	movwf	??___fladd+7
  6497  0150' 081A'              	movf	___fladd@b,w
  6498  0151' 02A6'              	subwf	??___fladd+4,f
  6499  0152' 081B'              	movf	___fladd@b+1,w
  6500  0153' 1C03               	skipc
  6501  0154' 0F1B'              	incfsz	___fladd@b+1,w
  6502  0155' 2800'              	goto	u309_21
  6503  0156' 2800'              	goto	u309_22
  6504  0157'                    u309_21:	
  6505  0157' 02A7'              	subwf	??___fladd+5,f
  6506  0158'                    u309_22:	
  6507  0158' 081C'              	movf	___fladd@b+2,w
  6508  0159' 1C03               	skipc
  6509  015A' 0F1C'              	incfsz	___fladd@b+2,w
  6510  015B' 2800'              	goto	u309_23
  6511  015C' 2800'              	goto	u309_24
  6512  015D'                    u309_23:	
  6513  015D' 02A8'              	subwf	??___fladd+6,f
  6514  015E'                    u309_24:	
  6515  015E' 081D'              	movf	___fladd@b+3,w
  6516  015F' 1C03               	skipc
  6517  0160' 0F1D'              	incfsz	___fladd@b+3,w
  6518  0161' 2800'              	goto	u309_25
  6519  0162' 2800'              	goto	u309_26
  6520  0163'                    u309_25:	
  6521  0163' 02A9'              	subwf	??___fladd+7,f
  6522  0164'                    u309_26:	
  6523  0164' 0826'              	movf	??___fladd+4,w
  6524  0165' 07A2'              	addwf	??___fladd,f
  6525  0166' 0827'              	movf	??___fladd+5,w
  6526  0167' 1803               	skipnc
  6527  0168' 0F27'              	incfsz	??___fladd+5,w
  6528  0169' 2800'              	goto	u310_20
  6529  016A' 2800'              	goto	u310_21
  6530  016B'                    u310_20:	
  6531  016B' 07A3'              	addwf	??___fladd+1,f
  6532  016C'                    u310_21:	
  6533  016C' 0828'              	movf	??___fladd+6,w
  6534  016D' 1803               	skipnc
  6535  016E' 0F28'              	incfsz	??___fladd+6,w
  6536  016F' 2800'              	goto	u310_22
  6537  0170' 2800'              	goto	u310_23
  6538  0171'                    u310_22:	
  6539  0171' 07A4'              	addwf	??___fladd+2,f
  6540  0172'                    u310_23:	
  6541  0172' 0829'              	movf	??___fladd+7,w
  6542  0173' 1803               	skipnc
  6543  0174' 0A29'              	incf	??___fladd+7,w
  6544  0175' 07A5'              	addwf	??___fladd+3,f
  6545  0176' 0825'              	movf	??___fladd+3,w
  6546  0177' 009D'              	movwf	___fladd@b+3
  6547  0178' 0824'              	movf	??___fladd+2,w
  6548  0179' 009C'              	movwf	___fladd@b+2
  6549  017A' 0823'              	movf	??___fladd+1,w
  6550  017B' 009B'              	movwf	___fladd@b+1
  6551  017C' 0822'              	movf	??___fladd,w
  6552  017D' 009A'              	movwf	___fladd@b
  6553  017E' 3080               	movlw	128
  6554  017F' 00A2'              	movwf	??___fladd
  6555  0180' 0822'              	movf	??___fladd,w
  6556  0181' 06AA'              	xorwf	___fladd@signs,f
  6557  0182' 09AD'              	comf	___fladd@grs,f
  6558  0183' 0AAD'              	incf	___fladd@grs,f
  6559  0184' 082D'              	movf	___fladd@grs,w
  6560  0185' 1D03               	btfss	3,2
  6561  0186' 2800'              	goto	i1l776
  6562  0187' 3001               	movlw	1
  6563  0188' 079A'              	addwf	___fladd@b,f
  6564  0189' 3000               	movlw	0
  6565  018A' 1803               	skipnc
  6566  018B' 3001               	movlw	1
  6567  018C' 079B'              	addwf	___fladd@b+1,f
  6568  018D' 3000               	movlw	0
  6569  018E' 1803               	skipnc
  6570  018F' 3001               	movlw	1
  6571  0190' 079C'              	addwf	___fladd@b+2,f
  6572  0191' 3000               	movlw	0
  6573  0192' 1803               	skipnc
  6574  0193' 3001               	movlw	1
  6575  0194' 079D'              	addwf	___fladd@b+3,f
  6576  0195' 2800'              	goto	i1l776
  6577  0196'                    i1l2482:	
  6578  0196' 081E'              	movf	___fladd@a,w
  6579  0197' 029A'              	subwf	___fladd@b,f
  6580  0198' 081F'              	movf	___fladd@a+1,w
  6581  0199' 1C03               	skipc
  6582  019A' 0F1F'              	incfsz	___fladd@a+1,w
  6583  019B' 029B'              	subwf	___fladd@b+1,f
  6584  019C' 0820'              	movf	___fladd@a+2,w
  6585  019D' 1C03               	skipc
  6586  019E' 0F20'              	incfsz	___fladd@a+2,w
  6587  019F' 029C'              	subwf	___fladd@b+2,f
  6588  01A0' 0821'              	movf	___fladd@a+3,w
  6589  01A1' 1C03               	skipc
  6590  01A2' 0F21'              	incfsz	___fladd@a+3,w
  6591  01A3' 029D'              	subwf	___fladd@b+3,f
  6592  01A4'                    i1l776:	
  6593  01A4' 081D'              	movf	___fladd@b+3,w
  6594  01A5' 041C'              	iorwf	___fladd@b+2,w
  6595  01A6' 041B'              	iorwf	___fladd@b+1,w
  6596  01A7' 041A'              	iorwf	___fladd@b,w
  6597  01A8' 1D03               	skipz
  6598  01A9' 2800'              	goto	i1l2504
  6599  01AA' 082D'              	movf	___fladd@grs,w
  6600  01AB' 1D03               	btfss	3,2
  6601  01AC' 2800'              	goto	i1l2504
  6602  01AD' 3000               	movlw	0
  6603  01AE' 009D'              	movwf	?___fladd+3
  6604  01AF' 3000               	movlw	0
  6605  01B0' 009C'              	movwf	?___fladd+2
  6606  01B1' 3000               	movlw	0
  6607  01B2' 009B'              	movwf	?___fladd+1
  6608  01B3' 3000               	movlw	0
  6609  01B4' 009A'              	movwf	?___fladd
  6610  01B5' 0008               	return
  6611  01B6'                    i1l2490:	
  6612  01B6' 3001               	movlw	1
  6613  01B7' 00A2'              	movwf	??___fladd
  6614  01B8'                    u314_25:	
  6615  01B8' 1003               	clrc
  6616  01B9' 0D9A'              	rlf	___fladd@b,f
  6617  01BA' 0D9B'              	rlf	___fladd@b+1,f
  6618  01BB' 0D9C'              	rlf	___fladd@b+2,f
  6619  01BC' 0D9D'              	rlf	___fladd@b+3,f
  6620  01BD' 0BA2'              	decfsz	??___fladd,f
  6621  01BE' 2800'              	goto	u314_25
  6622  01BF' 1BAD'              	btfsc	___fladd@grs,7
  6623  01C0' 141A'              	bsf	___fladd@b,0
  6624  01C1' 1C2D'              	btfss	___fladd@grs,0
  6625  01C2' 2800'              	goto	i1l2498
  6626  01C3' 1403               	setc
  6627  01C4' 2800'              	goto	L6
  6628  01C5'                    i1l2498:	
  6629  01C5' 1003               	clrc
  6630  01C6'                    L6:	
  6631  01C6' 0DAD'              	rlf	___fladd@grs,f
  6632  01C7' 082C'              	movf	___fladd@bexp,w
  6633  01C8' 1903               	btfsc	3,2
  6634  01C9' 2800'              	goto	i1l2504
  6635  01CA' 3001               	movlw	1
  6636  01CB' 02AC'              	subwf	___fladd@bexp,f
  6637  01CC'                    i1l2504:	
  6638  01CC' 1F9C'              	btfss	___fladd@b+2,7
  6639  01CD' 2800'              	goto	i1l2490
  6640  01CE'                    i1l2506:	
  6641  01CE' 01AB'              	clrf	___fladd@aexp
  6642  01CF' 1FAD'              	btfss	___fladd@grs,7
  6643  01D0' 2800'              	goto	i1l2516
  6644  01D1' 082D'              	movf	___fladd@grs,w
  6645  01D2' 397F               	andlw	127
  6646  01D3' 1903               	btfsc	3,2
  6647  01D4' 181A'              	btfsc	___fladd@b,0
  6648  01D5' 2800'              	goto	i1l2512
  6649  01D6' 2800'              	goto	i1l2516
  6650  01D7'                    i1l2512:	
  6651  01D7' 01AB'              	clrf	___fladd@aexp
  6652  01D8' 0AAB'              	incf	___fladd@aexp,f
  6653  01D9'                    i1l2516:	
  6654  01D9' 082B'              	movf	___fladd@aexp,w
  6655  01DA' 1903               	btfsc	3,2
  6656  01DB' 2800'              	goto	i1l789
  6657  01DC' 3001               	movlw	1
  6658  01DD' 079A'              	addwf	___fladd@b,f
  6659  01DE' 3000               	movlw	0
  6660  01DF' 1803               	skipnc
  6661  01E0' 3001               	movlw	1
  6662  01E1' 079B'              	addwf	___fladd@b+1,f
  6663  01E2' 3000               	movlw	0
  6664  01E3' 1803               	skipnc
  6665  01E4' 3001               	movlw	1
  6666  01E5' 079C'              	addwf	___fladd@b+2,f
  6667  01E6' 3000               	movlw	0
  6668  01E7' 1803               	skipnc
  6669  01E8' 3001               	movlw	1
  6670  01E9' 079D'              	addwf	___fladd@b+3,f
  6671  01EA' 1C1D'              	btfss	___fladd@b+3,0
  6672  01EB' 2800'              	goto	i1l789
  6673  01EC' 081A'              	movf	___fladd@b,w
  6674  01ED' 00A2'              	movwf	??___fladd
  6675  01EE' 081B'              	movf	___fladd@b+1,w
  6676  01EF' 00A3'              	movwf	??___fladd+1
  6677  01F0' 081C'              	movf	___fladd@b+2,w
  6678  01F1' 00A4'              	movwf	??___fladd+2
  6679  01F2' 081D'              	movf	___fladd@b+3,w
  6680  01F3' 00A5'              	movwf	??___fladd+3
  6681  01F4' 3001               	movlw	1
  6682  01F5' 00A6'              	movwf	??___fladd+4
  6683  01F6'                    u324_25:	
  6684  01F6' 0D25'              	rlf	??___fladd+3,w
  6685  01F7' 0CA5'              	rrf	??___fladd+3,f
  6686  01F8' 0CA4'              	rrf	??___fladd+2,f
  6687  01F9' 0CA3'              	rrf	??___fladd+1,f
  6688  01FA' 0CA2'              	rrf	??___fladd,f
  6689  01FB' 0BA6'              	decfsz	??___fladd+4,f
  6690  01FC' 2800'              	goto	u324_25
  6691  01FD' 0825'              	movf	??___fladd+3,w
  6692  01FE' 009D'              	movwf	___fladd@b+3
  6693  01FF' 0824'              	movf	??___fladd+2,w
  6694  0200' 009C'              	movwf	___fladd@b+2
  6695  0201' 0823'              	movf	??___fladd+1,w
  6696  0202' 009B'              	movwf	___fladd@b+1
  6697  0203' 0822'              	movf	??___fladd,w
  6698  0204' 009A'              	movwf	___fladd@b
  6699  0205' 0A2C'              	incf	___fladd@bexp,w
  6700  0206' 1903               	btfsc	3,2
  6701  0207' 2800'              	goto	i1l789
  6702  0208' 3001               	movlw	1
  6703  0209' 00A2'              	movwf	??___fladd
  6704  020A' 0822'              	movf	??___fladd,w
  6705  020B' 07AC'              	addwf	___fladd@bexp,f
  6706  020C'                    i1l789:	
  6707  020C' 0A2C'              	incf	___fladd@bexp,w
  6708  020D' 1D03               	btfss	3,2
  6709  020E' 082C'              	movf	___fladd@bexp,w
  6710  020F' 1D03               	btfss	3,2
  6711  0210' 2800'              	goto	i1l2534
  6712  0211' 3000               	movlw	0
  6713  0212' 009D'              	movwf	___fladd@b+3
  6714  0213' 3000               	movlw	0
  6715  0214' 009C'              	movwf	___fladd@b+2
  6716  0215' 3000               	movlw	0
  6717  0216' 009B'              	movwf	___fladd@b+1
  6718  0217' 3000               	movlw	0
  6719  0218' 009A'              	movwf	___fladd@b
  6720  0219' 082C'              	movf	___fladd@bexp,w
  6721  021A' 1903               	btfsc	3,2
  6722  021B' 01AA'              	clrf	___fladd@signs
  6723  021C'                    i1l2534:	
  6724  021C' 1C2C'              	btfss	___fladd@bexp,0
  6725  021D' 2800'              	goto	i1l2538
  6726  021E' 179C'              	bsf	___fladd@b+2,7
  6727  021F' 2800'              	goto	i1l797
  6728  0220'                    i1l2538:	
  6729  0220' 307F               	movlw	127
  6730  0221' 00A2'              	movwf	??___fladd
  6731  0222' 0822'              	movf	??___fladd,w
  6732  0223' 059C'              	andwf	___fladd@b+2,f
  6733  0224'                    i1l797:	
  6734  0224' 082C'              	movf	___fladd@bexp,w
  6735  0225' 00A2'              	movwf	??___fladd
  6736  0226' 1003               	clrc
  6737  0227' 0C22'              	rrf	??___fladd,w
  6738  0228' 00A3'              	movwf	??___fladd+1
  6739  0229' 0823'              	movf	??___fladd+1,w
  6740  022A' 009D'              	movwf	___fladd@b+3
  6741  022B' 1FAA'              	btfss	___fladd@signs,7
  6742  022C' 0008               	return
  6743  022D' 179D'              	bsf	___fladd@b+3,7
  6744  022E' 0008               	return
  6745  022F'                    __end_of___fladd:	
  6746  007E                     btemp	set	126	;btemp
  6747  007E                     wtemp0	set	126


Data Sizes:
    Strings     29
    Constant    10
    Data        0
    BSS         179
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     55      80
    BANK3            96      0      83
    BANK2            96      0      71

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_4(CODE[14]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@sVar(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 10
		 -> main@sVar(BANK1[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _SetMotor->___xxtofl
    i1_pwm_set->i1___aldiv
    i1___aldiv->i1___lmul
    ___fltol->___xxtofl
    ___flmul->___xxtofl
    ___fladd->___xxtofl

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_SetMotor
    _SetMotor->___fltol
    i1_pwm_set->i1___aldiv
    ___fltol->___fladd
    ___fladd->___flmul

Critical Paths under _main in BANK1

    _main->_pwm_set
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _pwm_set->___aldiv
    ___aldiv->___lmul
    _putst->_putch

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    3848
                                             38 BANK1     17    17      0
                           _SetPoint
                             _chkchr
                      _encoders_init
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    18      5    1538
                                             14 BANK1     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    1755
                                             28 BANK1     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK1     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     243
                                              2 BANK1      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPoint                                             2     0      2      98
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  7     7      0    7512
                                             73 BANK0      7     7      0
                           _SetMotor
 ---------------------------------------------------------------------------------
 (4) _SetMotor                                            16    16      0    7489
                                             57 BANK0     16    16      0
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
                          _constrain
                          i1_pwm_set
 ---------------------------------------------------------------------------------
 (5) i1_pwm_set                                           10     4      6     963
                                             14 BANK0     10     4      6
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (6) i1___lmul                                            13     5      8     144
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (6) i1___aldiv                                           15     7      8     352
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _constrain                                           12     0     12     334
                                              0 COMMON    12     0     12
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4     550
                                              0 COMMON    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             11     7      4     305
                                             46 BANK0     11     7      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             26    18      8    2721
                                              0 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) __Umul8_16                                            9     7      2     799
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    2414
                                             26 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetPoint
   _chkchr
   _encoders_init
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _SetMotor
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _constrain
     i1_pwm_set
       i1___aldiv
         i1___lmul (ARG)
       i1___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     148       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     37      50       7      100.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      53       9       86.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      47      11       74.0%
DATA                 0      0     148      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu May 23 16:41:41 2019

                      pc 0002              __CFG_CP$OFF 0000                       l82 0011  
                     l83 001B                       fsr 0004      __Umul8_16@word_mpld 0006  
                    l170 0018                      l340 00B6                      l182 0084  
                    l343 010A                      l527 0012                      _GIE 005F  
                    _RA5 002D                      _RA6 002E                      _RB5 0035  
                    _PR2 0092             __CFG_CPD$OFF 0000                      _RX9 00C6  
                    _TX9 04C6                      _ab1 0015                      _isr 0000  
                    fsr0 0004                      indf 0000             __CFG_IESO$ON 0000  
           __CFG_FOSC$EC 0000             ___flmul@aexp 0012             ___flmul@bexp 0013  
           ___flmul@sign 000D             ___flmul@temp 0018             ___flmul@prod 0014  
       _encoder1_counter 000C             __CFG_LVP$OFF 0000           i1___aldiv@sign 0009  
           ___fltol@exp1 0038                     l2214 000A                     l2320 002E  
                   l2312 000A                     l2218 0020                     l2314 0018  
                   l2244 0033                     l2236 0023                     l2324 0039  
                   l2262 0086                     l2254 006B                     l2246 0043  
                   l2342 0024                     l2336 0008                     l2258 0078  
                   l2338 0016                     l2346 002F                     l2196 0003  
                   l3172 0087                     l3156 0058                     l2198 001D  
                   l3238 007C                     l2820 0020                     l3188 00E7  
                   l2910 003D                     l2824 002F                     l2920 0054  
                   l2904 0027                     l2826 0003                     l2852 0016  
                   l2932 0077                     l2862 0077                     l2926 0056  
                   l2950 00CD                     l2784 0006                     l2856 006D  
                   l2858 0072                     l2946 008A                     l2938 0086  
                   l2948 0007                     ?_isr 0000                     STR_1 001E  
                   STR_2 0029                     STR_3 0029                     STR_4 0010  
                   _ANS4 0C44                     _ANS8 0C48                     _ANS9 0C49  
                   _BRGH 04C2                     _T0IE 005D                     _CREN 00C4  
                   _T0IF 005A                     _FERR 00C2                     _IOCB 0096  
                   u2505 002A                     u4045 0007                     u2555 0037  
                   u4075 006D                     u2805 000B                     u2575 0045  
                   u2495 0022                     u2735 000D                     u2585 005A  
                   u2825 001C                     u2595 006C                     u2755 0019  
                   u2835 0025                     u4435 0092                     _PEIE 005E  
                   u2765 0025                     u4445 00C1                     u2775 002F  
                   u4455 0115                     _RBIE 005B                     _RBIF 0058  
                   _RCIE 0465                     _RCIF 0065                     u3973 0014  
                   u3990 0059                     u3991 005A                     u3992 005F  
                   u3993 0060                     _OERR 00C1                     _TMR0 0001  
                   _SPEN 00C7                     _SREN 00C5                     _TXIE 0464  
                   _TXEN 04C5                     _TXIF 0064                     _SYNC 04C4  
           __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000                     _main 0000  
                   btemp 007E                     start 0000*           __CFG_MCLRE$ON 0000  
                  ??_isr 0049            ___fltol@sign1 0037          __end_of___aldiv 008F  
        __end_of___fladd 022F                    ?_main 0000                    _ANS10 0C4A  
                  _ANS11 0C4B                    _ANS13 0C4D            __CFG_WDTE$OFF 0000  
        __end_of___flmul 0315          __end_of___fltol 006D          __end_of___lwdiv 003E  
                  i1l182 0080                    i1l327 010C          __end_of___lwmod 0034  
                  i1l527 0012                    i1l287 01F4                    i1l902 0073  
                  i1l655 004F                    i1l903 007D                    i1l761 00C9  
                  i1l755 0052                    i1l908 0012                    i1l759 00EB  
                  i1l863 0308                    i1l776 01A4                    i1l797 0224  
                  i1l789 020C                    i1l895 005D                    i1l889 001D  
                  _RCREG 001A                    _SPBRG 0099                    _PORTB 0006  
                  _TXREG 0019      ___lmul@multiplicand 0004          ??_encoders_init 0000  
        __end_of_dpowers 0010                    _dummy 0017                    _putch 0000  
                  _putst 0000           __CFG_BOREN$OFF 0000         __end_ofi1___lmul 003F  
                  pclath 000A          __end_of_pwm_set 0085                    status 0003  
     __size_ofi1___aldiv 008F                    wtemp0 007E          __end_of_sprintf 00D2  
        __initialization 0000             __end_of_main 012A      i1___lmul@multiplier 0000  
                 ??_main 0026       __size_ofi1_pwm_set 0081         __end_of_SetMotor 0243  
       __end_of_SetPoint 000C                   _CCPR1L 0015                   _CCPR2L 001B  
                 ?_putch 0000                   ?_putst 0000                   i1l2122 000A  
                 i1l2134 0008                   i1l2138 001E                   i1l3042 0045  
                 i1l2164 0033                   i1l2156 0023                   i1l3036 0024  
                 i1l2182 0086                   i1l2174 006B                   i1l2166 0043  
                 i1l3062 0073                   i1l3054 0061                   i1l3046 004A  
                 i1l2512 01D7                   i1l2504 01CC                   i1l2272 0014  
                 i1l3240 0078                   i1l3072 009D                   i1l2506 01CE  
                 i1l2370 0028                   i1l2290 004B                   i1l2178 0078  
                 i1l3082 00BC                   i1l3066 0077                   i1l3058 0066  
                 i1l2516 01D9                   i1l2436 00D4                   i1l2428 0098  
                 i1l2364 001D                   i1l2268 000B                   i1l2700 0030  
                 i1l3068 0085                   i1l3092 00EE                   i1l2534 021C  
                 i1l2462 011A                   i1l2454 00F9                   i1l2438 00D6  
                 i1l2446 00E5                   i1l2710 0071                   i1l2702 0042  
                 i1l3086 00D4                   i1l3078 00A2                   i1l3094 00FC  
                 i1l2464 011C                   i1l2472 012C                   i1l2392 004A  
                 i1l2368 0020                   i1l2640 025A                   i1l2560 001F  
                 i1l2288 003B                   i1l2712 0062                   i1l2538 0220  
                 i1l2490 01B6                   i1l2482 0196                   i1l2642 0277  
                 i1l2562 0027                   i1l2298 005E                   i1l2388 0047  
                 i1l2652 0290                   i1l2580 004C                   i1l2724 009A  
                 i1l2732 0016                   i1l2398 005C                   i1l2662 02C2  
                 i1l2558 001D                   i1l2742 0073                   i1l2672 02F1  
                 i1l2648 028E                   i1l2576 0042                   i1l2736 006D  
                 i1l2498 01C5                   i1l2666 02D8                   i1l2578 0044  
                 i1l2690 0015                   i1l2738 0070                   i1l2588 005A  
                 i1l2696 002C                   i1l2882 01D1                   i1l2886 0220  
                 u310_20 016B                   u310_21 016C                   u310_22 0171  
                 u310_23 0172                   u230_25 0020                   u231_25 0028  
                 u400_21 0025                   u400_22 0028                   u400_23 002F  
                 u400_24 0032                   u240_25 006C                   u400_25 0039  
                 u400_26 003C                   u401_21 005D                   u401_22 0060  
                 u401_23 0067                   u401_24 006A                   u401_25 0071  
                 u401_26 0074                   u402_23 01CF                   u314_25 01B8  
                 u226_25 0013                   u307_25 0120                   u308_23 013E  
                 u324_25 01F6                   u236_25 0037                   u309_21 0157  
                 u309_22 0158                   u309_23 015D                   u309_24 015E  
                 u309_25 0163                   u309_26 0164                   u246_23 0012  
                 u350_25 0203                   u238_25 0045                   u430_25 0016  
                 u343_25 010A                   u263_25 001D                   u239_25 005A  
                 u352_25 0228                   u433_25 0054                   u354_25 0246  
                 u346_25 0167                   u266_25 003C                   u355_25 025E  
                 u371_25 0039                   u364_25 02AD                   u365_25 02CB  
                 u357_25 0269                   u269_25 0054                   u373_25 0055  
                 u294_25 00AC                   u366_25 02E3                   u295_20 00B8  
                 u383_23 0014                   u375_25 006A                   u296_20 00B9  
                 u385_20 0059                   u385_21 005A                   u385_22 005F  
                 u385_23 0060                   u299_25 00DA                   u379_25 0085  
                 _TMR1IE 0460                   _TRISB1 0431                   _TRISB2 0432  
                 _TRISC1 0439                   _TRISA5 042D                   _TRISB3 0433  
                 _TRISC2 043A                   _TRISA6 042E                   _TRISB4 0434  
                 _TRISB5 0435                   _TRISB7 0437         __end_of___xxtofl 00A3  
         __CFG_PWRTE$OFF 0000             ?_serial_init 0000                   ___lmul 0000  
              ??___aldiv 0015                ??___fladd 0022                ??___flmul 0008  
              ??___fltol 0032                   _chkchr 0000                ??___lwdiv 0004  
              ??___lwmod 000C                   _state1 0016        __end_ofi1___aldiv 008F  
     __size_of__Umul8_16 0023                   saved_w 007E         __end_of_pwm_init 002A  
                 putch@c 0001                ??_pwm_set 0022                ??_sprintf 0013  
           ___xxtofl@arg 000A             ___xxtofl@exp 0009             ___xxtofl@val 0000  
__end_of__initialization 0018        __end_ofi1_pwm_set 0081               ___fltol@f1 002E  
         __pcstackCOMMON 0000            __end_of_putch 002E            __end_of_putst 0036  
              ?i1___lmul 0000           _OPTION_REGbits 0081              SetMotor@err 0041  
      i1___aldiv@divisor 0000                  ??_putch 0000        i1___aldiv@counter 0008  
                ??_putst 0002               __pbssBANK1 0000               __pbssBANK2 0000  
             __pbssBANK3 0000       __size_of_constrain 0015                ?_SetMotor 0000  
              ?_SetPoint 0000        __end_of__Umul8_16 0023               __pmaintext 0000  
                ?___lmul 0000                  ?_chkchr 0000               __pintentry 0000  
         ___lmul@product 0009               ??i1___lmul 0008                ?___xxtofl 0000  
          ?_resetCounter 0000               __stringtab 0000               ??_SetMotor 0039  
             ??_SetPoint 0002                  ___aldiv 0000                  ___fladd 0000  
        __size_of___lmul 0041                  ___flmul 0000                  ___fltol 0000  
              ?_pwm_init 0000                  ___lwdiv 0000                  ___lwmod 0000  
        __size_of_chkchr 0008     __size_of_serial_init 0018        __end_of_constrain 0015  
                __ptext1 0000                  __ptext2 0000                  __ptext3 0000  
                __ptext4 0000                  __ptext5 0000                  __ptext6 0000  
                __ptext7 0000                  __ptext8 0000                  __ptext9 0000  
                _dpowers 0006                _T2CONbits 0012             __size_of_isr 0118  
             ??___xxtofl 0004         ___aldiv@dividend 0011                  _samples 0012  
         ??_resetCounter 0000            _SetMotor$1033 003D                  _pwm_set 0000  
                _sprintf 0000                  clrloop0 0001     end_of_initialization 0018  
  __end_of_encoders_init 001A                  isr@tick 0010         ___aldiv@quotient 0018  
             ??_pwm_init 0000         SetMotor@last_err 0047         SetMotor@integral 004F  
            ___fladd@grs 002D            ___xxtofl@sign 0008                i1___aldiv 0000  
            ___flmul@grs 000E              _CCP1CONbits 0017              _CCP2CONbits 001D  
              i1_pwm_set 0000           __end_of___lmul 0041           __end_of_chkchr 0008  
       _delayus_variable 0018    i1___lmul@multiplicand 0004        __size_ofi1___lmul 003F  
    start_initialization 0000               ?i1___aldiv 0000              __end_of_isr 0118  
           SetMotor@resp 0045               ?i1_pwm_set 000E     __end_of_resetCounter 0013  
               ??___lmul 0008        __size_of_SetMotor 0243        __size_of_SetPoint 000C  
               ??_chkchr 0000                __Umul8_16 0000        pwm_set@duty_cycle 001E  
     i1___aldiv@dividend 0004                ___fladd@a 001E                ___fladd@b 001A  
              ___flmul@a 0004                ___flmul@b 0000                ___latbits 0002  
          __pcstackBANK0 0000            __pcstackBANK1 0000        __size_of___xxtofl 00A3  
       i1___lmul@product 0009              sprintf@flag 0017       i1___aldiv@quotient 000A  
            sprintf@prec 0018         ___lwdiv@dividend 0002                 ?___aldiv 000D  
               ?___fladd 001A                 ?___flmul 0000                 ?___fltol 002E  
             ?__Umul8_16 0000                 ?___lwdiv 0000                 ?___lwmod 0008  
              __pstrings 0000        __size_of_pwm_init 002A           pwm_set@channel 001C  
              _constrain 0000              ??i1___aldiv 000D         ___lwdiv@quotient 0005  
               ?_pwm_set 001C                 ?_sprintf 000E           __size_of_putch 002E  
         __size_of_putst 0036          ___aldiv@divisor 000D         main@serialIn_335 0036  
      interrupt_function 0000          ___aldiv@counter 0016                clear_ram0 0000  
               _PIR1bits 000C            ??_serial_init 0000              ??i1_pwm_set 0014  
              _set_point 0004                _motor_pos 0008                 i1___lmul 0000  
            __stringbase 0005               ?_constrain 0000          SetPoint@new_val 0000  
      ___lmul@multiplier 0000    __size_of_resetCounter 0013                 _SetMotor 0000  
               _SetPoint 0000              ??__Umul8_16 0002         __size_of___aldiv 008F  
       __size_of___fladd 022F         __size_of___flmul 0315         __size_of___fltol 006D  
       __size_of___lwdiv 003E         __size_of___lwmod 0034   __size_of_encoders_init 001A  
    __end_of_serial_init 0018       __end_of__stringtab 0006               sprintf@val 0019  
               ___xxtofl 0000          ___lwdiv@divisor 0000          ___lwdiv@counter 0007  
               __ptext10 0000                 __ptext11 0000                 __ptext20 0000  
               __ptext12 0000                 __ptext21 0000                 __ptext13 0000  
               __ptext22 0000                 __ptext14 0000                 __ptext23 0000  
               __ptext15 0000                 __ptext24 0000                 __ptext16 0000  
               __ptext25 0000                 __ptext17 0000                 __ptext18 0000  
               __ptext19 0000             _resetCounter 0000        __CFG_BOR4V$BOR21V 0000  
       __size_of_pwm_set 0085         __size_of_sprintf 00D2                 _last_pos 0000  
          __size_of_main 012A                 _sampling 0014                 _pos_log1 0000  
               _pos_log2 0000       SetMotor@derivative 004B                 _pwm_init 0000  
               main@sVar 002C              ??_constrain 000C                 isr@portB 004F  
        constrain@lLimit 0004          constrain@uLimit 0008                 intlevel1 0000* 
              sprintf@ap 0016                sprintf@sp 001B            _encoders_init 0000  
       ___lwmod@dividend 000A                stringcode 0000              _serial_init 0000  
 __Umul8_16@multiplicand 0000           constrain@value 0000                 sprintf@c 001C  
               sprintf@f 000E                 putst@str 0003          ___lwmod@divisor 0008  
        ___lwmod@counter 000D                 stringdir 0000                 stringtab 0000  
           ___aldiv@sign 0017            ___fladd@signs 002A      i1pwm_set@duty_cycle 0010  
         ?_encoders_init 0000         i1pwm_set@channel 000E             ___fladd@aexp 002B  
           ___fladd@bexp 002C     __Umul8_16@multiplier 0008        __Umul8_16@product 0004  
