

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Jun 04 16:23:08 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F886 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0089                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  0105                     	;# 
   202  0107                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0185                     	;# 
   211  0187                     	;# 
   212  0188                     	;# 
   213  0189                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0009                     	;# 
   225  000A                     	;# 
   226  000B                     	;# 
   227  000C                     	;# 
   228  000D                     	;# 
   229  000E                     	;# 
   230  000E                     	;# 
   231  000F                     	;# 
   232  0010                     	;# 
   233  0011                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0015                     	;# 
   238  0015                     	;# 
   239  0016                     	;# 
   240  0017                     	;# 
   241  0018                     	;# 
   242  0019                     	;# 
   243  001A                     	;# 
   244  001B                     	;# 
   245  001B                     	;# 
   246  001C                     	;# 
   247  001D                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  0081                     	;# 
   251  0085                     	;# 
   252  0086                     	;# 
   253  0087                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000D                     	;# 
   305  000E                     	;# 
   306  000E                     	;# 
   307  000F                     	;# 
   308  0010                     	;# 
   309  0011                     	;# 
   310  0012                     	;# 
   311  0013                     	;# 
   312  0014                     	;# 
   313  0015                     	;# 
   314  0015                     	;# 
   315  0016                     	;# 
   316  0017                     	;# 
   317  0018                     	;# 
   318  0019                     	;# 
   319  001A                     	;# 
   320  001B                     	;# 
   321  001B                     	;# 
   322  001C                     	;# 
   323  001D                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  0081                     	;# 
   327  0085                     	;# 
   328  0086                     	;# 
   329  0087                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  008F                     	;# 
   335  0090                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009A                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  009F                     	;# 
   353  0105                     	;# 
   354  0107                     	;# 
   355  0108                     	;# 
   356  0109                     	;# 
   357  010C                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  010F                     	;# 
   362  0185                     	;# 
   363  0187                     	;# 
   364  0188                     	;# 
   365  0189                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  000E                     	;# 
   383  000F                     	;# 
   384  0010                     	;# 
   385  0011                     	;# 
   386  0012                     	;# 
   387  0013                     	;# 
   388  0014                     	;# 
   389  0015                     	;# 
   390  0015                     	;# 
   391  0016                     	;# 
   392  0017                     	;# 
   393  0018                     	;# 
   394  0019                     	;# 
   395  001A                     	;# 
   396  001B                     	;# 
   397  001B                     	;# 
   398  001C                     	;# 
   399  001D                     	;# 
   400  001E                     	;# 
   401  001F                     	;# 
   402  0081                     	;# 
   403  0085                     	;# 
   404  0086                     	;# 
   405  0087                     	;# 
   406  0089                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  008F                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0093                     	;# 
   417  0094                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  0105                     	;# 
   430  0107                     	;# 
   431  0108                     	;# 
   432  0109                     	;# 
   433  010C                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  010F                     	;# 
   438  0185                     	;# 
   439  0187                     	;# 
   440  0188                     	;# 
   441  0189                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  0000                     	;# 
   445  0001                     	;# 
   446  0002                     	;# 
   447  0003                     	;# 
   448  0004                     	;# 
   449  0005                     	;# 
   450  0006                     	;# 
   451  0007                     	;# 
   452  0009                     	;# 
   453  000A                     	;# 
   454  000B                     	;# 
   455  000C                     	;# 
   456  000D                     	;# 
   457  000E                     	;# 
   458  000E                     	;# 
   459  000F                     	;# 
   460  0010                     	;# 
   461  0011                     	;# 
   462  0012                     	;# 
   463  0013                     	;# 
   464  0014                     	;# 
   465  0015                     	;# 
   466  0015                     	;# 
   467  0016                     	;# 
   468  0017                     	;# 
   469  0018                     	;# 
   470  0019                     	;# 
   471  001A                     	;# 
   472  001B                     	;# 
   473  001B                     	;# 
   474  001C                     	;# 
   475  001D                     	;# 
   476  001E                     	;# 
   477  001F                     	;# 
   478  0081                     	;# 
   479  0085                     	;# 
   480  0086                     	;# 
   481  0087                     	;# 
   482  0089                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  008F                     	;# 
   487  0090                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0093                     	;# 
   492  0093                     	;# 
   493  0094                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0098                     	;# 
   498  0099                     	;# 
   499  009A                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  0105                     	;# 
   506  0107                     	;# 
   507  0108                     	;# 
   508  0109                     	;# 
   509  010C                     	;# 
   510  010C                     	;# 
   511  010D                     	;# 
   512  010E                     	;# 
   513  010F                     	;# 
   514  0185                     	;# 
   515  0187                     	;# 
   516  0188                     	;# 
   517  0189                     	;# 
   518  018C                     	;# 
   519  018D                     	;# 
   520                           
   521                           	psect	strings
   522  04D9                     __pstrings:	
   523  04D9                     stringtab:	
   524  04D9                     __stringtab:	
   525  04D9                     stringcode:	
   526                           ;	String table - string pointers are 1 byte each
   527                           
   528  04D9                     stringdir:	
   529  04D9  3004               	movlw	high stringdir
   530  04DA  008A               	movwf	10
   531  04DB  0804               	movf	4,w
   532  04DC  0A84               	incf	4,f
   533  04DD  0782               	addwf	2,f
   534  04DE                     __stringbase:	
   535  04DE  3400               	retlw	0
   536  04DF                     __end_of__stringtab:	
   537  04DF                     _dpowers:	
   538  04DF  3401               	retlw	1
   539  04E0  3400               	retlw	0
   540  04E1  340A               	retlw	10
   541  04E2  3400               	retlw	0
   542  04E3  3464               	retlw	100
   543  04E4  3400               	retlw	0
   544  04E5  34E8               	retlw	232
   545  04E6  3403               	retlw	3
   546  04E7  3410               	retlw	16
   547  04E8  3427               	retlw	39
   548  04E9                     __end_of_dpowers:	
   549  0006                     _PORTB	set	6
   550  0001                     _TMR0	set	1
   551  0012                     _T2CONbits	set	18
   552  000C                     _PIR1bits	set	12
   553  001B                     _CCPR2L	set	27
   554  0015                     _CCPR1L	set	21
   555  001D                     _CCP2CONbits	set	29
   556  0017                     _CCP1CONbits	set	23
   557  0019                     _TXREG	set	25
   558  001A                     _RCREG	set	26
   559  003D                     _RC5	set	61
   560  003B                     _RC3	set	59
   561  003C                     _RC4	set	60
   562  005F                     _GIE	set	95
   563  005E                     _PEIE	set	94
   564  0035                     _RB5	set	53
   565  0058                     _RBIF	set	88
   566  005B                     _RBIE	set	91
   567  005A                     _T0IF	set	90
   568  005D                     _T0IE	set	93
   569  002E                     _RA6	set	46
   570  002D                     _RA5	set	45
   571  0065                     _RCIF	set	101
   572  0064                     _TXIF	set	100
   573  00C2                     _FERR	set	194
   574  00C1                     _OERR	set	193
   575  00C6                     _RX9	set	198
   576  00C5                     _SREN	set	197
   577  00C4                     _CREN	set	196
   578  00C7                     _SPEN	set	199
   579  0096                     _IOCB	set	150
   580  0081                     _OPTION_REGbits	set	129
   581  0092                     _PR2	set	146
   582  0099                     _SPBRG	set	153
   583  043D                     _TRISC5	set	1085
   584  043C                     _TRISC4	set	1084
   585  043B                     _TRISC3	set	1083
   586  0460                     _TMR1IE	set	1120
   587  0434                     _TRISB4	set	1076
   588  0433                     _TRISB3	set	1075
   589  0432                     _TRISB2	set	1074
   590  0431                     _TRISB1	set	1073
   591  0437                     _TRISB7	set	1079
   592  0435                     _TRISB5	set	1077
   593  042E                     _TRISA6	set	1070
   594  042D                     _TRISA5	set	1069
   595  043A                     _TRISC2	set	1082
   596  0439                     _TRISC1	set	1081
   597  04C5                     _TXEN	set	1221
   598  04C6                     _TX9	set	1222
   599  0465                     _RCIE	set	1125
   600  0464                     _TXIE	set	1124
   601  04C4                     _SYNC	set	1220
   602  04C2                     _BRGH	set	1218
   603  0C4B                     _ANS11	set	3147
   604  0C48                     _ANS8	set	3144
   605  0C49                     _ANS9	set	3145
   606  0C4A                     _ANS10	set	3146
   607  0C4D                     _ANS13	set	3149
   608  0C44                     _ANS4	set	3140
   609  04E9                     STR_1:	
   610  04E9  3453               	retlw	83	;'S'
   611  04EA  3465               	retlw	101	;'e'
   612  04EB  3474               	retlw	116	;'t'
   613  04EC  3450               	retlw	80	;'P'
   614  04ED  346F               	retlw	111	;'o'
   615  04EE  3469               	retlw	105	;'i'
   616  04EF  346E               	retlw	110	;'n'
   617  04F0  3474               	retlw	116	;'t'
   618  04F1  343A               	retlw	58	;':'
   619  04F2  3420               	retlw	32	;' '
   620  04F3  3425               	retlw	37	;'%'
   621  04F4  3464               	retlw	100	;'d'
   622  04F5  3420               	retlw	32	;' '
   623  04F6  340D               	retlw	13
   624  04F7  340A               	retlw	10
   625  04F8  3400               	retlw	0
   626                           
   627                           ; #config settings
   628  0000                     
   629                           	psect	cinit
   630  0011                     start_initialization:	
   631  0011                     __initialization:	
   632                           
   633                           ; Clear objects allocated to COMMON
   634  0011  01F6               	clrf	__pbssCOMMON& (0+127)
   635  0012  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   636  0013  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   637  0014  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   638  0015  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   639                           
   640                           ; Clear objects allocated to BANK0
   641  0016  1383               	bcf	3,7	;select IRP bank0
   642  0017  3052               	movlw	low __pbssBANK0
   643  0018  0084               	movwf	4
   644  0019  3065               	movlw	low (__pbssBANK0+19)
   645  001A  120A  118A  254B   	fcall	clear_ram0
   646  001D                     end_of_initialization:	
   647                           ;End of C runtime variable initialization code
   648                           
   649  001D                     __end_of__initialization:	
   650  001D  0183               	clrf	3
   651  001E  120A  118A  29D0   	ljmp	_main	;jump to C main() function
   652                           
   653                           	psect	bssCOMMON
   654  0076                     __pbssCOMMON:	
   655  0076                     _lStep:	
   656  0076                     	ds	1
   657  0077                     _ab1:	
   658  0077                     	ds	1
   659  0078                     _state1:	
   660  0078                     	ds	1
   661  0079                     _dummy:	
   662  0079                     	ds	1
   663  007A                     _delayus_variable:	
   664  007A                     	ds	1
   665                           
   666                           	psect	bssBANK0
   667  0052                     __pbssBANK0:	
   668  0052                     _set_point:	
   669  0052                     	ds	4
   670  0056                     _motor_pos:	
   671  0056                     	ds	4
   672  005A                     _encoder1_counter:	
   673  005A                     	ds	4
   674  005E                     isr@tick:	
   675  005E                     	ds	2
   676  0060                     SetMotor@last_err:	
   677  0060                     	ds	2
   678  0062                     _set_motor_flag:	
   679  0062                     	ds	1
   680  0063                     SetMotor@derivative:	
   681  0063                     	ds	2
   682                           
   683                           	psect	clrtext
   684  054B                     clear_ram0:	
   685                           ;	Called with FSR containing the base address, and
   686                           ;	W with the last address+1
   687                           
   688  054B  0064               	clrwdt	;clear the watchdog before getting into this loop
   689  054C                     clrloop0:	
   690  054C  0180               	clrf	0	;clear RAM location pointed to by FSR
   691  054D  0A84               	incf	4,f	;increment pointer
   692  054E  0604               	xorwf	4,w	;XOR with final address
   693  054F  1903               	btfsc	3,2	;have we reached the end yet?
   694  0550  3400               	retlw	0	;all done for this memory range, return
   695  0551  0604               	xorwf	4,w	;XOR again to restore value
   696  0552  2D4C               	goto	clrloop0	;do the next byte
   697                           
   698                           	psect	cstackCOMMON
   699  0070                     __pcstackCOMMON:	
   700  0070                     ?_serial_init:	
   701  0070                     ?_pwm_init:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_SetMotor:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_resetCounter:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_motor_reset:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_isr:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ??_isr:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_encoders_init:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_main:	
   723                           ; 1 bytes @ 0x0
   724                           
   725                           
   726                           ; 1 bytes @ 0x0
   727  0070                     	ds	5
   728  0075                     isr@portB:	
   729                           
   730                           ; 1 bytes @ 0x5
   731  0075                     	ds	1
   732                           
   733                           	psect	cstackBANK0
   734  0020                     __pcstackBANK0:	
   735  0020                     ??_serial_init:	
   736  0020                     ??_pwm_init:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0020                     ??_resetCounter:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0020                     ??_encoders_init:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0020                     ?_getServoState:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0020                     ?_getServoCommand:	
   749                           ; 2 bytes @ 0x0
   750                           
   751  0020                     ?_constrain:	
   752                           ; 2 bytes @ 0x0
   753                           
   754  0020                     ?___lmul:	
   755                           ; 4 bytes @ 0x0
   756                           
   757  0020                     constrain@value:	
   758                           ; 4 bytes @ 0x0
   759                           
   760  0020                     ___lmul@multiplier:	
   761                           ; 4 bytes @ 0x0
   762                           
   763                           
   764                           ; 4 bytes @ 0x0
   765  0020                     	ds	2
   766  0022                     ??_getServoState:	
   767  0022                     ??_getServoCommand:	
   768                           ; 1 bytes @ 0x2
   769                           
   770                           
   771                           ; 1 bytes @ 0x2
   772  0022                     	ds	2
   773  0024                     constrain@lLimit:	
   774  0024                     ___lmul@multiplicand:	
   775                           ; 4 bytes @ 0x4
   776                           
   777                           
   778                           ; 4 bytes @ 0x4
   779  0024                     	ds	2
   780  0026                     ?___wmul:	
   781  0026                     ___wmul@multiplier:	
   782                           ; 2 bytes @ 0x6
   783                           
   784                           
   785                           ; 2 bytes @ 0x6
   786  0026                     	ds	2
   787  0028                     ??___lmul:	
   788  0028                     ___wmul@multiplicand:	
   789                           ; 1 bytes @ 0x8
   790                           
   791  0028                     constrain@uLimit:	
   792                           ; 2 bytes @ 0x8
   793                           
   794                           
   795                           ; 4 bytes @ 0x8
   796  0028                     	ds	1
   797  0029                     ___lmul@product:	
   798                           
   799                           ; 4 bytes @ 0x9
   800  0029                     	ds	1
   801  002A                     ??___wmul:	
   802  002A                     ___wmul@product:	
   803                           ; 1 bytes @ 0xA
   804                           
   805                           
   806                           ; 2 bytes @ 0xA
   807  002A                     	ds	2
   808  002C                     ??_constrain:	
   809  002C                     ?_SetPoint:	
   810                           ; 1 bytes @ 0xC
   811                           
   812  002C                     SetPoint@new_val:	
   813                           ; 1 bytes @ 0xC
   814                           
   815                           
   816                           ; 2 bytes @ 0xC
   817  002C                     	ds	1
   818  002D                     ?___aldiv:	
   819  002D                     ___aldiv@divisor:	
   820                           ; 4 bytes @ 0xD
   821                           
   822                           
   823                           ; 4 bytes @ 0xD
   824  002D                     	ds	1
   825  002E                     ??_SetPoint:	
   826                           
   827                           ; 1 bytes @ 0xE
   828  002E                     	ds	3
   829  0031                     ___aldiv@dividend:	
   830                           
   831                           ; 4 bytes @ 0x11
   832  0031                     	ds	4
   833  0035                     ??___aldiv:	
   834                           
   835                           ; 1 bytes @ 0x15
   836  0035                     	ds	1
   837  0036                     ___aldiv@counter:	
   838                           
   839                           ; 1 bytes @ 0x16
   840  0036                     	ds	1
   841  0037                     ___aldiv@sign:	
   842                           
   843                           ; 1 bytes @ 0x17
   844  0037                     	ds	1
   845  0038                     ___aldiv@quotient:	
   846                           
   847                           ; 4 bytes @ 0x18
   848  0038                     	ds	4
   849  003C                     ?_pwm_set:	
   850  003C                     pwm_set@channel:	
   851                           ; 1 bytes @ 0x1C
   852                           
   853                           
   854                           ; 2 bytes @ 0x1C
   855  003C                     	ds	2
   856  003E                     pwm_set@duty_cycle:	
   857                           
   858                           ; 4 bytes @ 0x1E
   859  003E                     	ds	4
   860  0042                     ??_pwm_set:	
   861                           
   862                           ; 1 bytes @ 0x22
   863  0042                     	ds	4
   864  0046                     ??_SetMotor:	
   865  0046                     ??_motor_reset:	
   866                           ; 1 bytes @ 0x26
   867                           
   868                           
   869                           ; 1 bytes @ 0x26
   870  0046                     	ds	2
   871  0048                     SetMotor@P_Response:	
   872                           
   873                           ; 2 bytes @ 0x28
   874  0048                     	ds	2
   875  004A                     SetMotor@D_Response:	
   876                           
   877                           ; 2 bytes @ 0x2A
   878  004A                     	ds	2
   879  004C                     SetMotor@err:	
   880                           
   881                           ; 2 bytes @ 0x2C
   882  004C                     	ds	2
   883  004E                     SetMotor@resp:	
   884                           
   885                           ; 4 bytes @ 0x2E
   886  004E                     	ds	4
   887  0052                     ??_main:	
   888                           
   889                           	psect	maintext
   890  01D0                     __pmaintext:	
   891                           ; 1 bytes @ 0x32
   892 ;;
   893 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   894 ;;
   895 ;; *************** function _main *****************
   896 ;; Defined at:
   897 ;;		line 214 in file "main.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  i               2    0        int 
   902 ;;  enc1            2    0        int 
   903 ;;  serialIn        1    0        unsigned char 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : B00/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   913 ;;      Params:         0       0       0       0       0
   914 ;;      Locals:         0       5       0       0       0
   915 ;;      Temps:          0       0       0       0       0
   916 ;;      Totals:         0       5       0       0       0
   917 ;;Total ram usage:        5 bytes
   918 ;; Hardware stack levels required when called:    4
   919 ;; This function calls:
   920 ;;		_SetMotor
   921 ;;		_SetPoint
   922 ;;		___wmul
   923 ;;		_encoders_init
   924 ;;		_getServoCommand
   925 ;;		_getServoState
   926 ;;		_motor_reset
   927 ;;		_pwm_init
   928 ;;		_pwm_set
   929 ;;		_serial_init
   930 ;; This function is called by:
   931 ;;		Startup code after reset
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           
   936                           ;psect for function _main
   937  01D0                     _main:	
   938                           
   939                           ;main.c: 223: OPTION_REGbits.T0CS = 0;
   940                           
   941                           ;incstack = 0
   942                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   943  01D0  1683               	bsf	3,5	;RP0=1, select bank1
   944  01D1  1303               	bcf	3,6	;RP1=0, select bank1
   945  01D2  1281               	bcf	1,5	;volatile
   946                           
   947                           ;main.c: 224: OPTION_REGbits.PSA = 0;
   948  01D3  1181               	bcf	1,3	;volatile
   949                           
   950                           ;main.c: 225: OPTION_REGbits.PS = 7;
   951  01D4  3007               	movlw	7
   952  01D5  0481               	iorwf	1,f	;volatile
   953                           
   954                           ;main.c: 228: TRISB5 = 0;
   955  01D6  1286               	bcf	6,5	;volatile
   956                           
   957                           ;main.c: 229: ANS13 = 0;
   958  01D7  1683               	bsf	3,5	;RP0=1, select bank3
   959  01D8  1703               	bsf	3,6	;RP1=1, select bank3
   960  01D9  1289               	bcf	9,5	;volatile
   961                           
   962                           ;main.c: 230: TRISB7 = 0;
   963  01DA  1683               	bsf	3,5	;RP0=1, select bank1
   964  01DB  1303               	bcf	3,6	;RP1=0, select bank1
   965  01DC  1386               	bcf	6,7	;volatile
   966                           
   967                           ;main.c: 231: TRISB1 = 1;
   968  01DD  1486               	bsf	6,1	;volatile
   969                           
   970                           ;main.c: 232: TRISB2 = 1;
   971  01DE  1506               	bsf	6,2	;volatile
   972                           
   973                           ;main.c: 233: TRISB3 = 1;
   974  01DF  1586               	bsf	6,3	;volatile
   975                           
   976                           ;main.c: 234: TRISB4 = 1;
   977  01E0  1606               	bsf	6,4	;volatile
   978                           
   979                           ;main.c: 235: ANS10 = 0;
   980  01E1  1683               	bsf	3,5	;RP0=1, select bank3
   981  01E2  1703               	bsf	3,6	;RP1=1, select bank3
   982  01E3  1109               	bcf	9,2	;volatile
   983                           
   984                           ;main.c: 236: ANS9 = 0;
   985  01E4  1089               	bcf	9,1	;volatile
   986                           
   987                           ;main.c: 237: ANS8 = 0;
   988  01E5  1009               	bcf	9,0	;volatile
   989                           
   990                           ;main.c: 238: ANS11 = 0;
   991  01E6  1189               	bcf	9,3	;volatile
   992                           
   993                           ;main.c: 239: RB5=1;
   994  01E7  1283               	bcf	3,5	;RP0=0, select bank0
   995  01E8  1303               	bcf	3,6	;RP1=0, select bank0
   996  01E9  1686               	bsf	6,5	;volatile
   997                           
   998                           ;main.c: 242: T0IE = 1;
   999  01EA  168B               	bsf	11,5	;volatile
  1000                           
  1001                           ;main.c: 243: TMR1IE = 0;
  1002  01EB  1683               	bsf	3,5	;RP0=1, select bank1
  1003  01EC  1303               	bcf	3,6	;RP1=0, select bank1
  1004  01ED  100C               	bcf	12,0	;volatile
  1005                           
  1006                           ;main.c: 244: PEIE = 1;
  1007  01EE  170B               	bsf	11,6	;volatile
  1008                           
  1009                           ;main.c: 245: GIE = 1;
  1010  01EF  178B               	bsf	11,7	;volatile
  1011                           
  1012                           ;main.c: 246: IOCB=0b00011000;
  1013  01F0  3018               	movlw	24
  1014  01F1  0096               	movwf	22	;volatile
  1015                           
  1016                           ;main.c: 247: RBIE = 1;
  1017  01F2  158B               	bsf	11,3	;volatile
  1018                           
  1019                           ;main.c: 251: serial_init();
  1020  01F3  120A  118A  24F9  120A  118A  	fcall	_serial_init
  1021                           
  1022                           ;main.c: 254: pwm_init();
  1023  01F8  120A  118A  2467  120A  118A  	fcall	_pwm_init
  1024                           
  1025                           ;main.c: 261: encoders_init();
  1026  01FD  120A  118A  2511  120A  118A  	fcall	_encoders_init
  1027                           
  1028                           ;main.c: 268: pwm_set(1, 0);
  1029  0202  3001               	movlw	1
  1030  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1032  0205  00BC               	movwf	pwm_set@channel
  1033  0206  3000               	movlw	0
  1034  0207  00BD               	movwf	pwm_set@channel+1
  1035  0208  3000               	movlw	0
  1036  0209  00C1               	movwf	pwm_set@duty_cycle+3
  1037  020A  3000               	movlw	0
  1038  020B  00C0               	movwf	pwm_set@duty_cycle+2
  1039  020C  3000               	movlw	0
  1040  020D  00BF               	movwf	pwm_set@duty_cycle+1
  1041  020E  3000               	movlw	0
  1042  020F  00BE               	movwf	pwm_set@duty_cycle
  1043  0210  120A  118A  2309  120A  118A  	fcall	_pwm_set
  1044                           
  1045                           ;main.c: 269: pwm_set(2, 0);
  1046  0215  3002               	movlw	2
  1047  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0218  00BC               	movwf	pwm_set@channel
  1050  0219  3000               	movlw	0
  1051  021A  00BD               	movwf	pwm_set@channel+1
  1052  021B  3000               	movlw	0
  1053  021C  00C1               	movwf	pwm_set@duty_cycle+3
  1054  021D  3000               	movlw	0
  1055  021E  00C0               	movwf	pwm_set@duty_cycle+2
  1056  021F  3000               	movlw	0
  1057  0220  00BF               	movwf	pwm_set@duty_cycle+1
  1058  0221  3000               	movlw	0
  1059  0222  00BE               	movwf	pwm_set@duty_cycle
  1060  0223  120A  118A  2309  120A  118A  	fcall	_pwm_set
  1061  0228                     l2356:	
  1062                           
  1063                           ;main.c: 273: RB5 = getServoState();
  1064  0228  120A  118A  253C  120A  118A  	fcall	_getServoState
  1065  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1066  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1067  022F  1C20               	btfss	?_getServoState,0
  1068  0230  2A35               	goto	u2020
  1069  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1070  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0233  1686               	bsf	6,5	;volatile
  1072  0234  2A38               	goto	l2358
  1073  0235                     u2020:	
  1074  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1076  0237  1286               	bcf	6,5	;volatile
  1077  0238                     l2358:	
  1078                           
  1079                           ;main.c: 274: if (!getServoState()){
  1080  0238  120A  118A  253C  120A  118A  	fcall	_getServoState
  1081  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1082  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1083  023F  0820               	movf	?_getServoState,w
  1084  0240  0421               	iorwf	?_getServoState+1,w
  1085  0241  1D03               	btfss	3,2
  1086  0242  2A49               	goto	l2362
  1087                           
  1088                           ;main.c: 275: motor_reset();
  1089  0243  120A  118A  2407  120A  118A  	fcall	_motor_reset
  1090                           
  1091                           ;main.c: 277: }else{
  1092  0248  2A6C               	goto	l2364
  1093  0249                     l2362:	
  1094                           
  1095                           ;main.c: 278: SetPoint(set_point - (5 * getServoCommand()));
  1096  0249  120A  118A  243B  120A  118A  	fcall	_getServoCommand
  1097  024E  1283               	bcf	3,5	;RP0=0, select bank0
  1098  024F  1303               	bcf	3,6	;RP1=0, select bank0
  1099  0250  0821               	movf	?_getServoCommand+1,w
  1100  0251  00A7               	movwf	___wmul@multiplier+1
  1101  0252  0820               	movf	?_getServoCommand,w
  1102  0253  00A6               	movwf	___wmul@multiplier
  1103  0254  30FB               	movlw	251
  1104  0255  00A8               	movwf	___wmul@multiplicand
  1105  0256  30FF               	movlw	255
  1106  0257  00A9               	movwf	___wmul@multiplicand+1
  1107  0258  120A  118A  24B6  120A  118A  	fcall	___wmul
  1108  025D  1283               	bcf	3,5	;RP0=0, select bank0
  1109  025E  1303               	bcf	3,6	;RP1=0, select bank0
  1110  025F  0852               	movf	_set_point,w	;volatile
  1111  0260  0726               	addwf	?___wmul,w
  1112  0261  00AC               	movwf	SetPoint@new_val
  1113  0262  0853               	movf	_set_point+1,w	;volatile
  1114  0263  1803               	skipnc
  1115  0264  0A53               	incf	_set_point+1,w	;volatile
  1116  0265  0727               	addwf	?___wmul+1,w
  1117  0266  00AD               	movwf	SetPoint@new_val+1
  1118  0267  120A  118A  2491  120A  118A  	fcall	_SetPoint
  1119  026C                     l2364:	
  1120                           
  1121                           ;main.c: 279: };main.c: 281: if (set_motor_flag){
  1122  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1123  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1124  026E  0862               	movf	_set_motor_flag,w
  1125  026F  1903               	btfsc	3,2
  1126  0270  2A28               	goto	l2356
  1127                           
  1128                           ;main.c: 282: SetMotor();
  1129  0271  120A  118A  2021  120A  118A  	fcall	_SetMotor
  1130                           
  1131                           ;main.c: 283: set_motor_flag = 0;
  1132  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1133  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1134  0278  01E2               	clrf	_set_motor_flag
  1135  0279  2A28               	goto	l2356
  1136  027A                     __end_of_main:	
  1137                           
  1138                           	psect	text1
  1139  04F9                     __ptext1:	
  1140 ;; *************** function _serial_init *****************
  1141 ;; Defined at:
  1142 ;;		line 29 in file "serial.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;		None
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;		None
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1156 ;;      Params:         0       0       0       0       0
  1157 ;;      Locals:         0       0       0       0       0
  1158 ;;      Temps:          0       0       0       0       0
  1159 ;;      Totals:         0       0       0       0       0
  1160 ;;Total ram usage:        0 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    1
  1163 ;; This function calls:
  1164 ;;		Nothing
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           
  1171                           ;psect for function _serial_init
  1172  04F9                     _serial_init:	
  1173                           
  1174                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  1175                           
  1176                           ;incstack = 0
  1177                           ; Regs used in _serial_init: [wreg]
  1178  04F9  3040               	movlw	64
  1179  04FA  1683               	bsf	3,5	;RP0=1, select bank1
  1180  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  1181  04FC  0099               	movwf	25	;volatile
  1182                           
  1183                           ;serial.c: 66: BRGH=1;
  1184  04FD  1518               	bsf	24,2	;volatile
  1185                           
  1186                           ;serial.c: 67: SYNC=0;
  1187  04FE  1218               	bcf	24,4	;volatile
  1188                           
  1189                           ;serial.c: 68: SPEN=1;
  1190  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  1191  0500  1303               	bcf	3,6	;RP1=0, select bank0
  1192  0501  1798               	bsf	24,7	;volatile
  1193                           
  1194                           ;serial.c: 69: CREN=1;
  1195  0502  1618               	bsf	24,4	;volatile
  1196                           
  1197                           ;serial.c: 70: SREN=0;
  1198  0503  1298               	bcf	24,5	;volatile
  1199                           
  1200                           ;serial.c: 71: TXIE=0;
  1201  0504  1683               	bsf	3,5	;RP0=1, select bank1
  1202  0505  1303               	bcf	3,6	;RP1=0, select bank1
  1203  0506  120C               	bcf	12,4	;volatile
  1204                           
  1205                           ;serial.c: 72: RCIE=0;
  1206  0507  128C               	bcf	12,5	;volatile
  1207                           
  1208                           ;serial.c: 73: TX9=0;
  1209  0508  1318               	bcf	24,6	;volatile
  1210                           
  1211                           ;serial.c: 74: RX9=0;
  1212  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1213  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1214  050B  1318               	bcf	24,6	;volatile
  1215                           
  1216                           ;serial.c: 75: TXEN=0;
  1217  050C  1683               	bsf	3,5	;RP0=1, select bank1
  1218  050D  1303               	bcf	3,6	;RP1=0, select bank1
  1219  050E  1298               	bcf	24,5	;volatile
  1220                           
  1221                           ;serial.c: 76: TXEN=1;
  1222  050F  1698               	bsf	24,5	;volatile
  1223  0510  0008               	return
  1224  0511                     __end_of_serial_init:	
  1225                           
  1226                           	psect	text2
  1227  0467                     __ptext2:	
  1228 ;; *************** function _pwm_init *****************
  1229 ;; Defined at:
  1230 ;;		line 25 in file "pwm.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;		None
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;		None
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg, status,2, status,0
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1244 ;;      Params:         0       0       0       0       0
  1245 ;;      Locals:         0       0       0       0       0
  1246 ;;      Temps:          0       0       0       0       0
  1247 ;;      Totals:         0       0       0       0       0
  1248 ;;Total ram usage:        0 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _pwm_init
  1260  0467                     _pwm_init:	
  1261                           
  1262                           ;pwm.c: 28: TRISC1 = 1;
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  1266  0467  1683               	bsf	3,5	;RP0=1, select bank1
  1267  0468  1303               	bcf	3,6	;RP1=0, select bank1
  1268  0469  1487               	bsf	7,1	;volatile
  1269                           
  1270                           ;pwm.c: 29: TRISC2 = 1;
  1271  046A  1507               	bsf	7,2	;volatile
  1272                           
  1273                           ;pwm.c: 32: PR2 = 0xFF;
  1274  046B  30FF               	movlw	255
  1275  046C  0092               	movwf	18	;volatile
  1276                           
  1277                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  1278  046D  1283               	bcf	3,5	;RP0=0, select bank0
  1279  046E  1303               	bcf	3,6	;RP1=0, select bank0
  1280  046F  0817               	movf	23,w	;volatile
  1281  0470  39F0               	andlw	-16
  1282  0471  380C               	iorlw	12
  1283  0472  0097               	movwf	23	;volatile
  1284                           
  1285                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  1286  0473  081D               	movf	29,w	;volatile
  1287  0474  39F0               	andlw	-16
  1288  0475  380C               	iorlw	12
  1289  0476  009D               	movwf	29	;volatile
  1290                           
  1291                           ;pwm.c: 39: CCPR1L = 0;
  1292  0477  0195               	clrf	21	;volatile
  1293                           
  1294                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  1295  0478  30CF               	movlw	-49
  1296  0479  0597               	andwf	23,f	;volatile
  1297                           
  1298                           ;pwm.c: 41: CCPR2L = 0;
  1299  047A  019B               	clrf	27	;volatile
  1300                           
  1301                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  1302  047B  108C               	bcf	12,1	;volatile
  1303                           
  1304                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  1305  047C  30FC               	movlw	-4
  1306  047D  0592               	andwf	18,f	;volatile
  1307                           
  1308                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  1309  047E  1512               	bsf	18,2	;volatile
  1310  047F                     l170:	
  1311                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  1312                           
  1313  047F  1C8C               	btfss	12,1	;volatile
  1314  0480  2C7F               	goto	l170
  1315                           
  1316                           ;pwm.c: 53: TRISC1 = 0;
  1317  0481  1683               	bsf	3,5	;RP0=1, select bank1
  1318  0482  1303               	bcf	3,6	;RP1=0, select bank1
  1319  0483  1087               	bcf	7,1	;volatile
  1320                           
  1321                           ;pwm.c: 54: TRISC2 = 0;
  1322  0484  1107               	bcf	7,2	;volatile
  1323                           
  1324                           ;pwm.c: 59: ANS4 = 0;
  1325  0485  1683               	bsf	3,5	;RP0=1, select bank3
  1326  0486  1703               	bsf	3,6	;RP1=1, select bank3
  1327  0487  1208               	bcf	8,4	;volatile
  1328                           
  1329                           ;pwm.c: 60: TRISA5 = 0;
  1330  0488  1683               	bsf	3,5	;RP0=1, select bank1
  1331  0489  1303               	bcf	3,6	;RP1=0, select bank1
  1332  048A  1285               	bcf	5,5	;volatile
  1333                           
  1334                           ;pwm.c: 61: TRISA6 = 0;
  1335  048B  1305               	bcf	5,6	;volatile
  1336                           
  1337                           ;pwm.c: 62: RA5 = 0;
  1338  048C  1283               	bcf	3,5	;RP0=0, select bank0
  1339  048D  1303               	bcf	3,6	;RP1=0, select bank0
  1340  048E  1285               	bcf	5,5	;volatile
  1341                           
  1342                           ;pwm.c: 63: RA6 = 0;
  1343  048F  1305               	bcf	5,6	;volatile
  1344  0490  0008               	return
  1345  0491                     __end_of_pwm_init:	
  1346                           
  1347                           	psect	text3
  1348  0407                     __ptext3:	
  1349 ;; *************** function _motor_reset *****************
  1350 ;; Defined at:
  1351 ;;		line 129 in file "main.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;		None
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;		None
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1365 ;;      Params:         0       0       0       0       0
  1366 ;;      Locals:         0       0       0       0       0
  1367 ;;      Temps:          0       0       0       0       0
  1368 ;;      Totals:         0       0       0       0       0
  1369 ;;Total ram usage:        0 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; Hardware stack levels required when called:    3
  1372 ;; This function calls:
  1373 ;;		_SetPoint
  1374 ;;		_pwm_set
  1375 ;;		_resetCounter
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _motor_reset
  1383  0407                     _motor_reset:	
  1384                           
  1385                           ;main.c: 130: pwm_set(1, 0);
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1389  0407  3001               	movlw	1
  1390  0408  1283               	bcf	3,5	;RP0=0, select bank0
  1391  0409  1303               	bcf	3,6	;RP1=0, select bank0
  1392  040A  00BC               	movwf	pwm_set@channel
  1393  040B  3000               	movlw	0
  1394  040C  00BD               	movwf	pwm_set@channel+1
  1395  040D  3000               	movlw	0
  1396  040E  00C1               	movwf	pwm_set@duty_cycle+3
  1397  040F  3000               	movlw	0
  1398  0410  00C0               	movwf	pwm_set@duty_cycle+2
  1399  0411  3000               	movlw	0
  1400  0412  00BF               	movwf	pwm_set@duty_cycle+1
  1401  0413  3000               	movlw	0
  1402  0414  00BE               	movwf	pwm_set@duty_cycle
  1403  0415  120A  118A  2309  120A  118A  	fcall	_pwm_set
  1404                           
  1405                           ;main.c: 131: pwm_set(2, 0);
  1406  041A  3002               	movlw	2
  1407  041B  1283               	bcf	3,5	;RP0=0, select bank0
  1408  041C  1303               	bcf	3,6	;RP1=0, select bank0
  1409  041D  00BC               	movwf	pwm_set@channel
  1410  041E  3000               	movlw	0
  1411  041F  00BD               	movwf	pwm_set@channel+1
  1412  0420  3000               	movlw	0
  1413  0421  00C1               	movwf	pwm_set@duty_cycle+3
  1414  0422  3000               	movlw	0
  1415  0423  00C0               	movwf	pwm_set@duty_cycle+2
  1416  0424  3000               	movlw	0
  1417  0425  00BF               	movwf	pwm_set@duty_cycle+1
  1418  0426  3000               	movlw	0
  1419  0427  00BE               	movwf	pwm_set@duty_cycle
  1420  0428  120A  118A  2309  120A  118A  	fcall	_pwm_set
  1421                           
  1422                           ;main.c: 132: resetCounter();
  1423  042D  120A  118A  2529  120A  118A  	fcall	_resetCounter
  1424                           
  1425                           ;main.c: 133: SetPoint(0);
  1426  0432  3000               	movlw	0
  1427  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1428  0434  1303               	bcf	3,6	;RP1=0, select bank0
  1429  0435  00AC               	movwf	SetPoint@new_val
  1430  0436  00AD               	movwf	SetPoint@new_val+1
  1431  0437  120A  118A  2491   	fcall	_SetPoint
  1432  043A  0008               	return
  1433  043B                     __end_of_motor_reset:	
  1434                           
  1435                           	psect	text4
  1436  0529                     __ptext4:	
  1437 ;; *************** function _resetCounter *****************
  1438 ;; Defined at:
  1439 ;;		line 124 in file "main.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1453 ;;      Params:         0       0       0       0       0
  1454 ;;      Locals:         0       0       0       0       0
  1455 ;;      Temps:          0       0       0       0       0
  1456 ;;      Totals:         0       0       0       0       0
  1457 ;;Total ram usage:        0 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    1
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_motor_reset
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           
  1468                           ;psect for function _resetCounter
  1469  0529                     _resetCounter:	
  1470                           
  1471                           ;main.c: 125: encoder1_counter = 0;
  1472                           
  1473                           ;incstack = 0
  1474                           ; Regs used in _resetCounter: [wreg]
  1475  0529  3000               	movlw	0
  1476  052A  1283               	bcf	3,5	;RP0=0, select bank0
  1477  052B  1303               	bcf	3,6	;RP1=0, select bank0
  1478  052C  00DD               	movwf	_encoder1_counter+3	;volatile
  1479  052D  3000               	movlw	0
  1480  052E  00DC               	movwf	_encoder1_counter+2	;volatile
  1481  052F  3000               	movlw	0
  1482  0530  00DB               	movwf	_encoder1_counter+1	;volatile
  1483  0531  3000               	movlw	0
  1484  0532  00DA               	movwf	_encoder1_counter	;volatile
  1485                           
  1486                           ;main.c: 126: motor_pos = 0;
  1487  0533  3000               	movlw	0
  1488  0534  00D9               	movwf	_motor_pos+3	;volatile
  1489  0535  3000               	movlw	0
  1490  0536  00D8               	movwf	_motor_pos+2	;volatile
  1491  0537  3000               	movlw	0
  1492  0538  00D7               	movwf	_motor_pos+1	;volatile
  1493  0539  3000               	movlw	0
  1494  053A  00D6               	movwf	_motor_pos	;volatile
  1495  053B  0008               	return
  1496  053C                     __end_of_resetCounter:	
  1497                           
  1498                           	psect	text5
  1499  0491                     __ptext5:	
  1500 ;; *************** function _SetPoint *****************
  1501 ;; Defined at:
  1502 ;;		line 117 in file "main.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  new_val         2   12[BANK0 ] int 
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;		None
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1516 ;;      Params:         0       2       0       0       0
  1517 ;;      Locals:         0       0       0       0       0
  1518 ;;      Temps:          0       4       0       0       0
  1519 ;;      Totals:         0       6       0       0       0
  1520 ;;Total ram usage:        6 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    1
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_motor_reset
  1527 ;;		_main
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function _SetPoint
  1533  0491                     _SetPoint:	
  1534                           
  1535                           ;main.c: 118: if (new_val != set_point){
  1536                           
  1537                           ;incstack = 0
  1538                           ; Regs used in _SetPoint: [wreg]
  1539  0491  1283               	bcf	3,5	;RP0=0, select bank0
  1540  0492  1303               	bcf	3,6	;RP1=0, select bank0
  1541  0493  082C               	movf	SetPoint@new_val,w
  1542  0494  00AE               	movwf	??_SetPoint
  1543  0495  082D               	movf	SetPoint@new_val+1,w
  1544  0496  00AF               	movwf	??_SetPoint+1
  1545  0497  3000               	movlw	0
  1546  0498  1BAF               	btfsc	??_SetPoint+1,7
  1547  0499  30FF               	movlw	255
  1548  049A  00B0               	movwf	??_SetPoint+2
  1549  049B  00B1               	movwf	??_SetPoint+3
  1550  049C  0855               	movf	_set_point+3,w	;volatile
  1551  049D  0631               	xorwf	??_SetPoint+3,w
  1552  049E  1D03               	skipz
  1553  049F  2CAA               	goto	u1055
  1554  04A0  0854               	movf	_set_point+2,w	;volatile
  1555  04A1  0630               	xorwf	??_SetPoint+2,w
  1556  04A2  1D03               	skipz
  1557  04A3  2CAA               	goto	u1055
  1558  04A4  0853               	movf	_set_point+1,w	;volatile
  1559  04A5  062F               	xorwf	??_SetPoint+1,w
  1560  04A6  1D03               	skipz
  1561  04A7  2CAA               	goto	u1055
  1562  04A8  0852               	movf	_set_point,w	;volatile
  1563  04A9  062E               	xorwf	??_SetPoint,w
  1564  04AA                     u1055:	
  1565  04AA  1903               	skipnz
  1566  04AB  0008               	return
  1567                           
  1568                           ;main.c: 119: set_point = new_val;
  1569  04AC  082C               	movf	SetPoint@new_val,w
  1570  04AD  00D2               	movwf	_set_point	;volatile
  1571  04AE  082D               	movf	SetPoint@new_val+1,w
  1572  04AF  00D3               	movwf	_set_point+1	;volatile
  1573  04B0  3000               	movlw	0
  1574  04B1  1BD3               	btfsc	_set_point+1,7	;volatile
  1575  04B2  30FF               	movlw	255
  1576  04B3  00D4               	movwf	_set_point+2	;volatile
  1577  04B4  00D5               	movwf	_set_point+3	;volatile
  1578  04B5  0008               	return
  1579  04B6                     __end_of_SetPoint:	
  1580                           
  1581                           	psect	text6
  1582  053C                     __ptext6:	
  1583 ;; *************** function _getServoState *****************
  1584 ;; Defined at:
  1585 ;;		line 19 in file "servoController.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  2    0[BANK0 ] int 
  1592 ;; Registers used:
  1593 ;;		wreg, status,0
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1599 ;;      Params:         0       2       0       0       0
  1600 ;;      Locals:         0       0       0       0       0
  1601 ;;      Temps:          0       2       0       0       0
  1602 ;;      Totals:         0       4       0       0       0
  1603 ;;Total ram usage:        4 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _getServoState
  1615  053C                     _getServoState:	
  1616                           
  1617                           ;servoController.c: 20: return RC3;
  1618                           
  1619                           ;incstack = 0
  1620                           ; Regs used in _getServoState: [wreg+status,0]
  1621  053C  1003               	clrc
  1622  053D  1283               	bcf	3,5	;RP0=0, select bank0
  1623  053E  1303               	bcf	3,6	;RP1=0, select bank0
  1624  053F  1987               	btfsc	7,3	;volatile
  1625  0540  1403               	setc
  1626  0541  3000               	movlw	0
  1627  0542  1803               	skipnc
  1628  0543  3001               	movlw	1
  1629  0544  00A2               	movwf	??_getServoState
  1630  0545  01A3               	clrf	??_getServoState+1
  1631  0546  0822               	movf	??_getServoState,w
  1632  0547  00A0               	movwf	?_getServoState
  1633  0548  0823               	movf	??_getServoState+1,w
  1634  0549  00A1               	movwf	?_getServoState+1
  1635  054A  0008               	return
  1636  054B                     __end_of_getServoState:	
  1637                           
  1638                           	psect	text7
  1639  043B                     __ptext7:	
  1640 ;; *************** function _getServoCommand *****************
  1641 ;; Defined at:
  1642 ;;		line 23 in file "servoController.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2    0[BANK0 ] int 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         0       2       0       0       0
  1657 ;;      Locals:         0       0       0       0       0
  1658 ;;      Temps:          0       4       0       0       0
  1659 ;;      Totals:         0       6       0       0       0
  1660 ;;Total ram usage:        6 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    1
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           
  1671                           ;psect for function _getServoCommand
  1672  043B                     _getServoCommand:	
  1673                           
  1674                           ;servoController.c: 25: if (RC4 != lStep){
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _getServoCommand: [wreg+status,2+status,0]
  1678  043B  3000               	movlw	0
  1679  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1680  043D  1303               	bcf	3,6	;RP1=0, select bank0
  1681  043E  1A07               	btfsc	7,4	;volatile
  1682  043F  3001               	movlw	1
  1683  0440  0676               	xorwf	_lStep,w
  1684  0441  1903               	skipnz
  1685  0442  2C64               	goto	l2232
  1686                           
  1687                           ;servoController.c: 26: lStep = !lStep;
  1688  0443  0876               	movf	_lStep,w
  1689  0444  1D03               	btfss	3,2
  1690  0445  2C48               	goto	u1930
  1691  0446  3001               	movlw	1
  1692  0447  2C49               	goto	u1940
  1693  0448                     u1930:	
  1694  0448  3000               	movlw	0
  1695  0449                     u1940:	
  1696  0449  00A2               	movwf	??_getServoCommand
  1697  044A  0822               	movf	??_getServoCommand,w
  1698  044B  00F6               	movwf	_lStep
  1699                           
  1700                           ;servoController.c: 27: return ((2*RC5) - 1);
  1701  044C  1003               	clrc
  1702  044D  1A87               	btfsc	7,5	;volatile
  1703  044E  1403               	setc
  1704  044F  3000               	movlw	0
  1705  0450  1803               	skipnc
  1706  0451  3001               	movlw	1
  1707  0452  00A2               	movwf	??_getServoCommand
  1708  0453  01A3               	clrf	??_getServoCommand+1
  1709  0454  1003               	clrc
  1710  0455  0DA2               	rlf	??_getServoCommand,f
  1711  0456  0DA3               	rlf	??_getServoCommand+1,f
  1712  0457  0822               	movf	??_getServoCommand,w
  1713  0458  3EFF               	addlw	255
  1714  0459  00A4               	movwf	??_getServoCommand+2
  1715  045A  0823               	movf	??_getServoCommand+1,w
  1716  045B  1803               	skipnc
  1717  045C  3E01               	addlw	1
  1718  045D  3EFF               	addlw	255
  1719  045E  00A5               	movwf	??_getServoCommand+3
  1720  045F  0824               	movf	??_getServoCommand+2,w
  1721  0460  00A0               	movwf	?_getServoCommand
  1722  0461  0825               	movf	??_getServoCommand+3,w
  1723  0462  00A1               	movwf	?_getServoCommand+1
  1724  0463  0008               	return
  1725  0464                     l2232:	
  1726                           
  1727                           ;servoController.c: 29: return 0;
  1728  0464  01A0               	clrf	?_getServoCommand
  1729  0465  01A1               	clrf	?_getServoCommand+1
  1730  0466  0008               	return
  1731  0467                     __end_of_getServoCommand:	
  1732                           
  1733                           	psect	text8
  1734  0511                     __ptext8:	
  1735 ;; *************** function _encoders_init *****************
  1736 ;; Defined at:
  1737 ;;		line 205 in file "main.c"
  1738 ;; Parameters:    Size  Location     Type
  1739 ;;		None
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;		None
  1742 ;; Return value:  Size  Location     Type
  1743 ;;                  1    wreg      void 
  1744 ;; Registers used:
  1745 ;;		wreg, status,2, status,0
  1746 ;; Tracked objects:
  1747 ;;		On entry : 0/0
  1748 ;;		On exit  : 0/0
  1749 ;;		Unchanged: 0/0
  1750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1751 ;;      Params:         0       0       0       0       0
  1752 ;;      Locals:         0       0       0       0       0
  1753 ;;      Temps:          0       2       0       0       0
  1754 ;;      Totals:         0       2       0       0       0
  1755 ;;Total ram usage:        2 bytes
  1756 ;; Hardware stack levels used:    1
  1757 ;; Hardware stack levels required when called:    1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           
  1766                           ;psect for function _encoders_init
  1767  0511                     _encoders_init:	
  1768                           
  1769                           ;main.c: 208: state1 = (PORTB & 0b00011000) >>3;
  1770                           
  1771                           ;incstack = 0
  1772                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  1773  0511  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0512  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0513  0806               	movf	6,w	;volatile
  1776  0514  00A0               	movwf	??_encoders_init
  1777  0515  3003               	movlw	3
  1778  0516                     u1915:	
  1779  0516  1003               	clrc
  1780  0517  0CA0               	rrf	??_encoders_init,f
  1781  0518  3EFF               	addlw	-1
  1782  0519  1D03               	skipz
  1783  051A  2D16               	goto	u1915
  1784  051B  0820               	movf	??_encoders_init,w
  1785  051C  3903               	andlw	3
  1786  051D  00A1               	movwf	??_encoders_init+1
  1787  051E  0821               	movf	??_encoders_init+1,w
  1788  051F  00F8               	movwf	_state1	;volatile
  1789                           
  1790                           ;main.c: 209: encoder1_counter = 0;
  1791  0520  3000               	movlw	0
  1792  0521  00DD               	movwf	_encoder1_counter+3	;volatile
  1793  0522  3000               	movlw	0
  1794  0523  00DC               	movwf	_encoder1_counter+2	;volatile
  1795  0524  3000               	movlw	0
  1796  0525  00DB               	movwf	_encoder1_counter+1	;volatile
  1797  0526  3000               	movlw	0
  1798  0527  00DA               	movwf	_encoder1_counter	;volatile
  1799  0528  0008               	return
  1800  0529                     __end_of_encoders_init:	
  1801                           
  1802                           	psect	text9
  1803  0021                     __ptext9:	
  1804 ;; *************** function _SetMotor *****************
  1805 ;; Defined at:
  1806 ;;		line 89 in file "main.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  resp            4   46[BANK0 ] long 
  1811 ;;  err             2   44[BANK0 ] int 
  1812 ;;  D_Response      2   42[BANK0 ] int 
  1813 ;;  P_Response      2   40[BANK0 ] int 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1823 ;;      Params:         0       0       0       0       0
  1824 ;;      Locals:         0      10       0       0       0
  1825 ;;      Temps:          0       2       0       0       0
  1826 ;;      Totals:         0      12       0       0       0
  1827 ;;Total ram usage:       12 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    3
  1830 ;; This function calls:
  1831 ;;		___wmul
  1832 ;;		_constrain
  1833 ;;		_pwm_set
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function _SetMotor
  1841  0021                     _SetMotor:	
  1842                           
  1843                           ;main.c: 91: static int derivative;;main.c: 92: static int last_err;;main.c: 93: long re
      +                          sp;;main.c: 94: int err = set_point - motor_pos;
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1847  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1848  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1849  0023  0856               	movf	_motor_pos,w	;volatile
  1850  0024  0252               	subwf	_set_point,w	;volatile
  1851  0025  00CC               	movwf	SetMotor@err
  1852  0026  0857               	movf	_motor_pos+1,w	;volatile
  1853  0027  1C03               	skipc
  1854  0028  0A57               	incf	_motor_pos+1,w	;volatile
  1855  0029  0253               	subwf	_set_point+1,w	;volatile
  1856  002A  00CD               	movwf	SetMotor@err+1
  1857                           
  1858                           ;main.c: 96: derivative = (err - last_err);
  1859  002B  0860               	movf	SetMotor@last_err,w
  1860  002C  024C               	subwf	SetMotor@err,w
  1861  002D  00E3               	movwf	SetMotor@derivative
  1862  002E  0861               	movf	SetMotor@last_err+1,w
  1863  002F  1C03               	skipc
  1864  0030  0A61               	incf	SetMotor@last_err+1,w
  1865  0031  024D               	subwf	SetMotor@err+1,w
  1866  0032  00E4               	movwf	SetMotor@derivative+1
  1867                           
  1868                           ;main.c: 97: last_err = err;
  1869  0033  084D               	movf	SetMotor@err+1,w
  1870  0034  00E1               	movwf	SetMotor@last_err+1
  1871  0035  084C               	movf	SetMotor@err,w
  1872  0036  00E0               	movwf	SetMotor@last_err
  1873                           
  1874                           ;main.c: 99: int P_Response = 4 * err;
  1875  0037  084D               	movf	SetMotor@err+1,w
  1876  0038  00C7               	movwf	??_SetMotor+1
  1877  0039  084C               	movf	SetMotor@err,w
  1878  003A  00C6               	movwf	??_SetMotor
  1879  003B  1003               	clrc
  1880  003C  0DC6               	rlf	??_SetMotor,f
  1881  003D  0DC7               	rlf	??_SetMotor+1,f
  1882  003E  1003               	clrc
  1883  003F  0DC6               	rlf	??_SetMotor,f
  1884  0040  0DC7               	rlf	??_SetMotor+1,f
  1885  0041  0846               	movf	??_SetMotor,w
  1886  0042  00C8               	movwf	SetMotor@P_Response
  1887  0043  0847               	movf	??_SetMotor+1,w
  1888  0044  00C9               	movwf	SetMotor@P_Response+1
  1889                           
  1890                           ;main.c: 100: int D_Response = (13 * derivative);
  1891  0045  0864               	movf	SetMotor@derivative+1,w
  1892  0046  00A7               	movwf	___wmul@multiplier+1
  1893  0047  0863               	movf	SetMotor@derivative,w
  1894  0048  00A6               	movwf	___wmul@multiplier
  1895  0049  300D               	movlw	13
  1896  004A  00A8               	movwf	___wmul@multiplicand
  1897  004B  3000               	movlw	0
  1898  004C  00A9               	movwf	___wmul@multiplicand+1
  1899  004D  120A  118A  24B6  120A  118A  	fcall	___wmul
  1900  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0054  0827               	movf	?___wmul+1,w
  1903  0055  00CB               	movwf	SetMotor@D_Response+1
  1904  0056  0826               	movf	?___wmul,w
  1905  0057  00CA               	movwf	SetMotor@D_Response
  1906                           
  1907                           ;main.c: 102: resp = P_Response + D_Response;
  1908  0058  084A               	movf	SetMotor@D_Response,w
  1909  0059  0748               	addwf	SetMotor@P_Response,w
  1910  005A  00CE               	movwf	SetMotor@resp
  1911  005B  084B               	movf	SetMotor@D_Response+1,w
  1912  005C  1803               	skipnc
  1913  005D  0A4B               	incf	SetMotor@D_Response+1,w
  1914  005E  0749               	addwf	SetMotor@P_Response+1,w
  1915  005F  00CF               	movwf	SetMotor@resp+1
  1916  0060  01D0               	clrf	SetMotor@resp+2
  1917  0061  1BCF               	btfsc	SetMotor@resp+1,7
  1918  0062  03D0               	decf	SetMotor@resp+2,f
  1919  0063  0850               	movf	SetMotor@resp+2,w
  1920  0064  00D1               	movwf	SetMotor@resp+3
  1921                           
  1922                           ;main.c: 104: resp = constrain(resp, -255,255 );
  1923  0065  0851               	movf	SetMotor@resp+3,w
  1924  0066  00A3               	movwf	constrain@value+3
  1925  0067  0850               	movf	SetMotor@resp+2,w
  1926  0068  00A2               	movwf	constrain@value+2
  1927  0069  084F               	movf	SetMotor@resp+1,w
  1928  006A  00A1               	movwf	constrain@value+1
  1929  006B  084E               	movf	SetMotor@resp,w
  1930  006C  00A0               	movwf	constrain@value
  1931  006D  30FF               	movlw	255
  1932  006E  00A7               	movwf	constrain@lLimit+3
  1933  006F  30FF               	movlw	255
  1934  0070  00A6               	movwf	constrain@lLimit+2
  1935  0071  30FF               	movlw	255
  1936  0072  00A5               	movwf	constrain@lLimit+1
  1937  0073  3001               	movlw	1
  1938  0074  00A4               	movwf	constrain@lLimit
  1939  0075  3000               	movlw	0
  1940  0076  00AB               	movwf	constrain@uLimit+3
  1941  0077  3000               	movlw	0
  1942  0078  00AA               	movwf	constrain@uLimit+2
  1943  0079  3000               	movlw	0
  1944  007A  00A9               	movwf	constrain@uLimit+1
  1945  007B  30FF               	movlw	255
  1946  007C  00A8               	movwf	constrain@uLimit
  1947  007D  120A  118A  23CB  120A  118A  	fcall	_constrain
  1948  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1949  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0084  0823               	movf	?_constrain+3,w
  1951  0085  00D1               	movwf	SetMotor@resp+3
  1952  0086  0822               	movf	?_constrain+2,w
  1953  0087  00D0               	movwf	SetMotor@resp+2
  1954  0088  0821               	movf	?_constrain+1,w
  1955  0089  00CF               	movwf	SetMotor@resp+1
  1956  008A  0820               	movf	?_constrain,w
  1957  008B  00CE               	movwf	SetMotor@resp
  1958                           
  1959                           ;main.c: 105: if (resp > 0){
  1960  008C  1BD1               	btfsc	SetMotor@resp+3,7
  1961  008D  28C0               	goto	l278
  1962  008E  0851               	movf	SetMotor@resp+3,w
  1963  008F  1D03               	btfss	3,2
  1964  0090  289D               	goto	l2204
  1965  0091  0850               	movf	SetMotor@resp+2,w
  1966  0092  1D03               	btfss	3,2
  1967  0093  289D               	goto	l2204
  1968  0094  084F               	movf	SetMotor@resp+1,w
  1969  0095  1D03               	btfss	3,2
  1970  0096  289D               	goto	l2204
  1971  0097  3001               	movlw	1
  1972  0098  024E               	subwf	SetMotor@resp,w
  1973  0099  1D03               	skipz
  1974  009A  289B               	goto	u1893
  1975  009B                     u1893:	
  1976  009B  1C03               	btfss	3,0
  1977  009C  28C0               	goto	l278
  1978  009D                     l2204:	
  1979                           
  1980                           ;main.c: 106: pwm_set(1, resp );
  1981  009D  3001               	movlw	1
  1982  009E  00BC               	movwf	pwm_set@channel
  1983  009F  3000               	movlw	0
  1984  00A0  00BD               	movwf	pwm_set@channel+1
  1985  00A1  0851               	movf	SetMotor@resp+3,w
  1986  00A2  00C1               	movwf	pwm_set@duty_cycle+3
  1987  00A3  0850               	movf	SetMotor@resp+2,w
  1988  00A4  00C0               	movwf	pwm_set@duty_cycle+2
  1989  00A5  084F               	movf	SetMotor@resp+1,w
  1990  00A6  00BF               	movwf	pwm_set@duty_cycle+1
  1991  00A7  084E               	movf	SetMotor@resp,w
  1992  00A8  00BE               	movwf	pwm_set@duty_cycle
  1993  00A9  120A  118A  2309  120A  118A  	fcall	_pwm_set
  1994                           
  1995                           ;main.c: 107: pwm_set(2, 0 );
  1996  00AE  3002               	movlw	2
  1997  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  1998  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  1999  00B1  00BC               	movwf	pwm_set@channel
  2000  00B2  3000               	movlw	0
  2001  00B3  00BD               	movwf	pwm_set@channel+1
  2002  00B4  3000               	movlw	0
  2003  00B5  00C1               	movwf	pwm_set@duty_cycle+3
  2004  00B6  3000               	movlw	0
  2005  00B7  00C0               	movwf	pwm_set@duty_cycle+2
  2006  00B8  3000               	movlw	0
  2007  00B9  00BF               	movwf	pwm_set@duty_cycle+1
  2008  00BA  3000               	movlw	0
  2009  00BB  00BE               	movwf	pwm_set@duty_cycle
  2010  00BC  120A  118A  2309   	fcall	_pwm_set
  2011                           
  2012                           ;main.c: 108: }else if(resp < 0){
  2013  00BF  0008               	return
  2014  00C0                     l278:	
  2015  00C0  1FD1               	btfss	SetMotor@resp+3,7
  2016  00C1  28EC               	goto	l2208
  2017                           
  2018                           ;main.c: 109: pwm_set(1, 0 );
  2019  00C2  3001               	movlw	1
  2020  00C3  00BC               	movwf	pwm_set@channel
  2021  00C4  3000               	movlw	0
  2022  00C5  00BD               	movwf	pwm_set@channel+1
  2023  00C6  3000               	movlw	0
  2024  00C7  00C1               	movwf	pwm_set@duty_cycle+3
  2025  00C8  3000               	movlw	0
  2026  00C9  00C0               	movwf	pwm_set@duty_cycle+2
  2027  00CA  3000               	movlw	0
  2028  00CB  00BF               	movwf	pwm_set@duty_cycle+1
  2029  00CC  3000               	movlw	0
  2030  00CD  00BE               	movwf	pwm_set@duty_cycle
  2031  00CE  120A  118A  2309  120A  118A  	fcall	_pwm_set
  2032                           
  2033                           ;main.c: 110: pwm_set(2, -resp );
  2034  00D3  3002               	movlw	2
  2035  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  2036  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  2037  00D6  00BC               	movwf	pwm_set@channel
  2038  00D7  3000               	movlw	0
  2039  00D8  00BD               	movwf	pwm_set@channel+1
  2040  00D9  094E               	comf	SetMotor@resp,w
  2041  00DA  00BE               	movwf	pwm_set@duty_cycle
  2042  00DB  094F               	comf	SetMotor@resp+1,w
  2043  00DC  00BF               	movwf	pwm_set@duty_cycle+1
  2044  00DD  0950               	comf	SetMotor@resp+2,w
  2045  00DE  00C0               	movwf	pwm_set@duty_cycle+2
  2046  00DF  0951               	comf	SetMotor@resp+3,w
  2047  00E0  00C1               	movwf	pwm_set@duty_cycle+3
  2048  00E1  0ABE               	incf	pwm_set@duty_cycle,f
  2049  00E2  1903               	skipnz
  2050  00E3  0ABF               	incf	pwm_set@duty_cycle+1,f
  2051  00E4  1903               	skipnz
  2052  00E5  0AC0               	incf	pwm_set@duty_cycle+2,f
  2053  00E6  1903               	skipnz
  2054  00E7  0AC1               	incf	pwm_set@duty_cycle+3,f
  2055  00E8  120A  118A  2309   	fcall	_pwm_set
  2056                           
  2057                           ;main.c: 111: }else{
  2058  00EB  0008               	return
  2059  00EC                     l2208:	
  2060                           
  2061                           ;main.c: 112: pwm_set(1, 0 );
  2062  00EC  3001               	movlw	1
  2063  00ED  00BC               	movwf	pwm_set@channel
  2064  00EE  3000               	movlw	0
  2065  00EF  00BD               	movwf	pwm_set@channel+1
  2066  00F0  3000               	movlw	0
  2067  00F1  00C1               	movwf	pwm_set@duty_cycle+3
  2068  00F2  3000               	movlw	0
  2069  00F3  00C0               	movwf	pwm_set@duty_cycle+2
  2070  00F4  3000               	movlw	0
  2071  00F5  00BF               	movwf	pwm_set@duty_cycle+1
  2072  00F6  3000               	movlw	0
  2073  00F7  00BE               	movwf	pwm_set@duty_cycle
  2074  00F8  120A  118A  2309  120A  118A  	fcall	_pwm_set
  2075                           
  2076                           ;main.c: 113: pwm_set(2, 0 );
  2077  00FD  3002               	movlw	2
  2078  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2079  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0100  00BC               	movwf	pwm_set@channel
  2081  0101  3000               	movlw	0
  2082  0102  00BD               	movwf	pwm_set@channel+1
  2083  0103  3000               	movlw	0
  2084  0104  00C1               	movwf	pwm_set@duty_cycle+3
  2085  0105  3000               	movlw	0
  2086  0106  00C0               	movwf	pwm_set@duty_cycle+2
  2087  0107  3000               	movlw	0
  2088  0108  00BF               	movwf	pwm_set@duty_cycle+1
  2089  0109  3000               	movlw	0
  2090  010A  00BE               	movwf	pwm_set@duty_cycle
  2091  010B  120A  118A  2309   	fcall	_pwm_set
  2092  010E  0008               	return
  2093  010F                     __end_of_SetMotor:	
  2094                           
  2095                           	psect	text10
  2096  0309                     __ptext10:	
  2097 ;; *************** function _pwm_set *****************
  2098 ;; Defined at:
  2099 ;;		line 72 in file "pwm.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;  channel         2   28[BANK0 ] int 
  2102 ;;  duty_cycle      4   30[BANK0 ] long 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;		None
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      void 
  2107 ;; Registers used:
  2108 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2114 ;;      Params:         0       6       0       0       0
  2115 ;;      Locals:         0       0       0       0       0
  2116 ;;      Temps:          0       4       0       0       0
  2117 ;;      Totals:         0      10       0       0       0
  2118 ;;Total ram usage:       10 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    2
  2121 ;; This function calls:
  2122 ;;		___aldiv
  2123 ;;		___lmul
  2124 ;; This function is called by:
  2125 ;;		_SetMotor
  2126 ;;		_motor_reset
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           
  2132                           ;psect for function _pwm_set
  2133  0309                     _pwm_set:	
  2134                           
  2135                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  2136                           
  2137                           ;incstack = 0
  2138                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2139  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2140  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2141  030B  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  2142  030C  0008               	return
  2143  030D  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  2144  030E  2B1F               	goto	l2098
  2145  030F  0841               	movf	pwm_set@duty_cycle+3,w
  2146  0310  1D03               	btfss	3,2
  2147  0311  0008               	return
  2148  0312  0840               	movf	pwm_set@duty_cycle+2,w
  2149  0313  1D03               	btfss	3,2
  2150  0314  0008               	return
  2151  0315  3001               	movlw	1
  2152  0316  023F               	subwf	pwm_set@duty_cycle+1,w
  2153  0317  1D03               	skipz
  2154  0318  2B1D               	goto	u1793
  2155  0319  3000               	movlw	0
  2156  031A  023E               	subwf	pwm_set@duty_cycle,w
  2157  031B  1D03               	skipz
  2158  031C  2B1D               	goto	u1793
  2159  031D                     u1793:	
  2160  031D  1803               	btfsc	3,0
  2161  031E  0008               	return
  2162  031F                     l2098:	
  2163                           
  2164                           ;pwm.c: 77: if (duty_cycle !=0){
  2165  031F  0841               	movf	pwm_set@duty_cycle+3,w
  2166  0320  0440               	iorwf	pwm_set@duty_cycle+2,w
  2167  0321  043F               	iorwf	pwm_set@duty_cycle+1,w
  2168  0322  043E               	iorwf	pwm_set@duty_cycle,w
  2169  0323  1903               	skipnz
  2170  0324  2B7C               	goto	l2108
  2171                           
  2172                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  2173  0325  3020               	movlw	32
  2174  0326  00C2               	movwf	??_pwm_set
  2175  0327  3000               	movlw	0
  2176  0328  00C3               	movwf	??_pwm_set+1
  2177  0329  3000               	movlw	0
  2178  032A  00C4               	movwf	??_pwm_set+2
  2179  032B  3000               	movlw	0
  2180  032C  00C5               	movwf	??_pwm_set+3
  2181  032D  3000               	movlw	0
  2182  032E  00B0               	movwf	___aldiv@divisor+3
  2183  032F  3000               	movlw	0
  2184  0330  00AF               	movwf	___aldiv@divisor+2
  2185  0331  3000               	movlw	0
  2186  0332  00AE               	movwf	___aldiv@divisor+1
  2187  0333  30FF               	movlw	255
  2188  0334  00AD               	movwf	___aldiv@divisor
  2189  0335  0841               	movf	pwm_set@duty_cycle+3,w
  2190  0336  00A3               	movwf	___lmul@multiplier+3
  2191  0337  0840               	movf	pwm_set@duty_cycle+2,w
  2192  0338  00A2               	movwf	___lmul@multiplier+2
  2193  0339  083F               	movf	pwm_set@duty_cycle+1,w
  2194  033A  00A1               	movwf	___lmul@multiplier+1
  2195  033B  083E               	movf	pwm_set@duty_cycle,w
  2196  033C  00A0               	movwf	___lmul@multiplier
  2197  033D  3000               	movlw	0
  2198  033E  00A7               	movwf	___lmul@multiplicand+3
  2199  033F  3000               	movlw	0
  2200  0340  00A6               	movwf	___lmul@multiplicand+2
  2201  0341  3000               	movlw	0
  2202  0342  00A5               	movwf	___lmul@multiplicand+1
  2203  0343  30DF               	movlw	223
  2204  0344  00A4               	movwf	___lmul@multiplicand
  2205  0345  120A  118A  238A  120A  118A  	fcall	___lmul
  2206  034A  1283               	bcf	3,5	;RP0=0, select bank0
  2207  034B  1303               	bcf	3,6	;RP1=0, select bank0
  2208  034C  0823               	movf	?___lmul+3,w
  2209  034D  00B4               	movwf	___aldiv@dividend+3
  2210  034E  0822               	movf	?___lmul+2,w
  2211  034F  00B3               	movwf	___aldiv@dividend+2
  2212  0350  0821               	movf	?___lmul+1,w
  2213  0351  00B2               	movwf	___aldiv@dividend+1
  2214  0352  0820               	movf	?___lmul,w
  2215  0353  00B1               	movwf	___aldiv@dividend
  2216  0354  120A  118A  227A  120A  118A  	fcall	___aldiv
  2217  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2218  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2219  035B  082D               	movf	?___aldiv,w
  2220  035C  07C2               	addwf	??_pwm_set,f
  2221  035D  082E               	movf	?___aldiv+1,w
  2222  035E  1803               	skipnc
  2223  035F  0F2E               	incfsz	?___aldiv+1,w
  2224  0360  2B62               	goto	u1810
  2225  0361  2B63               	goto	u1811
  2226  0362                     u1810:	
  2227  0362  07C3               	addwf	??_pwm_set+1,f
  2228  0363                     u1811:	
  2229  0363  082F               	movf	?___aldiv+2,w
  2230  0364  1803               	skipnc
  2231  0365  0F2F               	incfsz	?___aldiv+2,w
  2232  0366  2B68               	goto	u1812
  2233  0367  2B69               	goto	u1813
  2234  0368                     u1812:	
  2235  0368  07C4               	addwf	??_pwm_set+2,f
  2236  0369                     u1813:	
  2237  0369  0830               	movf	?___aldiv+3,w
  2238  036A  1803               	skipnc
  2239  036B  0A30               	incf	?___aldiv+3,w
  2240  036C  07C5               	addwf	??_pwm_set+3,f
  2241  036D  0845               	movf	??_pwm_set+3,w
  2242  036E  00C1               	movwf	pwm_set@duty_cycle+3
  2243  036F  0844               	movf	??_pwm_set+2,w
  2244  0370  00C0               	movwf	pwm_set@duty_cycle+2
  2245  0371  0843               	movf	??_pwm_set+1,w
  2246  0372  00BF               	movwf	pwm_set@duty_cycle+1
  2247  0373  0842               	movf	??_pwm_set,w
  2248  0374  00BE               	movwf	pwm_set@duty_cycle
  2249  0375  2B7C               	goto	l2108
  2250  0376                     l2102:	
  2251                           
  2252                           ;pwm.c: 82: CCPR1L = duty_cycle;
  2253  0376  083E               	movf	pwm_set@duty_cycle,w
  2254  0377  0095               	movwf	21	;volatile
  2255                           
  2256                           ;pwm.c: 83: break;
  2257  0378  0008               	return
  2258  0379                     l2104:	
  2259                           
  2260                           ;pwm.c: 85: CCPR2L = duty_cycle;
  2261  0379  083E               	movf	pwm_set@duty_cycle,w
  2262  037A  009B               	movwf	27	;volatile
  2263                           
  2264                           ;pwm.c: 86: break;
  2265  037B  0008               	return
  2266  037C                     l2108:	
  2267                           
  2268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2269                           ; Switch size 1, requested type "simple"
  2270                           ; Number of cases is 1, Range of values is 0 to 0
  2271                           ; switch strategies available:
  2272                           ; Name         Instructions Cycles
  2273                           ; simple_byte            4     3 (average)
  2274                           ; direct_byte           11     8 (fixed)
  2275                           ; jumptable            260     6 (fixed)
  2276                           ;	Chosen strategy is simple_byte
  2277  037C  083D               	movf	pwm_set@channel+1,w
  2278  037D  3A00               	xorlw	0	; case 0
  2279  037E  1903               	skipnz
  2280  037F  2B81               	goto	l2390
  2281  0380  2B89               	goto	l182
  2282  0381                     l2390:	
  2283                           
  2284                           ; Switch size 1, requested type "simple"
  2285                           ; Number of cases is 2, Range of values is 1 to 2
  2286                           ; switch strategies available:
  2287                           ; Name         Instructions Cycles
  2288                           ; simple_byte            7     4 (average)
  2289                           ; direct_byte           17    11 (fixed)
  2290                           ; jumptable            263     9 (fixed)
  2291                           ;	Chosen strategy is simple_byte
  2292  0381  083C               	movf	pwm_set@channel,w
  2293  0382  3A01               	xorlw	1	; case 1
  2294  0383  1903               	skipnz
  2295  0384  2B76               	goto	l2102
  2296  0385  3A03               	xorlw	3	; case 2
  2297  0386  1903               	skipnz
  2298  0387  2B79               	goto	l2104
  2299  0388  2B89               	goto	l182
  2300  0389                     l182:	
  2301  0389  0008               	return
  2302  038A                     __end_of_pwm_set:	
  2303                           
  2304                           	psect	text11
  2305  038A                     __ptext11:	
  2306 ;; *************** function ___lmul *****************
  2307 ;; Defined at:
  2308 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2311 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  product         4    9[BANK0 ] unsigned long 
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  4    0[BANK0 ] unsigned long 
  2316 ;; Registers used:
  2317 ;;		wreg, status,2, status,0
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2323 ;;      Params:         0       8       0       0       0
  2324 ;;      Locals:         0       4       0       0       0
  2325 ;;      Temps:          0       1       0       0       0
  2326 ;;      Totals:         0      13       0       0       0
  2327 ;;Total ram usage:       13 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    1
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_pwm_set
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           
  2338                           ;psect for function ___lmul
  2339  038A                     ___lmul:	
  2340                           
  2341                           ;incstack = 0
  2342                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2343  038A  3000               	movlw	0
  2344  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2345  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2346  038D  00AC               	movwf	___lmul@product+3
  2347  038E  3000               	movlw	0
  2348  038F  00AB               	movwf	___lmul@product+2
  2349  0390  3000               	movlw	0
  2350  0391  00AA               	movwf	___lmul@product+1
  2351  0392  3000               	movlw	0
  2352  0393  00A9               	movwf	___lmul@product
  2353  0394                     l2042:	
  2354  0394  1C20               	btfss	___lmul@multiplier,0
  2355  0395  2BAA               	goto	l2046
  2356  0396  0824               	movf	___lmul@multiplicand,w
  2357  0397  07A9               	addwf	___lmul@product,f
  2358  0398  0825               	movf	___lmul@multiplicand+1,w
  2359  0399  1103               	clrz
  2360  039A  1803               	skipnc
  2361  039B  3E01               	addlw	1
  2362  039C  1D03               	btfss	3,2
  2363  039D  07AA               	addwf	___lmul@product+1,f
  2364  039E  0826               	movf	___lmul@multiplicand+2,w
  2365  039F  1103               	clrz
  2366  03A0  1803               	skipnc
  2367  03A1  3E01               	addlw	1
  2368  03A2  1D03               	btfss	3,2
  2369  03A3  07AB               	addwf	___lmul@product+2,f
  2370  03A4  0827               	movf	___lmul@multiplicand+3,w
  2371  03A5  1103               	clrz
  2372  03A6  1803               	skipnc
  2373  03A7  3E01               	addlw	1
  2374  03A8  1D03               	btfss	3,2
  2375  03A9  07AC               	addwf	___lmul@product+3,f
  2376  03AA                     l2046:	
  2377  03AA  3001               	movlw	1
  2378  03AB  00A8               	movwf	??___lmul
  2379  03AC                     u1655:	
  2380  03AC  1003               	clrc
  2381  03AD  0DA4               	rlf	___lmul@multiplicand,f
  2382  03AE  0DA5               	rlf	___lmul@multiplicand+1,f
  2383  03AF  0DA6               	rlf	___lmul@multiplicand+2,f
  2384  03B0  0DA7               	rlf	___lmul@multiplicand+3,f
  2385  03B1  0BA8               	decfsz	??___lmul,f
  2386  03B2  2BAC               	goto	u1655
  2387  03B3  3001               	movlw	1
  2388  03B4                     u1665:	
  2389  03B4  1003               	clrc
  2390  03B5  0CA3               	rrf	___lmul@multiplier+3,f
  2391  03B6  0CA2               	rrf	___lmul@multiplier+2,f
  2392  03B7  0CA1               	rrf	___lmul@multiplier+1,f
  2393  03B8  0CA0               	rrf	___lmul@multiplier,f
  2394  03B9  3EFF               	addlw	-1
  2395  03BA  1D03               	skipz
  2396  03BB  2BB4               	goto	u1665
  2397  03BC  0823               	movf	___lmul@multiplier+3,w
  2398  03BD  0422               	iorwf	___lmul@multiplier+2,w
  2399  03BE  0421               	iorwf	___lmul@multiplier+1,w
  2400  03BF  0420               	iorwf	___lmul@multiplier,w
  2401  03C0  1D03               	skipz
  2402  03C1  2B94               	goto	l2042
  2403  03C2  082C               	movf	___lmul@product+3,w
  2404  03C3  00A3               	movwf	?___lmul+3
  2405  03C4  082B               	movf	___lmul@product+2,w
  2406  03C5  00A2               	movwf	?___lmul+2
  2407  03C6  082A               	movf	___lmul@product+1,w
  2408  03C7  00A1               	movwf	?___lmul+1
  2409  03C8  0829               	movf	___lmul@product,w
  2410  03C9  00A0               	movwf	?___lmul
  2411  03CA  0008               	return
  2412  03CB                     __end_of___lmul:	
  2413                           
  2414                           	psect	text12
  2415  027A                     __ptext12:	
  2416 ;; *************** function ___aldiv *****************
  2417 ;; Defined at:
  2418 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  divisor         4   13[BANK0 ] long 
  2421 ;;  dividend        4   17[BANK0 ] long 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  quotient        4   24[BANK0 ] long 
  2424 ;;  sign            1   23[BANK0 ] unsigned char 
  2425 ;;  counter         1   22[BANK0 ] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  4   13[BANK0 ] long 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         0       8       0       0       0
  2436 ;;      Locals:         0       6       0       0       0
  2437 ;;      Temps:          0       1       0       0       0
  2438 ;;      Totals:         0      15       0       0       0
  2439 ;;Total ram usage:       15 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_pwm_set
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           
  2450                           ;psect for function ___aldiv
  2451  027A                     ___aldiv:	
  2452                           
  2453                           ;incstack = 0
  2454                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2455  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2456  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2457  027C  01B7               	clrf	___aldiv@sign
  2458  027D  1FB0               	btfss	___aldiv@divisor+3,7
  2459  027E  2A8C               	goto	l539
  2460  027F  09AD               	comf	___aldiv@divisor,f
  2461  0280  09AE               	comf	___aldiv@divisor+1,f
  2462  0281  09AF               	comf	___aldiv@divisor+2,f
  2463  0282  09B0               	comf	___aldiv@divisor+3,f
  2464  0283  0AAD               	incf	___aldiv@divisor,f
  2465  0284  1903               	skipnz
  2466  0285  0AAE               	incf	___aldiv@divisor+1,f
  2467  0286  1903               	skipnz
  2468  0287  0AAF               	incf	___aldiv@divisor+2,f
  2469  0288  1903               	skipnz
  2470  0289  0AB0               	incf	___aldiv@divisor+3,f
  2471  028A  01B7               	clrf	___aldiv@sign
  2472  028B  0AB7               	incf	___aldiv@sign,f
  2473  028C                     l539:	
  2474  028C  1FB4               	btfss	___aldiv@dividend+3,7
  2475  028D  2A9D               	goto	l2064
  2476  028E  09B1               	comf	___aldiv@dividend,f
  2477  028F  09B2               	comf	___aldiv@dividend+1,f
  2478  0290  09B3               	comf	___aldiv@dividend+2,f
  2479  0291  09B4               	comf	___aldiv@dividend+3,f
  2480  0292  0AB1               	incf	___aldiv@dividend,f
  2481  0293  1903               	skipnz
  2482  0294  0AB2               	incf	___aldiv@dividend+1,f
  2483  0295  1903               	skipnz
  2484  0296  0AB3               	incf	___aldiv@dividend+2,f
  2485  0297  1903               	skipnz
  2486  0298  0AB4               	incf	___aldiv@dividend+3,f
  2487  0299  3001               	movlw	1
  2488  029A  00B5               	movwf	??___aldiv
  2489  029B  0835               	movf	??___aldiv,w
  2490  029C  06B7               	xorwf	___aldiv@sign,f
  2491  029D                     l2064:	
  2492  029D  3000               	movlw	0
  2493  029E  00BB               	movwf	___aldiv@quotient+3
  2494  029F  3000               	movlw	0
  2495  02A0  00BA               	movwf	___aldiv@quotient+2
  2496  02A1  3000               	movlw	0
  2497  02A2  00B9               	movwf	___aldiv@quotient+1
  2498  02A3  3000               	movlw	0
  2499  02A4  00B8               	movwf	___aldiv@quotient
  2500  02A5  0830               	movf	___aldiv@divisor+3,w
  2501  02A6  042F               	iorwf	___aldiv@divisor+2,w
  2502  02A7  042E               	iorwf	___aldiv@divisor+1,w
  2503  02A8  042D               	iorwf	___aldiv@divisor,w
  2504  02A9  1903               	skipnz
  2505  02AA  2AF2               	goto	l2086
  2506  02AB  01B6               	clrf	___aldiv@counter
  2507  02AC  0AB6               	incf	___aldiv@counter,f
  2508  02AD                     l2072:	
  2509  02AD  1BB0               	btfsc	___aldiv@divisor+3,7
  2510  02AE  2ABD               	goto	l2074
  2511  02AF  3001               	movlw	1
  2512  02B0  00B5               	movwf	??___aldiv
  2513  02B1                     u1715:	
  2514  02B1  1003               	clrc
  2515  02B2  0DAD               	rlf	___aldiv@divisor,f
  2516  02B3  0DAE               	rlf	___aldiv@divisor+1,f
  2517  02B4  0DAF               	rlf	___aldiv@divisor+2,f
  2518  02B5  0DB0               	rlf	___aldiv@divisor+3,f
  2519  02B6  0BB5               	decfsz	??___aldiv,f
  2520  02B7  2AB1               	goto	u1715
  2521  02B8  3001               	movlw	1
  2522  02B9  00B5               	movwf	??___aldiv
  2523  02BA  0835               	movf	??___aldiv,w
  2524  02BB  07B6               	addwf	___aldiv@counter,f
  2525  02BC  2AAD               	goto	l2072
  2526  02BD                     l2074:	
  2527  02BD  3001               	movlw	1
  2528  02BE  00B5               	movwf	??___aldiv
  2529  02BF                     u1735:	
  2530  02BF  1003               	clrc
  2531  02C0  0DB8               	rlf	___aldiv@quotient,f
  2532  02C1  0DB9               	rlf	___aldiv@quotient+1,f
  2533  02C2  0DBA               	rlf	___aldiv@quotient+2,f
  2534  02C3  0DBB               	rlf	___aldiv@quotient+3,f
  2535  02C4  0BB5               	decfsz	??___aldiv,f
  2536  02C5  2ABF               	goto	u1735
  2537  02C6  0830               	movf	___aldiv@divisor+3,w
  2538  02C7  0234               	subwf	___aldiv@dividend+3,w
  2539  02C8  1D03               	skipz
  2540  02C9  2AD4               	goto	u1745
  2541  02CA  082F               	movf	___aldiv@divisor+2,w
  2542  02CB  0233               	subwf	___aldiv@dividend+2,w
  2543  02CC  1D03               	skipz
  2544  02CD  2AD4               	goto	u1745
  2545  02CE  082E               	movf	___aldiv@divisor+1,w
  2546  02CF  0232               	subwf	___aldiv@dividend+1,w
  2547  02D0  1D03               	skipz
  2548  02D1  2AD4               	goto	u1745
  2549  02D2  082D               	movf	___aldiv@divisor,w
  2550  02D3  0231               	subwf	___aldiv@dividend,w
  2551  02D4                     u1745:	
  2552  02D4  1C03               	skipc
  2553  02D5  2AE5               	goto	l2082
  2554  02D6  082D               	movf	___aldiv@divisor,w
  2555  02D7  02B1               	subwf	___aldiv@dividend,f
  2556  02D8  082E               	movf	___aldiv@divisor+1,w
  2557  02D9  1C03               	skipc
  2558  02DA  0F2E               	incfsz	___aldiv@divisor+1,w
  2559  02DB  02B2               	subwf	___aldiv@dividend+1,f
  2560  02DC  082F               	movf	___aldiv@divisor+2,w
  2561  02DD  1C03               	skipc
  2562  02DE  0F2F               	incfsz	___aldiv@divisor+2,w
  2563  02DF  02B3               	subwf	___aldiv@dividend+2,f
  2564  02E0  0830               	movf	___aldiv@divisor+3,w
  2565  02E1  1C03               	skipc
  2566  02E2  0F30               	incfsz	___aldiv@divisor+3,w
  2567  02E3  02B4               	subwf	___aldiv@dividend+3,f
  2568  02E4  1438               	bsf	___aldiv@quotient,0
  2569  02E5                     l2082:	
  2570  02E5  3001               	movlw	1
  2571  02E6                     u1755:	
  2572  02E6  1003               	clrc
  2573  02E7  0CB0               	rrf	___aldiv@divisor+3,f
  2574  02E8  0CAF               	rrf	___aldiv@divisor+2,f
  2575  02E9  0CAE               	rrf	___aldiv@divisor+1,f
  2576  02EA  0CAD               	rrf	___aldiv@divisor,f
  2577  02EB  3EFF               	addlw	-1
  2578  02EC  1D03               	skipz
  2579  02ED  2AE6               	goto	u1755
  2580  02EE  3001               	movlw	1
  2581  02EF  02B6               	subwf	___aldiv@counter,f
  2582  02F0  1D03               	btfss	3,2
  2583  02F1  2ABD               	goto	l2074
  2584  02F2                     l2086:	
  2585  02F2  0837               	movf	___aldiv@sign,w
  2586  02F3  1903               	btfsc	3,2
  2587  02F4  2B00               	goto	l2090
  2588  02F5  09B8               	comf	___aldiv@quotient,f
  2589  02F6  09B9               	comf	___aldiv@quotient+1,f
  2590  02F7  09BA               	comf	___aldiv@quotient+2,f
  2591  02F8  09BB               	comf	___aldiv@quotient+3,f
  2592  02F9  0AB8               	incf	___aldiv@quotient,f
  2593  02FA  1903               	skipnz
  2594  02FB  0AB9               	incf	___aldiv@quotient+1,f
  2595  02FC  1903               	skipnz
  2596  02FD  0ABA               	incf	___aldiv@quotient+2,f
  2597  02FE  1903               	skipnz
  2598  02FF  0ABB               	incf	___aldiv@quotient+3,f
  2599  0300                     l2090:	
  2600  0300  083B               	movf	___aldiv@quotient+3,w
  2601  0301  00B0               	movwf	?___aldiv+3
  2602  0302  083A               	movf	___aldiv@quotient+2,w
  2603  0303  00AF               	movwf	?___aldiv+2
  2604  0304  0839               	movf	___aldiv@quotient+1,w
  2605  0305  00AE               	movwf	?___aldiv+1
  2606  0306  0838               	movf	___aldiv@quotient,w
  2607  0307  00AD               	movwf	?___aldiv
  2608  0308  0008               	return
  2609  0309                     __end_of___aldiv:	
  2610                           
  2611                           	psect	text13
  2612  03CB                     __ptext13:	
  2613 ;; *************** function _constrain *****************
  2614 ;; Defined at:
  2615 ;;		line 71 in file "main.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  value           4    0[BANK0 ] long 
  2618 ;;  lLimit          4    4[BANK0 ] long 
  2619 ;;  uLimit          4    8[BANK0 ] long 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  4    0[BANK0 ] long 
  2624 ;; Registers used:
  2625 ;;		wreg, btemp+1
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2631 ;;      Params:         0      12       0       0       0
  2632 ;;      Locals:         0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0
  2634 ;;      Totals:         0      12       0       0       0
  2635 ;;Total ram usage:       12 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_SetMotor
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function _constrain
  2647  03CB                     _constrain:	
  2648                           
  2649                           ;main.c: 72: if (value > uLimit){
  2650                           
  2651                           ;incstack = 0
  2652                           ; Regs used in _constrain: [wreg+btemp+1]
  2653  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2654  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  2655  03CD  082B               	movf	constrain@uLimit+3,w
  2656  03CE  3A80               	xorlw	128
  2657  03CF  00FF               	movwf	127
  2658  03D0  0823               	movf	constrain@value+3,w
  2659  03D1  3A80               	xorlw	128
  2660  03D2  027F               	subwf	127,w
  2661  03D3  1D03               	skipz
  2662  03D4  2BDF               	goto	u1823
  2663  03D5  0822               	movf	constrain@value+2,w
  2664  03D6  022A               	subwf	constrain@uLimit+2,w
  2665  03D7  1D03               	skipz
  2666  03D8  2BDF               	goto	u1823
  2667  03D9  0821               	movf	constrain@value+1,w
  2668  03DA  0229               	subwf	constrain@uLimit+1,w
  2669  03DB  1D03               	skipz
  2670  03DC  2BDF               	goto	u1823
  2671  03DD  0820               	movf	constrain@value,w
  2672  03DE  0228               	subwf	constrain@uLimit,w
  2673  03DF                     u1823:	
  2674  03DF  1803               	skipnc
  2675  03E0  2BEA               	goto	l2122
  2676                           
  2677                           ;main.c: 73: return(uLimit);
  2678  03E1  082B               	movf	constrain@uLimit+3,w
  2679  03E2  00A3               	movwf	?_constrain+3
  2680  03E3  082A               	movf	constrain@uLimit+2,w
  2681  03E4  00A2               	movwf	?_constrain+2
  2682  03E5  0829               	movf	constrain@uLimit+1,w
  2683  03E6  00A1               	movwf	?_constrain+1
  2684  03E7  0828               	movf	constrain@uLimit,w
  2685  03E8  00A0               	movwf	?_constrain
  2686  03E9  0008               	return
  2687  03EA                     l2122:	
  2688  03EA  0823               	movf	constrain@value+3,w
  2689  03EB  3A80               	xorlw	128
  2690  03EC  00FF               	movwf	127
  2691  03ED  0827               	movf	constrain@lLimit+3,w
  2692  03EE  3A80               	xorlw	128
  2693  03EF  027F               	subwf	127,w
  2694  03F0  1D03               	skipz
  2695  03F1  2BFC               	goto	u1833
  2696  03F2  0826               	movf	constrain@lLimit+2,w
  2697  03F3  0222               	subwf	constrain@value+2,w
  2698  03F4  1D03               	skipz
  2699  03F5  2BFC               	goto	u1833
  2700  03F6  0825               	movf	constrain@lLimit+1,w
  2701  03F7  0221               	subwf	constrain@value+1,w
  2702  03F8  1D03               	skipz
  2703  03F9  2BFC               	goto	u1833
  2704  03FA  0824               	movf	constrain@lLimit,w
  2705  03FB  0220               	subwf	constrain@value,w
  2706  03FC                     u1833:	
  2707  03FC  1803               	skipnc
  2708  03FD  0008               	return
  2709                           
  2710                           ;main.c: 75: return(lLimit);
  2711  03FE  0827               	movf	constrain@lLimit+3,w
  2712  03FF  00A3               	movwf	?_constrain+3
  2713  0400  0826               	movf	constrain@lLimit+2,w
  2714  0401  00A2               	movwf	?_constrain+2
  2715  0402  0825               	movf	constrain@lLimit+1,w
  2716  0403  00A1               	movwf	?_constrain+1
  2717  0404  0824               	movf	constrain@lLimit,w
  2718  0405  00A0               	movwf	?_constrain
  2719  0406  0008               	return
  2720  0407                     __end_of_constrain:	
  2721                           ;main.c: 77: return(value);
  2722                           
  2723                           
  2724                           	psect	text14
  2725  04B6                     __ptext14:	
  2726 ;; *************** function ___wmul *****************
  2727 ;; Defined at:
  2728 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  multiplier      2    6[BANK0 ] unsigned int 
  2731 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  product         2   10[BANK0 ] unsigned int 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  2    6[BANK0 ] unsigned int 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2743 ;;      Params:         0       4       0       0       0
  2744 ;;      Locals:         0       2       0       0       0
  2745 ;;      Temps:          0       0       0       0       0
  2746 ;;      Totals:         0       6       0       0       0
  2747 ;;Total ram usage:        6 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_SetMotor
  2754 ;;		_main
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           
  2759                           ;psect for function ___wmul
  2760  04B6                     ___wmul:	
  2761                           
  2762                           ;incstack = 0
  2763                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2764  04B6  1283               	bcf	3,5	;RP0=0, select bank0
  2765  04B7  1303               	bcf	3,6	;RP1=0, select bank0
  2766  04B8  01AA               	clrf	___wmul@product
  2767  04B9  01AB               	clrf	___wmul@product+1
  2768  04BA                     l2134:	
  2769  04BA  1C26               	btfss	___wmul@multiplier,0
  2770  04BB  2CC2               	goto	l474
  2771  04BC  0828               	movf	___wmul@multiplicand,w
  2772  04BD  07AA               	addwf	___wmul@product,f
  2773  04BE  1803               	skipnc
  2774  04BF  0AAB               	incf	___wmul@product+1,f
  2775  04C0  0829               	movf	___wmul@multiplicand+1,w
  2776  04C1  07AB               	addwf	___wmul@product+1,f
  2777  04C2                     l474:	
  2778  04C2  3001               	movlw	1
  2779  04C3                     u1855:	
  2780  04C3  1003               	clrc
  2781  04C4  0DA8               	rlf	___wmul@multiplicand,f
  2782  04C5  0DA9               	rlf	___wmul@multiplicand+1,f
  2783  04C6  3EFF               	addlw	-1
  2784  04C7  1D03               	skipz
  2785  04C8  2CC3               	goto	u1855
  2786  04C9  3001               	movlw	1
  2787  04CA                     u1865:	
  2788  04CA  1003               	clrc
  2789  04CB  0CA7               	rrf	___wmul@multiplier+1,f
  2790  04CC  0CA6               	rrf	___wmul@multiplier,f
  2791  04CD  3EFF               	addlw	-1
  2792  04CE  1D03               	skipz
  2793  04CF  2CCA               	goto	u1865
  2794  04D0  0826               	movf	___wmul@multiplier,w
  2795  04D1  0427               	iorwf	___wmul@multiplier+1,w
  2796  04D2  1D03               	btfss	3,2
  2797  04D3  2CBA               	goto	l2134
  2798  04D4  082B               	movf	___wmul@product+1,w
  2799  04D5  00A7               	movwf	?___wmul+1
  2800  04D6  082A               	movf	___wmul@product,w
  2801  04D7  00A6               	movwf	?___wmul
  2802  04D8  0008               	return
  2803  04D9                     __end_of___wmul:	
  2804                           
  2805                           	psect	text15
  2806  010F                     __ptext15:	
  2807 ;; *************** function _isr *****************
  2808 ;; Defined at:
  2809 ;;		line 137 in file "main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  portB           1    5[COMMON] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2823 ;;      Params:         0       0       0       0       0
  2824 ;;      Locals:         1       0       0       0       0
  2825 ;;      Temps:          5       0       0       0       0
  2826 ;;      Totals:         6       0       0       0       0
  2827 ;;Total ram usage:        6 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		Interrupt level 1
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _isr
  2838  010F                     _isr:	
  2839                           
  2840                           ;main.c: 138: static int tick;;main.c: 142: if (T0IE && T0IF) {
  2841  010F  1A8B               	btfsc	11,5	;volatile
  2842  0110  1D0B               	btfss	11,2	;volatile
  2843  0111  2919               	goto	i1l1848
  2844                           
  2845                           ;main.c: 143: set_motor_flag = 1;
  2846  0112  1283               	bcf	3,5	;RP0=0, select bank0
  2847  0113  1303               	bcf	3,6	;RP1=0, select bank0
  2848  0114  01E2               	clrf	_set_motor_flag
  2849  0115  0AE2               	incf	_set_motor_flag,f
  2850                           
  2851                           ;main.c: 145: TMR0 = (0xff - 195);
  2852  0116  303C               	movlw	60
  2853  0117  0081               	movwf	1	;volatile
  2854                           
  2855                           ;main.c: 146: T0IF = 0;
  2856  0118  110B               	bcf	11,2	;volatile
  2857  0119                     i1l1848:	
  2858                           
  2859                           ;main.c: 147: };main.c: 150: if (RBIE && RBIF) {
  2860  0119  198B               	btfsc	11,3	;volatile
  2861  011A  1C0B               	btfss	11,0	;volatile
  2862  011B  29C7               	goto	i1l321
  2863                           
  2864                           ;main.c: 151: char portB = PORTB;
  2865  011C  1283               	bcf	3,5	;RP0=0, select bank0
  2866  011D  1303               	bcf	3,6	;RP1=0, select bank0
  2867  011E  0806               	movf	6,w	;volatile
  2868  011F  00F0               	movwf	??_isr
  2869  0120  0870               	movf	??_isr,w
  2870  0121  00F5               	movwf	isr@portB
  2871                           
  2872                           ;main.c: 153: ab1 = (portB & 0b00011000) >>3;
  2873  0122  0875               	movf	isr@portB,w
  2874  0123  00F0               	movwf	??_isr
  2875  0124  3003               	movlw	3
  2876  0125                     u137_25:	
  2877  0125  1003               	clrc
  2878  0126  0CF0               	rrf	??_isr,f
  2879  0127  3EFF               	addlw	-1
  2880  0128  1D03               	skipz
  2881  0129  2925               	goto	u137_25
  2882  012A  0870               	movf	??_isr,w
  2883  012B  3903               	andlw	3
  2884  012C  00F1               	movwf	??_isr+1
  2885  012D  0871               	movf	??_isr+1,w
  2886  012E  00F7               	movwf	_ab1	;volatile
  2887                           
  2888                           ;main.c: 154: switch(state1)
  2889  012F  29A9               	goto	i1l1894
  2890  0130                     i1l1856:	
  2891                           
  2892                           ;main.c: 157: if(ab1 == 1){
  2893  0130  0377               	decf	_ab1,w	;volatile
  2894  0131  1D03               	btfss	3,2
  2895  0132  2935               	goto	i1l1860
  2896                           
  2897                           ;main.c: 158: state1 = 1;
  2898  0133  3001               	movlw	1
  2899  0134  2955               	goto	L1
  2900  0135                     i1l1860:	
  2901                           ;main.c: 160: }
  2902                           
  2903                           ;main.c: 159: encoder1_counter--;
  2904                           
  2905                           
  2906                           ;main.c: 161: else if(ab1 == 2){
  2907  0135  3002               	movlw	2
  2908  0136  0677               	xorwf	_ab1,w	;volatile
  2909  0137  1D03               	btfss	3,2
  2910  0138  29B7               	goto	i1l1896
  2911                           
  2912                           ;main.c: 162: state1 = 2;
  2913  0139  3002               	movlw	2
  2914  013A  00F0               	movwf	??_isr
  2915  013B  0870               	movf	??_isr,w
  2916  013C  00F8               	movwf	_state1	;volatile
  2917  013D  2942               	goto	i1l1868
  2918  013E                     i1l1864:	
  2919                           ;main.c: 163: encoder1_counter++;
  2920                           
  2921                           
  2922                           ;main.c: 167: if(ab1 == 0){
  2923  013E  0877               	movf	_ab1,w	;volatile
  2924  013F  1D03               	btfss	3,2
  2925  0140  2950               	goto	i1l1870
  2926                           
  2927                           ;main.c: 168: state1 = 0;
  2928  0141  01F8               	clrf	_state1	;volatile
  2929  0142                     i1l1868:	
  2930                           
  2931                           ;main.c: 169: encoder1_counter++;
  2932  0142  3001               	movlw	1
  2933  0143  07DA               	addwf	_encoder1_counter,f	;volatile
  2934  0144  3000               	movlw	0
  2935  0145  1803               	skipnc
  2936  0146  3001               	movlw	1
  2937  0147  07DB               	addwf	_encoder1_counter+1,f	;volatile
  2938  0148  3000               	movlw	0
  2939  0149  1803               	skipnc
  2940  014A  3001               	movlw	1
  2941  014B  07DC               	addwf	_encoder1_counter+2,f	;volatile
  2942  014C  3000               	movlw	0
  2943  014D  1803               	skipnc
  2944  014E  3001               	movlw	1
  2945  014F  2962               	goto	L2
  2946  0150                     i1l1870:	
  2947                           ;main.c: 170: }
  2948                           
  2949                           
  2950                           ;main.c: 171: else if (ab1 == 3){
  2951  0150  3003               	movlw	3
  2952  0151  0677               	xorwf	_ab1,w	;volatile
  2953  0152  1D03               	btfss	3,2
  2954  0153  29B7               	goto	i1l1896
  2955                           
  2956                           ;main.c: 172: state1 = 3;
  2957  0154  3003               	movlw	3
  2958  0155                     L1:	
  2959  0155  00F0               	movwf	??_isr
  2960  0156  0870               	movf	??_isr,w
  2961  0157  00F8               	movwf	_state1	;volatile
  2962                           
  2963                           ;main.c: 173: encoder1_counter--;
  2964  0158  30FF               	movlw	255
  2965  0159  07DA               	addwf	_encoder1_counter,f	;volatile
  2966  015A  30FF               	movlw	255
  2967  015B  1C03               	skipc
  2968  015C  07DB               	addwf	_encoder1_counter+1,f	;volatile
  2969  015D  30FF               	movlw	255
  2970  015E  1C03               	skipc
  2971  015F  07DC               	addwf	_encoder1_counter+2,f	;volatile
  2972  0160  30FF               	movlw	255
  2973  0161  1C03               	skipc
  2974  0162                     L2:	
  2975  0162  07DD               	addwf	_encoder1_counter+3,f	;volatile
  2976  0163  29B7               	goto	i1l1896
  2977  0164                     i1l1874:	
  2978                           
  2979                           ;main.c: 177: if(ab1 == 0){
  2980  0164  0877               	movf	_ab1,w	;volatile
  2981  0165  1D03               	btfss	3,2
  2982  0166  2969               	goto	i1l1880
  2983                           
  2984                           ;main.c: 178: state1 = 0;
  2985  0167  01F8               	clrf	_state1	;volatile
  2986  0168  2987               	goto	L3
  2987  0169                     i1l1880:	
  2988                           ;main.c: 180: }
  2989                           
  2990                           ;main.c: 179: encoder1_counter--;
  2991                           
  2992                           
  2993                           ;main.c: 181: else if(ab1 == 3){
  2994  0169  3003               	movlw	3
  2995  016A  0677               	xorwf	_ab1,w	;volatile
  2996  016B  1D03               	btfss	3,2
  2997  016C  29B7               	goto	i1l1896
  2998                           
  2999                           ;main.c: 182: state1 = 3;
  3000  016D  3003               	movlw	3
  3001  016E  00F0               	movwf	??_isr
  3002  016F  0870               	movf	??_isr,w
  3003  0170  00F8               	movwf	_state1	;volatile
  3004                           
  3005                           ;main.c: 183: encoder1_counter++;
  3006  0171  3001               	movlw	1
  3007  0172  07DA               	addwf	_encoder1_counter,f	;volatile
  3008  0173  3000               	movlw	0
  3009  0174  1803               	skipnc
  3010  0175  3001               	movlw	1
  3011  0176  07DB               	addwf	_encoder1_counter+1,f	;volatile
  3012  0177  3000               	movlw	0
  3013  0178  1803               	skipnc
  3014  0179  3001               	movlw	1
  3015  017A  07DC               	addwf	_encoder1_counter+2,f	;volatile
  3016  017B  3000               	movlw	0
  3017  017C  1803               	skipnc
  3018  017D  3001               	movlw	1
  3019  017E  2991               	goto	L4
  3020  017F                     i1l1884:	
  3021                           
  3022                           ;main.c: 187: if(ab1 == 2){
  3023  017F  3002               	movlw	2
  3024  0180  0677               	xorwf	_ab1,w	;volatile
  3025  0181  1D03               	btfss	3,2
  3026  0182  2993               	goto	i1l1888
  3027                           
  3028                           ;main.c: 188: state1 = 2;
  3029  0183  3002               	movlw	2
  3030  0184  00F0               	movwf	??_isr
  3031  0185  0870               	movf	??_isr,w
  3032  0186  00F8               	movwf	_state1	;volatile
  3033  0187                     L3:	
  3034                           
  3035                           ;main.c: 189: encoder1_counter--;
  3036  0187  30FF               	movlw	255
  3037  0188  07DA               	addwf	_encoder1_counter,f	;volatile
  3038  0189  30FF               	movlw	255
  3039  018A  1C03               	skipc
  3040  018B  07DB               	addwf	_encoder1_counter+1,f	;volatile
  3041  018C  30FF               	movlw	255
  3042  018D  1C03               	skipc
  3043  018E  07DC               	addwf	_encoder1_counter+2,f	;volatile
  3044  018F  30FF               	movlw	255
  3045  0190  1C03               	skipc
  3046  0191                     L4:	
  3047  0191  07DD               	addwf	_encoder1_counter+3,f	;volatile
  3048                           
  3049                           ;main.c: 190: }
  3050  0192  29B7               	goto	i1l1896
  3051  0193                     i1l1888:	
  3052                           
  3053                           ;main.c: 191: else if (ab1 == 1){
  3054  0193  0377               	decf	_ab1,w	;volatile
  3055  0194  1D03               	btfss	3,2
  3056  0195  29B7               	goto	i1l1896
  3057                           
  3058                           ;main.c: 192: state1 = 1;
  3059  0196  3001               	movlw	1
  3060  0197  00F0               	movwf	??_isr
  3061  0198  0870               	movf	??_isr,w
  3062  0199  00F8               	movwf	_state1	;volatile
  3063                           
  3064                           ;main.c: 193: encoder1_counter++;
  3065  019A  3001               	movlw	1
  3066  019B  07DA               	addwf	_encoder1_counter,f	;volatile
  3067  019C  3000               	movlw	0
  3068  019D  1803               	skipnc
  3069  019E  3001               	movlw	1
  3070  019F  07DB               	addwf	_encoder1_counter+1,f	;volatile
  3071  01A0  3000               	movlw	0
  3072  01A1  1803               	skipnc
  3073  01A2  3001               	movlw	1
  3074  01A3  07DC               	addwf	_encoder1_counter+2,f	;volatile
  3075  01A4  3000               	movlw	0
  3076  01A5  1803               	skipnc
  3077  01A6  3001               	movlw	1
  3078  01A7  07DD               	addwf	_encoder1_counter+3,f	;volatile
  3079  01A8  29B7               	goto	i1l1896
  3080  01A9                     i1l1894:	
  3081  01A9  0878               	movf	_state1,w	;volatile
  3082                           
  3083                           ; Switch size 1, requested type "simple"
  3084                           ; Number of cases is 4, Range of values is 0 to 3
  3085                           ; switch strategies available:
  3086                           ; Name         Instructions Cycles
  3087                           ; simple_byte           13     7 (average)
  3088                           ; direct_byte           20     8 (fixed)
  3089                           ; jumptable            260     6 (fixed)
  3090                           ;	Chosen strategy is simple_byte
  3091  01AA  3A00               	xorlw	0	; case 0
  3092  01AB  1903               	skipnz
  3093  01AC  2930               	goto	i1l1856
  3094  01AD  3A01               	xorlw	1	; case 1
  3095  01AE  1903               	skipnz
  3096  01AF  293E               	goto	i1l1864
  3097  01B0  3A03               	xorlw	3	; case 2
  3098  01B1  1903               	skipnz
  3099  01B2  2964               	goto	i1l1874
  3100  01B3  3A01               	xorlw	1	; case 3
  3101  01B4  1903               	skipnz
  3102  01B5  297F               	goto	i1l1884
  3103  01B6  29B7               	goto	i1l1896
  3104  01B7                     i1l1896:	
  3105                           
  3106                           ;main.c: 198: motor_pos = -encoder1_counter;
  3107  01B7  095A               	comf	_encoder1_counter,w	;volatile
  3108  01B8  00D6               	movwf	_motor_pos	;volatile
  3109  01B9  095B               	comf	_encoder1_counter+1,w	;volatile
  3110  01BA  00D7               	movwf	_motor_pos+1	;volatile
  3111  01BB  095C               	comf	_encoder1_counter+2,w	;volatile
  3112  01BC  00D8               	movwf	_motor_pos+2	;volatile
  3113  01BD  095D               	comf	_encoder1_counter+3,w	;volatile
  3114  01BE  00D9               	movwf	_motor_pos+3	;volatile
  3115  01BF  0AD6               	incf	_motor_pos,f	;volatile
  3116  01C0  1903               	skipnz
  3117  01C1  0AD7               	incf	_motor_pos+1,f	;volatile
  3118  01C2  1903               	skipnz
  3119  01C3  0AD8               	incf	_motor_pos+2,f	;volatile
  3120  01C4  1903               	skipnz
  3121  01C5  0AD9               	incf	_motor_pos+3,f	;volatile
  3122                           
  3123                           ;main.c: 199: RBIF = 0;
  3124  01C6  100B               	bcf	11,0	;volatile
  3125  01C7                     i1l321:	
  3126  01C7  0874               	movf	??_isr+4,w
  3127  01C8  008A               	movwf	10
  3128  01C9  0873               	movf	??_isr+3,w
  3129  01CA  0084               	movwf	4
  3130  01CB  0E72               	swapf	(??_isr+2)^(0+4294967168),w
  3131  01CC  0083               	movwf	3
  3132  01CD  0EFE               	swapf	126,f
  3133  01CE  0E7E               	swapf	126,w
  3134  01CF  0009               	retfie
  3135  01D0                     __end_of_isr:	
  3136  007E                     btemp	set	126	;btemp
  3137  007E                     wtemp0	set	126
  3138                           
  3139                           	psect	intentry
  3140  0004                     __pintentry:	
  3141                           ;incstack = 0
  3142                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
  3143                           
  3144  0004                     interrupt_function:	
  3145  007E                     saved_w	set	btemp
  3146  0004  00FE               	movwf	btemp
  3147  0005  0E03               	swapf	3,w
  3148  0006  00F2               	movwf	??_isr+2
  3149  0007  0804               	movf	4,w
  3150  0008  00F3               	movwf	??_isr+3
  3151  0009  080A               	movf	10,w
  3152  000A  00F4               	movwf	??_isr+4
  3153  000B  120A  118A  290F   	ljmp	_isr


Data Sizes:
    Strings     16
    Constant    10
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     55      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetMotor
    _motor_reset->_pwm_set
    _SetPoint->___wmul
    _SetMotor->_pwm_set
    _pwm_set->___aldiv
    ___aldiv->___lmul
    ___wmul->_getServoCommand

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   11088
                                             50 BANK0      5     5      0
                           _SetMotor
                           _SetPoint
                             ___wmul
                      _encoders_init
                    _getServoCommand
                      _getServoState
                        _motor_reset
                           _pwm_init
                            _pwm_set
                        _serial_init
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    3157
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (2) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                             6     4      2     196
                                             12 BANK0      6     4      2
                             ___wmul (ARG)
                    _getServoCommand (ARG)
 ---------------------------------------------------------------------------------
 (1) _getServoState                                        4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _getServoCommand                                      6     4      2       0
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetMotor                                            12    12      0    4269
                                             38 BANK0     12    12      0
                             ___wmul
                          _constrain
                            _pwm_set
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2961
                                             28 BANK0     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     316
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _constrain                                           12     0     12     487
                                              0 BANK0     12     0     12
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     496
                                              6 BANK0      6     2      4
                    _getServoCommand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  6     6      0      23
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetMotor
     ___wmul
       _getServoCommand (ARG)
     _constrain
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
   _SetPoint
     ___wmul (ARG)
       _getServoCommand (ARG)
     _getServoCommand (ARG)
   ___wmul
     _getServoCommand (ARG)
   _encoders_init
   _getServoCommand
   _getServoState
   _motor_reset
     _SetPoint
       ___wmul (ARG)
         _getServoCommand (ARG)
       _getServoCommand (ARG)
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _serial_init

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      55       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     37      4A       5       92.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      55      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Jun 04 16:23:08 2019

                       pc 0002               __CFG_CP$OFF 0000                        fsr 0004  
     ___wmul@multiplicand 0028           ??_getServoState 0022                       l170 047F  
                     l182 0389                       l278 00C0                       l474 04C2  
                     l539 028C                       _GIE 005F                       _RA5 002D  
                     _RA6 002E                       _RB5 0035                       _RC3 003B  
                     _RC4 003C                       _RC5 003D                       _PR2 0092  
            __CFG_CPD$OFF 0000                       _RX9 00C6                       _TX9 04C6  
                     _ab1 0077                       _isr 010F                       fsr0 0004  
                     indf 0000              __CFG_IESO$ON 0000              __CFG_FOSC$EC 0000  
        _encoder1_counter 005A              __CFG_LVP$OFF 0000                      l2102 0376  
                    l2104 0379                      l2122 03EA                      l2042 0394  
                    l2108 037C                      l2204 009D                      l2134 04BA  
                    l2046 03AA                      l2072 02AD                      l2064 029D  
                    l2208 00EC                      l2232 0464                      l2090 0300  
                    l2082 02E5                      l2074 02BD                      l2086 02F2  
                    l2098 031F                      l2362 0249                      l2364 026C  
                    l2356 0228                      l2390 0381                      l2358 0238  
                    ?_isr 0070                      STR_1 04E9                      _ANS4 0C44  
                    _ANS8 0C48                      _ANS9 0C49                      _BRGH 04C2  
                    _T0IE 005D                      _CREN 00C4                      _T0IF 005A  
                    _FERR 00C2                      u2020 0235                      u1055 04AA  
                    _IOCB 0096                      u1810 0362                      u1715 02B1  
                    u1811 0363                      u1812 0368                      u1813 0369  
                    u1823 03DF                      u1735 02BF                      u1655 03AC  
                    u1833 03FC                      u1745 02D4                      u1665 03B4  
                    u1930 0448                      u1755 02E6                      u1915 0516  
                    u1940 0449                      u1855 04C3                      u1865 04CA  
                    u1793 031D                      _PEIE 005E                      u1893 009B  
                    _RBIE 005B                      _RBIF 0058                      _RCIE 0465  
                    _RCIF 0065                      _OERR 00C1                      _TMR0 0001  
                    _SPEN 00C7                      _SREN 00C5                      _TXIE 0464  
                    _TXEN 04C5                      _TXIF 0064                      _SYNC 04C4  
       ??_getServoCommand 0022              __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000  
                    _main 01D0                      btemp 007E                      start 000E  
           __CFG_MCLRE$ON 0000                     ??_isr 0070           __end_of___aldiv 0309  
                   ?_main 0070                     _ANS10 0C4A                     _ANS11 0C4B  
                   _ANS13 0C4D             __CFG_WDTE$OFF 0000                     i1l321 01C7  
                   _RCREG 001A                     _SPBRG 0099                     _PORTB 0006  
                   _TXREG 0019       ___lmul@multiplicand 0024           ??_encoders_init 0020  
                   _lStep 0076           __end_of_dpowers 04E9                     _dummy 0079  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_pwm_set 038A  
                   status 0003                     wtemp0 007E           __initialization 0011  
            __end_of_main 027A                    ??_main 0052          __end_of_SetMotor 010F  
        __end_of_SetPoint 04B6                    _CCPR1L 0015                    _CCPR2L 001B  
                  i1l1860 0135                    i1l1870 0150                    i1l1880 0169  
                  i1l1864 013E                    i1l1856 0130                    i1l1848 0119  
                  i1l1874 0164                    i1l1884 017F                    i1l1868 0142  
                  i1l1894 01A9                    i1l1888 0193                    i1l1896 01B7  
                  u137_25 0125                    _TMR1IE 0460                    _TRISB1 0431  
                  _TRISB2 0432                    _TRISC1 0439                    _TRISA5 042D  
                  _TRISB3 0433                    _TRISC2 043A                    _TRISA6 042E  
                  _TRISB4 0434                    _TRISB5 0435                    _TRISC3 043B  
                  _TRISC4 043C                    _TRISB7 0437                    _TRISC5 043D  
          __CFG_PWRTE$OFF 0000              ?_serial_init 0070                    ___lmul 038A  
               ??___aldiv 0035                    ___wmul 04B6                    _state1 0078  
            ?_motor_reset 0070                    saved_w 007E          __end_of_pwm_init 0491  
               ??_pwm_set 0042   __end_of__initialization 001D            __pcstackCOMMON 0070  
         _getServoCommand 043B            _OPTION_REGbits 0081               SetMotor@err 004C  
              __pbssBANK0 0052        __size_of_constrain 003C                 ?_SetMotor 0070  
               ?_SetPoint 002C                __pmaintext 01D0                   ?___lmul 0020  
                 ?___wmul 0026                __pintentry 0004            ___lmul@product 0029  
   __end_of_getServoState 054B             ?_resetCounter 0070                __stringtab 04D9  
              ??_SetMotor 0046                ??_SetPoint 002E                   ___aldiv 027A  
         __size_of___lmul 0041           __size_of___wmul 0023                 ?_pwm_init 0070  
 __end_of_getServoCommand 0467      __size_of_serial_init 0018         __end_of_constrain 0407  
                 __ptext1 04F9                   __ptext2 0467                   __ptext3 0407  
                 __ptext4 0529                   __ptext5 0491                   __ptext6 053C  
                 __ptext7 043B                   __ptext8 0511                   __ptext9 0021  
                 _dpowers 04DF                 _T2CONbits 0012              __size_of_isr 00C1  
        ___aldiv@dividend 0031      __size_of_motor_reset 0034            ??_resetCounter 0020  
                 _pwm_set 0309                   clrloop0 054C      end_of_initialization 001D  
   __end_of_encoders_init 0529                   isr@tick 005E          ___aldiv@quotient 0038  
              ??_pwm_init 0020          SetMotor@last_err 0060        SetMotor@D_Response 004A  
             _CCP1CONbits 0017               _CCP2CONbits 001D            __end_of___lmul 03CB  
          _set_motor_flag 0062          ?_getServoCommand 0020            __end_of___wmul 04D9  
        _delayus_variable 007A       start_initialization 0011               __end_of_isr 01D0  
            SetMotor@resp 004E      __end_of_resetCounter 053C                  ??___lmul 0028  
       __size_of_SetMotor 00EE         __size_of_SetPoint 0025                  ??___wmul 002A  
      SetMotor@P_Response 0048         pwm_set@duty_cycle 003E               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 0020                  ?___aldiv 002D  
               __pstrings 04D9         __size_of_pwm_init 002A            pwm_set@channel 003C  
               _constrain 03CB                  ?_pwm_set 003C           ___aldiv@divisor 002D  
       interrupt_function 0004           ___aldiv@counter 0036            ___wmul@product 002A  
               clear_ram0 054B    __size_of_getServoState 000F                  _PIR1bits 000C  
           ??_serial_init 0020                 _set_point 0052                 _motor_pos 0056  
           ??_motor_reset 0046               __stringbase 04DE         ___wmul@multiplier 0026  
              ?_constrain 0020           SetPoint@new_val 002C         ___lmul@multiplier 0020  
   __size_of_resetCounter 0013                  _SetMotor 0021                  _SetPoint 0491  
        __size_of___aldiv 008F    __size_of_encoders_init 0018       __end_of_serial_init 0511  
      __end_of__stringtab 04DF             _getServoState 053C                  __ptext10 0309  
                __ptext11 038A                  __ptext12 027A                  __ptext13 03CB  
                __ptext14 04B6                  __ptext15 010F              _resetCounter 0529  
     __end_of_motor_reset 043B         __CFG_BOR4V$BOR21V 0000          __size_of_pwm_set 0081  
           __size_of_main 00AA        SetMotor@derivative 0063                  _pwm_init 0467  
          ?_getServoState 0020               ??_constrain 002C  __size_of_getServoCommand 002C  
                isr@portB 0075           constrain@lLimit 0024           constrain@uLimit 0028  
                intlevel1 0000             _encoders_init 0511                 stringcode 04D9  
             _serial_init 04F9               _motor_reset 0407            constrain@value 0020  
                stringdir 04D9                  stringtab 04D9              ___aldiv@sign 0037  
          ?_encoders_init 0070  
