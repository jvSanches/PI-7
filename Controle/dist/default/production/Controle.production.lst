

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 31 17:10:52 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.05
    38                           ; Generated 20/12/2018 GMT
    39                           ; 
    40                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F886 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  009F                     	;# 
   360  0105                     	;# 
   361  0107                     	;# 
   362  0108                     	;# 
   363  0109                     	;# 
   364  010C                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0185                     	;# 
   370  0187                     	;# 
   371  0188                     	;# 
   372  0189                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  000E                     	;# 
   390  000F                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0014                     	;# 
   396  0015                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001D                     	;# 
   407  001E                     	;# 
   408  001F                     	;# 
   409  0081                     	;# 
   410  0085                     	;# 
   411  0086                     	;# 
   412  0087                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  008F                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0094                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  0105                     	;# 
   437  0107                     	;# 
   438  0108                     	;# 
   439  0109                     	;# 
   440  010C                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  0185                     	;# 
   446  0187                     	;# 
   447  0188                     	;# 
   448  0189                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451  0000                     	;# 
   452  0001                     	;# 
   453  0002                     	;# 
   454  0003                     	;# 
   455  0004                     	;# 
   456  0005                     	;# 
   457  0006                     	;# 
   458  0007                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  000E                     	;# 
   466  000F                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0013                     	;# 
   471  0014                     	;# 
   472  0015                     	;# 
   473  0015                     	;# 
   474  0016                     	;# 
   475  0017                     	;# 
   476  0018                     	;# 
   477  0019                     	;# 
   478  001A                     	;# 
   479  001B                     	;# 
   480  001B                     	;# 
   481  001C                     	;# 
   482  001D                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  0081                     	;# 
   486  0085                     	;# 
   487  0086                     	;# 
   488  0087                     	;# 
   489  0089                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  008F                     	;# 
   494  0090                     	;# 
   495  0091                     	;# 
   496  0092                     	;# 
   497  0093                     	;# 
   498  0093                     	;# 
   499  0093                     	;# 
   500  0094                     	;# 
   501  0095                     	;# 
   502  0096                     	;# 
   503  0097                     	;# 
   504  0098                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009C                     	;# 
   509  009D                     	;# 
   510  009E                     	;# 
   511  009F                     	;# 
   512  0105                     	;# 
   513  0107                     	;# 
   514  0108                     	;# 
   515  0109                     	;# 
   516  010C                     	;# 
   517  010C                     	;# 
   518  010D                     	;# 
   519  010E                     	;# 
   520  010F                     	;# 
   521  0185                     	;# 
   522  0187                     	;# 
   523  0188                     	;# 
   524  0189                     	;# 
   525  018C                     	;# 
   526  018D                     	;# 
   527                           
   528                           	psect	strings
   529  0700                     __pstrings:	
   530  0700                     stringtab:	
   531  0700                     __stringtab:	
   532  0700                     stringcode:	
   533                           ;	String table - string pointers are 1 byte each
   534                           
   535  0700                     stringdir:	
   536  0700  3007               	movlw	high stringdir
   537  0701  008A               	movwf	10
   538  0702  0804               	movf	4,w
   539  0703  0A84               	incf	4,f
   540  0704  0782               	addwf	2,f
   541  0705                     __stringbase:	
   542  0705  3400               	retlw	0
   543  0706                     __end_of__stringtab:	
   544  0706                     _dpowers:	
   545  0706  3401               	retlw	1
   546  0707  3400               	retlw	0
   547  0708  340A               	retlw	10
   548  0709  3400               	retlw	0
   549  070A  3464               	retlw	100
   550  070B  3400               	retlw	0
   551  070C  34E8               	retlw	232
   552  070D  3403               	retlw	3
   553  070E  3410               	retlw	16
   554  070F  3427               	retlw	39
   555  0710                     __end_of_dpowers:	
   556  0006                     _PORTB	set	6
   557  0001                     _TMR0	set	1
   558  0012                     _T2CONbits	set	18
   559  000C                     _PIR1bits	set	12
   560  001B                     _CCPR2L	set	27
   561  0015                     _CCPR1L	set	21
   562  001D                     _CCP2CONbits	set	29
   563  0017                     _CCP1CONbits	set	23
   564  0019                     _TXREG	set	25
   565  001A                     _RCREG	set	26
   566  003D                     _RC5	set	61
   567  003C                     _RC4	set	60
   568  003B                     _RC3	set	59
   569  005F                     _GIE	set	95
   570  005E                     _PEIE	set	94
   571  0035                     _RB5	set	53
   572  0058                     _RBIF	set	88
   573  005B                     _RBIE	set	91
   574  005A                     _T0IF	set	90
   575  005D                     _T0IE	set	93
   576  002E                     _RA6	set	46
   577  002D                     _RA5	set	45
   578  0065                     _RCIF	set	101
   579  0064                     _TXIF	set	100
   580  00C2                     _FERR	set	194
   581  00C1                     _OERR	set	193
   582  00C6                     _RX9	set	198
   583  00C5                     _SREN	set	197
   584  00C4                     _CREN	set	196
   585  00C7                     _SPEN	set	199
   586  0096                     _IOCB	set	150
   587  0081                     _OPTION_REGbits	set	129
   588  0092                     _PR2	set	146
   589  0099                     _SPBRG	set	153
   590  043D                     _TRISC5	set	1085
   591  043C                     _TRISC4	set	1084
   592  043B                     _TRISC3	set	1083
   593  0460                     _TMR1IE	set	1120
   594  0434                     _TRISB4	set	1076
   595  0433                     _TRISB3	set	1075
   596  0432                     _TRISB2	set	1074
   597  0431                     _TRISB1	set	1073
   598  0437                     _TRISB7	set	1079
   599  0435                     _TRISB5	set	1077
   600  042E                     _TRISA6	set	1070
   601  042D                     _TRISA5	set	1069
   602  043A                     _TRISC2	set	1082
   603  0439                     _TRISC1	set	1081
   604  04C5                     _TXEN	set	1221
   605  04C6                     _TX9	set	1222
   606  0465                     _RCIE	set	1125
   607  0464                     _TXIE	set	1124
   608  04C4                     _SYNC	set	1220
   609  04C2                     _BRGH	set	1218
   610  0C4B                     _ANS11	set	3147
   611  0C48                     _ANS8	set	3144
   612  0C49                     _ANS9	set	3145
   613  0C4A                     _ANS10	set	3146
   614  0C4D                     _ANS13	set	3149
   615  0C44                     _ANS4	set	3140
   616  0710                     STR_1:	
   617  0710  3453               	retlw	83	;'S'
   618  0711  3465               	retlw	101	;'e'
   619  0712  3474               	retlw	116	;'t'
   620  0713  3450               	retlw	80	;'P'
   621  0714  346F               	retlw	111	;'o'
   622  0715  3469               	retlw	105	;'i'
   623  0716  346E               	retlw	110	;'n'
   624  0717  3474               	retlw	116	;'t'
   625  0718  343A               	retlw	58	;':'
   626  0719  3420               	retlw	32	;' '
   627  071A  3425               	retlw	37	;'%'
   628  071B  3464               	retlw	100	;'d'
   629  071C  3420               	retlw	32	;' '
   630  071D  340D               	retlw	13
   631  071E  340A               	retlw	10
   632  071F  3400               	retlw	0
   633  0720                     STR_5:	
   634  0720  3446               	retlw	70	;'F'
   635  0721  3469               	retlw	105	;'i'
   636  0722  346D               	retlw	109	;'m'
   637  0723  3420               	retlw	32	;' '
   638  0724  3464               	retlw	100	;'d'
   639  0725  346F               	retlw	111	;'o'
   640  0726  3420               	retlw	32	;' '
   641  0727  3474               	retlw	116	;'t'
   642  0728  3465               	retlw	101	;'e'
   643  0729  3473               	retlw	115	;'s'
   644  072A  3474               	retlw	116	;'t'
   645  072B  3465               	retlw	101	;'e'
   646  072C  3420               	retlw	32	;' '
   647  072D  3400               	retlw	0
   648  072E                     STR_2:	
   649  072E  344B               	retlw	75	;'K'
   650  072F  3470               	retlw	112	;'p'
   651  0730  343A               	retlw	58	;':'
   652  0731  3420               	retlw	32	;' '
   653  0732  3425               	retlw	37	;'%'
   654  0733  3464               	retlw	100	;'d'
   655  0734  3420               	retlw	32	;' '
   656  0735  342D               	retlw	45	;'-'
   657  0736  343E               	retlw	62	;'>'
   658  0737  3420               	retlw	32	;' '
   659  0738  3400               	retlw	0
   660  0739                     STR_3:	
   661  0739  3425               	retlw	37	;'%'
   662  073A  3464               	retlw	100	;'d'
   663  073B  3420               	retlw	32	;' '
   664  073C  3400               	retlw	0
   665  0739                     
   666                           ; #config settings
   667  0000                     
   668                           	psect	cinit
   669  0015                     start_initialization:	
   670  0015                     __initialization:	
   671                           
   672                           ; Clear objects allocated to COMMON
   673  0015  01F0               	clrf	__pbssCOMMON& (0+127)
   674  0016  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   675  0017  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   676  0018  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   677  0019  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   678  001A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   679  001B  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   680                           
   681                           ; Clear objects allocated to BANK0
   682  001C  1383               	bcf	3,7	;select IRP bank0
   683  001D  305B               	movlw	low __pbssBANK0
   684  001E  0084               	movwf	4
   685  001F  306F               	movlw	low (__pbssBANK0+20)
   686  0020  120A  158A  2733  120A  118A  	fcall	clear_ram0
   687                           
   688                           ; Clear objects allocated to BANK1
   689  0025  30BA               	movlw	low __pbssBANK1
   690  0026  0084               	movwf	4
   691  0027  30C9               	movlw	low (__pbssBANK1+15)
   692  0028  120A  158A  2733  120A  118A  	fcall	clear_ram0
   693                           
   694                           ; Clear objects allocated to BANK3
   695  002D  1783               	bsf	3,7	;select IRP bank2
   696  002E  3090               	movlw	low __pbssBANK3
   697  002F  0084               	movwf	4
   698  0030  30EC               	movlw	low (__pbssBANK3+92)
   699  0031  120A  158A  2733   	fcall	clear_ram0
   700  0034                     end_of_initialization:	
   701                           ;End of C runtime variable initialization code
   702                           
   703  0034                     __end_of__initialization:	
   704  0034  0183               	clrf	3
   705  0035  120A  118A  2838   	ljmp	_main	;jump to C main() function
   706                           
   707                           	psect	bssCOMMON
   708  0070                     __pbssCOMMON:	
   709  0070                     _samples:	
   710  0070                     	ds	2
   711  0072                     getServoCommand@lStep:	
   712  0072                     	ds	1
   713  0073                     _sampling:	
   714  0073                     	ds	1
   715  0074                     _ab1:	
   716  0074                     	ds	1
   717  0075                     _state1:	
   718  0075                     	ds	1
   719  0076                     _delayus_variable:	
   720  0076                     	ds	1
   721                           
   722                           	psect	bssBANK0
   723  005B                     __pbssBANK0:	
   724  005B                     _set_point:	
   725  005B                     	ds	4
   726  005F                     _motor_pos:	
   727  005F                     	ds	4
   728  0063                     _encoder1_counter:	
   729  0063                     	ds	4
   730  0067                     SetMotor@last_err:	
   731  0067                     	ds	2
   732  0069                     _onlyK:	
   733  0069                     	ds	2
   734  006B                     _SPIData:	
   735  006B                     	ds	1
   736  006C                     _dummy:	
   737  006C                     	ds	1
   738  006D                     SetMotor@derivative:	
   739  006D                     	ds	2
   740                           
   741                           	psect	bssBANK1
   742  00BA                     __pbssBANK1:	
   743  00BA                     _last_pos:	
   744  00BA                     	ds	4
   745  00BE                     isr@tick:	
   746  00BE                     	ds	2
   747  00C0                     _nSPIData:	
   748  00C0                     	ds	2
   749  00C2                     _com_time:	
   750  00C2                     	ds	2
   751  00C4                     _set_motor_flag:	
   752  00C4                     	ds	1
   753  00C5                     SetMotor@integral:	
   754  00C5                     	ds	4
   755                           
   756                           	psect	bssBANK3
   757  0190                     __pbssBANK3:	
   758  0190                     _pos_log2:	
   759  0190                     	ds	46
   760  01BE                     _pos_log1:	
   761  01BE                     	ds	46
   762                           
   763                           	psect	clrtext
   764  0F33                     clear_ram0:	
   765                           ;	Called with FSR containing the base address, and
   766                           ;	W with the last address+1
   767                           
   768  0F33  0064               	clrwdt	;clear the watchdog before getting into this loop
   769  0F34                     clrloop0:	
   770  0F34  0180               	clrf	0	;clear RAM location pointed to by FSR
   771  0F35  0A84               	incf	4,f	;increment pointer
   772  0F36  0604               	xorwf	4,w	;XOR with final address
   773  0F37  1903               	btfsc	3,2	;have we reached the end yet?
   774  0F38  3400               	retlw	0	;all done for this memory range, return
   775  0F39  0604               	xorwf	4,w	;XOR again to restore value
   776  0F3A  2F34               	goto	clrloop0	;do the next byte
   777                           
   778                           	psect	cstackBANK1
   779  00A0                     __pcstackBANK1:	
   780  00A0                     main@sVar:	
   781                           
   782                           ; 20 bytes @ 0x0
   783  00A0                     	ds	25
   784  00B9                     main@serialIn_355:	
   785                           
   786                           ; 1 bytes @ 0x19
   787  00B9                     	ds	1
   788                           
   789                           	psect	cstackCOMMON
   790  0077                     __pcstackCOMMON:	
   791  0077                     ?_serial_init:	
   792  0077                     ?_putch:	
   793                           ; 1 bytes @ 0x0
   794                           
   795  0077                     ?_chkchr:	
   796                           ; 1 bytes @ 0x0
   797                           
   798  0077                     ?_putst:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  0077                     ?_pwm_init:	
   802                           ; 1 bytes @ 0x0
   803                           
   804  0077                     ?_SetMotor:	
   805                           ; 1 bytes @ 0x0
   806                           
   807  0077                     ?_resetCounter:	
   808                           ; 1 bytes @ 0x0
   809                           
   810  0077                     ?_motor_reset:	
   811                           ; 1 bytes @ 0x0
   812                           
   813  0077                     ?_isr:	
   814                           ; 1 bytes @ 0x0
   815                           
   816  0077                     ??_isr:	
   817                           ; 1 bytes @ 0x0
   818                           
   819  0077                     ?_encoders_init:	
   820                           ; 1 bytes @ 0x0
   821                           
   822  0077                     ?_main:	
   823                           ; 1 bytes @ 0x0
   824                           
   825                           
   826                           ; 1 bytes @ 0x0
   827  0077                     	ds	6
   828  007D                     isr@portB:	
   829                           
   830                           ; 1 bytes @ 0x6
   831  007D                     	ds	1
   832                           
   833                           	psect	cstackBANK0
   834  0020                     __pcstackBANK0:	
   835  0020                     ??_serial_init:	
   836  0020                     ??_putch:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0020                     ??_chkchr:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0020                     ??_pwm_init:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0020                     ?_SetPoint:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0020                     ??_resetCounter:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0020                     ??_encoders_init:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0020                     ?___wmul:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0020                     ?___lwdiv:	
   858                           ; 2 bytes @ 0x0
   859                           
   860  0020                     ?_constrain:	
   861                           ; 2 bytes @ 0x0
   862                           
   863  0020                     ?___lmul:	
   864                           ; 4 bytes @ 0x0
   865                           
   866  0020                     SetPoint@new_val:	
   867                           ; 4 bytes @ 0x0
   868                           
   869  0020                     ___wmul@multiplier:	
   870                           ; 2 bytes @ 0x0
   871                           
   872  0020                     ___lwdiv@divisor:	
   873                           ; 2 bytes @ 0x0
   874                           
   875  0020                     constrain@value:	
   876                           ; 2 bytes @ 0x0
   877                           
   878  0020                     ___lmul@multiplier:	
   879                           ; 4 bytes @ 0x0
   880                           
   881                           
   882                           ; 4 bytes @ 0x0
   883  0020                     	ds	1
   884  0021                     putch@c:	
   885                           
   886                           ; 1 bytes @ 0x1
   887  0021                     	ds	1
   888  0022                     ??_putst:	
   889  0022                     ??_SetPoint:	
   890                           ; 1 bytes @ 0x2
   891                           
   892  0022                     ___wmul@multiplicand:	
   893                           ; 1 bytes @ 0x2
   894                           
   895  0022                     ___lwdiv@dividend:	
   896                           ; 2 bytes @ 0x2
   897                           
   898                           
   899                           ; 2 bytes @ 0x2
   900  0022                     	ds	1
   901  0023                     putst@str:	
   902                           
   903                           ; 1 bytes @ 0x3
   904  0023                     	ds	1
   905  0024                     ??___wmul:	
   906  0024                     ??___lwdiv:	
   907                           ; 1 bytes @ 0x4
   908                           
   909  0024                     ___wmul@product:	
   910                           ; 1 bytes @ 0x4
   911                           
   912  0024                     constrain@lLimit:	
   913                           ; 2 bytes @ 0x4
   914                           
   915  0024                     ___lmul@multiplicand:	
   916                           ; 4 bytes @ 0x4
   917                           
   918                           
   919                           ; 4 bytes @ 0x4
   920  0024                     	ds	1
   921  0025                     ___lwdiv@quotient:	
   922                           
   923                           ; 2 bytes @ 0x5
   924  0025                     	ds	2
   925  0027                     ___lwdiv@counter:	
   926                           
   927                           ; 1 bytes @ 0x7
   928  0027                     	ds	1
   929  0028                     ??___lmul:	
   930  0028                     ?___lwmod:	
   931                           ; 1 bytes @ 0x8
   932                           
   933  0028                     ___lwmod@divisor:	
   934                           ; 2 bytes @ 0x8
   935                           
   936  0028                     constrain@uLimit:	
   937                           ; 2 bytes @ 0x8
   938                           
   939                           
   940                           ; 4 bytes @ 0x8
   941  0028                     	ds	1
   942  0029                     ___lmul@product:	
   943                           
   944                           ; 4 bytes @ 0x9
   945  0029                     	ds	1
   946  002A                     ___lwmod@dividend:	
   947                           
   948                           ; 2 bytes @ 0xA
   949  002A                     	ds	2
   950  002C                     ??_constrain:	
   951  002C                     ??___lwmod:	
   952                           ; 1 bytes @ 0xC
   953                           
   954                           
   955                           ; 1 bytes @ 0xC
   956  002C                     	ds	1
   957  002D                     ?___aldiv:	
   958  002D                     ___lwmod@counter:	
   959                           ; 4 bytes @ 0xD
   960                           
   961  002D                     ___aldiv@divisor:	
   962                           ; 1 bytes @ 0xD
   963                           
   964                           
   965                           ; 4 bytes @ 0xD
   966  002D                     	ds	1
   967  002E                     ?_sprintf:	
   968  002E                     sprintf@f:	
   969                           ; 2 bytes @ 0xE
   970                           
   971                           
   972                           ; 1 bytes @ 0xE
   973  002E                     	ds	3
   974  0031                     ___aldiv@dividend:	
   975                           
   976                           ; 4 bytes @ 0x11
   977  0031                     	ds	2
   978  0033                     ??_sprintf:	
   979                           
   980                           ; 1 bytes @ 0x13
   981  0033                     	ds	2
   982  0035                     ??___aldiv:	
   983                           
   984                           ; 1 bytes @ 0x15
   985  0035                     	ds	1
   986  0036                     sprintf@ap:	
   987  0036                     ___aldiv@counter:	
   988                           ; 1 bytes @ 0x16
   989                           
   990                           
   991                           ; 1 bytes @ 0x16
   992  0036                     	ds	1
   993  0037                     sprintf@flag:	
   994  0037                     ___aldiv@sign:	
   995                           ; 1 bytes @ 0x17
   996                           
   997                           
   998                           ; 1 bytes @ 0x17
   999  0037                     	ds	1
  1000  0038                     sprintf@prec:	
  1001  0038                     ___aldiv@quotient:	
  1002                           ; 1 bytes @ 0x18
  1003                           
  1004                           
  1005                           ; 4 bytes @ 0x18
  1006  0038                     	ds	1
  1007  0039                     sprintf@val:	
  1008                           
  1009                           ; 2 bytes @ 0x19
  1010  0039                     	ds	2
  1011  003B                     sprintf@sp:	
  1012                           
  1013                           ; 1 bytes @ 0x1B
  1014  003B                     	ds	1
  1015  003C                     ?_pwm_set:	
  1016  003C                     sprintf@c:	
  1017                           ; 1 bytes @ 0x1C
  1018                           
  1019  003C                     pwm_set@channel:	
  1020                           ; 1 bytes @ 0x1C
  1021                           
  1022                           
  1023                           ; 2 bytes @ 0x1C
  1024  003C                     	ds	2
  1025  003E                     pwm_set@duty_cycle:	
  1026                           
  1027                           ; 4 bytes @ 0x1E
  1028  003E                     	ds	4
  1029  0042                     ??_pwm_set:	
  1030                           
  1031                           ; 1 bytes @ 0x22
  1032  0042                     	ds	4
  1033  0046                     ??_SetMotor:	
  1034  0046                     ??_motor_reset:	
  1035                           ; 1 bytes @ 0x26
  1036                           
  1037                           
  1038                           ; 1 bytes @ 0x26
  1039  0046                     	ds	8
  1040  004E                     SetMotor@P_Response:	
  1041                           
  1042                           ; 2 bytes @ 0x2E
  1043  004E                     	ds	2
  1044  0050                     SetMotor@D_Response:	
  1045                           
  1046                           ; 2 bytes @ 0x30
  1047  0050                     	ds	2
  1048  0052                     SetMotor@I_Response:	
  1049                           
  1050                           ; 2 bytes @ 0x32
  1051  0052                     	ds	2
  1052  0054                     SetMotor@resp:	
  1053                           
  1054                           ; 4 bytes @ 0x34
  1055  0054                     	ds	4
  1056  0058                     SetMotor@err:	
  1057                           
  1058                           ; 2 bytes @ 0x38
  1059  0058                     	ds	2
  1060  005A                     ??_main:	
  1061                           
  1062                           ; 1 bytes @ 0x3A
  1063  005A                     	ds	1
  1064                           
  1065                           	psect	maintext
  1066  0038                     __pmaintext:	
  1067 ;;
  1068 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1069 ;;
  1070 ;; *************** function _main *****************
  1071 ;; Defined at:
  1072 ;;		line 293 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  sVar           20    0[BANK1 ] unsigned char [20]
  1077 ;;  serialIn        1   25[BANK1 ] unsigned char 
  1078 ;;  i               2    0        int 
  1079 ;;  enc1            2    0        int 
  1080 ;;  serialIn        1    0        unsigned char 
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      void 
  1083 ;; Registers used:
  1084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1085 ;; Tracked objects:
  1086 ;;		On entry : B00/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1090 ;;      Params:         0       0       0       0       0
  1091 ;;      Locals:         0       0      26       0       0
  1092 ;;      Temps:          0       1       0       0       0
  1093 ;;      Totals:         0       1      26       0       0
  1094 ;;Total ram usage:       27 bytes
  1095 ;; Hardware stack levels required when called:    4
  1096 ;; This function calls:
  1097 ;;		_SetMotor
  1098 ;;		_SetPoint
  1099 ;;		_chkchr
  1100 ;;		_encoders_init
  1101 ;;		_motor_reset
  1102 ;;		_putst
  1103 ;;		_pwm_init
  1104 ;;		_pwm_set
  1105 ;;		_resetCounter
  1106 ;;		_serial_init
  1107 ;;		_sprintf
  1108 ;; This function is called by:
  1109 ;;		Startup code after reset
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           
  1114                           ;psect for function _main
  1115  0038                     _main:	
  1116                           
  1117                           ;main.c: 302: OPTION_REGbits.T0CS = 0;
  1118                           
  1119                           ;incstack = 0
  1120                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1121  0038  1683               	bsf	3,5	;RP0=1, select bank1
  1122  0039  1303               	bcf	3,6	;RP1=0, select bank1
  1123  003A  1281               	bcf	1,5	;volatile
  1124                           
  1125                           ;main.c: 303: OPTION_REGbits.PSA = 0;
  1126  003B  1181               	bcf	1,3	;volatile
  1127                           
  1128                           ;main.c: 304: OPTION_REGbits.PS = 7;
  1129  003C  3007               	movlw	7
  1130  003D  0481               	iorwf	1,f	;volatile
  1131                           
  1132                           ;main.c: 307: TRISB5 = 0;
  1133  003E  1286               	bcf	6,5	;volatile
  1134                           
  1135                           ;main.c: 308: ANS13 = 0;
  1136  003F  1683               	bsf	3,5	;RP0=1, select bank3
  1137  0040  1703               	bsf	3,6	;RP1=1, select bank3
  1138  0041  1289               	bcf	9,5	;volatile
  1139                           
  1140                           ;main.c: 309: TRISB7 = 0;
  1141  0042  1683               	bsf	3,5	;RP0=1, select bank1
  1142  0043  1303               	bcf	3,6	;RP1=0, select bank1
  1143  0044  1386               	bcf	6,7	;volatile
  1144                           
  1145                           ;main.c: 310: TRISB1 = 1;
  1146  0045  1486               	bsf	6,1	;volatile
  1147                           
  1148                           ;main.c: 311: TRISB2 = 1;
  1149  0046  1506               	bsf	6,2	;volatile
  1150                           
  1151                           ;main.c: 312: TRISB3 = 1;
  1152  0047  1586               	bsf	6,3	;volatile
  1153                           
  1154                           ;main.c: 313: TRISB4 = 1;
  1155  0048  1606               	bsf	6,4	;volatile
  1156                           
  1157                           ;main.c: 314: ANS10 = 0;
  1158  0049  1683               	bsf	3,5	;RP0=1, select bank3
  1159  004A  1703               	bsf	3,6	;RP1=1, select bank3
  1160  004B  1109               	bcf	9,2	;volatile
  1161                           
  1162                           ;main.c: 315: ANS9 = 0;
  1163  004C  1089               	bcf	9,1	;volatile
  1164                           
  1165                           ;main.c: 316: ANS8 = 0;
  1166  004D  1009               	bcf	9,0	;volatile
  1167                           
  1168                           ;main.c: 317: ANS11 = 0;
  1169  004E  1189               	bcf	9,3	;volatile
  1170                           
  1171                           ;main.c: 318: RB5=1;
  1172  004F  1283               	bcf	3,5	;RP0=0, select bank0
  1173  0050  1303               	bcf	3,6	;RP1=0, select bank0
  1174  0051  1686               	bsf	6,5	;volatile
  1175                           
  1176                           ;main.c: 321: T0IE = 1;
  1177  0052  168B               	bsf	11,5	;volatile
  1178                           
  1179                           ;main.c: 322: TMR1IE = 0;
  1180  0053  1683               	bsf	3,5	;RP0=1, select bank1
  1181  0054  1303               	bcf	3,6	;RP1=0, select bank1
  1182  0055  100C               	bcf	12,0	;volatile
  1183                           
  1184                           ;main.c: 323: PEIE = 1;
  1185  0056  170B               	bsf	11,6	;volatile
  1186                           
  1187                           ;main.c: 324: GIE = 1;
  1188  0057  178B               	bsf	11,7	;volatile
  1189                           
  1190                           ;main.c: 325: IOCB=0b00011000;
  1191  0058  3018               	movlw	24
  1192  0059  0096               	movwf	22	;volatile
  1193                           
  1194                           ;main.c: 326: RBIE = 1;
  1195  005A  158B               	bsf	11,3	;volatile
  1196                           
  1197                           ;main.c: 330: serial_init();
  1198  005B  120A  118A  27E3  120A  118A  	fcall	_serial_init
  1199                           
  1200                           ;main.c: 335: pwm_init();
  1201  0060  120A  158A  27D6  120A  118A  	fcall	_pwm_init
  1202                           
  1203                           ;main.c: 342: encoders_init();
  1204  0065  120A  158A  274E  120A  118A  	fcall	_encoders_init
  1205                           
  1206                           ;main.c: 350: pwm_set(1, 0);
  1207  006A  3001               	movlw	1
  1208  006B  1283               	bcf	3,5	;RP0=0, select bank0
  1209  006C  1303               	bcf	3,6	;RP1=0, select bank0
  1210  006D  00BC               	movwf	pwm_set@channel
  1211  006E  3000               	movlw	0
  1212  006F  00BD               	movwf	pwm_set@channel+1
  1213  0070  3000               	movlw	0
  1214  0071  00C1               	movwf	pwm_set@duty_cycle+3
  1215  0072  3000               	movlw	0
  1216  0073  00C0               	movwf	pwm_set@duty_cycle+2
  1217  0074  3000               	movlw	0
  1218  0075  00BF               	movwf	pwm_set@duty_cycle+1
  1219  0076  3000               	movlw	0
  1220  0077  00BE               	movwf	pwm_set@duty_cycle
  1221  0078  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  1222                           
  1223                           ;main.c: 351: pwm_set(2, 0);
  1224  007D  3002               	movlw	2
  1225  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1226  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0080  00BC               	movwf	pwm_set@channel
  1228  0081  3000               	movlw	0
  1229  0082  00BD               	movwf	pwm_set@channel+1
  1230  0083  3000               	movlw	0
  1231  0084  00C1               	movwf	pwm_set@duty_cycle+3
  1232  0085  3000               	movlw	0
  1233  0086  00C0               	movwf	pwm_set@duty_cycle+2
  1234  0087  3000               	movlw	0
  1235  0088  00BF               	movwf	pwm_set@duty_cycle+1
  1236  0089  3000               	movlw	0
  1237  008A  00BE               	movwf	pwm_set@duty_cycle
  1238  008B  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  1239  0090                     l2577:	
  1240                           
  1241                           ;main.c: 363: if (set_motor_flag){
  1242  0090  1683               	bsf	3,5	;RP0=1, select bank1
  1243  0091  1303               	bcf	3,6	;RP1=0, select bank1
  1244  0092  0844               	movf	_set_motor_flag^(0+128),w
  1245  0093  1903               	btfsc	3,2
  1246  0094  289D               	goto	l2583
  1247                           
  1248                           ;main.c: 364: SetMotor();
  1249  0095  120A  118A  21E1  120A  118A  	fcall	_SetMotor
  1250                           
  1251                           ;main.c: 365: set_motor_flag = 0;
  1252  009A  1683               	bsf	3,5	;RP0=1, select bank1
  1253  009B  1303               	bcf	3,6	;RP1=0, select bank1
  1254  009C  01C4               	clrf	_set_motor_flag^(0+128)
  1255  009D                     l2583:	
  1256                           
  1257                           ;main.c: 366: };main.c: 368: if (sampling && (samples > 90)){
  1258  009D  0873               	movf	_sampling,w	;volatile
  1259  009E  1903               	btfsc	3,2
  1260  009F  2930               	goto	l2611
  1261  00A0  0871               	movf	_samples+1,w	;volatile
  1262  00A1  3A80               	xorlw	128
  1263  00A2  00FF               	movwf	127
  1264  00A3  3080               	movlw	128
  1265  00A4  027F               	subwf	127,w
  1266  00A5  1D03               	skipz
  1267  00A6  28A9               	goto	u2315
  1268  00A7  305B               	movlw	91
  1269  00A8  0270               	subwf	_samples,w	;volatile
  1270  00A9                     u2315:	
  1271  00A9  1C03               	skipc
  1272  00AA  2930               	goto	l2611
  1273                           
  1274                           ;main.c: 370: sampling = 0;
  1275  00AB  01F3               	clrf	_sampling	;volatile
  1276                           
  1277                           ;main.c: 372: RB5=1;
  1278  00AC  1283               	bcf	3,5	;RP0=0, select bank0
  1279  00AD  1303               	bcf	3,6	;RP1=0, select bank0
  1280  00AE  1686               	bsf	6,5	;volatile
  1281                           
  1282                           ;main.c: 374: char sVar[20];;main.c: 375: samples = 0;
  1283  00AF  01F0               	clrf	_samples	;volatile
  1284  00B0  01F1               	clrf	_samples+1	;volatile
  1285                           
  1286                           ;main.c: 376: sprintf(sVar, "Kp: %d -> ", 4);
  1287  00B1  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1288  00B2  00DA               	movwf	??_main
  1289  00B3  085A               	movf	??_main,w
  1290  00B4  00AE               	movwf	sprintf@f
  1291  00B5  3004               	movlw	4
  1292  00B6  00AF               	movwf	?_sprintf+1
  1293  00B7  3000               	movlw	0
  1294  00B8  00B0               	movwf	?_sprintf+2
  1295  00B9  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1296  00BA  120A  118A  2465  120A  118A  	fcall	_sprintf
  1297                           
  1298                           ;main.c: 377: putst(sVar);
  1299  00BF  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1300  00C0  120A  118A  2779  120A  118A  	fcall	_putst
  1301  00C5                     l357:	
  1302                           ;main.c: 378: while (samples <= 90 /2){
  1303                           
  1304  00C5  0871               	movf	_samples+1,w	;volatile
  1305  00C6  3A80               	xorlw	128
  1306  00C7  00FF               	movwf	127
  1307  00C8  3080               	movlw	128
  1308  00C9  027F               	subwf	127,w
  1309  00CA  1D03               	skipz
  1310  00CB  28CE               	goto	u2325
  1311  00CC  302E               	movlw	46
  1312  00CD  0270               	subwf	_samples,w	;volatile
  1313  00CE                     u2325:	
  1314  00CE  1803               	btfsc	3,0
  1315  00CF  2913               	goto	l360
  1316                           
  1317                           ;main.c: 379: sprintf(sVar, "%d ", pos_log1[samples]);
  1318  00D0  3034               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1319  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1320  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1321  00D3  00DA               	movwf	??_main
  1322  00D4  085A               	movf	??_main,w
  1323  00D5  00AE               	movwf	sprintf@f
  1324  00D6  0870               	movf	_samples,w	;volatile
  1325  00D7  3EBE               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  1326  00D8  0084               	movwf	4
  1327  00D9  1783               	bsf	3,7	;select IRP bank3
  1328  00DA  0800               	movf	0,w
  1329  00DB  00AF               	movwf	?_sprintf+1
  1330  00DC  01B0               	clrf	?_sprintf+2
  1331  00DD  1BAF               	btfsc	?_sprintf+1,7
  1332  00DE  03B0               	decf	?_sprintf+2,f
  1333  00DF  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1334  00E0  120A  118A  2465  120A  118A  	fcall	_sprintf
  1335                           
  1336                           ;main.c: 380: putst(sVar);
  1337  00E5  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1338  00E6  120A  118A  2779  120A  118A  	fcall	_putst
  1339                           
  1340                           ;main.c: 381: samples++;
  1341  00EB  3001               	movlw	1
  1342  00EC  07F0               	addwf	_samples,f	;volatile
  1343  00ED  1803               	skipnc
  1344  00EE  0AF1               	incf	_samples+1,f	;volatile
  1345  00EF  3000               	movlw	0
  1346  00F0  07F1               	addwf	_samples+1,f	;volatile
  1347  00F1  28C5               	goto	l357
  1348  00F2                     l2601:	
  1349                           
  1350                           ;main.c: 384: sprintf(sVar, "%d ", pos_log2[samples - 90 / 2]);
  1351  00F2  3034               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1352  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1353  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1354  00F5  00DA               	movwf	??_main
  1355  00F6  085A               	movf	??_main,w
  1356  00F7  00AE               	movwf	sprintf@f
  1357  00F8  0870               	movf	_samples,w	;volatile
  1358  00F9  3E63               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  1359  00FA  0084               	movwf	4
  1360  00FB  1783               	bsf	3,7	;select IRP bank3
  1361  00FC  0800               	movf	0,w
  1362  00FD  00AF               	movwf	?_sprintf+1
  1363  00FE  01B0               	clrf	?_sprintf+2
  1364  00FF  1BAF               	btfsc	?_sprintf+1,7
  1365  0100  03B0               	decf	?_sprintf+2,f
  1366  0101  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1367  0102  120A  118A  2465  120A  118A  	fcall	_sprintf
  1368                           
  1369                           ;main.c: 385: putst(sVar);
  1370  0107  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1371  0108  120A  118A  2779  120A  118A  	fcall	_putst
  1372                           
  1373                           ;main.c: 386: samples++;
  1374  010D  3001               	movlw	1
  1375  010E  07F0               	addwf	_samples,f	;volatile
  1376  010F  1803               	skipnc
  1377  0110  0AF1               	incf	_samples+1,f	;volatile
  1378  0111  3000               	movlw	0
  1379  0112  07F1               	addwf	_samples+1,f	;volatile
  1380  0113                     l360:	
  1381  0113  0871               	movf	_samples+1,w	;volatile
  1382  0114  3A80               	xorlw	128
  1383  0115  00FF               	movwf	127
  1384  0116  3080               	movlw	128
  1385  0117  027F               	subwf	127,w
  1386  0118  1D03               	skipz
  1387  0119  291C               	goto	u2335
  1388  011A  305A               	movlw	90
  1389  011B  0270               	subwf	_samples,w	;volatile
  1390  011C                     u2335:	
  1391  011C  1C03               	skipc
  1392  011D  28F2               	goto	l2601
  1393                           
  1394                           ;main.c: 387: };main.c: 388: sprintf(sVar, "Fim do teste ");
  1395  011E  301B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1396  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0121  00DA               	movwf	??_main
  1399  0122  085A               	movf	??_main,w
  1400  0123  00AE               	movwf	sprintf@f
  1401  0124  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1402  0125  120A  118A  2465  120A  118A  	fcall	_sprintf
  1403                           
  1404                           ;main.c: 389: putst(sVar);
  1405  012A  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1406  012B  120A  118A  2779  120A  118A  	fcall	_putst
  1407  0130                     l2611:	
  1408                           
  1409                           ;main.c: 390: };main.c: 391: char serialIn = chkchr();
  1410  0130  120A  158A  272B  120A  118A  	fcall	_chkchr
  1411  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0137  00DA               	movwf	??_main
  1414  0138  085A               	movf	??_main,w
  1415  0139  1683               	bsf	3,5	;RP0=1, select bank1
  1416  013A  1303               	bcf	3,6	;RP1=0, select bank1
  1417  013B  00B9               	movwf	main@serialIn_355^(0+128)
  1418                           
  1419                           ;main.c: 392: if (serialIn == 'u'){
  1420  013C  3075               	movlw	117
  1421  013D  0639               	xorwf	main@serialIn_355^(0+128),w
  1422  013E  1D03               	btfss	3,2
  1423  013F  2964               	goto	l2627
  1424                           
  1425                           ;main.c: 393: resetCounter();
  1426  0140  120A  158A  273B  120A  118A  	fcall	_resetCounter
  1427                           
  1428                           ;main.c: 395: last_pos = 0;
  1429  0145  3000               	movlw	0
  1430  0146  1683               	bsf	3,5	;RP0=1, select bank1
  1431  0147  1303               	bcf	3,6	;RP1=0, select bank1
  1432  0148  00BD               	movwf	(_last_pos+3)^(0+128)	;volatile
  1433  0149  3000               	movlw	0
  1434  014A  00BC               	movwf	(_last_pos+2)^(0+128)	;volatile
  1435  014B  3000               	movlw	0
  1436  014C  00BB               	movwf	(_last_pos+1)^(0+128)	;volatile
  1437  014D  3000               	movlw	0
  1438  014E  00BA               	movwf	_last_pos^(0+128)	;volatile
  1439                           
  1440                           ;main.c: 396: samples = 0;
  1441  014F  01F0               	clrf	_samples	;volatile
  1442  0150  01F1               	clrf	_samples+1	;volatile
  1443                           
  1444                           ;main.c: 397: sampling = 1;
  1445  0151  3001               	movlw	1
  1446  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1447  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1448  0154  00DA               	movwf	??_main
  1449  0155  085A               	movf	??_main,w
  1450  0156  00F3               	movwf	_sampling	;volatile
  1451                           
  1452                           ;main.c: 398: SetPoint(100);
  1453  0157  3064               	movlw	100
  1454  0158  00A0               	movwf	SetPoint@new_val
  1455  0159  3000               	movlw	0
  1456  015A  00A1               	movwf	SetPoint@new_val+1
  1457  015B  120A  158A  2789  120A  118A  	fcall	_SetPoint
  1458                           
  1459                           ;main.c: 399: RB5=0;
  1460  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1462  0162  1286               	bcf	6,5	;volatile
  1463                           
  1464                           ;main.c: 401: }else if (serialIn == 'w' ){
  1465  0163  2890               	goto	l2577
  1466  0164                     l2627:	
  1467  0164  3077               	movlw	119
  1468  0165  0639               	xorwf	main@serialIn_355^(0+128),w
  1469  0166  1D03               	btfss	3,2
  1470  0167  2978               	goto	l2631
  1471                           
  1472                           ;main.c: 402: SetPoint(set_point + 100);
  1473  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1475  016A  085B               	movf	_set_point,w	;volatile
  1476  016B  3E64               	addlw	100
  1477  016C  00A0               	movwf	SetPoint@new_val
  1478  016D  085C               	movf	_set_point+1,w	;volatile
  1479  016E  1803               	skipnc
  1480  016F  3E01               	addlw	1
  1481  0170  3E00               	addlw	0
  1482  0171  00A1               	movwf	SetPoint@new_val+1
  1483  0172  120A  158A  2789  120A  118A  	fcall	_SetPoint
  1484                           
  1485                           ;main.c: 403: }else if (serialIn == 's'){
  1486  0177  2890               	goto	l2577
  1487  0178                     l2631:	
  1488  0178  3073               	movlw	115
  1489  0179  0639               	xorwf	main@serialIn_355^(0+128),w
  1490  017A  1D03               	btfss	3,2
  1491  017B  298C               	goto	l2635
  1492                           
  1493                           ;main.c: 404: SetPoint(set_point - 100);
  1494  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1495  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1496  017E  085B               	movf	_set_point,w	;volatile
  1497  017F  3E9C               	addlw	156
  1498  0180  00A0               	movwf	SetPoint@new_val
  1499  0181  085C               	movf	_set_point+1,w	;volatile
  1500  0182  1803               	skipnc
  1501  0183  3E01               	addlw	1
  1502  0184  3EFF               	addlw	255
  1503  0185  00A1               	movwf	SetPoint@new_val+1
  1504  0186  120A  158A  2789  120A  118A  	fcall	_SetPoint
  1505                           
  1506                           ;main.c: 405: }else if (serialIn == ' '){
  1507  018B  2890               	goto	l2577
  1508  018C                     l2635:	
  1509  018C  3020               	movlw	32
  1510  018D  0639               	xorwf	main@serialIn_355^(0+128),w
  1511  018E  1D03               	btfss	3,2
  1512  018F  2996               	goto	l2639
  1513                           
  1514                           ;main.c: 406: motor_reset();
  1515  0190  120A  118A  26C6  120A  118A  	fcall	_motor_reset
  1516                           
  1517                           ;main.c: 407: }else if (serialIn == 'e' ){
  1518  0195  2890               	goto	l2577
  1519  0196                     l2639:	
  1520  0196  3065               	movlw	101
  1521  0197  0639               	xorwf	main@serialIn_355^(0+128),w
  1522  0198  1D03               	btfss	3,2
  1523  0199  29AA               	goto	l2643
  1524                           
  1525                           ;main.c: 408: SetPoint(set_point + 50);
  1526  019A  1283               	bcf	3,5	;RP0=0, select bank0
  1527  019B  1303               	bcf	3,6	;RP1=0, select bank0
  1528  019C  085B               	movf	_set_point,w	;volatile
  1529  019D  3E32               	addlw	50
  1530  019E  00A0               	movwf	SetPoint@new_val
  1531  019F  085C               	movf	_set_point+1,w	;volatile
  1532  01A0  1803               	skipnc
  1533  01A1  3E01               	addlw	1
  1534  01A2  3E00               	addlw	0
  1535  01A3  00A1               	movwf	SetPoint@new_val+1
  1536  01A4  120A  158A  2789  120A  118A  	fcall	_SetPoint
  1537                           
  1538                           ;main.c: 409: }else if (serialIn == 'd'){
  1539  01A9  2890               	goto	l2577
  1540  01AA                     l2643:	
  1541  01AA  3064               	movlw	100
  1542  01AB  0639               	xorwf	main@serialIn_355^(0+128),w
  1543  01AC  1D03               	btfss	3,2
  1544  01AD  29BE               	goto	l2647
  1545                           
  1546                           ;main.c: 410: SetPoint(set_point - 50);
  1547  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1548  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1549  01B0  085B               	movf	_set_point,w	;volatile
  1550  01B1  3ECE               	addlw	206
  1551  01B2  00A0               	movwf	SetPoint@new_val
  1552  01B3  085C               	movf	_set_point+1,w	;volatile
  1553  01B4  1803               	skipnc
  1554  01B5  3E01               	addlw	1
  1555  01B6  3EFF               	addlw	255
  1556  01B7  00A1               	movwf	SetPoint@new_val+1
  1557  01B8  120A  158A  2789  120A  118A  	fcall	_SetPoint
  1558                           
  1559                           ;main.c: 411: }else if (serialIn == '0'){
  1560  01BD  2890               	goto	l2577
  1561  01BE                     l2647:	
  1562  01BE  3030               	movlw	48
  1563  01BF  0639               	xorwf	main@serialIn_355^(0+128),w
  1564  01C0  1D03               	btfss	3,2
  1565  01C1  29CD               	goto	l2651
  1566                           
  1567                           ;main.c: 412: SetPoint(0);
  1568  01C2  3000               	movlw	0
  1569  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1570  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1571  01C5  00A0               	movwf	SetPoint@new_val
  1572  01C6  00A1               	movwf	SetPoint@new_val+1
  1573  01C7  120A  158A  2789  120A  118A  	fcall	_SetPoint
  1574                           
  1575                           ;main.c: 413: }else if (serialIn == 'k'){
  1576  01CC  2890               	goto	l2577
  1577  01CD                     l2651:	
  1578  01CD  306B               	movlw	107
  1579  01CE  0639               	xorwf	main@serialIn_355^(0+128),w
  1580  01CF  1D03               	btfss	3,2
  1581  01D0  29D8               	goto	l2655
  1582                           
  1583                           ;main.c: 414: onlyK = 1;
  1584  01D1  3001               	movlw	1
  1585  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1586  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1587  01D4  00E9               	movwf	_onlyK
  1588  01D5  3000               	movlw	0
  1589  01D6  00EA               	movwf	_onlyK+1
  1590                           
  1591                           ;main.c: 415: }else if (serialIn == 'l'){
  1592  01D7  2890               	goto	l2577
  1593  01D8                     l2655:	
  1594  01D8  306C               	movlw	108
  1595  01D9  0639               	xorwf	main@serialIn_355^(0+128),w
  1596  01DA  1D03               	btfss	3,2
  1597  01DB  2890               	goto	l2577
  1598                           
  1599                           ;main.c: 416: onlyK = 0;
  1600  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1601  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1602  01DE  01E9               	clrf	_onlyK
  1603  01DF  01EA               	clrf	_onlyK+1
  1604  01E0  2890               	goto	l2577
  1605  01E1                     __end_of_main:	
  1606                           
  1607                           	psect	text1
  1608  0465                     __ptext1:	
  1609 ;; *************** function _sprintf *****************
  1610 ;; Defined at:
  1611 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  sp              1    wreg     PTR unsigned char 
  1614 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  1615 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1616 ;;		 -> STR_5(14), STR_4(4), STR_3(4), STR_2(11), 
  1617 ;;		 -> STR_1(16), 
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  1620 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  1621 ;;  tmpval          4    0        struct .
  1622 ;;  val             2   25[BANK0 ] unsigned int 
  1623 ;;  cp              2    0        PTR const unsigned char 
  1624 ;;  len             2    0        unsigned int 
  1625 ;;  c               1   28[BANK0 ] unsigned char 
  1626 ;;  prec            1   24[BANK0 ] char 
  1627 ;;  flag            1   23[BANK0 ] unsigned char 
  1628 ;;  ap              1   22[BANK0 ] PTR void [1]
  1629 ;;		 -> ?_sprintf(2), 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  2   14[BANK0 ] int 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1639 ;;      Params:         0       5       0       0       0
  1640 ;;      Locals:         0       7       0       0       0
  1641 ;;      Temps:          0       3       0       0       0
  1642 ;;      Totals:         0      15       0       0       0
  1643 ;;Total ram usage:       15 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    2
  1646 ;; This function calls:
  1647 ;;		___lwdiv
  1648 ;;		___lwmod
  1649 ;; This function is called by:
  1650 ;;		_main
  1651 ;;		_PrintSetpoint
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _sprintf
  1657  0465                     _sprintf:	
  1658                           
  1659                           ;incstack = 0
  1660                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1661                           ;sprintf@sp stored from wreg
  1662  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0467  00BB               	movwf	sprintf@sp
  1665                           
  1666                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  1667  0468  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1668  0469  00B3               	movwf	??_sprintf
  1669  046A  0833               	movf	??_sprintf,w
  1670  046B  00B6               	movwf	sprintf@ap
  1671  046C                     l2069:	
  1672                           ;doprnt.c: 548: while((c = *f++)) {
  1673                           
  1674  046C  3001               	movlw	1
  1675  046D  07AE               	addwf	sprintf@f,f
  1676  046E  30FF               	movlw	-1
  1677  046F  072E               	addwf	sprintf@f,w
  1678  0470  0084               	movwf	4
  1679  0471  120A  118A  2700  120A  118A  	fcall	stringdir
  1680  0476  00B3               	movwf	??_sprintf
  1681  0477  0833               	movf	??_sprintf,w
  1682  0478  00BC               	movwf	sprintf@c
  1683  0479  083C               	movf	sprintf@c,w
  1684  047A  1903               	btfsc	3,2
  1685  047B  2D32               	goto	l2071
  1686                           
  1687                           ;doprnt.c: 550: if(c != '%')
  1688  047C  3025               	movlw	37
  1689  047D  063C               	xorwf	sprintf@c,w
  1690  047E  1903               	btfsc	3,2
  1691  047F  2C8C               	goto	l2025
  1692                           
  1693                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1694  0480  083C               	movf	sprintf@c,w
  1695  0481  00B3               	movwf	??_sprintf
  1696  0482  083B               	movf	sprintf@sp,w
  1697  0483  0084               	movwf	4
  1698  0484  0833               	movf	??_sprintf,w
  1699  0485  1383               	bcf	3,7	;select IRP bank0
  1700  0486  0080               	movwf	0
  1701  0487  3001               	movlw	1
  1702  0488  00B3               	movwf	??_sprintf
  1703  0489  0833               	movf	??_sprintf,w
  1704  048A  07BB               	addwf	sprintf@sp,f
  1705                           
  1706                           ;doprnt.c: 554: continue;
  1707  048B  2C6C               	goto	l2069
  1708  048C                     l2025:	
  1709                           
  1710                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  1711  048C  01B7               	clrf	sprintf@flag
  1712                           
  1713                           ;doprnt.c: 654: switch(c = *f++) {
  1714  048D  3001               	movlw	1
  1715  048E  07AE               	addwf	sprintf@f,f
  1716  048F  30FF               	movlw	-1
  1717  0490  072E               	addwf	sprintf@f,w
  1718  0491  0084               	movwf	4
  1719  0492  120A  118A  2700  120A  118A  	fcall	stringdir
  1720  0497  00BC               	movwf	sprintf@c
  1721                           
  1722                           ; Switch size 1, requested type "simple"
  1723                           ; Number of cases is 3, Range of values is 0 to 105
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte           10     6 (average)
  1727                           ; jumptable            260     6 (fixed)
  1728                           ;	Chosen strategy is simple_byte
  1729  0498  3A00               	xorlw	0	; case 0
  1730  0499  1903               	skipnz
  1731  049A  2D32               	goto	l2071
  1732  049B  3A64               	xorlw	100	; case 100
  1733  049C  1903               	skipnz
  1734  049D  2CA2               	goto	l2031
  1735  049E  3A0D               	xorlw	13	; case 105
  1736  049F  1903               	skipnz
  1737  04A0  2CA2               	goto	l2031
  1738  04A1  2C6C               	goto	l2069
  1739  04A2                     l2031:	
  1740                           
  1741                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1742  04A2  0836               	movf	sprintf@ap,w
  1743  04A3  0084               	movwf	4
  1744  04A4  1383               	bcf	3,7	;select IRP bank0
  1745  04A5  0800               	movf	0,w
  1746  04A6  00B9               	movwf	sprintf@val
  1747  04A7  0A84               	incf	4,f
  1748  04A8  0800               	movf	0,w
  1749  04A9  00BA               	movwf	sprintf@val+1
  1750  04AA  3002               	movlw	2
  1751  04AB  00B3               	movwf	??_sprintf
  1752  04AC  0833               	movf	??_sprintf,w
  1753  04AD  07B6               	addwf	sprintf@ap,f
  1754                           
  1755                           ;doprnt.c: 1280: if((int)val < 0) {
  1756  04AE  1FBA               	btfss	sprintf@val+1,7
  1757  04AF  2CB9               	goto	l2041
  1758                           
  1759                           ;doprnt.c: 1281: flag |= 0x03;
  1760  04B0  3003               	movlw	3
  1761  04B1  00B3               	movwf	??_sprintf
  1762  04B2  0833               	movf	??_sprintf,w
  1763  04B3  04B7               	iorwf	sprintf@flag,f
  1764                           
  1765                           ;doprnt.c: 1282: val = -val;
  1766  04B4  09B9               	comf	sprintf@val,f
  1767  04B5  09BA               	comf	sprintf@val+1,f
  1768  04B6  0AB9               	incf	sprintf@val,f
  1769  04B7  1903               	skipnz
  1770  04B8  0ABA               	incf	sprintf@val+1,f
  1771  04B9                     l2041:	
  1772                           
  1773                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1774  04B9  01BC               	clrf	sprintf@c
  1775  04BA  0ABC               	incf	sprintf@c,f
  1776  04BB                     l2047:	
  1777                           
  1778                           ;doprnt.c: 1325: if(val < dpowers[c])
  1779  04BB  083C               	movf	sprintf@c,w
  1780  04BC  00B3               	movwf	??_sprintf
  1781  04BD  0733               	addwf	??_sprintf,w
  1782  04BE  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1783  04BF  0084               	movwf	4
  1784  04C0  120A  118A  2700  120A  118A  	fcall	stringdir
  1785  04C5  00B4               	movwf	??_sprintf+1
  1786  04C6  120A  118A  2700  120A  118A  	fcall	stringdir
  1787  04CB  00B5               	movwf	??_sprintf+2
  1788  04CC  0835               	movf	??_sprintf+2,w
  1789  04CD  023A               	subwf	sprintf@val+1,w
  1790  04CE  1D03               	skipz
  1791  04CF  2CD2               	goto	u1685
  1792  04D0  0834               	movf	??_sprintf+1,w
  1793  04D1  0239               	subwf	sprintf@val,w
  1794  04D2                     u1685:	
  1795  04D2  1C03               	btfss	3,0
  1796  04D3  2CDC               	goto	l2053
  1797  04D4  3001               	movlw	1
  1798  04D5  00B3               	movwf	??_sprintf
  1799  04D6  0833               	movf	??_sprintf,w
  1800  04D7  07BC               	addwf	sprintf@c,f
  1801  04D8  3005               	movlw	5
  1802  04D9  063C               	xorwf	sprintf@c,w
  1803  04DA  1D03               	btfss	3,2
  1804  04DB  2CBB               	goto	l2047
  1805  04DC                     l2053:	
  1806                           
  1807                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  1808  04DC  0837               	movf	sprintf@flag,w
  1809  04DD  3903               	andlw	3
  1810  04DE  1903               	btfsc	3,2
  1811  04DF  2CEB               	goto	l2059
  1812                           
  1813                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  1814  04E0  302D               	movlw	45
  1815  04E1  00B3               	movwf	??_sprintf
  1816  04E2  083B               	movf	sprintf@sp,w
  1817  04E3  0084               	movwf	4
  1818  04E4  0833               	movf	??_sprintf,w
  1819  04E5  1383               	bcf	3,7	;select IRP bank0
  1820  04E6  0080               	movwf	0
  1821  04E7  3001               	movlw	1
  1822  04E8  00B3               	movwf	??_sprintf
  1823  04E9  0833               	movf	??_sprintf,w
  1824  04EA  07BB               	addwf	sprintf@sp,f
  1825  04EB                     l2059:	
  1826                           
  1827                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1828  04EB  083C               	movf	sprintf@c,w
  1829  04EC  00B3               	movwf	??_sprintf
  1830  04ED  0833               	movf	??_sprintf,w
  1831  04EE  00B8               	movwf	sprintf@prec
  1832  04EF                     l2067:	
  1833                           ;doprnt.c: 1493: while(prec--) {
  1834                           
  1835  04EF  30FF               	movlw	255
  1836  04F0  00B3               	movwf	??_sprintf
  1837  04F1  0833               	movf	??_sprintf,w
  1838  04F2  07B8               	addwf	sprintf@prec,f
  1839  04F3  0A38               	incf	sprintf@prec,w
  1840  04F4  1903               	btfsc	3,2
  1841  04F5  2C6C               	goto	l2069
  1842                           
  1843                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1844  04F6  300A               	movlw	10
  1845  04F7  00A8               	movwf	___lwmod@divisor
  1846  04F8  3000               	movlw	0
  1847  04F9  00A9               	movwf	___lwmod@divisor+1
  1848  04FA  0838               	movf	sprintf@prec,w
  1849  04FB  00B3               	movwf	??_sprintf
  1850  04FC  0733               	addwf	??_sprintf,w
  1851  04FD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1852  04FE  0084               	movwf	4
  1853  04FF  120A  118A  2700  120A  118A  	fcall	stringdir
  1854  0504  00A0               	movwf	___lwdiv@divisor
  1855  0505  120A  118A  2700  120A  118A  	fcall	stringdir
  1856  050A  00A1               	movwf	___lwdiv@divisor+1
  1857  050B  083A               	movf	sprintf@val+1,w
  1858  050C  00A3               	movwf	___lwdiv@dividend+1
  1859  050D  0839               	movf	sprintf@val,w
  1860  050E  00A2               	movwf	___lwdiv@dividend
  1861  050F  120A  118A  2688  120A  118A  	fcall	___lwdiv
  1862  0514  1283               	bcf	3,5	;RP0=0, select bank0
  1863  0515  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0516  0821               	movf	?___lwdiv+1,w
  1865  0517  00AB               	movwf	___lwmod@dividend+1
  1866  0518  0820               	movf	?___lwdiv,w
  1867  0519  00AA               	movwf	___lwmod@dividend
  1868  051A  120A  118A  27AF  120A  118A  	fcall	___lwmod
  1869  051F  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0520  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0521  0828               	movf	?___lwmod,w
  1872  0522  3E30               	addlw	48
  1873  0523  00B4               	movwf	??_sprintf+1
  1874  0524  0834               	movf	??_sprintf+1,w
  1875  0525  00BC               	movwf	sprintf@c
  1876                           
  1877                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1878  0526  083C               	movf	sprintf@c,w
  1879  0527  00B3               	movwf	??_sprintf
  1880  0528  083B               	movf	sprintf@sp,w
  1881  0529  0084               	movwf	4
  1882  052A  0833               	movf	??_sprintf,w
  1883  052B  1383               	bcf	3,7	;select IRP bank0
  1884  052C  0080               	movwf	0
  1885  052D  3001               	movlw	1
  1886  052E  00B3               	movwf	??_sprintf
  1887  052F  0833               	movf	??_sprintf,w
  1888  0530  07BB               	addwf	sprintf@sp,f
  1889  0531  2CEF               	goto	l2067
  1890  0532                     l2071:	
  1891                           
  1892                           ;doprnt.c: 1557: *sp = 0;
  1893  0532  083B               	movf	sprintf@sp,w
  1894  0533  0084               	movwf	4
  1895  0534  1383               	bcf	3,7	;select IRP bank0
  1896  0535  0180               	clrf	0
  1897  0536  0008               	return
  1898  0537                     __end_of_sprintf:	
  1899                           
  1900                           	psect	text2
  1901  07AF                     __ptext2:	
  1902 ;; *************** function ___lwmod *****************
  1903 ;; Defined at:
  1904 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  divisor         2    8[BANK0 ] unsigned int 
  1907 ;;  dividend        2   10[BANK0 ] unsigned int 
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;  counter         1   13[BANK0 ] unsigned char 
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  2    8[BANK0 ] unsigned int 
  1912 ;; Registers used:
  1913 ;;		wreg, status,2, status,0
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1919 ;;      Params:         0       4       0       0       0
  1920 ;;      Locals:         0       1       0       0       0
  1921 ;;      Temps:          0       1       0       0       0
  1922 ;;      Totals:         0       6       0       0       0
  1923 ;;Total ram usage:        6 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    1
  1926 ;; This function calls:
  1927 ;;		Nothing
  1928 ;; This function is called by:
  1929 ;;		_sprintf
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function ___lwmod
  1935  07AF                     ___lwmod:	
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1939  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  1940  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  1941  07B1  0828               	movf	___lwmod@divisor,w
  1942  07B2  0429               	iorwf	___lwmod@divisor+1,w
  1943  07B3  1903               	btfsc	3,2
  1944  07B4  2FDE               	goto	l1919
  1945  07B5  01AD               	clrf	___lwmod@counter
  1946  07B6  0AAD               	incf	___lwmod@counter,f
  1947  07B7                     l1909:	
  1948  07B7  1BA9               	btfsc	___lwmod@divisor+1,7
  1949  07B8  2FC5               	goto	l1911
  1950  07B9  3001               	movlw	1
  1951  07BA                     u1535:	
  1952  07BA  1003               	clrc
  1953  07BB  0DA8               	rlf	___lwmod@divisor,f
  1954  07BC  0DA9               	rlf	___lwmod@divisor+1,f
  1955  07BD  3EFF               	addlw	-1
  1956  07BE  1D03               	skipz
  1957  07BF  2FBA               	goto	u1535
  1958  07C0  3001               	movlw	1
  1959  07C1  00AC               	movwf	??___lwmod
  1960  07C2  082C               	movf	??___lwmod,w
  1961  07C3  07AD               	addwf	___lwmod@counter,f
  1962  07C4  2FB7               	goto	l1909
  1963  07C5                     l1911:	
  1964  07C5  0829               	movf	___lwmod@divisor+1,w
  1965  07C6  022B               	subwf	___lwmod@dividend+1,w
  1966  07C7  1D03               	skipz
  1967  07C8  2FCB               	goto	u1555
  1968  07C9  0828               	movf	___lwmod@divisor,w
  1969  07CA  022A               	subwf	___lwmod@dividend,w
  1970  07CB                     u1555:	
  1971  07CB  1C03               	skipc
  1972  07CC  2FD3               	goto	l1915
  1973  07CD  0828               	movf	___lwmod@divisor,w
  1974  07CE  02AA               	subwf	___lwmod@dividend,f
  1975  07CF  0829               	movf	___lwmod@divisor+1,w
  1976  07D0  1C03               	skipc
  1977  07D1  03AB               	decf	___lwmod@dividend+1,f
  1978  07D2  02AB               	subwf	___lwmod@dividend+1,f
  1979  07D3                     l1915:	
  1980  07D3  3001               	movlw	1
  1981  07D4                     u1565:	
  1982  07D4  1003               	clrc
  1983  07D5  0CA9               	rrf	___lwmod@divisor+1,f
  1984  07D6  0CA8               	rrf	___lwmod@divisor,f
  1985  07D7  3EFF               	addlw	-1
  1986  07D8  1D03               	skipz
  1987  07D9  2FD4               	goto	u1565
  1988  07DA  3001               	movlw	1
  1989  07DB  02AD               	subwf	___lwmod@counter,f
  1990  07DC  1D03               	btfss	3,2
  1991  07DD  2FC5               	goto	l1911
  1992  07DE                     l1919:	
  1993  07DE  082B               	movf	___lwmod@dividend+1,w
  1994  07DF  00A9               	movwf	?___lwmod+1
  1995  07E0  082A               	movf	___lwmod@dividend,w
  1996  07E1  00A8               	movwf	?___lwmod
  1997  07E2  0008               	return
  1998  07E3                     __end_of___lwmod:	
  1999                           
  2000                           	psect	text3
  2001  0688                     __ptext3:	
  2002 ;; *************** function ___lwdiv *****************
  2003 ;; Defined at:
  2004 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  divisor         2    0[BANK0 ] unsigned int 
  2007 ;;  dividend        2    2[BANK0 ] unsigned int 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  quotient        2    5[BANK0 ] unsigned int 
  2010 ;;  counter         1    7[BANK0 ] unsigned char 
  2011 ;; Return value:  Size  Location     Type
  2012 ;;                  2    0[BANK0 ] unsigned int 
  2013 ;; Registers used:
  2014 ;;		wreg, status,2, status,0
  2015 ;; Tracked objects:
  2016 ;;		On entry : 0/0
  2017 ;;		On exit  : 0/0
  2018 ;;		Unchanged: 0/0
  2019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2020 ;;      Params:         0       4       0       0       0
  2021 ;;      Locals:         0       3       0       0       0
  2022 ;;      Temps:          0       1       0       0       0
  2023 ;;      Totals:         0       8       0       0       0
  2024 ;;Total ram usage:        8 bytes
  2025 ;; Hardware stack levels used:    1
  2026 ;; Hardware stack levels required when called:    1
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_sprintf
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           
  2035                           ;psect for function ___lwdiv
  2036  0688                     ___lwdiv:	
  2037                           
  2038                           ;incstack = 0
  2039                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2040  0688  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0689  1303               	bcf	3,6	;RP1=0, select bank0
  2042  068A  01A5               	clrf	___lwdiv@quotient
  2043  068B  01A6               	clrf	___lwdiv@quotient+1
  2044  068C  0820               	movf	___lwdiv@divisor,w
  2045  068D  0421               	iorwf	___lwdiv@divisor+1,w
  2046  068E  1903               	btfsc	3,2
  2047  068F  2EC1               	goto	l1897
  2048  0690  01A7               	clrf	___lwdiv@counter
  2049  0691  0AA7               	incf	___lwdiv@counter,f
  2050  0692                     l1885:	
  2051  0692  1BA1               	btfsc	___lwdiv@divisor+1,7
  2052  0693  2EA0               	goto	l1887
  2053  0694  3001               	movlw	1
  2054  0695                     u1465:	
  2055  0695  1003               	clrc
  2056  0696  0DA0               	rlf	___lwdiv@divisor,f
  2057  0697  0DA1               	rlf	___lwdiv@divisor+1,f
  2058  0698  3EFF               	addlw	-1
  2059  0699  1D03               	skipz
  2060  069A  2E95               	goto	u1465
  2061  069B  3001               	movlw	1
  2062  069C  00A4               	movwf	??___lwdiv
  2063  069D  0824               	movf	??___lwdiv,w
  2064  069E  07A7               	addwf	___lwdiv@counter,f
  2065  069F  2E92               	goto	l1885
  2066  06A0                     l1887:	
  2067  06A0  3001               	movlw	1
  2068  06A1                     u1485:	
  2069  06A1  1003               	clrc
  2070  06A2  0DA5               	rlf	___lwdiv@quotient,f
  2071  06A3  0DA6               	rlf	___lwdiv@quotient+1,f
  2072  06A4  3EFF               	addlw	-1
  2073  06A5  1D03               	skipz
  2074  06A6  2EA1               	goto	u1485
  2075  06A7  0821               	movf	___lwdiv@divisor+1,w
  2076  06A8  0223               	subwf	___lwdiv@dividend+1,w
  2077  06A9  1D03               	skipz
  2078  06AA  2EAD               	goto	u1495
  2079  06AB  0820               	movf	___lwdiv@divisor,w
  2080  06AC  0222               	subwf	___lwdiv@dividend,w
  2081  06AD                     u1495:	
  2082  06AD  1C03               	skipc
  2083  06AE  2EB6               	goto	l1893
  2084  06AF  0820               	movf	___lwdiv@divisor,w
  2085  06B0  02A2               	subwf	___lwdiv@dividend,f
  2086  06B1  0821               	movf	___lwdiv@divisor+1,w
  2087  06B2  1C03               	skipc
  2088  06B3  03A3               	decf	___lwdiv@dividend+1,f
  2089  06B4  02A3               	subwf	___lwdiv@dividend+1,f
  2090  06B5  1425               	bsf	___lwdiv@quotient,0
  2091  06B6                     l1893:	
  2092  06B6  3001               	movlw	1
  2093  06B7                     u1505:	
  2094  06B7  1003               	clrc
  2095  06B8  0CA1               	rrf	___lwdiv@divisor+1,f
  2096  06B9  0CA0               	rrf	___lwdiv@divisor,f
  2097  06BA  3EFF               	addlw	-1
  2098  06BB  1D03               	skipz
  2099  06BC  2EB7               	goto	u1505
  2100  06BD  3001               	movlw	1
  2101  06BE  02A7               	subwf	___lwdiv@counter,f
  2102  06BF  1D03               	btfss	3,2
  2103  06C0  2EA0               	goto	l1887
  2104  06C1                     l1897:	
  2105  06C1  0826               	movf	___lwdiv@quotient+1,w
  2106  06C2  00A1               	movwf	?___lwdiv+1
  2107  06C3  0825               	movf	___lwdiv@quotient,w
  2108  06C4  00A0               	movwf	?___lwdiv
  2109  06C5  0008               	return
  2110  06C6                     __end_of___lwdiv:	
  2111                           
  2112                           	psect	text4
  2113  07E3                     __ptext4:	
  2114 ;; *************** function _serial_init *****************
  2115 ;; Defined at:
  2116 ;;		line 29 in file "serial.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      void 
  2123 ;; Registers used:
  2124 ;;		wreg
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2130 ;;      Params:         0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0
  2132 ;;      Temps:          0       0       0       0       0
  2133 ;;      Totals:         0       0       0       0       0
  2134 ;;Total ram usage:        0 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    1
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           
  2145                           ;psect for function _serial_init
  2146  07E3                     _serial_init:	
  2147                           
  2148                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  2149                           
  2150                           ;incstack = 0
  2151                           ; Regs used in _serial_init: [wreg]
  2152  07E3  3040               	movlw	64
  2153  07E4  1683               	bsf	3,5	;RP0=1, select bank1
  2154  07E5  1303               	bcf	3,6	;RP1=0, select bank1
  2155  07E6  0099               	movwf	25	;volatile
  2156                           
  2157                           ;serial.c: 66: BRGH=1;
  2158  07E7  1518               	bsf	24,2	;volatile
  2159                           
  2160                           ;serial.c: 67: SYNC=0;
  2161  07E8  1218               	bcf	24,4	;volatile
  2162                           
  2163                           ;serial.c: 68: SPEN=1;
  2164  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  2165  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  2166  07EB  1798               	bsf	24,7	;volatile
  2167                           
  2168                           ;serial.c: 69: CREN=1;
  2169  07EC  1618               	bsf	24,4	;volatile
  2170                           
  2171                           ;serial.c: 70: SREN=0;
  2172  07ED  1298               	bcf	24,5	;volatile
  2173                           
  2174                           ;serial.c: 71: TXIE=0;
  2175  07EE  1683               	bsf	3,5	;RP0=1, select bank1
  2176  07EF  1303               	bcf	3,6	;RP1=0, select bank1
  2177  07F0  120C               	bcf	12,4	;volatile
  2178                           
  2179                           ;serial.c: 72: RCIE=0;
  2180  07F1  128C               	bcf	12,5	;volatile
  2181                           
  2182                           ;serial.c: 73: TX9=0;
  2183  07F2  1318               	bcf	24,6	;volatile
  2184                           
  2185                           ;serial.c: 74: RX9=0;
  2186  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  2187  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  2188  07F5  1318               	bcf	24,6	;volatile
  2189                           
  2190                           ;serial.c: 75: TXEN=0;
  2191  07F6  1683               	bsf	3,5	;RP0=1, select bank1
  2192  07F7  1303               	bcf	3,6	;RP1=0, select bank1
  2193  07F8  1298               	bcf	24,5	;volatile
  2194                           
  2195                           ;serial.c: 76: TXEN=1;
  2196  07F9  1698               	bsf	24,5	;volatile
  2197  07FA  0008               	return
  2198  07FB                     __end_of_serial_init:	
  2199                           
  2200                           	psect	text5
  2201  0FD6                     __ptext5:	
  2202 ;; *************** function _pwm_init *****************
  2203 ;; Defined at:
  2204 ;;		line 25 in file "pwm.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2218 ;;      Params:         0       0       0       0       0
  2219 ;;      Locals:         0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0
  2221 ;;      Totals:         0       0       0       0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    1
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_main
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           
  2233                           ;psect for function _pwm_init
  2234  0FD6                     _pwm_init:	
  2235                           
  2236                           ;pwm.c: 28: TRISC1 = 1;
  2237                           
  2238                           ;incstack = 0
  2239                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2240  0FD6  1683               	bsf	3,5	;RP0=1, select bank1
  2241  0FD7  1303               	bcf	3,6	;RP1=0, select bank1
  2242  0FD8  1487               	bsf	7,1	;volatile
  2243                           
  2244                           ;pwm.c: 29: TRISC2 = 1;
  2245  0FD9  1507               	bsf	7,2	;volatile
  2246                           
  2247                           ;pwm.c: 32: PR2 = 0xFF;
  2248  0FDA  30FF               	movlw	255
  2249  0FDB  0092               	movwf	18	;volatile
  2250                           
  2251                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  2252  0FDC  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0FDD  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0FDE  0817               	movf	23,w	;volatile
  2255  0FDF  39F0               	andlw	-16
  2256  0FE0  380C               	iorlw	12
  2257  0FE1  0097               	movwf	23	;volatile
  2258                           
  2259                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  2260  0FE2  081D               	movf	29,w	;volatile
  2261  0FE3  39F0               	andlw	-16
  2262  0FE4  380C               	iorlw	12
  2263  0FE5  009D               	movwf	29	;volatile
  2264                           
  2265                           ;pwm.c: 39: CCPR1L = 0;
  2266  0FE6  0195               	clrf	21	;volatile
  2267                           
  2268                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  2269  0FE7  30CF               	movlw	-49
  2270  0FE8  0597               	andwf	23,f	;volatile
  2271                           
  2272                           ;pwm.c: 41: CCPR2L = 0;
  2273  0FE9  019B               	clrf	27	;volatile
  2274                           
  2275                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  2276  0FEA  108C               	bcf	12,1	;volatile
  2277                           
  2278                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  2279  0FEB  30FC               	movlw	-4
  2280  0FEC  0592               	andwf	18,f	;volatile
  2281                           
  2282                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  2283  0FED  1512               	bsf	18,2	;volatile
  2284  0FEE                     l170:	
  2285                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  2286                           
  2287  0FEE  1C8C               	btfss	12,1	;volatile
  2288  0FEF  2FEE               	goto	l170
  2289                           
  2290                           ;pwm.c: 53: TRISC1 = 0;
  2291  0FF0  1683               	bsf	3,5	;RP0=1, select bank1
  2292  0FF1  1303               	bcf	3,6	;RP1=0, select bank1
  2293  0FF2  1087               	bcf	7,1	;volatile
  2294                           
  2295                           ;pwm.c: 54: TRISC2 = 0;
  2296  0FF3  1107               	bcf	7,2	;volatile
  2297                           
  2298                           ;pwm.c: 59: ANS4 = 0;
  2299  0FF4  1683               	bsf	3,5	;RP0=1, select bank3
  2300  0FF5  1703               	bsf	3,6	;RP1=1, select bank3
  2301  0FF6  1208               	bcf	8,4	;volatile
  2302                           
  2303                           ;pwm.c: 60: TRISA5 = 0;
  2304  0FF7  1683               	bsf	3,5	;RP0=1, select bank1
  2305  0FF8  1303               	bcf	3,6	;RP1=0, select bank1
  2306  0FF9  1285               	bcf	5,5	;volatile
  2307                           
  2308                           ;pwm.c: 61: TRISA6 = 0;
  2309  0FFA  1305               	bcf	5,6	;volatile
  2310                           
  2311                           ;pwm.c: 62: RA5 = 0;
  2312  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
  2313  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
  2314  0FFD  1285               	bcf	5,5	;volatile
  2315                           
  2316                           ;pwm.c: 63: RA6 = 0;
  2317  0FFE  1305               	bcf	5,6	;volatile
  2318  0FFF  0008               	return
  2319  1000                     __end_of_pwm_init:	
  2320                           
  2321                           	psect	text6
  2322  0779                     __ptext6:	
  2323 ;; *************** function _putst *****************
  2324 ;; Defined at:
  2325 ;;		line 211 in file "serial.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  str             1    wreg     PTR const unsigned char 
  2328 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;  str             1    3[BANK0 ] PTR const unsigned char 
  2331 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  1    wreg      void 
  2334 ;; Registers used:
  2335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2341 ;;      Params:         0       0       0       0       0
  2342 ;;      Locals:         0       1       0       0       0
  2343 ;;      Temps:          0       1       0       0       0
  2344 ;;      Totals:         0       2       0       0       0
  2345 ;;Total ram usage:        2 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; Hardware stack levels required when called:    2
  2348 ;; This function calls:
  2349 ;;		_putch
  2350 ;; This function is called by:
  2351 ;;		_main
  2352 ;;		_PrintSetpoint
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function _putst
  2358  0779                     _putst:	
  2359                           
  2360                           ;incstack = 0
  2361                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2362                           ;putst@str stored from wreg
  2363  0779  1283               	bcf	3,5	;RP0=0, select bank0
  2364  077A  1303               	bcf	3,6	;RP1=0, select bank0
  2365  077B  00A3               	movwf	putst@str
  2366  077C                     l1995:	
  2367                           ;serial.c: 212: while((*str)!=0) {
  2368                           
  2369  077C  0823               	movf	putst@str,w
  2370  077D  0084               	movwf	4
  2371  077E  1383               	bcf	3,7	;select IRP bank0
  2372  077F  0800               	movf	0,w
  2373  0780  1903               	btfsc	3,2
  2374  0781  0008               	return
  2375                           
  2376                           ;serial.c: 213: putch(*str);
  2377  0782  0823               	movf	putst@str,w
  2378  0783  0084               	movwf	4
  2379  0784  0800               	movf	0,w
  2380  0785  120A  158A  27AE  120A  118A  	fcall	_putch
  2381                           
  2382                           ;serial.c: 214: if (*str==13) putch(10);
  2383  078A  1283               	bcf	3,5	;RP0=0, select bank0
  2384  078B  1303               	bcf	3,6	;RP1=0, select bank0
  2385  078C  0823               	movf	putst@str,w
  2386  078D  0084               	movwf	4
  2387  078E  300D               	movlw	13
  2388  078F  1383               	bcf	3,7	;select IRP bank0
  2389  0790  0600               	xorwf	0,w
  2390  0791  1D03               	btfss	3,2
  2391  0792  2F99               	goto	l1989
  2392  0793  300A               	movlw	10
  2393  0794  120A  158A  27AE  120A  118A  	fcall	_putch
  2394  0799                     l1989:	
  2395                           
  2396                           ;serial.c: 215: if (*str==10) putch(13);
  2397  0799  1283               	bcf	3,5	;RP0=0, select bank0
  2398  079A  1303               	bcf	3,6	;RP1=0, select bank0
  2399  079B  0823               	movf	putst@str,w
  2400  079C  0084               	movwf	4
  2401  079D  300A               	movlw	10
  2402  079E  1383               	bcf	3,7	;select IRP bank0
  2403  079F  0600               	xorwf	0,w
  2404  07A0  1D03               	btfss	3,2
  2405  07A1  2FA8               	goto	l1993
  2406  07A2  300D               	movlw	13
  2407  07A3  120A  158A  27AE  120A  118A  	fcall	_putch
  2408  07A8                     l1993:	
  2409                           
  2410                           ;serial.c: 216: str++;
  2411  07A8  3001               	movlw	1
  2412  07A9  1283               	bcf	3,5	;RP0=0, select bank0
  2413  07AA  1303               	bcf	3,6	;RP1=0, select bank0
  2414  07AB  00A2               	movwf	??_putst
  2415  07AC  0822               	movf	??_putst,w
  2416  07AD  07A3               	addwf	putst@str,f
  2417  07AE  2F7C               	goto	l1995
  2418  07AF                     __end_of_putst:	
  2419                           
  2420                           	psect	text7
  2421  0FAE                     __ptext7:	
  2422 ;; *************** function _putch *****************
  2423 ;; Defined at:
  2424 ;;		line 95 in file "serial.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  c               1    wreg     unsigned char 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  c               1    1[BANK0 ] unsigned char 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2438 ;;      Params:         0       0       0       0       0
  2439 ;;      Locals:         0       1       0       0       0
  2440 ;;      Temps:          0       1       0       0       0
  2441 ;;      Totals:         0       2       0       0       0
  2442 ;;Total ram usage:        2 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_putst
  2449 ;;		_putchhex
  2450 ;;		_putchdec
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           
  2455                           ;psect for function _putch
  2456  0FAE                     _putch:	
  2457                           
  2458                           ;incstack = 0
  2459                           ; Regs used in _putch: [wreg]
  2460                           ;putch@c stored from wreg
  2461  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  2462  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  2463  0FB0  00A1               	movwf	putch@c
  2464  0FB1                     l1815:	
  2465                           ;serial.c: 96: while(!TXIF) {
  2466                           
  2467  0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  2468  0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  2469  0FB3  1A0C               	btfsc	12,4	;volatile
  2470  0FB4  2FCB               	goto	l1817
  2471                           
  2472                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  2473  0FB5  1C98               	btfss	24,1	;volatile
  2474  0FB6  2FBF               	goto	l82
  2475  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  2476  0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  2477  0FB9  1298               	bcf	24,5	;volatile
  2478  0FBA  1698               	bsf	24,5	;volatile
  2479  0FBB  1283               	bcf	3,5	;RP0=0, select bank0
  2480  0FBC  1303               	bcf	3,6	;RP1=0, select bank0
  2481  0FBD  1218               	bcf	24,4	;volatile
  2482  0FBE  1618               	bsf	24,4	;volatile
  2483  0FBF                     l82:	
  2484  0FBF  1D18               	btfss	24,2	;volatile
  2485  0FC0  2FC9               	goto	l83
  2486  0FC1  081A               	movf	26,w	;volatile
  2487  0FC2  00A0               	movwf	??_putch
  2488  0FC3  0820               	movf	??_putch,w
  2489  0FC4  00EC               	movwf	_dummy
  2490  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  2491  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  2492  0FC7  1298               	bcf	24,5	;volatile
  2493  0FC8  1698               	bsf	24,5	;volatile
  2494  0FC9                     l83:	
  2495  0FC9  0064               	clrwdt	;# 
  2496  0FCA  2FB1               	goto	l1815
  2497  0FCB                     l1817:	
  2498                           
  2499                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  2500  0FCB  0821               	movf	putch@c,w
  2501  0FCC  0099               	movwf	25	;volatile
  2502                           
  2503                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  2504  0FCD  303C               	movlw	60
  2505  0FCE  00A0               	movwf	??_putch
  2506  0FCF  0820               	movf	??_putch,w
  2507  0FD0  00F6               	movwf	_delayus_variable
  2508  0FD1  0000               	nop	;# 
  2509  0FD2  0000               	nop	;# 
  2510  0FD3  0BF6               	decfsz	_delayus_variable,f	;# 
  2511  0FD4  2FAB               	goto	($+-3)	;# 
  2512  0FD5  0008               	return
  2513  0FD6                     __end_of_putch:	
  2514                           
  2515                           	psect	text8
  2516  06C6                     __ptext8:	
  2517 ;; *************** function _motor_reset *****************
  2518 ;; Defined at:
  2519 ;;		line 167 in file "main.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2533 ;;      Params:         0       0       0       0       0
  2534 ;;      Locals:         0       0       0       0       0
  2535 ;;      Temps:          0       0       0       0       0
  2536 ;;      Totals:         0       0       0       0       0
  2537 ;;Total ram usage:        0 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    3
  2540 ;; This function calls:
  2541 ;;		_SetPoint
  2542 ;;		_pwm_set
  2543 ;;		_resetCounter
  2544 ;; This function is called by:
  2545 ;;		_main
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _motor_reset
  2551  06C6                     _motor_reset:	
  2552                           
  2553                           ;main.c: 168: pwm_set(1, 0);
  2554                           
  2555                           ;incstack = 0
  2556                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2557  06C6  3001               	movlw	1
  2558  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  2559  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  2560  06C9  00BC               	movwf	pwm_set@channel
  2561  06CA  3000               	movlw	0
  2562  06CB  00BD               	movwf	pwm_set@channel+1
  2563  06CC  3000               	movlw	0
  2564  06CD  00C1               	movwf	pwm_set@duty_cycle+3
  2565  06CE  3000               	movlw	0
  2566  06CF  00C0               	movwf	pwm_set@duty_cycle+2
  2567  06D0  3000               	movlw	0
  2568  06D1  00BF               	movwf	pwm_set@duty_cycle+1
  2569  06D2  3000               	movlw	0
  2570  06D3  00BE               	movwf	pwm_set@duty_cycle
  2571  06D4  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  2572                           
  2573                           ;main.c: 169: pwm_set(2, 0);
  2574  06D9  3002               	movlw	2
  2575  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  2576  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  2577  06DC  00BC               	movwf	pwm_set@channel
  2578  06DD  3000               	movlw	0
  2579  06DE  00BD               	movwf	pwm_set@channel+1
  2580  06DF  3000               	movlw	0
  2581  06E0  00C1               	movwf	pwm_set@duty_cycle+3
  2582  06E1  3000               	movlw	0
  2583  06E2  00C0               	movwf	pwm_set@duty_cycle+2
  2584  06E3  3000               	movlw	0
  2585  06E4  00BF               	movwf	pwm_set@duty_cycle+1
  2586  06E5  3000               	movlw	0
  2587  06E6  00BE               	movwf	pwm_set@duty_cycle
  2588  06E7  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  2589                           
  2590                           ;main.c: 170: resetCounter();
  2591  06EC  120A  158A  273B  120A  118A  	fcall	_resetCounter
  2592                           
  2593                           ;main.c: 171: SetPoint(0);
  2594  06F1  3000               	movlw	0
  2595  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  2596  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  2597  06F4  00A0               	movwf	SetPoint@new_val
  2598  06F5  00A1               	movwf	SetPoint@new_val+1
  2599  06F6  120A  158A  2789   	fcall	_SetPoint
  2600  06F9  0008               	return
  2601  06FA                     __end_of_motor_reset:	
  2602                           
  2603                           	psect	text9
  2604  0F3B                     __ptext9:	
  2605 ;; *************** function _resetCounter *****************
  2606 ;; Defined at:
  2607 ;;		line 162 in file "main.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;		None
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2621 ;;      Params:         0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0
  2624 ;;      Totals:         0       0       0       0       0
  2625 ;;Total ram usage:        0 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    1
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_motor_reset
  2632 ;;		_main
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           
  2637                           ;psect for function _resetCounter
  2638  0F3B                     _resetCounter:	
  2639                           
  2640                           ;main.c: 163: encoder1_counter = 0;
  2641                           
  2642                           ;incstack = 0
  2643                           ; Regs used in _resetCounter: [wreg]
  2644  0F3B  3000               	movlw	0
  2645  0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  2646  0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  2647  0F3E  00E6               	movwf	_encoder1_counter+3	;volatile
  2648  0F3F  3000               	movlw	0
  2649  0F40  00E5               	movwf	_encoder1_counter+2	;volatile
  2650  0F41  3000               	movlw	0
  2651  0F42  00E4               	movwf	_encoder1_counter+1	;volatile
  2652  0F43  3000               	movlw	0
  2653  0F44  00E3               	movwf	_encoder1_counter	;volatile
  2654                           
  2655                           ;main.c: 164: motor_pos = 0;
  2656  0F45  3000               	movlw	0
  2657  0F46  00E2               	movwf	_motor_pos+3	;volatile
  2658  0F47  3000               	movlw	0
  2659  0F48  00E1               	movwf	_motor_pos+2	;volatile
  2660  0F49  3000               	movlw	0
  2661  0F4A  00E0               	movwf	_motor_pos+1	;volatile
  2662  0F4B  3000               	movlw	0
  2663  0F4C  00DF               	movwf	_motor_pos	;volatile
  2664  0F4D  0008               	return
  2665  0F4E                     __end_of_resetCounter:	
  2666                           
  2667                           	psect	text10
  2668  0F89                     __ptext10:	
  2669 ;; *************** function _SetPoint *****************
  2670 ;; Defined at:
  2671 ;;		line 155 in file "main.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  new_val         2    0[BANK0 ] int 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;		None
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2685 ;;      Params:         0       2       0       0       0
  2686 ;;      Locals:         0       0       0       0       0
  2687 ;;      Temps:          0       4       0       0       0
  2688 ;;      Totals:         0       6       0       0       0
  2689 ;;Total ram usage:        6 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_motor_reset
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           
  2701                           ;psect for function _SetPoint
  2702  0F89                     _SetPoint:	
  2703                           
  2704                           ;main.c: 156: if (new_val != set_point){
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _SetPoint: [wreg]
  2708  0F89  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0F8A  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0F8B  0820               	movf	SetPoint@new_val,w
  2711  0F8C  00A2               	movwf	??_SetPoint
  2712  0F8D  0821               	movf	SetPoint@new_val+1,w
  2713  0F8E  00A3               	movwf	??_SetPoint+1
  2714  0F8F  3000               	movlw	0
  2715  0F90  1BA3               	btfsc	??_SetPoint+1,7
  2716  0F91  30FF               	movlw	255
  2717  0F92  00A4               	movwf	??_SetPoint+2
  2718  0F93  00A5               	movwf	??_SetPoint+3
  2719  0F94  085E               	movf	_set_point+3,w	;volatile
  2720  0F95  0625               	xorwf	??_SetPoint+3,w
  2721  0F96  1D03               	skipz
  2722  0F97  2FA2               	goto	u1405
  2723  0F98  085D               	movf	_set_point+2,w	;volatile
  2724  0F99  0624               	xorwf	??_SetPoint+2,w
  2725  0F9A  1D03               	skipz
  2726  0F9B  2FA2               	goto	u1405
  2727  0F9C  085C               	movf	_set_point+1,w	;volatile
  2728  0F9D  0623               	xorwf	??_SetPoint+1,w
  2729  0F9E  1D03               	skipz
  2730  0F9F  2FA2               	goto	u1405
  2731  0FA0  085B               	movf	_set_point,w	;volatile
  2732  0FA1  0622               	xorwf	??_SetPoint,w
  2733  0FA2                     u1405:	
  2734  0FA2  1903               	skipnz
  2735  0FA3  0008               	return
  2736                           
  2737                           ;main.c: 158: set_point = new_val;
  2738  0FA4  0820               	movf	SetPoint@new_val,w
  2739  0FA5  00DB               	movwf	_set_point	;volatile
  2740  0FA6  0821               	movf	SetPoint@new_val+1,w
  2741  0FA7  00DC               	movwf	_set_point+1	;volatile
  2742  0FA8  3000               	movlw	0
  2743  0FA9  1BDC               	btfsc	_set_point+1,7	;volatile
  2744  0FAA  30FF               	movlw	255
  2745  0FAB  00DD               	movwf	_set_point+2	;volatile
  2746  0FAC  00DE               	movwf	_set_point+3	;volatile
  2747  0FAD  0008               	return
  2748  0FAE                     __end_of_SetPoint:	
  2749                           
  2750                           	psect	text11
  2751  0F4E                     __ptext11:	
  2752 ;; *************** function _encoders_init *****************
  2753 ;; Defined at:
  2754 ;;		line 256 in file "main.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;		None
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;		None
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      void 
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2768 ;;      Params:         0       0       0       0       0
  2769 ;;      Locals:         0       0       0       0       0
  2770 ;;      Temps:          0       2       0       0       0
  2771 ;;      Totals:         0       2       0       0       0
  2772 ;;Total ram usage:        2 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    1
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_main
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           
  2783                           ;psect for function _encoders_init
  2784  0F4E                     _encoders_init:	
  2785                           
  2786                           ;main.c: 259: state1 = (PORTB & 0b00011000) >>3;
  2787                           
  2788                           ;incstack = 0
  2789                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  2790  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  2791  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  2792  0F50  0806               	movf	6,w	;volatile
  2793  0F51  00A0               	movwf	??_encoders_init
  2794  0F52  3003               	movlw	3
  2795  0F53                     u1785:	
  2796  0F53  1003               	clrc
  2797  0F54  0CA0               	rrf	??_encoders_init,f
  2798  0F55  3EFF               	addlw	-1
  2799  0F56  1D03               	skipz
  2800  0F57  2F53               	goto	u1785
  2801  0F58  0820               	movf	??_encoders_init,w
  2802  0F59  3903               	andlw	3
  2803  0F5A  00A1               	movwf	??_encoders_init+1
  2804  0F5B  0821               	movf	??_encoders_init+1,w
  2805  0F5C  00F5               	movwf	_state1	;volatile
  2806                           
  2807                           ;main.c: 260: encoder1_counter = 0;
  2808  0F5D  3000               	movlw	0
  2809  0F5E  00E6               	movwf	_encoder1_counter+3	;volatile
  2810  0F5F  3000               	movlw	0
  2811  0F60  00E5               	movwf	_encoder1_counter+2	;volatile
  2812  0F61  3000               	movlw	0
  2813  0F62  00E4               	movwf	_encoder1_counter+1	;volatile
  2814  0F63  3000               	movlw	0
  2815  0F64  00E3               	movwf	_encoder1_counter	;volatile
  2816  0F65  0008               	return
  2817  0F66                     __end_of_encoders_init:	
  2818                           
  2819                           	psect	text12
  2820  0F2B                     __ptext12:	
  2821 ;; *************** function _chkchr *****************
  2822 ;; Defined at:
  2823 ;;		line 142 in file "serial.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      unsigned char 
  2830 ;; Registers used:
  2831 ;;		wreg
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2837 ;;      Params:         0       0       0       0       0
  2838 ;;      Locals:         0       0       0       0       0
  2839 ;;      Temps:          0       0       0       0       0
  2840 ;;      Totals:         0       0       0       0       0
  2841 ;;Total ram usage:        0 bytes
  2842 ;; Hardware stack levels used:    1
  2843 ;; Hardware stack levels required when called:    1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_main
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           
  2852                           ;psect for function _chkchr
  2853  0F2B                     _chkchr:	
  2854                           
  2855                           ;serial.c: 143: if (RCIF) {
  2856                           
  2857                           ;incstack = 0
  2858                           ; Regs used in _chkchr: [wreg]
  2859  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0F2D  1E8C               	btfss	12,5	;volatile
  2862  0F2E  2F31               	goto	l2457
  2863                           
  2864                           ;serial.c: 144: return RCREG;
  2865  0F2F  081A               	movf	26,w	;volatile
  2866  0F30  0008               	return
  2867  0F31                     l2457:	
  2868                           
  2869                           ;serial.c: 145: };serial.c: 146: return 255;
  2870  0F31  30FF               	movlw	255
  2871  0F32  0008               	return
  2872  0F33                     __end_of_chkchr:	
  2873                           
  2874                           	psect	text13
  2875  01E1                     __ptext13:	
  2876 ;; *************** function _SetMotor *****************
  2877 ;; Defined at:
  2878 ;;		line 116 in file "main.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  I_Response      2   50[BANK0 ] int 
  2883 ;;  D_Response      2   48[BANK0 ] int 
  2884 ;;  P_Response      2   46[BANK0 ] int 
  2885 ;;  resp            4   52[BANK0 ] long 
  2886 ;;  err             2   56[BANK0 ] int 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2896 ;;      Params:         0       0       0       0       0
  2897 ;;      Locals:         0      12       0       0       0
  2898 ;;      Temps:          0       8       0       0       0
  2899 ;;      Totals:         0      20       0       0       0
  2900 ;;Total ram usage:       20 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    3
  2903 ;; This function calls:
  2904 ;;		___wmul
  2905 ;;		_constrain
  2906 ;;		_pwm_set
  2907 ;; This function is called by:
  2908 ;;		_main
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _SetMotor
  2914  01E1                     _SetMotor:	
  2915                           
  2916                           ;main.c: 117: static long integral;;main.c: 118: static int derivative;;main.c: 119: sta
      +                          tic int last_err;;main.c: 120: long resp;;main.c: 121: int err = set_point - motor_pos;
  2917                           
  2918                           ;incstack = 0
  2919                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2920  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2921  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  2922  01E3  085F               	movf	_motor_pos,w	;volatile
  2923  01E4  025B               	subwf	_set_point,w	;volatile
  2924  01E5  00D8               	movwf	SetMotor@err
  2925  01E6  0860               	movf	_motor_pos+1,w	;volatile
  2926  01E7  1C03               	skipc
  2927  01E8  0A60               	incf	_motor_pos+1,w	;volatile
  2928  01E9  025C               	subwf	_set_point+1,w	;volatile
  2929  01EA  00D9               	movwf	SetMotor@err+1
  2930                           
  2931                           ;main.c: 123: if (onlyK){
  2932  01EB  0869               	movf	_onlyK,w
  2933  01EC  046A               	iorwf	_onlyK+1,w
  2934  01ED  1903               	btfsc	3,2
  2935  01EE  2A02               	goto	l2485
  2936                           
  2937                           ;main.c: 124: resp = (err) * 4;
  2938  01EF  0859               	movf	SetMotor@err+1,w
  2939  01F0  00C7               	movwf	??_SetMotor+1
  2940  01F1  0858               	movf	SetMotor@err,w
  2941  01F2  00C6               	movwf	??_SetMotor
  2942  01F3  1003               	clrc
  2943  01F4  0DC6               	rlf	??_SetMotor,f
  2944  01F5  0DC7               	rlf	??_SetMotor+1,f
  2945  01F6  1003               	clrc
  2946  01F7  0DC6               	rlf	??_SetMotor,f
  2947  01F8  0DC7               	rlf	??_SetMotor+1,f
  2948  01F9  0846               	movf	??_SetMotor,w
  2949  01FA  00D4               	movwf	SetMotor@resp
  2950  01FB  0847               	movf	??_SetMotor+1,w
  2951  01FC  00D5               	movwf	SetMotor@resp+1
  2952  01FD  3000               	movlw	0
  2953  01FE  1BD5               	btfsc	SetMotor@resp+1,7
  2954  01FF  30FF               	movlw	255
  2955  0200  00D6               	movwf	SetMotor@resp+2
  2956  0201  2AB6               	goto	L1
  2957  0202                     l2485:	
  2958                           ;main.c: 125: }else{
  2959                           
  2960                           
  2961                           ;main.c: 127: derivative = (err - last_err);
  2962  0202  0867               	movf	SetMotor@last_err,w
  2963  0203  0258               	subwf	SetMotor@err,w
  2964  0204  00ED               	movwf	SetMotor@derivative
  2965  0205  0868               	movf	SetMotor@last_err+1,w
  2966  0206  1C03               	skipc
  2967  0207  0A68               	incf	SetMotor@last_err+1,w
  2968  0208  0259               	subwf	SetMotor@err+1,w
  2969  0209  00EE               	movwf	SetMotor@derivative+1
  2970                           
  2971                           ;main.c: 128: last_err = err;
  2972  020A  0859               	movf	SetMotor@err+1,w
  2973  020B  00E8               	movwf	SetMotor@last_err+1
  2974  020C  0858               	movf	SetMotor@err,w
  2975  020D  00E7               	movwf	SetMotor@last_err
  2976                           
  2977                           ;main.c: 129: if (err == 0){
  2978  020E  0858               	movf	SetMotor@err,w
  2979  020F  0459               	iorwf	SetMotor@err+1,w
  2980  0210  1D03               	btfss	3,2
  2981  0211  2A1C               	goto	l2493
  2982                           
  2983                           ;main.c: 130: integral = 0;
  2984  0212  3000               	movlw	0
  2985  0213  1683               	bsf	3,5	;RP0=1, select bank1
  2986  0214  1303               	bcf	3,6	;RP1=0, select bank1
  2987  0215  00C8               	movwf	(SetMotor@integral+3)^(0+128)
  2988  0216  3000               	movlw	0
  2989  0217  00C7               	movwf	(SetMotor@integral+2)^(0+128)
  2990  0218  3000               	movlw	0
  2991  0219  00C6               	movwf	(SetMotor@integral+1)^(0+128)
  2992  021A  3000               	movlw	0
  2993  021B  2A64               	goto	L2
  2994  021C                     l2493:	
  2995                           ;main.c: 131: }else{
  2996                           
  2997                           
  2998                           ;main.c: 132: integral = integral + err;
  2999  021C  1683               	bsf	3,5	;RP0=1, select bank1
  3000  021D  1303               	bcf	3,6	;RP1=0, select bank1
  3001  021E  0845               	movf	SetMotor@integral^(0+128),w
  3002  021F  1283               	bcf	3,5	;RP0=0, select bank0
  3003  0220  1303               	bcf	3,6	;RP1=0, select bank0
  3004  0221  00C6               	movwf	??_SetMotor
  3005  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3006  0223  1303               	bcf	3,6	;RP1=0, select bank1
  3007  0224  0846               	movf	(SetMotor@integral+1)^(0+128),w
  3008  0225  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0226  1303               	bcf	3,6	;RP1=0, select bank0
  3010  0227  00C7               	movwf	??_SetMotor+1
  3011  0228  1683               	bsf	3,5	;RP0=1, select bank1
  3012  0229  1303               	bcf	3,6	;RP1=0, select bank1
  3013  022A  0847               	movf	(SetMotor@integral+2)^(0+128),w
  3014  022B  1283               	bcf	3,5	;RP0=0, select bank0
  3015  022C  1303               	bcf	3,6	;RP1=0, select bank0
  3016  022D  00C8               	movwf	??_SetMotor+2
  3017  022E  1683               	bsf	3,5	;RP0=1, select bank1
  3018  022F  1303               	bcf	3,6	;RP1=0, select bank1
  3019  0230  0848               	movf	(SetMotor@integral+3)^(0+128),w
  3020  0231  1283               	bcf	3,5	;RP0=0, select bank0
  3021  0232  1303               	bcf	3,6	;RP1=0, select bank0
  3022  0233  00C9               	movwf	??_SetMotor+3
  3023  0234  0858               	movf	SetMotor@err,w
  3024  0235  00CA               	movwf	??_SetMotor+4
  3025  0236  0859               	movf	SetMotor@err+1,w
  3026  0237  00CB               	movwf	??_SetMotor+5
  3027  0238  3000               	movlw	0
  3028  0239  1BCB               	btfsc	??_SetMotor+5,7
  3029  023A  30FF               	movlw	255
  3030  023B  00CC               	movwf	??_SetMotor+6
  3031  023C  00CD               	movwf	??_SetMotor+7
  3032  023D  084A               	movf	??_SetMotor+4,w
  3033  023E  07C6               	addwf	??_SetMotor,f
  3034  023F  084B               	movf	??_SetMotor+5,w
  3035  0240  1803               	skipnc
  3036  0241  0F4B               	incfsz	??_SetMotor+5,w
  3037  0242  2A44               	goto	u2260
  3038  0243  2A45               	goto	u2261
  3039  0244                     u2260:	
  3040  0244  07C7               	addwf	??_SetMotor+1,f
  3041  0245                     u2261:	
  3042  0245  084C               	movf	??_SetMotor+6,w
  3043  0246  1803               	skipnc
  3044  0247  0F4C               	incfsz	??_SetMotor+6,w
  3045  0248  2A4A               	goto	u2262
  3046  0249  2A4B               	goto	u2263
  3047  024A                     u2262:	
  3048  024A  07C8               	addwf	??_SetMotor+2,f
  3049  024B                     u2263:	
  3050  024B  084D               	movf	??_SetMotor+7,w
  3051  024C  1803               	skipnc
  3052  024D  0A4D               	incf	??_SetMotor+7,w
  3053  024E  07C9               	addwf	??_SetMotor+3,f
  3054  024F  0849               	movf	??_SetMotor+3,w
  3055  0250  1683               	bsf	3,5	;RP0=1, select bank1
  3056  0251  1303               	bcf	3,6	;RP1=0, select bank1
  3057  0252  00C8               	movwf	(SetMotor@integral+3)^(0+128)
  3058  0253  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0254  1303               	bcf	3,6	;RP1=0, select bank0
  3060  0255  0848               	movf	??_SetMotor+2,w
  3061  0256  1683               	bsf	3,5	;RP0=1, select bank1
  3062  0257  1303               	bcf	3,6	;RP1=0, select bank1
  3063  0258  00C7               	movwf	(SetMotor@integral+2)^(0+128)
  3064  0259  1283               	bcf	3,5	;RP0=0, select bank0
  3065  025A  1303               	bcf	3,6	;RP1=0, select bank0
  3066  025B  0847               	movf	??_SetMotor+1,w
  3067  025C  1683               	bsf	3,5	;RP0=1, select bank1
  3068  025D  1303               	bcf	3,6	;RP1=0, select bank1
  3069  025E  00C6               	movwf	(SetMotor@integral+1)^(0+128)
  3070  025F  1283               	bcf	3,5	;RP0=0, select bank0
  3071  0260  1303               	bcf	3,6	;RP1=0, select bank0
  3072  0261  0846               	movf	??_SetMotor,w
  3073  0262  1683               	bsf	3,5	;RP0=1, select bank1
  3074  0263  1303               	bcf	3,6	;RP1=0, select bank1
  3075  0264                     L2:	
  3076  0264  00C5               	movwf	SetMotor@integral^(0+128)
  3077                           
  3078                           ;main.c: 133: };main.c: 135: int P_Response = 4 * err;
  3079  0265  1283               	bcf	3,5	;RP0=0, select bank0
  3080  0266  1303               	bcf	3,6	;RP1=0, select bank0
  3081  0267  0859               	movf	SetMotor@err+1,w
  3082  0268  00C7               	movwf	??_SetMotor+1
  3083  0269  0858               	movf	SetMotor@err,w
  3084  026A  00C6               	movwf	??_SetMotor
  3085  026B  1003               	clrc
  3086  026C  0DC6               	rlf	??_SetMotor,f
  3087  026D  0DC7               	rlf	??_SetMotor+1,f
  3088  026E  1003               	clrc
  3089  026F  0DC6               	rlf	??_SetMotor,f
  3090  0270  0DC7               	rlf	??_SetMotor+1,f
  3091  0271  0846               	movf	??_SetMotor,w
  3092  0272  00CE               	movwf	SetMotor@P_Response
  3093  0273  0847               	movf	??_SetMotor+1,w
  3094  0274  00CF               	movwf	SetMotor@P_Response+1
  3095                           
  3096                           ;main.c: 136: int D_Response = (13 * derivative);
  3097  0275  086E               	movf	SetMotor@derivative+1,w
  3098  0276  00A1               	movwf	___wmul@multiplier+1
  3099  0277  086D               	movf	SetMotor@derivative,w
  3100  0278  00A0               	movwf	___wmul@multiplier
  3101  0279  300D               	movlw	13
  3102  027A  00A2               	movwf	___wmul@multiplicand
  3103  027B  3000               	movlw	0
  3104  027C  00A3               	movwf	___wmul@multiplicand+1
  3105  027D  120A  158A  2766  120A  118A  	fcall	___wmul
  3106  0282  1283               	bcf	3,5	;RP0=0, select bank0
  3107  0283  1303               	bcf	3,6	;RP1=0, select bank0
  3108  0284  0821               	movf	?___wmul+1,w
  3109  0285  00D1               	movwf	SetMotor@D_Response+1
  3110  0286  0820               	movf	?___wmul,w
  3111  0287  00D0               	movwf	SetMotor@D_Response
  3112                           
  3113                           ;main.c: 138: int I_Response = 0 * integral;
  3114  0288  1683               	bsf	3,5	;RP0=1, select bank1
  3115  0289  1303               	bcf	3,6	;RP1=0, select bank1
  3116  028A  0846               	movf	(SetMotor@integral+1)^(0+128),w
  3117  028B  1283               	bcf	3,5	;RP0=0, select bank0
  3118  028C  1303               	bcf	3,6	;RP1=0, select bank0
  3119  028D  00A1               	movwf	___wmul@multiplier+1
  3120  028E  1683               	bsf	3,5	;RP0=1, select bank1
  3121  028F  1303               	bcf	3,6	;RP1=0, select bank1
  3122  0290  0845               	movf	SetMotor@integral^(0+128),w
  3123  0291  1283               	bcf	3,5	;RP0=0, select bank0
  3124  0292  1303               	bcf	3,6	;RP1=0, select bank0
  3125  0293  00A0               	movwf	___wmul@multiplier
  3126  0294  3000               	movlw	0
  3127  0295  00A2               	movwf	___wmul@multiplicand
  3128  0296  00A3               	movwf	___wmul@multiplicand+1
  3129  0297  120A  158A  2766  120A  118A  	fcall	___wmul
  3130  029C  1283               	bcf	3,5	;RP0=0, select bank0
  3131  029D  1303               	bcf	3,6	;RP1=0, select bank0
  3132  029E  0821               	movf	?___wmul+1,w
  3133  029F  00D3               	movwf	SetMotor@I_Response+1
  3134  02A0  0820               	movf	?___wmul,w
  3135  02A1  00D2               	movwf	SetMotor@I_Response
  3136                           
  3137                           ;main.c: 139: resp = P_Response + D_Response + I_Response;
  3138  02A2  0850               	movf	SetMotor@D_Response,w
  3139  02A3  074E               	addwf	SetMotor@P_Response,w
  3140  02A4  00C6               	movwf	??_SetMotor
  3141  02A5  0851               	movf	SetMotor@D_Response+1,w
  3142  02A6  1803               	skipnc
  3143  02A7  0A51               	incf	SetMotor@D_Response+1,w
  3144  02A8  074F               	addwf	SetMotor@P_Response+1,w
  3145  02A9  00C7               	movwf	??_SetMotor+1
  3146  02AA  0852               	movf	SetMotor@I_Response,w
  3147  02AB  0746               	addwf	??_SetMotor,w
  3148  02AC  00D4               	movwf	SetMotor@resp
  3149  02AD  0853               	movf	SetMotor@I_Response+1,w
  3150  02AE  1803               	skipnc
  3151  02AF  0A53               	incf	SetMotor@I_Response+1,w
  3152  02B0  0747               	addwf	??_SetMotor+1,w
  3153  02B1  00D5               	movwf	SetMotor@resp+1
  3154  02B2  01D6               	clrf	SetMotor@resp+2
  3155  02B3  1BD5               	btfsc	SetMotor@resp+1,7
  3156  02B4  03D6               	decf	SetMotor@resp+2,f
  3157  02B5  0856               	movf	SetMotor@resp+2,w
  3158  02B6                     L1:	
  3159  02B6  00D7               	movwf	SetMotor@resp+3
  3160                           
  3161                           ;main.c: 140: };main.c: 142: resp = constrain(resp, -255,255 );
  3162  02B7  0857               	movf	SetMotor@resp+3,w
  3163  02B8  00A3               	movwf	constrain@value+3
  3164  02B9  0856               	movf	SetMotor@resp+2,w
  3165  02BA  00A2               	movwf	constrain@value+2
  3166  02BB  0855               	movf	SetMotor@resp+1,w
  3167  02BC  00A1               	movwf	constrain@value+1
  3168  02BD  0854               	movf	SetMotor@resp,w
  3169  02BE  00A0               	movwf	constrain@value
  3170  02BF  30FF               	movlw	255
  3171  02C0  00A7               	movwf	constrain@lLimit+3
  3172  02C1  30FF               	movlw	255
  3173  02C2  00A6               	movwf	constrain@lLimit+2
  3174  02C3  30FF               	movlw	255
  3175  02C4  00A5               	movwf	constrain@lLimit+1
  3176  02C5  3001               	movlw	1
  3177  02C6  00A4               	movwf	constrain@lLimit
  3178  02C7  3000               	movlw	0
  3179  02C8  00AB               	movwf	constrain@uLimit+3
  3180  02C9  3000               	movlw	0
  3181  02CA  00AA               	movwf	constrain@uLimit+2
  3182  02CB  3000               	movlw	0
  3183  02CC  00A9               	movwf	constrain@uLimit+1
  3184  02CD  30FF               	movlw	255
  3185  02CE  00A8               	movwf	constrain@uLimit
  3186  02CF  120A  118A  273D  120A  118A  	fcall	_constrain
  3187  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  3188  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  3189  02D6  0823               	movf	?_constrain+3,w
  3190  02D7  00D7               	movwf	SetMotor@resp+3
  3191  02D8  0822               	movf	?_constrain+2,w
  3192  02D9  00D6               	movwf	SetMotor@resp+2
  3193  02DA  0821               	movf	?_constrain+1,w
  3194  02DB  00D5               	movwf	SetMotor@resp+1
  3195  02DC  0820               	movf	?_constrain,w
  3196  02DD  00D4               	movwf	SetMotor@resp
  3197                           
  3198                           ;main.c: 143: if (resp > 0){
  3199  02DE  1BD7               	btfsc	SetMotor@resp+3,7
  3200  02DF  2B12               	goto	l296
  3201  02E0  0857               	movf	SetMotor@resp+3,w
  3202  02E1  1D03               	btfss	3,2
  3203  02E2  2AEF               	goto	l2507
  3204  02E3  0856               	movf	SetMotor@resp+2,w
  3205  02E4  1D03               	btfss	3,2
  3206  02E5  2AEF               	goto	l2507
  3207  02E6  0855               	movf	SetMotor@resp+1,w
  3208  02E7  1D03               	btfss	3,2
  3209  02E8  2AEF               	goto	l2507
  3210  02E9  3001               	movlw	1
  3211  02EA  0254               	subwf	SetMotor@resp,w
  3212  02EB  1D03               	skipz
  3213  02EC  2AED               	goto	u2273
  3214  02ED                     u2273:	
  3215  02ED  1C03               	btfss	3,0
  3216  02EE  2B12               	goto	l296
  3217  02EF                     l2507:	
  3218                           
  3219                           ;main.c: 144: pwm_set(1, resp );
  3220  02EF  3001               	movlw	1
  3221  02F0  00BC               	movwf	pwm_set@channel
  3222  02F1  3000               	movlw	0
  3223  02F2  00BD               	movwf	pwm_set@channel+1
  3224  02F3  0857               	movf	SetMotor@resp+3,w
  3225  02F4  00C1               	movwf	pwm_set@duty_cycle+3
  3226  02F5  0856               	movf	SetMotor@resp+2,w
  3227  02F6  00C0               	movwf	pwm_set@duty_cycle+2
  3228  02F7  0855               	movf	SetMotor@resp+1,w
  3229  02F8  00BF               	movwf	pwm_set@duty_cycle+1
  3230  02F9  0854               	movf	SetMotor@resp,w
  3231  02FA  00BE               	movwf	pwm_set@duty_cycle
  3232  02FB  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  3233                           
  3234                           ;main.c: 145: pwm_set(2, 0 );
  3235  0300  3002               	movlw	2
  3236  0301  1283               	bcf	3,5	;RP0=0, select bank0
  3237  0302  1303               	bcf	3,6	;RP1=0, select bank0
  3238  0303  00BC               	movwf	pwm_set@channel
  3239  0304  3000               	movlw	0
  3240  0305  00BD               	movwf	pwm_set@channel+1
  3241  0306  3000               	movlw	0
  3242  0307  00C1               	movwf	pwm_set@duty_cycle+3
  3243  0308  3000               	movlw	0
  3244  0309  00C0               	movwf	pwm_set@duty_cycle+2
  3245  030A  3000               	movlw	0
  3246  030B  00BF               	movwf	pwm_set@duty_cycle+1
  3247  030C  3000               	movlw	0
  3248  030D  00BE               	movwf	pwm_set@duty_cycle
  3249  030E  120A  118A  25C6   	fcall	_pwm_set
  3250                           
  3251                           ;main.c: 146: }else if(resp < 0){
  3252  0311  0008               	return
  3253  0312                     l296:	
  3254  0312  1FD7               	btfss	SetMotor@resp+3,7
  3255  0313  2B3E               	goto	l2511
  3256                           
  3257                           ;main.c: 147: pwm_set(1, 0 );
  3258  0314  3001               	movlw	1
  3259  0315  00BC               	movwf	pwm_set@channel
  3260  0316  3000               	movlw	0
  3261  0317  00BD               	movwf	pwm_set@channel+1
  3262  0318  3000               	movlw	0
  3263  0319  00C1               	movwf	pwm_set@duty_cycle+3
  3264  031A  3000               	movlw	0
  3265  031B  00C0               	movwf	pwm_set@duty_cycle+2
  3266  031C  3000               	movlw	0
  3267  031D  00BF               	movwf	pwm_set@duty_cycle+1
  3268  031E  3000               	movlw	0
  3269  031F  00BE               	movwf	pwm_set@duty_cycle
  3270  0320  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  3271                           
  3272                           ;main.c: 148: pwm_set(2, -resp );
  3273  0325  3002               	movlw	2
  3274  0326  1283               	bcf	3,5	;RP0=0, select bank0
  3275  0327  1303               	bcf	3,6	;RP1=0, select bank0
  3276  0328  00BC               	movwf	pwm_set@channel
  3277  0329  3000               	movlw	0
  3278  032A  00BD               	movwf	pwm_set@channel+1
  3279  032B  0954               	comf	SetMotor@resp,w
  3280  032C  00BE               	movwf	pwm_set@duty_cycle
  3281  032D  0955               	comf	SetMotor@resp+1,w
  3282  032E  00BF               	movwf	pwm_set@duty_cycle+1
  3283  032F  0956               	comf	SetMotor@resp+2,w
  3284  0330  00C0               	movwf	pwm_set@duty_cycle+2
  3285  0331  0957               	comf	SetMotor@resp+3,w
  3286  0332  00C1               	movwf	pwm_set@duty_cycle+3
  3287  0333  0ABE               	incf	pwm_set@duty_cycle,f
  3288  0334  1903               	skipnz
  3289  0335  0ABF               	incf	pwm_set@duty_cycle+1,f
  3290  0336  1903               	skipnz
  3291  0337  0AC0               	incf	pwm_set@duty_cycle+2,f
  3292  0338  1903               	skipnz
  3293  0339  0AC1               	incf	pwm_set@duty_cycle+3,f
  3294  033A  120A  118A  25C6   	fcall	_pwm_set
  3295                           
  3296                           ;main.c: 149: }else{
  3297  033D  0008               	return
  3298  033E                     l2511:	
  3299                           
  3300                           ;main.c: 150: pwm_set(1, 0 );
  3301  033E  3001               	movlw	1
  3302  033F  00BC               	movwf	pwm_set@channel
  3303  0340  3000               	movlw	0
  3304  0341  00BD               	movwf	pwm_set@channel+1
  3305  0342  3000               	movlw	0
  3306  0343  00C1               	movwf	pwm_set@duty_cycle+3
  3307  0344  3000               	movlw	0
  3308  0345  00C0               	movwf	pwm_set@duty_cycle+2
  3309  0346  3000               	movlw	0
  3310  0347  00BF               	movwf	pwm_set@duty_cycle+1
  3311  0348  3000               	movlw	0
  3312  0349  00BE               	movwf	pwm_set@duty_cycle
  3313  034A  120A  118A  25C6  120A  118A  	fcall	_pwm_set
  3314                           
  3315                           ;main.c: 151: pwm_set(2, 0 );
  3316  034F  3002               	movlw	2
  3317  0350  1283               	bcf	3,5	;RP0=0, select bank0
  3318  0351  1303               	bcf	3,6	;RP1=0, select bank0
  3319  0352  00BC               	movwf	pwm_set@channel
  3320  0353  3000               	movlw	0
  3321  0354  00BD               	movwf	pwm_set@channel+1
  3322  0355  3000               	movlw	0
  3323  0356  00C1               	movwf	pwm_set@duty_cycle+3
  3324  0357  3000               	movlw	0
  3325  0358  00C0               	movwf	pwm_set@duty_cycle+2
  3326  0359  3000               	movlw	0
  3327  035A  00BF               	movwf	pwm_set@duty_cycle+1
  3328  035B  3000               	movlw	0
  3329  035C  00BE               	movwf	pwm_set@duty_cycle
  3330  035D  120A  118A  25C6   	fcall	_pwm_set
  3331  0360  0008               	return
  3332  0361                     __end_of_SetMotor:	
  3333                           
  3334                           	psect	text14
  3335  05C6                     __ptext14:	
  3336 ;; *************** function _pwm_set *****************
  3337 ;; Defined at:
  3338 ;;		line 72 in file "pwm.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  channel         2   28[BANK0 ] int 
  3341 ;;  duty_cycle      4   30[BANK0 ] long 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;		None
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3353 ;;      Params:         0       6       0       0       0
  3354 ;;      Locals:         0       0       0       0       0
  3355 ;;      Temps:          0       4       0       0       0
  3356 ;;      Totals:         0      10       0       0       0
  3357 ;;Total ram usage:       10 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    2
  3360 ;; This function calls:
  3361 ;;		___aldiv
  3362 ;;		___lmul
  3363 ;; This function is called by:
  3364 ;;		_SetMotor
  3365 ;;		_motor_reset
  3366 ;;		_main
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           
  3371                           ;psect for function _pwm_set
  3372  05C6                     _pwm_set:	
  3373                           
  3374                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  3375                           
  3376                           ;incstack = 0
  3377                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3378  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  3379  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  3380  05C8  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  3381  05C9  0008               	return
  3382  05CA  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  3383  05CB  2DDC               	goto	l1823
  3384  05CC  0841               	movf	pwm_set@duty_cycle+3,w
  3385  05CD  1D03               	btfss	3,2
  3386  05CE  0008               	return
  3387  05CF  0840               	movf	pwm_set@duty_cycle+2,w
  3388  05D0  1D03               	btfss	3,2
  3389  05D1  0008               	return
  3390  05D2  3001               	movlw	1
  3391  05D3  023F               	subwf	pwm_set@duty_cycle+1,w
  3392  05D4  1D03               	skipz
  3393  05D5  2DDA               	goto	u1353
  3394  05D6  3000               	movlw	0
  3395  05D7  023E               	subwf	pwm_set@duty_cycle,w
  3396  05D8  1D03               	skipz
  3397  05D9  2DDA               	goto	u1353
  3398  05DA                     u1353:	
  3399  05DA  1803               	btfsc	3,0
  3400  05DB  0008               	return
  3401  05DC                     l1823:	
  3402                           
  3403                           ;pwm.c: 77: if (duty_cycle !=0){
  3404  05DC  0841               	movf	pwm_set@duty_cycle+3,w
  3405  05DD  0440               	iorwf	pwm_set@duty_cycle+2,w
  3406  05DE  043F               	iorwf	pwm_set@duty_cycle+1,w
  3407  05DF  043E               	iorwf	pwm_set@duty_cycle,w
  3408  05E0  1903               	skipnz
  3409  05E1  2E39               	goto	l1833
  3410                           
  3411                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  3412  05E2  3020               	movlw	32
  3413  05E3  00C2               	movwf	??_pwm_set
  3414  05E4  3000               	movlw	0
  3415  05E5  00C3               	movwf	??_pwm_set+1
  3416  05E6  3000               	movlw	0
  3417  05E7  00C4               	movwf	??_pwm_set+2
  3418  05E8  3000               	movlw	0
  3419  05E9  00C5               	movwf	??_pwm_set+3
  3420  05EA  3000               	movlw	0
  3421  05EB  00B0               	movwf	___aldiv@divisor+3
  3422  05EC  3000               	movlw	0
  3423  05ED  00AF               	movwf	___aldiv@divisor+2
  3424  05EE  3000               	movlw	0
  3425  05EF  00AE               	movwf	___aldiv@divisor+1
  3426  05F0  30FF               	movlw	255
  3427  05F1  00AD               	movwf	___aldiv@divisor
  3428  05F2  0841               	movf	pwm_set@duty_cycle+3,w
  3429  05F3  00A3               	movwf	___lmul@multiplier+3
  3430  05F4  0840               	movf	pwm_set@duty_cycle+2,w
  3431  05F5  00A2               	movwf	___lmul@multiplier+2
  3432  05F6  083F               	movf	pwm_set@duty_cycle+1,w
  3433  05F7  00A1               	movwf	___lmul@multiplier+1
  3434  05F8  083E               	movf	pwm_set@duty_cycle,w
  3435  05F9  00A0               	movwf	___lmul@multiplier
  3436  05FA  3000               	movlw	0
  3437  05FB  00A7               	movwf	___lmul@multiplicand+3
  3438  05FC  3000               	movlw	0
  3439  05FD  00A6               	movwf	___lmul@multiplicand+2
  3440  05FE  3000               	movlw	0
  3441  05FF  00A5               	movwf	___lmul@multiplicand+1
  3442  0600  30DF               	movlw	223
  3443  0601  00A4               	movwf	___lmul@multiplicand
  3444  0602  120A  118A  2647  120A  118A  	fcall	___lmul
  3445  0607  1283               	bcf	3,5	;RP0=0, select bank0
  3446  0608  1303               	bcf	3,6	;RP1=0, select bank0
  3447  0609  0823               	movf	?___lmul+3,w
  3448  060A  00B4               	movwf	___aldiv@dividend+3
  3449  060B  0822               	movf	?___lmul+2,w
  3450  060C  00B3               	movwf	___aldiv@dividend+2
  3451  060D  0821               	movf	?___lmul+1,w
  3452  060E  00B2               	movwf	___aldiv@dividend+1
  3453  060F  0820               	movf	?___lmul,w
  3454  0610  00B1               	movwf	___aldiv@dividend
  3455  0611  120A  118A  2537  120A  118A  	fcall	___aldiv
  3456  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3457  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3458  0618  082D               	movf	?___aldiv,w
  3459  0619  07C2               	addwf	??_pwm_set,f
  3460  061A  082E               	movf	?___aldiv+1,w
  3461  061B  1803               	skipnc
  3462  061C  0F2E               	incfsz	?___aldiv+1,w
  3463  061D  2E1F               	goto	u1370
  3464  061E  2E20               	goto	u1371
  3465  061F                     u1370:	
  3466  061F  07C3               	addwf	??_pwm_set+1,f
  3467  0620                     u1371:	
  3468  0620  082F               	movf	?___aldiv+2,w
  3469  0621  1803               	skipnc
  3470  0622  0F2F               	incfsz	?___aldiv+2,w
  3471  0623  2E25               	goto	u1372
  3472  0624  2E26               	goto	u1373
  3473  0625                     u1372:	
  3474  0625  07C4               	addwf	??_pwm_set+2,f
  3475  0626                     u1373:	
  3476  0626  0830               	movf	?___aldiv+3,w
  3477  0627  1803               	skipnc
  3478  0628  0A30               	incf	?___aldiv+3,w
  3479  0629  07C5               	addwf	??_pwm_set+3,f
  3480  062A  0845               	movf	??_pwm_set+3,w
  3481  062B  00C1               	movwf	pwm_set@duty_cycle+3
  3482  062C  0844               	movf	??_pwm_set+2,w
  3483  062D  00C0               	movwf	pwm_set@duty_cycle+2
  3484  062E  0843               	movf	??_pwm_set+1,w
  3485  062F  00BF               	movwf	pwm_set@duty_cycle+1
  3486  0630  0842               	movf	??_pwm_set,w
  3487  0631  00BE               	movwf	pwm_set@duty_cycle
  3488  0632  2E39               	goto	l1833
  3489  0633                     l1827:	
  3490                           
  3491                           ;pwm.c: 82: CCPR1L = duty_cycle;
  3492  0633  083E               	movf	pwm_set@duty_cycle,w
  3493  0634  0095               	movwf	21	;volatile
  3494                           
  3495                           ;pwm.c: 83: break;
  3496  0635  0008               	return
  3497  0636                     l1829:	
  3498                           
  3499                           ;pwm.c: 85: CCPR2L = duty_cycle;
  3500  0636  083E               	movf	pwm_set@duty_cycle,w
  3501  0637  009B               	movwf	27	;volatile
  3502                           
  3503                           ;pwm.c: 86: break;
  3504  0638  0008               	return
  3505  0639                     l1833:	
  3506                           
  3507                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3508                           ; Switch size 1, requested type "simple"
  3509                           ; Number of cases is 1, Range of values is 0 to 0
  3510                           ; switch strategies available:
  3511                           ; Name         Instructions Cycles
  3512                           ; simple_byte            4     3 (average)
  3513                           ; direct_byte           11     8 (fixed)
  3514                           ; jumptable            260     6 (fixed)
  3515                           ;	Chosen strategy is simple_byte
  3516  0639  083D               	movf	pwm_set@channel+1,w
  3517  063A  3A00               	xorlw	0	; case 0
  3518  063B  1903               	skipnz
  3519  063C  2E3E               	goto	l2679
  3520  063D  2E46               	goto	l182
  3521  063E                     l2679:	
  3522                           
  3523                           ; Switch size 1, requested type "simple"
  3524                           ; Number of cases is 2, Range of values is 1 to 2
  3525                           ; switch strategies available:
  3526                           ; Name         Instructions Cycles
  3527                           ; simple_byte            7     4 (average)
  3528                           ; direct_byte           17    11 (fixed)
  3529                           ; jumptable            263     9 (fixed)
  3530                           ;	Chosen strategy is simple_byte
  3531  063E  083C               	movf	pwm_set@channel,w
  3532  063F  3A01               	xorlw	1	; case 1
  3533  0640  1903               	skipnz
  3534  0641  2E33               	goto	l1827
  3535  0642  3A03               	xorlw	3	; case 2
  3536  0643  1903               	skipnz
  3537  0644  2E36               	goto	l1829
  3538  0645  2E46               	goto	l182
  3539  0646                     l182:	
  3540  0646  0008               	return
  3541  0647                     __end_of_pwm_set:	
  3542                           
  3543                           	psect	text15
  3544  0647                     __ptext15:	
  3545 ;; *************** function ___lmul *****************
  3546 ;; Defined at:
  3547 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3550 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  product         4    9[BANK0 ] unsigned long 
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  4    0[BANK0 ] unsigned long 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2, status,0
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3562 ;;      Params:         0       8       0       0       0
  3563 ;;      Locals:         0       4       0       0       0
  3564 ;;      Temps:          0       1       0       0       0
  3565 ;;      Totals:         0      13       0       0       0
  3566 ;;Total ram usage:       13 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    1
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_pwm_set
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           
  3577                           ;psect for function ___lmul
  3578  0647                     ___lmul:	
  3579                           
  3580                           ;incstack = 0
  3581                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3582  0647  3000               	movlw	0
  3583  0648  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0649  1303               	bcf	3,6	;RP1=0, select bank0
  3585  064A  00AC               	movwf	___lmul@product+3
  3586  064B  3000               	movlw	0
  3587  064C  00AB               	movwf	___lmul@product+2
  3588  064D  3000               	movlw	0
  3589  064E  00AA               	movwf	___lmul@product+1
  3590  064F  3000               	movlw	0
  3591  0650  00A9               	movwf	___lmul@product
  3592  0651                     l1753:	
  3593  0651  1C20               	btfss	___lmul@multiplier,0
  3594  0652  2E67               	goto	l1757
  3595  0653  0824               	movf	___lmul@multiplicand,w
  3596  0654  07A9               	addwf	___lmul@product,f
  3597  0655  0825               	movf	___lmul@multiplicand+1,w
  3598  0656  1103               	clrz
  3599  0657  1803               	skipnc
  3600  0658  3E01               	addlw	1
  3601  0659  1D03               	btfss	3,2
  3602  065A  07AA               	addwf	___lmul@product+1,f
  3603  065B  0826               	movf	___lmul@multiplicand+2,w
  3604  065C  1103               	clrz
  3605  065D  1803               	skipnc
  3606  065E  3E01               	addlw	1
  3607  065F  1D03               	btfss	3,2
  3608  0660  07AB               	addwf	___lmul@product+2,f
  3609  0661  0827               	movf	___lmul@multiplicand+3,w
  3610  0662  1103               	clrz
  3611  0663  1803               	skipnc
  3612  0664  3E01               	addlw	1
  3613  0665  1D03               	btfss	3,2
  3614  0666  07AC               	addwf	___lmul@product+3,f
  3615  0667                     l1757:	
  3616  0667  3001               	movlw	1
  3617  0668  00A8               	movwf	??___lmul
  3618  0669                     u1185:	
  3619  0669  1003               	clrc
  3620  066A  0DA4               	rlf	___lmul@multiplicand,f
  3621  066B  0DA5               	rlf	___lmul@multiplicand+1,f
  3622  066C  0DA6               	rlf	___lmul@multiplicand+2,f
  3623  066D  0DA7               	rlf	___lmul@multiplicand+3,f
  3624  066E  0BA8               	decfsz	??___lmul,f
  3625  066F  2E69               	goto	u1185
  3626  0670  3001               	movlw	1
  3627  0671                     u1195:	
  3628  0671  1003               	clrc
  3629  0672  0CA3               	rrf	___lmul@multiplier+3,f
  3630  0673  0CA2               	rrf	___lmul@multiplier+2,f
  3631  0674  0CA1               	rrf	___lmul@multiplier+1,f
  3632  0675  0CA0               	rrf	___lmul@multiplier,f
  3633  0676  3EFF               	addlw	-1
  3634  0677  1D03               	skipz
  3635  0678  2E71               	goto	u1195
  3636  0679  0823               	movf	___lmul@multiplier+3,w
  3637  067A  0422               	iorwf	___lmul@multiplier+2,w
  3638  067B  0421               	iorwf	___lmul@multiplier+1,w
  3639  067C  0420               	iorwf	___lmul@multiplier,w
  3640  067D  1D03               	skipz
  3641  067E  2E51               	goto	l1753
  3642  067F  082C               	movf	___lmul@product+3,w
  3643  0680  00A3               	movwf	?___lmul+3
  3644  0681  082B               	movf	___lmul@product+2,w
  3645  0682  00A2               	movwf	?___lmul+2
  3646  0683  082A               	movf	___lmul@product+1,w
  3647  0684  00A1               	movwf	?___lmul+1
  3648  0685  0829               	movf	___lmul@product,w
  3649  0686  00A0               	movwf	?___lmul
  3650  0687  0008               	return
  3651  0688                     __end_of___lmul:	
  3652                           
  3653                           	psect	text16
  3654  0537                     __ptext16:	
  3655 ;; *************** function ___aldiv *****************
  3656 ;; Defined at:
  3657 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  divisor         4   13[BANK0 ] long 
  3660 ;;  dividend        4   17[BANK0 ] long 
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;  quotient        4   24[BANK0 ] long 
  3663 ;;  sign            1   23[BANK0 ] unsigned char 
  3664 ;;  counter         1   22[BANK0 ] unsigned char 
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  4   13[BANK0 ] long 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2, status,0
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3674 ;;      Params:         0       8       0       0       0
  3675 ;;      Locals:         0       6       0       0       0
  3676 ;;      Temps:          0       1       0       0       0
  3677 ;;      Totals:         0      15       0       0       0
  3678 ;;Total ram usage:       15 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    1
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_pwm_set
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function ___aldiv
  3690  0537                     ___aldiv:	
  3691                           
  3692                           ;incstack = 0
  3693                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3694  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3695  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3696  0539  01B7               	clrf	___aldiv@sign
  3697  053A  1FB0               	btfss	___aldiv@divisor+3,7
  3698  053B  2D49               	goto	l586
  3699  053C  09AD               	comf	___aldiv@divisor,f
  3700  053D  09AE               	comf	___aldiv@divisor+1,f
  3701  053E  09AF               	comf	___aldiv@divisor+2,f
  3702  053F  09B0               	comf	___aldiv@divisor+3,f
  3703  0540  0AAD               	incf	___aldiv@divisor,f
  3704  0541  1903               	skipnz
  3705  0542  0AAE               	incf	___aldiv@divisor+1,f
  3706  0543  1903               	skipnz
  3707  0544  0AAF               	incf	___aldiv@divisor+2,f
  3708  0545  1903               	skipnz
  3709  0546  0AB0               	incf	___aldiv@divisor+3,f
  3710  0547  01B7               	clrf	___aldiv@sign
  3711  0548  0AB7               	incf	___aldiv@sign,f
  3712  0549                     l586:	
  3713  0549  1FB4               	btfss	___aldiv@dividend+3,7
  3714  054A  2D5A               	goto	l1775
  3715  054B  09B1               	comf	___aldiv@dividend,f
  3716  054C  09B2               	comf	___aldiv@dividend+1,f
  3717  054D  09B3               	comf	___aldiv@dividend+2,f
  3718  054E  09B4               	comf	___aldiv@dividend+3,f
  3719  054F  0AB1               	incf	___aldiv@dividend,f
  3720  0550  1903               	skipnz
  3721  0551  0AB2               	incf	___aldiv@dividend+1,f
  3722  0552  1903               	skipnz
  3723  0553  0AB3               	incf	___aldiv@dividend+2,f
  3724  0554  1903               	skipnz
  3725  0555  0AB4               	incf	___aldiv@dividend+3,f
  3726  0556  3001               	movlw	1
  3727  0557  00B5               	movwf	??___aldiv
  3728  0558  0835               	movf	??___aldiv,w
  3729  0559  06B7               	xorwf	___aldiv@sign,f
  3730  055A                     l1775:	
  3731  055A  3000               	movlw	0
  3732  055B  00BB               	movwf	___aldiv@quotient+3
  3733  055C  3000               	movlw	0
  3734  055D  00BA               	movwf	___aldiv@quotient+2
  3735  055E  3000               	movlw	0
  3736  055F  00B9               	movwf	___aldiv@quotient+1
  3737  0560  3000               	movlw	0
  3738  0561  00B8               	movwf	___aldiv@quotient
  3739  0562  0830               	movf	___aldiv@divisor+3,w
  3740  0563  042F               	iorwf	___aldiv@divisor+2,w
  3741  0564  042E               	iorwf	___aldiv@divisor+1,w
  3742  0565  042D               	iorwf	___aldiv@divisor,w
  3743  0566  1903               	skipnz
  3744  0567  2DAF               	goto	l1797
  3745  0568  01B6               	clrf	___aldiv@counter
  3746  0569  0AB6               	incf	___aldiv@counter,f
  3747  056A                     l1783:	
  3748  056A  1BB0               	btfsc	___aldiv@divisor+3,7
  3749  056B  2D7A               	goto	l1785
  3750  056C  3001               	movlw	1
  3751  056D  00B5               	movwf	??___aldiv
  3752  056E                     u1245:	
  3753  056E  1003               	clrc
  3754  056F  0DAD               	rlf	___aldiv@divisor,f
  3755  0570  0DAE               	rlf	___aldiv@divisor+1,f
  3756  0571  0DAF               	rlf	___aldiv@divisor+2,f
  3757  0572  0DB0               	rlf	___aldiv@divisor+3,f
  3758  0573  0BB5               	decfsz	??___aldiv,f
  3759  0574  2D6E               	goto	u1245
  3760  0575  3001               	movlw	1
  3761  0576  00B5               	movwf	??___aldiv
  3762  0577  0835               	movf	??___aldiv,w
  3763  0578  07B6               	addwf	___aldiv@counter,f
  3764  0579  2D6A               	goto	l1783
  3765  057A                     l1785:	
  3766  057A  3001               	movlw	1
  3767  057B  00B5               	movwf	??___aldiv
  3768  057C                     u1265:	
  3769  057C  1003               	clrc
  3770  057D  0DB8               	rlf	___aldiv@quotient,f
  3771  057E  0DB9               	rlf	___aldiv@quotient+1,f
  3772  057F  0DBA               	rlf	___aldiv@quotient+2,f
  3773  0580  0DBB               	rlf	___aldiv@quotient+3,f
  3774  0581  0BB5               	decfsz	??___aldiv,f
  3775  0582  2D7C               	goto	u1265
  3776  0583  0830               	movf	___aldiv@divisor+3,w
  3777  0584  0234               	subwf	___aldiv@dividend+3,w
  3778  0585  1D03               	skipz
  3779  0586  2D91               	goto	u1275
  3780  0587  082F               	movf	___aldiv@divisor+2,w
  3781  0588  0233               	subwf	___aldiv@dividend+2,w
  3782  0589  1D03               	skipz
  3783  058A  2D91               	goto	u1275
  3784  058B  082E               	movf	___aldiv@divisor+1,w
  3785  058C  0232               	subwf	___aldiv@dividend+1,w
  3786  058D  1D03               	skipz
  3787  058E  2D91               	goto	u1275
  3788  058F  082D               	movf	___aldiv@divisor,w
  3789  0590  0231               	subwf	___aldiv@dividend,w
  3790  0591                     u1275:	
  3791  0591  1C03               	skipc
  3792  0592  2DA2               	goto	l1793
  3793  0593  082D               	movf	___aldiv@divisor,w
  3794  0594  02B1               	subwf	___aldiv@dividend,f
  3795  0595  082E               	movf	___aldiv@divisor+1,w
  3796  0596  1C03               	skipc
  3797  0597  0F2E               	incfsz	___aldiv@divisor+1,w
  3798  0598  02B2               	subwf	___aldiv@dividend+1,f
  3799  0599  082F               	movf	___aldiv@divisor+2,w
  3800  059A  1C03               	skipc
  3801  059B  0F2F               	incfsz	___aldiv@divisor+2,w
  3802  059C  02B3               	subwf	___aldiv@dividend+2,f
  3803  059D  0830               	movf	___aldiv@divisor+3,w
  3804  059E  1C03               	skipc
  3805  059F  0F30               	incfsz	___aldiv@divisor+3,w
  3806  05A0  02B4               	subwf	___aldiv@dividend+3,f
  3807  05A1  1438               	bsf	___aldiv@quotient,0
  3808  05A2                     l1793:	
  3809  05A2  3001               	movlw	1
  3810  05A3                     u1285:	
  3811  05A3  1003               	clrc
  3812  05A4  0CB0               	rrf	___aldiv@divisor+3,f
  3813  05A5  0CAF               	rrf	___aldiv@divisor+2,f
  3814  05A6  0CAE               	rrf	___aldiv@divisor+1,f
  3815  05A7  0CAD               	rrf	___aldiv@divisor,f
  3816  05A8  3EFF               	addlw	-1
  3817  05A9  1D03               	skipz
  3818  05AA  2DA3               	goto	u1285
  3819  05AB  3001               	movlw	1
  3820  05AC  02B6               	subwf	___aldiv@counter,f
  3821  05AD  1D03               	btfss	3,2
  3822  05AE  2D7A               	goto	l1785
  3823  05AF                     l1797:	
  3824  05AF  0837               	movf	___aldiv@sign,w
  3825  05B0  1903               	btfsc	3,2
  3826  05B1  2DBD               	goto	l1801
  3827  05B2  09B8               	comf	___aldiv@quotient,f
  3828  05B3  09B9               	comf	___aldiv@quotient+1,f
  3829  05B4  09BA               	comf	___aldiv@quotient+2,f
  3830  05B5  09BB               	comf	___aldiv@quotient+3,f
  3831  05B6  0AB8               	incf	___aldiv@quotient,f
  3832  05B7  1903               	skipnz
  3833  05B8  0AB9               	incf	___aldiv@quotient+1,f
  3834  05B9  1903               	skipnz
  3835  05BA  0ABA               	incf	___aldiv@quotient+2,f
  3836  05BB  1903               	skipnz
  3837  05BC  0ABB               	incf	___aldiv@quotient+3,f
  3838  05BD                     l1801:	
  3839  05BD  083B               	movf	___aldiv@quotient+3,w
  3840  05BE  00B0               	movwf	?___aldiv+3
  3841  05BF  083A               	movf	___aldiv@quotient+2,w
  3842  05C0  00AF               	movwf	?___aldiv+2
  3843  05C1  0839               	movf	___aldiv@quotient+1,w
  3844  05C2  00AE               	movwf	?___aldiv+1
  3845  05C3  0838               	movf	___aldiv@quotient,w
  3846  05C4  00AD               	movwf	?___aldiv
  3847  05C5  0008               	return
  3848  05C6                     __end_of___aldiv:	
  3849                           
  3850                           	psect	text17
  3851  073D                     __ptext17:	
  3852 ;; *************** function _constrain *****************
  3853 ;; Defined at:
  3854 ;;		line 98 in file "main.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  value           4    0[BANK0 ] long 
  3857 ;;  lLimit          4    4[BANK0 ] long 
  3858 ;;  uLimit          4    8[BANK0 ] long 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;		None
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  4    0[BANK0 ] long 
  3863 ;; Registers used:
  3864 ;;		wreg, btemp+1
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3870 ;;      Params:         0      12       0       0       0
  3871 ;;      Locals:         0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0
  3873 ;;      Totals:         0      12       0       0       0
  3874 ;;Total ram usage:       12 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    1
  3877 ;; This function calls:
  3878 ;;		Nothing
  3879 ;; This function is called by:
  3880 ;;		_SetMotor
  3881 ;; This function uses a non-reentrant model
  3882 ;;
  3883                           
  3884                           
  3885                           ;psect for function _constrain
  3886  073D                     _constrain:	
  3887                           
  3888                           ;main.c: 99: if (value > uLimit){
  3889                           
  3890                           ;incstack = 0
  3891                           ; Regs used in _constrain: [wreg+btemp+1]
  3892  073D  1283               	bcf	3,5	;RP0=0, select bank0
  3893  073E  1303               	bcf	3,6	;RP1=0, select bank0
  3894  073F  082B               	movf	constrain@uLimit+3,w
  3895  0740  3A80               	xorlw	128
  3896  0741  00FF               	movwf	127
  3897  0742  0823               	movf	constrain@value+3,w
  3898  0743  3A80               	xorlw	128
  3899  0744  027F               	subwf	127,w
  3900  0745  1D03               	skipz
  3901  0746  2F51               	goto	u2163
  3902  0747  0822               	movf	constrain@value+2,w
  3903  0748  022A               	subwf	constrain@uLimit+2,w
  3904  0749  1D03               	skipz
  3905  074A  2F51               	goto	u2163
  3906  074B  0821               	movf	constrain@value+1,w
  3907  074C  0229               	subwf	constrain@uLimit+1,w
  3908  074D  1D03               	skipz
  3909  074E  2F51               	goto	u2163
  3910  074F  0820               	movf	constrain@value,w
  3911  0750  0228               	subwf	constrain@uLimit,w
  3912  0751                     u2163:	
  3913  0751  1803               	skipnc
  3914  0752  2F5C               	goto	l2403
  3915                           
  3916                           ;main.c: 100: return(uLimit);
  3917  0753  082B               	movf	constrain@uLimit+3,w
  3918  0754  00A3               	movwf	?_constrain+3
  3919  0755  082A               	movf	constrain@uLimit+2,w
  3920  0756  00A2               	movwf	?_constrain+2
  3921  0757  0829               	movf	constrain@uLimit+1,w
  3922  0758  00A1               	movwf	?_constrain+1
  3923  0759  0828               	movf	constrain@uLimit,w
  3924  075A  00A0               	movwf	?_constrain
  3925  075B  0008               	return
  3926  075C                     l2403:	
  3927  075C  0823               	movf	constrain@value+3,w
  3928  075D  3A80               	xorlw	128
  3929  075E  00FF               	movwf	127
  3930  075F  0827               	movf	constrain@lLimit+3,w
  3931  0760  3A80               	xorlw	128
  3932  0761  027F               	subwf	127,w
  3933  0762  1D03               	skipz
  3934  0763  2F6E               	goto	u2173
  3935  0764  0826               	movf	constrain@lLimit+2,w
  3936  0765  0222               	subwf	constrain@value+2,w
  3937  0766  1D03               	skipz
  3938  0767  2F6E               	goto	u2173
  3939  0768  0825               	movf	constrain@lLimit+1,w
  3940  0769  0221               	subwf	constrain@value+1,w
  3941  076A  1D03               	skipz
  3942  076B  2F6E               	goto	u2173
  3943  076C  0824               	movf	constrain@lLimit,w
  3944  076D  0220               	subwf	constrain@value,w
  3945  076E                     u2173:	
  3946  076E  1803               	skipnc
  3947  076F  0008               	return
  3948                           
  3949                           ;main.c: 102: return(lLimit);
  3950  0770  0827               	movf	constrain@lLimit+3,w
  3951  0771  00A3               	movwf	?_constrain+3
  3952  0772  0826               	movf	constrain@lLimit+2,w
  3953  0773  00A2               	movwf	?_constrain+2
  3954  0774  0825               	movf	constrain@lLimit+1,w
  3955  0775  00A1               	movwf	?_constrain+1
  3956  0776  0824               	movf	constrain@lLimit,w
  3957  0777  00A0               	movwf	?_constrain
  3958  0778  0008               	return
  3959  0779                     __end_of_constrain:	
  3960                           ;main.c: 104: return(value);
  3961                           
  3962                           
  3963                           	psect	text18
  3964  0F66                     __ptext18:	
  3965 ;; *************** function ___wmul *****************
  3966 ;; Defined at:
  3967 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3970 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  product         2    4[BANK0 ] unsigned int 
  3973 ;; Return value:  Size  Location     Type
  3974 ;;                  2    0[BANK0 ] unsigned int 
  3975 ;; Registers used:
  3976 ;;		wreg, status,2, status,0
  3977 ;; Tracked objects:
  3978 ;;		On entry : 0/0
  3979 ;;		On exit  : 0/0
  3980 ;;		Unchanged: 0/0
  3981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3982 ;;      Params:         0       4       0       0       0
  3983 ;;      Locals:         0       2       0       0       0
  3984 ;;      Temps:          0       0       0       0       0
  3985 ;;      Totals:         0       6       0       0       0
  3986 ;;Total ram usage:        6 bytes
  3987 ;; Hardware stack levels used:    1
  3988 ;; Hardware stack levels required when called:    1
  3989 ;; This function calls:
  3990 ;;		Nothing
  3991 ;; This function is called by:
  3992 ;;		_SetMotor
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           
  3997                           ;psect for function ___wmul
  3998  0F66                     ___wmul:	
  3999                           
  4000                           ;incstack = 0
  4001                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4002  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0F68  01A4               	clrf	___wmul@product
  4005  0F69  01A5               	clrf	___wmul@product+1
  4006  0F6A                     l2415:	
  4007  0F6A  1C20               	btfss	___wmul@multiplier,0
  4008  0F6B  2F72               	goto	l521
  4009  0F6C  0822               	movf	___wmul@multiplicand,w
  4010  0F6D  07A4               	addwf	___wmul@product,f
  4011  0F6E  1803               	skipnc
  4012  0F6F  0AA5               	incf	___wmul@product+1,f
  4013  0F70  0823               	movf	___wmul@multiplicand+1,w
  4014  0F71  07A5               	addwf	___wmul@product+1,f
  4015  0F72                     l521:	
  4016  0F72  3001               	movlw	1
  4017  0F73                     u2195:	
  4018  0F73  1003               	clrc
  4019  0F74  0DA2               	rlf	___wmul@multiplicand,f
  4020  0F75  0DA3               	rlf	___wmul@multiplicand+1,f
  4021  0F76  3EFF               	addlw	-1
  4022  0F77  1D03               	skipz
  4023  0F78  2F73               	goto	u2195
  4024  0F79  3001               	movlw	1
  4025  0F7A                     u2205:	
  4026  0F7A  1003               	clrc
  4027  0F7B  0CA1               	rrf	___wmul@multiplier+1,f
  4028  0F7C  0CA0               	rrf	___wmul@multiplier,f
  4029  0F7D  3EFF               	addlw	-1
  4030  0F7E  1D03               	skipz
  4031  0F7F  2F7A               	goto	u2205
  4032  0F80  0820               	movf	___wmul@multiplier,w
  4033  0F81  0421               	iorwf	___wmul@multiplier+1,w
  4034  0F82  1D03               	btfss	3,2
  4035  0F83  2F6A               	goto	l2415
  4036  0F84  0825               	movf	___wmul@product+1,w
  4037  0F85  00A1               	movwf	?___wmul+1
  4038  0F86  0824               	movf	___wmul@product,w
  4039  0F87  00A0               	movwf	?___wmul
  4040  0F88  0008               	return
  4041  0F89                     __end_of___wmul:	
  4042                           
  4043                           	psect	text19
  4044  0361                     __ptext19:	
  4045 ;; *************** function _isr *****************
  4046 ;; Defined at:
  4047 ;;		line 177 in file "main.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;		None
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  portB           1    6[COMMON] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      void 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4061 ;;      Params:         0       0       0       0       0
  4062 ;;      Locals:         1       0       0       0       0
  4063 ;;      Temps:          6       0       0       0       0
  4064 ;;      Totals:         7       0       0       0       0
  4065 ;;Total ram usage:        7 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		Interrupt level 1
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _isr
  4076  0361                     _isr:	
  4077                           
  4078                           ;main.c: 178: static int tick;;main.c: 182: if (T0IE && T0IF) {
  4079  0361  1A8B               	btfsc	11,5	;volatile
  4080  0362  1D0B               	btfss	11,2	;volatile
  4081  0363  2BAE               	goto	i1l2183
  4082                           
  4083                           ;main.c: 183: set_motor_flag = 1;
  4084  0364  1683               	bsf	3,5	;RP0=1, select bank1
  4085  0365  1303               	bcf	3,6	;RP1=0, select bank1
  4086  0366  01C4               	clrf	_set_motor_flag^(0+128)
  4087  0367  0AC4               	incf	_set_motor_flag^(0+128),f
  4088                           
  4089                           ;main.c: 184: if (sampling){
  4090  0368  0873               	movf	_sampling,w	;volatile
  4091  0369  1903               	btfsc	3,2
  4092  036A  2BA9               	goto	i1l2179
  4093                           
  4094                           ;main.c: 185: if (samples < 90/2){
  4095  036B  0871               	movf	_samples+1,w	;volatile
  4096  036C  3A80               	xorlw	128
  4097  036D  00FF               	movwf	127
  4098  036E  3080               	movlw	128
  4099  036F  027F               	subwf	127,w
  4100  0370  1D03               	skipz
  4101  0371  2B74               	goto	u190_25
  4102  0372  302D               	movlw	45
  4103  0373  0270               	subwf	_samples,w	;volatile
  4104  0374                     u190_25:	
  4105  0374  1803               	skipnc
  4106  0375  2B80               	goto	i1l2173
  4107                           
  4108                           ;main.c: 186: pos_log1[samples] = motor_pos-last_pos;
  4109  0376  1683               	bsf	3,5	;RP0=1, select bank1
  4110  0377  1303               	bcf	3,6	;RP1=0, select bank1
  4111  0378  083A               	movf	_last_pos^(0+128),w	;volatile
  4112  0379  1283               	bcf	3,5	;RP0=0, select bank0
  4113  037A  1303               	bcf	3,6	;RP1=0, select bank0
  4114  037B  025F               	subwf	_motor_pos,w	;volatile
  4115  037C  00F7               	movwf	??_isr
  4116  037D  0870               	movf	_samples,w	;volatile
  4117  037E  3EBE               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  4118  037F  2B89               	goto	L3
  4119  0380                     i1l2173:	
  4120                           ;main.c: 187: }else{
  4121                           
  4122                           
  4123                           ;main.c: 188: pos_log2[samples-(90/2)] = motor_pos-last_pos;
  4124  0380  1683               	bsf	3,5	;RP0=1, select bank1
  4125  0381  1303               	bcf	3,6	;RP1=0, select bank1
  4126  0382  083A               	movf	_last_pos^(0+128),w	;volatile
  4127  0383  1283               	bcf	3,5	;RP0=0, select bank0
  4128  0384  1303               	bcf	3,6	;RP1=0, select bank0
  4129  0385  025F               	subwf	_motor_pos,w	;volatile
  4130  0386  00F7               	movwf	??_isr
  4131  0387  0870               	movf	_samples,w	;volatile
  4132  0388  3E63               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  4133  0389                     L3:	
  4134  0389  0084               	movwf	4
  4135  038A  0877               	movf	??_isr,w
  4136  038B  1783               	bsf	3,7	;select IRP bank3
  4137  038C  0080               	movwf	0
  4138                           
  4139                           ;main.c: 189: };main.c: 190: last_pos = motor_pos;
  4140  038D  0862               	movf	_motor_pos+3,w	;volatile
  4141  038E  1683               	bsf	3,5	;RP0=1, select bank1
  4142  038F  1303               	bcf	3,6	;RP1=0, select bank1
  4143  0390  00BD               	movwf	(_last_pos+3)^(0+128)	;volatile
  4144  0391  1283               	bcf	3,5	;RP0=0, select bank0
  4145  0392  1303               	bcf	3,6	;RP1=0, select bank0
  4146  0393  0861               	movf	_motor_pos+2,w	;volatile
  4147  0394  1683               	bsf	3,5	;RP0=1, select bank1
  4148  0395  1303               	bcf	3,6	;RP1=0, select bank1
  4149  0396  00BC               	movwf	(_last_pos+2)^(0+128)	;volatile
  4150  0397  1283               	bcf	3,5	;RP0=0, select bank0
  4151  0398  1303               	bcf	3,6	;RP1=0, select bank0
  4152  0399  0860               	movf	_motor_pos+1,w	;volatile
  4153  039A  1683               	bsf	3,5	;RP0=1, select bank1
  4154  039B  1303               	bcf	3,6	;RP1=0, select bank1
  4155  039C  00BB               	movwf	(_last_pos+1)^(0+128)	;volatile
  4156  039D  1283               	bcf	3,5	;RP0=0, select bank0
  4157  039E  1303               	bcf	3,6	;RP1=0, select bank0
  4158  039F  085F               	movf	_motor_pos,w	;volatile
  4159  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  4160  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  4161  03A2  00BA               	movwf	_last_pos^(0+128)	;volatile
  4162                           
  4163                           ;main.c: 191: samples++;
  4164  03A3  3001               	movlw	1
  4165  03A4  07F0               	addwf	_samples,f	;volatile
  4166  03A5  1803               	skipnc
  4167  03A6  0AF1               	incf	_samples+1,f	;volatile
  4168  03A7  3000               	movlw	0
  4169  03A8  07F1               	addwf	_samples+1,f	;volatile
  4170  03A9                     i1l2179:	
  4171                           
  4172                           ;main.c: 192: };main.c: 196: TMR0 = (0xff - 195);
  4173  03A9  303C               	movlw	60
  4174  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  4175  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  4176  03AC  0081               	movwf	1	;volatile
  4177                           
  4178                           ;main.c: 197: T0IF = 0;
  4179  03AD  110B               	bcf	11,2	;volatile
  4180  03AE                     i1l2183:	
  4181                           
  4182                           ;main.c: 198: };main.c: 201: if (RBIE && RBIF) {
  4183  03AE  198B               	btfsc	11,3	;volatile
  4184  03AF  1C0B               	btfss	11,0	;volatile
  4185  03B0  2C5A               	goto	i1l346
  4186                           
  4187                           ;main.c: 202: char portB = PORTB;
  4188  03B1  0806               	movf	6,w	;volatile
  4189  03B2  00F7               	movwf	??_isr
  4190  03B3  0877               	movf	??_isr,w
  4191  03B4  00FD               	movwf	isr@portB
  4192                           
  4193                           ;main.c: 204: ab1 = (portB & 0b00011000) >>3;
  4194  03B5  087D               	movf	isr@portB,w
  4195  03B6  00F7               	movwf	??_isr
  4196  03B7  3003               	movlw	3
  4197  03B8                     u193_25:	
  4198  03B8  1003               	clrc
  4199  03B9  0CF7               	rrf	??_isr,f
  4200  03BA  3EFF               	addlw	-1
  4201  03BB  1D03               	skipz
  4202  03BC  2BB8               	goto	u193_25
  4203  03BD  0877               	movf	??_isr,w
  4204  03BE  3903               	andlw	3
  4205  03BF  00F8               	movwf	??_isr+1
  4206  03C0  0878               	movf	??_isr+1,w
  4207  03C1  00F4               	movwf	_ab1	;volatile
  4208                           
  4209                           ;main.c: 205: switch(state1)
  4210  03C2  2C3C               	goto	i1l2229
  4211  03C3                     i1l2191:	
  4212                           
  4213                           ;main.c: 208: if(ab1 == 1){
  4214  03C3  0374               	decf	_ab1,w	;volatile
  4215  03C4  1D03               	btfss	3,2
  4216  03C5  2BC8               	goto	i1l2195
  4217                           
  4218                           ;main.c: 209: state1 = 1;
  4219  03C6  3001               	movlw	1
  4220  03C7  2BE8               	goto	L4
  4221  03C8                     i1l2195:	
  4222                           ;main.c: 211: }
  4223                           
  4224                           ;main.c: 210: encoder1_counter--;
  4225                           
  4226                           
  4227                           ;main.c: 212: else if(ab1 == 2){
  4228  03C8  3002               	movlw	2
  4229  03C9  0674               	xorwf	_ab1,w	;volatile
  4230  03CA  1D03               	btfss	3,2
  4231  03CB  2C4A               	goto	i1l2231
  4232                           
  4233                           ;main.c: 213: state1 = 2;
  4234  03CC  3002               	movlw	2
  4235  03CD  00F7               	movwf	??_isr
  4236  03CE  0877               	movf	??_isr,w
  4237  03CF  00F5               	movwf	_state1	;volatile
  4238  03D0  2BD5               	goto	i1l2203
  4239  03D1                     i1l2199:	
  4240                           ;main.c: 214: encoder1_counter++;
  4241                           
  4242                           
  4243                           ;main.c: 218: if(ab1 == 0){
  4244  03D1  0874               	movf	_ab1,w	;volatile
  4245  03D2  1D03               	btfss	3,2
  4246  03D3  2BE3               	goto	i1l2205
  4247                           
  4248                           ;main.c: 219: state1 = 0;
  4249  03D4  01F5               	clrf	_state1	;volatile
  4250  03D5                     i1l2203:	
  4251                           
  4252                           ;main.c: 220: encoder1_counter++;
  4253  03D5  3001               	movlw	1
  4254  03D6  07E3               	addwf	_encoder1_counter,f	;volatile
  4255  03D7  3000               	movlw	0
  4256  03D8  1803               	skipnc
  4257  03D9  3001               	movlw	1
  4258  03DA  07E4               	addwf	_encoder1_counter+1,f	;volatile
  4259  03DB  3000               	movlw	0
  4260  03DC  1803               	skipnc
  4261  03DD  3001               	movlw	1
  4262  03DE  07E5               	addwf	_encoder1_counter+2,f	;volatile
  4263  03DF  3000               	movlw	0
  4264  03E0  1803               	skipnc
  4265  03E1  3001               	movlw	1
  4266  03E2  2BF5               	goto	L5
  4267  03E3                     i1l2205:	
  4268                           ;main.c: 221: }
  4269                           
  4270                           
  4271                           ;main.c: 222: else if (ab1 == 3){
  4272  03E3  3003               	movlw	3
  4273  03E4  0674               	xorwf	_ab1,w	;volatile
  4274  03E5  1D03               	btfss	3,2
  4275  03E6  2C4A               	goto	i1l2231
  4276                           
  4277                           ;main.c: 223: state1 = 3;
  4278  03E7  3003               	movlw	3
  4279  03E8                     L4:	
  4280  03E8  00F7               	movwf	??_isr
  4281  03E9  0877               	movf	??_isr,w
  4282  03EA  00F5               	movwf	_state1	;volatile
  4283                           
  4284                           ;main.c: 224: encoder1_counter--;
  4285  03EB  30FF               	movlw	255
  4286  03EC  07E3               	addwf	_encoder1_counter,f	;volatile
  4287  03ED  30FF               	movlw	255
  4288  03EE  1C03               	skipc
  4289  03EF  07E4               	addwf	_encoder1_counter+1,f	;volatile
  4290  03F0  30FF               	movlw	255
  4291  03F1  1C03               	skipc
  4292  03F2  07E5               	addwf	_encoder1_counter+2,f	;volatile
  4293  03F3  30FF               	movlw	255
  4294  03F4  1C03               	skipc
  4295  03F5                     L5:	
  4296  03F5  07E6               	addwf	_encoder1_counter+3,f	;volatile
  4297  03F6  2C4A               	goto	i1l2231
  4298  03F7                     i1l2209:	
  4299                           
  4300                           ;main.c: 228: if(ab1 == 0){
  4301  03F7  0874               	movf	_ab1,w	;volatile
  4302  03F8  1D03               	btfss	3,2
  4303  03F9  2BFC               	goto	i1l2215
  4304                           
  4305                           ;main.c: 229: state1 = 0;
  4306  03FA  01F5               	clrf	_state1	;volatile
  4307  03FB  2C1A               	goto	L6
  4308  03FC                     i1l2215:	
  4309                           ;main.c: 231: }
  4310                           
  4311                           ;main.c: 230: encoder1_counter--;
  4312                           
  4313                           
  4314                           ;main.c: 232: else if(ab1 == 3){
  4315  03FC  3003               	movlw	3
  4316  03FD  0674               	xorwf	_ab1,w	;volatile
  4317  03FE  1D03               	btfss	3,2
  4318  03FF  2C4A               	goto	i1l2231
  4319                           
  4320                           ;main.c: 233: state1 = 3;
  4321  0400  3003               	movlw	3
  4322  0401  00F7               	movwf	??_isr
  4323  0402  0877               	movf	??_isr,w
  4324  0403  00F5               	movwf	_state1	;volatile
  4325                           
  4326                           ;main.c: 234: encoder1_counter++;
  4327  0404  3001               	movlw	1
  4328  0405  07E3               	addwf	_encoder1_counter,f	;volatile
  4329  0406  3000               	movlw	0
  4330  0407  1803               	skipnc
  4331  0408  3001               	movlw	1
  4332  0409  07E4               	addwf	_encoder1_counter+1,f	;volatile
  4333  040A  3000               	movlw	0
  4334  040B  1803               	skipnc
  4335  040C  3001               	movlw	1
  4336  040D  07E5               	addwf	_encoder1_counter+2,f	;volatile
  4337  040E  3000               	movlw	0
  4338  040F  1803               	skipnc
  4339  0410  3001               	movlw	1
  4340  0411  2C24               	goto	L7
  4341  0412                     i1l2219:	
  4342                           
  4343                           ;main.c: 238: if(ab1 == 2){
  4344  0412  3002               	movlw	2
  4345  0413  0674               	xorwf	_ab1,w	;volatile
  4346  0414  1D03               	btfss	3,2
  4347  0415  2C26               	goto	i1l2223
  4348                           
  4349                           ;main.c: 239: state1 = 2;
  4350  0416  3002               	movlw	2
  4351  0417  00F7               	movwf	??_isr
  4352  0418  0877               	movf	??_isr,w
  4353  0419  00F5               	movwf	_state1	;volatile
  4354  041A                     L6:	
  4355                           
  4356                           ;main.c: 240: encoder1_counter--;
  4357  041A  30FF               	movlw	255
  4358  041B  07E3               	addwf	_encoder1_counter,f	;volatile
  4359  041C  30FF               	movlw	255
  4360  041D  1C03               	skipc
  4361  041E  07E4               	addwf	_encoder1_counter+1,f	;volatile
  4362  041F  30FF               	movlw	255
  4363  0420  1C03               	skipc
  4364  0421  07E5               	addwf	_encoder1_counter+2,f	;volatile
  4365  0422  30FF               	movlw	255
  4366  0423  1C03               	skipc
  4367  0424                     L7:	
  4368  0424  07E6               	addwf	_encoder1_counter+3,f	;volatile
  4369                           
  4370                           ;main.c: 241: }
  4371  0425  2C4A               	goto	i1l2231
  4372  0426                     i1l2223:	
  4373                           
  4374                           ;main.c: 242: else if (ab1 == 1){
  4375  0426  0374               	decf	_ab1,w	;volatile
  4376  0427  1D03               	btfss	3,2
  4377  0428  2C4A               	goto	i1l2231
  4378                           
  4379                           ;main.c: 243: state1 = 1;
  4380  0429  3001               	movlw	1
  4381  042A  00F7               	movwf	??_isr
  4382  042B  0877               	movf	??_isr,w
  4383  042C  00F5               	movwf	_state1	;volatile
  4384                           
  4385                           ;main.c: 244: encoder1_counter++;
  4386  042D  3001               	movlw	1
  4387  042E  07E3               	addwf	_encoder1_counter,f	;volatile
  4388  042F  3000               	movlw	0
  4389  0430  1803               	skipnc
  4390  0431  3001               	movlw	1
  4391  0432  07E4               	addwf	_encoder1_counter+1,f	;volatile
  4392  0433  3000               	movlw	0
  4393  0434  1803               	skipnc
  4394  0435  3001               	movlw	1
  4395  0436  07E5               	addwf	_encoder1_counter+2,f	;volatile
  4396  0437  3000               	movlw	0
  4397  0438  1803               	skipnc
  4398  0439  3001               	movlw	1
  4399  043A  07E6               	addwf	_encoder1_counter+3,f	;volatile
  4400  043B  2C4A               	goto	i1l2231
  4401  043C                     i1l2229:	
  4402  043C  0875               	movf	_state1,w	;volatile
  4403                           
  4404                           ; Switch size 1, requested type "simple"
  4405                           ; Number of cases is 4, Range of values is 0 to 3
  4406                           ; switch strategies available:
  4407                           ; Name         Instructions Cycles
  4408                           ; simple_byte           13     7 (average)
  4409                           ; direct_byte           20     8 (fixed)
  4410                           ; jumptable            260     6 (fixed)
  4411                           ;	Chosen strategy is simple_byte
  4412  043D  3A00               	xorlw	0	; case 0
  4413  043E  1903               	skipnz
  4414  043F  2BC3               	goto	i1l2191
  4415  0440  3A01               	xorlw	1	; case 1
  4416  0441  1903               	skipnz
  4417  0442  2BD1               	goto	i1l2199
  4418  0443  3A03               	xorlw	3	; case 2
  4419  0444  1903               	skipnz
  4420  0445  2BF7               	goto	i1l2209
  4421  0446  3A01               	xorlw	1	; case 3
  4422  0447  1903               	skipnz
  4423  0448  2C12               	goto	i1l2219
  4424  0449  2C4A               	goto	i1l2231
  4425  044A                     i1l2231:	
  4426                           
  4427                           ;main.c: 249: motor_pos = -encoder1_counter;
  4428  044A  0963               	comf	_encoder1_counter,w	;volatile
  4429  044B  00DF               	movwf	_motor_pos	;volatile
  4430  044C  0964               	comf	_encoder1_counter+1,w	;volatile
  4431  044D  00E0               	movwf	_motor_pos+1	;volatile
  4432  044E  0965               	comf	_encoder1_counter+2,w	;volatile
  4433  044F  00E1               	movwf	_motor_pos+2	;volatile
  4434  0450  0966               	comf	_encoder1_counter+3,w	;volatile
  4435  0451  00E2               	movwf	_motor_pos+3	;volatile
  4436  0452  0ADF               	incf	_motor_pos,f	;volatile
  4437  0453  1903               	skipnz
  4438  0454  0AE0               	incf	_motor_pos+1,f	;volatile
  4439  0455  1903               	skipnz
  4440  0456  0AE1               	incf	_motor_pos+2,f	;volatile
  4441  0457  1903               	skipnz
  4442  0458  0AE2               	incf	_motor_pos+3,f	;volatile
  4443                           
  4444                           ;main.c: 250: RBIF = 0;
  4445  0459  100B               	bcf	11,0	;volatile
  4446  045A                     i1l346:	
  4447  045A  087C               	movf	??_isr+5,w
  4448  045B  00FF               	movwf	127
  4449  045C  087B               	movf	??_isr+4,w
  4450  045D  008A               	movwf	10
  4451  045E  087A               	movf	??_isr+3,w
  4452  045F  0084               	movwf	4
  4453  0460  0E79               	swapf	(??_isr+2)^(0+4294967168),w
  4454  0461  0083               	movwf	3
  4455  0462  0EFE               	swapf	126,f
  4456  0463  0E7E               	swapf	126,w
  4457  0464  0009               	retfie
  4458  0465                     __end_of_isr:	
  4459  007E                     btemp	set	126	;btemp
  4460  007E                     wtemp0	set	126
  4461                           
  4462                           	psect	intentry
  4463  0004                     __pintentry:	
  4464                           ;incstack = 0
  4465                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1]
  4466                           
  4467  0004                     interrupt_function:	
  4468  007E                     saved_w	set	btemp
  4469  0004  00FE               	movwf	btemp
  4470  0005  0E03               	swapf	3,w
  4471  0006  00F9               	movwf	??_isr+2
  4472  0007  0804               	movf	4,w
  4473  0008  00FA               	movwf	??_isr+3
  4474  0009  080A               	movf	10,w
  4475  000A  00FB               	movwf	??_isr+4
  4476  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4477  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4478  000D  087F               	movf	btemp+1,w
  4479  000E  00FC               	movwf	??_isr+5
  4480  000F  120A  118A  2B61   	ljmp	_isr


Data Sizes:
    Strings     45
    Constant    10
    Data        0
    BSS         134
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     59      79
    BANK1            80     26      41
    BANK3            96      0      92
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[14]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[11]), 
		 -> STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@sVar(BANK1[20]), PrintSetpoint@sVar(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 20
		 -> main@sVar(BANK1[20]), PrintSetpoint@sVar(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetMotor
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putst->_putch
    _motor_reset->_pwm_set
    _SetMotor->_pwm_set
    _pwm_set->___aldiv
    ___aldiv->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   12201
                                             58 BANK0      1     1      0
                                              0 BANK1     26    26      0
                           _SetMotor
                           _SetPoint
                             _chkchr
                      _encoders_init
                        _motor_reset
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    18      5    1647
                                             14 BANK0     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     276
                                              2 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    2947
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                             6     4      2     576
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotor                                            20    20      0    3809
                                             38 BANK0     20    20      0
                             ___wmul
                          _constrain
                            _pwm_set
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2371
                                             28 BANK0     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _constrain                                           12     0     12     487
                                              0 BANK0     12     0     12
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     496
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0      23
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetMotor
     ___wmul
     _constrain
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
   _SetPoint
   _chkchr
   _encoders_init
   _motor_reset
     _SetPoint
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      E2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3B      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1A      29       7       51.3%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      5C       9       95.8%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      E2      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 31 17:10:52 2019

                      pc 0002              __CFG_CP$OFF 0000                       l82 0FBF  
                     l83 0FC9                       fsr 0004      ___wmul@multiplicand 0022  
                    l170 0FEE                      l182 0646                      l360 0113  
                    l521 0F72                      l357 00C5                      l296 0312  
                    l586 0549                      _GIE 005F                      _RA5 002D  
                    _RA6 002E                      _RB5 0035                      _RC3 003B  
                    _RC4 003C                      _RC5 003D                      _PR2 0092  
           __CFG_CPD$OFF 0000                      _RX9 00C6                      _TX9 04C6  
                    _ab1 0074                      _isr 0361                      fsr0 0004  
                    indf 0000             __CFG_IESO$ON 0000             __CFG_FOSC$EC 0000  
       _encoder1_counter 0063             __CFG_LVP$OFF 0000                     l2031 04A2  
                   l2041 04B9                     l2025 048C                     l2053 04DC  
                   l2047 04BB                     l2071 0532                     l2403 075C  
                   l2067 04EF                     l2059 04EB                     l2069 046C  
                   l2415 0F6A                     l2511 033E                     l1801 05BD  
                   l2601 00F2                     l2507 02EF                     l2611 0130  
                   l1823 05DC                     l1815 0FB1                     l1911 07C5  
                   l2631 0178                     l1753 0651                     l1833 0639  
                   l2457 0F31                     l1817 0FCB                     l1827 0633  
                   l1915 07D3                     l2651 01CD                     l2643 01AA  
                   l2635 018C                     l2627 0164                     l1757 0667  
                   l1829 0636                     l2493 021C                     l2485 0202  
                   l1909 07B7                     l1783 056A                     l1775 055A  
                   l1919 07DE                     l2655 01D8                     l2647 01BE  
                   l2639 0196                     l2583 009D                     l1793 05A2  
                   l1785 057A                     l2577 0090                     l1797 05AF  
                   l1893 06B6                     l1885 0692                     l2679 063E  
                   l1887 06A0                     l1993 07A8                     l1897 06C1  
                   l1995 077C                     l1989 0799                     ?_isr 0077  
                   STR_1 0710                     STR_2 072E                     STR_3 0739  
                   STR_4 0739                     _ANS4 0C44                     STR_5 0720  
                   _ANS8 0C48                     _ANS9 0C49                     _BRGH 04C2  
                   _T0IE 005D                     _CREN 00C4                     _T0IF 005A  
                   _FERR 00C2                     _IOCB 0096                     u2205 0F7A  
                   u1245 056E                     u1405 0FA2                     u1265 057C  
                   u1185 0669                     u1353 05DA                     u1505 06B7  
                   u1370 061F                     u2163 0751                     u1275 0591  
                   u1195 0671                     u1371 0620                     u2315 00A9  
                   u1372 0625                     u2260 0244                     u2173 076E  
                   u1285 05A3                     u1373 0626                     u2261 0245  
                   u2325 00CE                     u2262 024A                     u2263 024B  
                   u1535 07BA                     u2335 011C                     u2273 02ED  
                   u1465 0695                     u2195 0F73                     u1555 07CB  
                   u1485 06A1                     u1565 07D4                     u1495 06AD  
                   u1685 04D2                     u1785 0F53                     _PEIE 005E  
                   _RBIE 005B                     _RBIF 0058                     _RCIE 0465  
                   _RCIF 0065                     _OERR 00C1                     _TMR0 0001  
                   _SPEN 00C7                     _SREN 00C5                     _TXIE 0464  
                   _TXEN 04C5                     _TXIF 0064                     _SYNC 04C4  
           __CFG_WRT$OFF 0000            __CFG_FCMEN$ON 0000                     _main 0038  
                   btemp 007E                     start 0012            __CFG_MCLRE$ON 0000  
                  ??_isr 0077          __end_of___aldiv 05C6                    ?_main 0077  
                  _ANS10 0C4A                    _ANS11 0C4B                    _ANS13 0C4D  
          __CFG_WDTE$OFF 0000          __end_of___lwdiv 06C6          __end_of___lwmod 07E3  
                  i1l346 045A                    _RCREG 001A                    _SPBRG 0099  
                  _PORTB 0006                    _TXREG 0019      ___lmul@multiplicand 0024  
        ??_encoders_init 0020          __end_of_dpowers 0710                    _dummy 006C  
                  _onlyK 0069                    _putch 0FAE                    _putst 0779  
         __CFG_BOREN$OFF 0000                    pclath 000A          __end_of_pwm_set 0647  
                  status 0003                    wtemp0 007E          __end_of_sprintf 0537  
        __initialization 0015             __end_of_main 01E1                   ??_main 005A  
       __end_of_SetMotor 0361         __end_of_SetPoint 0FAE                   _CCPR1L 0015  
                 _CCPR2L 001B                   ?_putch 0077                   ?_putst 0077  
                 i1l2203 03D5                   i1l2205 03E3                   i1l2223 0426  
                 i1l2215 03FC                   i1l2231 044A                   i1l2209 03F7  
                 i1l2219 0412                   i1l2229 043C                   i1l2173 0380  
                 i1l2191 03C3                   i1l2183 03AE                   i1l2195 03C8  
                 i1l2179 03A9                   i1l2199 03D1                   u190_25 0374  
                 u193_25 03B8                   _TMR1IE 0460                   _TRISB1 0431  
                 _TRISB2 0432                   _TRISC1 0439                   _TRISA5 042D  
                 _TRISB3 0433                   _TRISC2 043A                   _TRISA6 042E  
                 _TRISB4 0434                   _TRISB5 0435                   _TRISC3 043B  
                 _TRISC4 043C                   _TRISB7 0437                   _TRISC5 043D  
         __CFG_PWRTE$OFF 0000             ?_serial_init 0077                   ___lmul 0647  
              ??___aldiv 0035                   ___wmul 0F66                   _chkchr 0F2B  
              ??___lwdiv 0024                ??___lwmod 002C                   _state1 0075  
           ?_motor_reset 0077                   saved_w 007E         __end_of_pwm_init 1000  
                 putch@c 0021                ??_pwm_set 0042                ??_sprintf 0033  
__end_of__initialization 0034           __pcstackCOMMON 0077            __end_of_putch 0FD6  
          __end_of_putst 07AF           _OPTION_REGbits 0081              SetMotor@err 0058  
                ??_putch 0020                  ??_putst 0022               __pbssBANK0 005B  
             __pbssBANK1 00BA               __pbssBANK3 0190       __size_of_constrain 003C  
   getServoCommand@lStep 0072                ?_SetMotor 0077                ?_SetPoint 0020  
             __pmaintext 0038                  ?___lmul 0020                  ?___wmul 0020  
                ?_chkchr 0077               __pintentry 0004           ___lmul@product 0029  
          ?_resetCounter 0077                  _SPIData 006B               __stringtab 0700  
             ??_SetMotor 0046               ??_SetPoint 0022                  ___aldiv 0537  
        __size_of___lmul 0041          __size_of___wmul 0023                ?_pwm_init 0077  
                ___lwdiv 0688                  ___lwmod 07AF          __size_of_chkchr 0008  
   __size_of_serial_init 0018        __end_of_constrain 0779                  __ptext1 0465  
                __ptext2 07AF                  __ptext3 0688                  __ptext4 07E3  
                __ptext5 0FD6                  __ptext6 0779                  __ptext7 0FAE  
                __ptext8 06C6                  __ptext9 0F3B                  _dpowers 0706  
              _T2CONbits 0012             __size_of_isr 0104         ___aldiv@dividend 0031  
   __size_of_motor_reset 0034                  _samples 0070           ??_resetCounter 0020  
                _pwm_set 05C6                  _sprintf 0465                  clrloop0 0F34  
   end_of_initialization 0034    __end_of_encoders_init 0F66                  isr@tick 00BE  
       ___aldiv@quotient 0038               ??_pwm_init 0020         SetMotor@last_err 0067  
       SetMotor@integral 00C5       SetMotor@D_Response 0050              _CCP1CONbits 0017  
            _CCP2CONbits 001D           __end_of___lmul 0688           _set_motor_flag 00C4  
         __end_of___wmul 0F89       SetMotor@I_Response 0052           __end_of_chkchr 0F33  
       _delayus_variable 0076      start_initialization 0015              __end_of_isr 0465  
           SetMotor@resp 0054     __end_of_resetCounter 0F4E                 ??___lmul 0028  
      __size_of_SetMotor 0180        __size_of_SetPoint 0025                 ??___wmul 0024  
     SetMotor@P_Response 004E                 ??_chkchr 0020        pwm_set@duty_cycle 003E  
            __pbssCOMMON 0070                ___latbits 0002            __pcstackBANK0 0020  
          __pcstackBANK1 00A0              sprintf@flag 0037              sprintf@prec 0038  
       ___lwdiv@dividend 0022                 ?___aldiv 002D                 ?___lwdiv 0020  
               ?___lwmod 0028                __pstrings 0700        __size_of_pwm_init 002A  
         pwm_set@channel 003C                _constrain 073D         ___lwdiv@quotient 0025  
               ?_pwm_set 003C                 ?_sprintf 002E           __size_of_putch 0028  
         __size_of_putst 0036          ___aldiv@divisor 002D         main@serialIn_355 00B9  
      interrupt_function 0004          ___aldiv@counter 0036           ___wmul@product 0024  
              clear_ram0 0F33                 _PIR1bits 000C            ??_serial_init 0020  
              _set_point 005B                _motor_pos 005F            ??_motor_reset 0046  
            __stringbase 0705        ___wmul@multiplier 0020               ?_constrain 0020  
        SetPoint@new_val 0020        ___lmul@multiplier 0020    __size_of_resetCounter 0013  
               _SetMotor 01E1                 _SetPoint 0F89                 _nSPIData 00C0  
       __size_of___aldiv 008F         __size_of___lwdiv 003E         __size_of___lwmod 0034  
 __size_of_encoders_init 0018      __end_of_serial_init 07FB       __end_of__stringtab 0706  
             sprintf@val 0039          ___lwdiv@divisor 0020          ___lwdiv@counter 0027  
               __ptext10 0F89                 __ptext11 0F4E                 __ptext12 0F2B  
               __ptext13 01E1                 __ptext14 05C6                 __ptext15 0647  
               __ptext16 0537                 __ptext17 073D                 __ptext18 0F66  
               __ptext19 0361             _resetCounter 0F3B      __end_of_motor_reset 06FA  
      __CFG_BOR4V$BOR21V 0000                 _com_time 00C2         __size_of_pwm_set 0081  
       __size_of_sprintf 00D2                 _last_pos 00BA            __size_of_main 01A9  
               _sampling 0073                 _pos_log1 01BE                 _pos_log2 0190  
     SetMotor@derivative 006D                 _pwm_init 0FD6                 main@sVar 00A0  
            ??_constrain 002C                 isr@portB 007D          constrain@lLimit 0024  
        constrain@uLimit 0028                 intlevel1 0000                sprintf@ap 0036  
              sprintf@sp 003B            _encoders_init 0F4E         ___lwmod@dividend 002A  
              stringcode 0700              _serial_init 07E3              _motor_reset 06C6  
         constrain@value 0020                 sprintf@c 003C                 sprintf@f 002E  
               putst@str 0023          ___lwmod@divisor 0028          ___lwmod@counter 002D  
               stringdir 0700                 stringtab 0700             ___aldiv@sign 0037  
         ?_encoders_init 0077  
