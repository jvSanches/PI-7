

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 31 17:33:22 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 2.05
    41                           ; Generated 20/12/2018 GMT
    42                           ; 
    43                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F886 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0009                     	;# 
    83  000A                     	;# 
    84  000B                     	;# 
    85  000C                     	;# 
    86  000D                     	;# 
    87  000E                     	;# 
    88  000E                     	;# 
    89  000F                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  001D                     	;# 
   106  001E                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  0087                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  008F                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0093                     	;# 
   123  0094                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  0105                     	;# 
   136  0107                     	;# 
   137  0108                     	;# 
   138  0109                     	;# 
   139  010C                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  010F                     	;# 
   144  0185                     	;# 
   145  0187                     	;# 
   146  0188                     	;# 
   147  0189                     	;# 
   148  018C                     	;# 
   149  018D                     	;# 
   150  0000                     	;# 
   151  0001                     	;# 
   152  0002                     	;# 
   153  0003                     	;# 
   154  0004                     	;# 
   155  0005                     	;# 
   156  0006                     	;# 
   157  0007                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  008F                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0093                     	;# 
   351  0094                     	;# 
   352  0095                     	;# 
   353  0096                     	;# 
   354  0097                     	;# 
   355  0098                     	;# 
   356  0099                     	;# 
   357  009A                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  009F                     	;# 
   363  0105                     	;# 
   364  0107                     	;# 
   365  0108                     	;# 
   366  0109                     	;# 
   367  010C                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0185                     	;# 
   373  0187                     	;# 
   374  0188                     	;# 
   375  0189                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  000E                     	;# 
   393  000F                     	;# 
   394  0010                     	;# 
   395  0011                     	;# 
   396  0012                     	;# 
   397  0013                     	;# 
   398  0014                     	;# 
   399  0015                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  001D                     	;# 
   410  001E                     	;# 
   411  001F                     	;# 
   412  0081                     	;# 
   413  0085                     	;# 
   414  0086                     	;# 
   415  0087                     	;# 
   416  0089                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  008F                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0093                     	;# 
   427  0094                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0098                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  0105                     	;# 
   440  0107                     	;# 
   441  0108                     	;# 
   442  0109                     	;# 
   443  010C                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  0185                     	;# 
   449  0187                     	;# 
   450  0188                     	;# 
   451  0189                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454  0000                     	;# 
   455  0001                     	;# 
   456  0002                     	;# 
   457  0003                     	;# 
   458  0004                     	;# 
   459  0005                     	;# 
   460  0006                     	;# 
   461  0007                     	;# 
   462  0009                     	;# 
   463  000A                     	;# 
   464  000B                     	;# 
   465  000C                     	;# 
   466  000D                     	;# 
   467  000E                     	;# 
   468  000E                     	;# 
   469  000F                     	;# 
   470  0010                     	;# 
   471  0011                     	;# 
   472  0012                     	;# 
   473  0013                     	;# 
   474  0014                     	;# 
   475  0015                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0017                     	;# 
   479  0018                     	;# 
   480  0019                     	;# 
   481  001A                     	;# 
   482  001B                     	;# 
   483  001B                     	;# 
   484  001C                     	;# 
   485  001D                     	;# 
   486  001E                     	;# 
   487  001F                     	;# 
   488  0081                     	;# 
   489  0085                     	;# 
   490  0086                     	;# 
   491  0087                     	;# 
   492  0089                     	;# 
   493  008C                     	;# 
   494  008D                     	;# 
   495  008E                     	;# 
   496  008F                     	;# 
   497  0090                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0093                     	;# 
   501  0093                     	;# 
   502  0093                     	;# 
   503  0094                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0098                     	;# 
   508  0099                     	;# 
   509  009A                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  0105                     	;# 
   516  0107                     	;# 
   517  0108                     	;# 
   518  0109                     	;# 
   519  010C                     	;# 
   520  010C                     	;# 
   521  010D                     	;# 
   522  010E                     	;# 
   523  010F                     	;# 
   524  0185                     	;# 
   525  0187                     	;# 
   526  0188                     	;# 
   527  0189                     	;# 
   528  018C                     	;# 
   529  018D                     	;# 
   530                           
   531                           	psect	strings
   532  0670                     __pstrings:	
   533  0670                     stringtab:	
   534  0670                     __stringtab:	
   535  0670                     stringcode:	
   536                           ;	String table - string pointers are 1 byte each
   537                           
   538  0670                     stringdir:	
   539  0670  3006               	movlw	high stringdir
   540  0671  008A               	movwf	10
   541  0672  0804               	movf	4,w
   542  0673  0A84               	incf	4,f
   543  0674  0782               	addwf	2,f
   544  0675                     __stringbase:	
   545  0675  3400               	retlw	0
   546  0676                     __end_of__stringtab:	
   547  0676                     _dpowers:	
   548  0676  3401               	retlw	1
   549  0677  3400               	retlw	0
   550  0678  340A               	retlw	10
   551  0679  3400               	retlw	0
   552  067A  3464               	retlw	100
   553  067B  3400               	retlw	0
   554  067C  34E8               	retlw	232
   555  067D  3403               	retlw	3
   556  067E  3410               	retlw	16
   557  067F  3427               	retlw	39
   558  0680                     __end_of_dpowers:	
   559  0006                     _PORTB	set	6
   560  0001                     _TMR0	set	1
   561  0012                     _T2CONbits	set	18
   562  000C                     _PIR1bits	set	12
   563  001B                     _CCPR2L	set	27
   564  0015                     _CCPR1L	set	21
   565  001D                     _CCP2CONbits	set	29
   566  0017                     _CCP1CONbits	set	23
   567  0019                     _TXREG	set	25
   568  001A                     _RCREG	set	26
   569  003D                     _RC5	set	61
   570  003C                     _RC4	set	60
   571  003B                     _RC3	set	59
   572  005F                     _GIE	set	95
   573  005E                     _PEIE	set	94
   574  0035                     _RB5	set	53
   575  0058                     _RBIF	set	88
   576  005B                     _RBIE	set	91
   577  005A                     _T0IF	set	90
   578  005D                     _T0IE	set	93
   579  002E                     _RA6	set	46
   580  002D                     _RA5	set	45
   581  0065                     _RCIF	set	101
   582  0064                     _TXIF	set	100
   583  00C2                     _FERR	set	194
   584  00C1                     _OERR	set	193
   585  00C6                     _RX9	set	198
   586  00C5                     _SREN	set	197
   587  00C4                     _CREN	set	196
   588  00C7                     _SPEN	set	199
   589  0096                     _IOCB	set	150
   590  0081                     _OPTION_REGbits	set	129
   591  0092                     _PR2	set	146
   592  0099                     _SPBRG	set	153
   593  043D                     _TRISC5	set	1085
   594  043C                     _TRISC4	set	1084
   595  043B                     _TRISC3	set	1083
   596  0460                     _TMR1IE	set	1120
   597  0434                     _TRISB4	set	1076
   598  0433                     _TRISB3	set	1075
   599  0432                     _TRISB2	set	1074
   600  0431                     _TRISB1	set	1073
   601  0437                     _TRISB7	set	1079
   602  0435                     _TRISB5	set	1077
   603  042E                     _TRISA6	set	1070
   604  042D                     _TRISA5	set	1069
   605  043A                     _TRISC2	set	1082
   606  0439                     _TRISC1	set	1081
   607  04C5                     _TXEN	set	1221
   608  04C6                     _TX9	set	1222
   609  0465                     _RCIE	set	1125
   610  0464                     _TXIE	set	1124
   611  04C4                     _SYNC	set	1220
   612  04C2                     _BRGH	set	1218
   613  0C4B                     _ANS11	set	3147
   614  0C48                     _ANS8	set	3144
   615  0C49                     _ANS9	set	3145
   616  0C4A                     _ANS10	set	3146
   617  0C4D                     _ANS13	set	3149
   618  0C44                     _ANS4	set	3140
   619  0680                     STR_1:	
   620  0680  3453               	retlw	83	;'S'
   621  0681  3465               	retlw	101	;'e'
   622  0682  3474               	retlw	116	;'t'
   623  0683  3450               	retlw	80	;'P'
   624  0684  346F               	retlw	111	;'o'
   625  0685  3469               	retlw	105	;'i'
   626  0686  346E               	retlw	110	;'n'
   627  0687  3474               	retlw	116	;'t'
   628  0688  343A               	retlw	58	;':'
   629  0689  3420               	retlw	32	;' '
   630  068A  3425               	retlw	37	;'%'
   631  068B  3464               	retlw	100	;'d'
   632  068C  3420               	retlw	32	;' '
   633  068D  340D               	retlw	13
   634  068E  340A               	retlw	10
   635  068F  3400               	retlw	0
   636  0690                     STR_5:	
   637  0690  3446               	retlw	70	;'F'
   638  0691  3469               	retlw	105	;'i'
   639  0692  346D               	retlw	109	;'m'
   640  0693  3420               	retlw	32	;' '
   641  0694  3464               	retlw	100	;'d'
   642  0695  346F               	retlw	111	;'o'
   643  0696  3420               	retlw	32	;' '
   644  0697  3474               	retlw	116	;'t'
   645  0698  3465               	retlw	101	;'e'
   646  0699  3473               	retlw	115	;'s'
   647  069A  3474               	retlw	116	;'t'
   648  069B  3465               	retlw	101	;'e'
   649  069C  3420               	retlw	32	;' '
   650  069D  3400               	retlw	0
   651  069E                     STR_2:	
   652  069E  344B               	retlw	75	;'K'
   653  069F  3470               	retlw	112	;'p'
   654  06A0  343A               	retlw	58	;':'
   655  06A1  3420               	retlw	32	;' '
   656  06A2  3425               	retlw	37	;'%'
   657  06A3  3464               	retlw	100	;'d'
   658  06A4  3420               	retlw	32	;' '
   659  06A5  342D               	retlw	45	;'-'
   660  06A6  343E               	retlw	62	;'>'
   661  06A7  3420               	retlw	32	;' '
   662  06A8  3400               	retlw	0
   663  06A9                     STR_3:	
   664  06A9  3425               	retlw	37	;'%'
   665  06AA  3464               	retlw	100	;'d'
   666  06AB  3420               	retlw	32	;' '
   667  06AC  3400               	retlw	0
   668  06A9                     
   669                           ; #config settings
   670  0000                     
   671                           	psect	cinit
   672  0015                     start_initialization:	
   673  0015                     __initialization:	
   674                           
   675                           ; Clear objects allocated to COMMON
   676  0015  01F0               	clrf	__pbssCOMMON& (0+127)
   677  0016  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   678  0017  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   679  0018  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   680  0019  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   681  001A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   682  001B  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
   683                           
   684                           ; Clear objects allocated to BANK0
   685  001C  1383               	bcf	3,7	;select IRP bank0
   686  001D  3059               	movlw	low __pbssBANK0
   687  001E  0084               	movwf	4
   688  001F  306F               	movlw	low (__pbssBANK0+22)
   689  0020  120A  158A  273D  120A  118A  	fcall	clear_ram0
   690                           
   691                           ; Clear objects allocated to BANK1
   692  0025  30BA               	movlw	low __pbssBANK1
   693  0026  0084               	movwf	4
   694  0027  30C3               	movlw	low (__pbssBANK1+9)
   695  0028  120A  158A  273D  120A  118A  	fcall	clear_ram0
   696                           
   697                           ; Clear objects allocated to BANK3
   698  002D  1783               	bsf	3,7	;select IRP bank2
   699  002E  3090               	movlw	low __pbssBANK3
   700  002F  0084               	movwf	4
   701  0030  30EC               	movlw	low (__pbssBANK3+92)
   702  0031  120A  158A  273D   	fcall	clear_ram0
   703  0034                     end_of_initialization:	
   704                           ;End of C runtime variable initialization code
   705                           
   706  0034                     __end_of__initialization:	
   707  0034  0183               	clrf	3
   708  0035  120A  118A  2838   	ljmp	_main	;jump to C main() function
   709                           
   710                           	psect	bssCOMMON
   711  0070                     __pbssCOMMON:	
   712  0070                     _samples:	
   713  0070                     	ds	2
   714  0072                     _sampling:	
   715  0072                     	ds	1
   716  0073                     _ab1:	
   717  0073                     	ds	1
   718  0074                     _state1:	
   719  0074                     	ds	1
   720  0075                     _dummy:	
   721  0075                     	ds	1
   722  0076                     _delayus_variable:	
   723  0076                     	ds	1
   724                           
   725                           	psect	bssBANK0
   726  0059                     __pbssBANK0:	
   727  0059                     _set_point:	
   728  0059                     	ds	4
   729  005D                     _motor_pos:	
   730  005D                     	ds	4
   731  0061                     _encoder1_counter:	
   732  0061                     	ds	4
   733  0065                     SetMotor@last_err:	
   734  0065                     	ds	2
   735  0067                     _onlyK:	
   736  0067                     	ds	2
   737  0069                     _com_time:	
   738  0069                     	ds	2
   739  006B                     getServoCommand@lStep:	
   740  006B                     	ds	1
   741  006C                     _SPIData:	
   742  006C                     	ds	1
   743  006D                     SetMotor@derivative:	
   744  006D                     	ds	2
   745                           
   746                           	psect	bssBANK1
   747  00BA                     __pbssBANK1:	
   748  00BA                     _last_pos:	
   749  00BA                     	ds	4
   750  00BE                     isr@tick:	
   751  00BE                     	ds	2
   752  00C0                     _nSPIData:	
   753  00C0                     	ds	2
   754  00C2                     _set_motor_flag:	
   755  00C2                     	ds	1
   756                           
   757                           	psect	bssBANK3
   758  0190                     __pbssBANK3:	
   759  0190                     _pos_log2:	
   760  0190                     	ds	46
   761  01BE                     _pos_log1:	
   762  01BE                     	ds	46
   763                           
   764                           	psect	clrtext
   765  0F3D                     clear_ram0:	
   766                           ;	Called with FSR containing the base address, and
   767                           ;	W with the last address+1
   768                           
   769  0F3D  0064               	clrwdt	;clear the watchdog before getting into this loop
   770  0F3E                     clrloop0:	
   771  0F3E  0180               	clrf	0	;clear RAM location pointed to by FSR
   772  0F3F  0A84               	incf	4,f	;increment pointer
   773  0F40  0604               	xorwf	4,w	;XOR with final address
   774  0F41  1903               	btfsc	3,2	;have we reached the end yet?
   775  0F42  3400               	retlw	0	;all done for this memory range, return
   776  0F43  0604               	xorwf	4,w	;XOR again to restore value
   777  0F44  2F3E               	goto	clrloop0	;do the next byte
   778                           
   779                           	psect	cstackBANK1
   780  00A0                     __pcstackBANK1:	
   781  00A0                     main@sVar:	
   782                           
   783                           ; 20 bytes @ 0x0
   784  00A0                     	ds	25
   785  00B9                     main@serialIn_363:	
   786                           
   787                           ; 1 bytes @ 0x19
   788  00B9                     	ds	1
   789                           
   790                           	psect	cstackCOMMON
   791  0077                     __pcstackCOMMON:	
   792  0077                     ?_serial_init:	
   793  0077                     ?_putch:	
   794                           ; 1 bytes @ 0x0
   795                           
   796  0077                     ?_chkchr:	
   797                           ; 1 bytes @ 0x0
   798                           
   799  0077                     ?_putst:	
   800                           ; 1 bytes @ 0x0
   801                           
   802  0077                     ?_pwm_init:	
   803                           ; 1 bytes @ 0x0
   804                           
   805  0077                     ?_PrintSetpoint:	
   806                           ; 1 bytes @ 0x0
   807                           
   808  0077                     ?_SetMotor:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0077                     ?_resetCounter:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0077                     ?_motor_reset:	
   815                           ; 1 bytes @ 0x0
   816                           
   817  0077                     ?_isr:	
   818                           ; 1 bytes @ 0x0
   819                           
   820  0077                     ??_isr:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0077                     ?_encoders_init:	
   824                           ; 1 bytes @ 0x0
   825                           
   826  0077                     ?_main:	
   827                           ; 1 bytes @ 0x0
   828                           
   829                           
   830                           ; 1 bytes @ 0x0
   831  0077                     	ds	6
   832  007D                     isr@portB:	
   833                           
   834                           ; 1 bytes @ 0x6
   835  007D                     	ds	1
   836                           
   837                           	psect	cstackBANK0
   838  0020                     __pcstackBANK0:	
   839  0020                     ??_serial_init:	
   840  0020                     ??_putch:	
   841                           ; 1 bytes @ 0x0
   842                           
   843  0020                     ??_chkchr:	
   844                           ; 1 bytes @ 0x0
   845                           
   846  0020                     ??_pwm_init:	
   847                           ; 1 bytes @ 0x0
   848                           
   849  0020                     ??_resetCounter:	
   850                           ; 1 bytes @ 0x0
   851                           
   852  0020                     ??_encoders_init:	
   853                           ; 1 bytes @ 0x0
   854                           
   855  0020                     ?_getServoState:	
   856                           ; 1 bytes @ 0x0
   857                           
   858  0020                     ?_getServoCommand:	
   859                           ; 2 bytes @ 0x0
   860                           
   861  0020                     ?___wmul:	
   862                           ; 2 bytes @ 0x0
   863                           
   864  0020                     ?___lwdiv:	
   865                           ; 2 bytes @ 0x0
   866                           
   867  0020                     ?_constrain:	
   868                           ; 2 bytes @ 0x0
   869                           
   870  0020                     ?___lmul:	
   871                           ; 4 bytes @ 0x0
   872                           
   873  0020                     ___wmul@multiplier:	
   874                           ; 4 bytes @ 0x0
   875                           
   876  0020                     ___lwdiv@divisor:	
   877                           ; 2 bytes @ 0x0
   878                           
   879  0020                     constrain@value:	
   880                           ; 2 bytes @ 0x0
   881                           
   882  0020                     ___lmul@multiplier:	
   883                           ; 4 bytes @ 0x0
   884                           
   885                           
   886                           ; 4 bytes @ 0x0
   887  0020                     	ds	1
   888  0021                     putch@c:	
   889                           
   890                           ; 1 bytes @ 0x1
   891  0021                     	ds	1
   892  0022                     ??_getServoState:	
   893  0022                     ??_getServoCommand:	
   894                           ; 1 bytes @ 0x2
   895                           
   896  0022                     ??_putst:	
   897                           ; 1 bytes @ 0x2
   898                           
   899  0022                     ___wmul@multiplicand:	
   900                           ; 1 bytes @ 0x2
   901                           
   902  0022                     ___lwdiv@dividend:	
   903                           ; 2 bytes @ 0x2
   904                           
   905                           
   906                           ; 2 bytes @ 0x2
   907  0022                     	ds	1
   908  0023                     putst@str:	
   909                           
   910                           ; 1 bytes @ 0x3
   911  0023                     	ds	1
   912  0024                     ??___wmul:	
   913  0024                     ??___lwdiv:	
   914                           ; 1 bytes @ 0x4
   915                           
   916  0024                     ___wmul@product:	
   917                           ; 1 bytes @ 0x4
   918                           
   919  0024                     constrain@lLimit:	
   920                           ; 2 bytes @ 0x4
   921                           
   922  0024                     ___lmul@multiplicand:	
   923                           ; 4 bytes @ 0x4
   924                           
   925                           
   926                           ; 4 bytes @ 0x4
   927  0024                     	ds	1
   928  0025                     ___lwdiv@quotient:	
   929                           
   930                           ; 2 bytes @ 0x5
   931  0025                     	ds	2
   932  0027                     ___lwdiv@counter:	
   933                           
   934                           ; 1 bytes @ 0x7
   935  0027                     	ds	1
   936  0028                     ??___lmul:	
   937  0028                     ?___lwmod:	
   938                           ; 1 bytes @ 0x8
   939                           
   940  0028                     ___lwmod@divisor:	
   941                           ; 2 bytes @ 0x8
   942                           
   943  0028                     constrain@uLimit:	
   944                           ; 2 bytes @ 0x8
   945                           
   946                           
   947                           ; 4 bytes @ 0x8
   948  0028                     	ds	1
   949  0029                     ___lmul@product:	
   950                           
   951                           ; 4 bytes @ 0x9
   952  0029                     	ds	1
   953  002A                     ___lwmod@dividend:	
   954                           
   955                           ; 2 bytes @ 0xA
   956  002A                     	ds	2
   957  002C                     ??_constrain:	
   958  002C                     ??___lwmod:	
   959                           ; 1 bytes @ 0xC
   960                           
   961                           
   962                           ; 1 bytes @ 0xC
   963  002C                     	ds	1
   964  002D                     ?___aldiv:	
   965  002D                     ___lwmod@counter:	
   966                           ; 4 bytes @ 0xD
   967                           
   968  002D                     ___aldiv@divisor:	
   969                           ; 1 bytes @ 0xD
   970                           
   971                           
   972                           ; 4 bytes @ 0xD
   973  002D                     	ds	1
   974  002E                     ?_sprintf:	
   975  002E                     sprintf@f:	
   976                           ; 2 bytes @ 0xE
   977                           
   978                           
   979                           ; 1 bytes @ 0xE
   980  002E                     	ds	3
   981  0031                     ___aldiv@dividend:	
   982                           
   983                           ; 4 bytes @ 0x11
   984  0031                     	ds	2
   985  0033                     ??_sprintf:	
   986                           
   987                           ; 1 bytes @ 0x13
   988  0033                     	ds	2
   989  0035                     ??___aldiv:	
   990                           
   991                           ; 1 bytes @ 0x15
   992  0035                     	ds	1
   993  0036                     sprintf@ap:	
   994  0036                     ___aldiv@counter:	
   995                           ; 1 bytes @ 0x16
   996                           
   997                           
   998                           ; 1 bytes @ 0x16
   999  0036                     	ds	1
  1000  0037                     sprintf@flag:	
  1001  0037                     ___aldiv@sign:	
  1002                           ; 1 bytes @ 0x17
  1003                           
  1004                           
  1005                           ; 1 bytes @ 0x17
  1006  0037                     	ds	1
  1007  0038                     sprintf@prec:	
  1008  0038                     ___aldiv@quotient:	
  1009                           ; 1 bytes @ 0x18
  1010                           
  1011                           
  1012                           ; 4 bytes @ 0x18
  1013  0038                     	ds	1
  1014  0039                     sprintf@val:	
  1015                           
  1016                           ; 2 bytes @ 0x19
  1017  0039                     	ds	2
  1018  003B                     sprintf@sp:	
  1019                           
  1020                           ; 1 bytes @ 0x1B
  1021  003B                     	ds	1
  1022  003C                     ?_pwm_set:	
  1023  003C                     sprintf@c:	
  1024                           ; 1 bytes @ 0x1C
  1025                           
  1026  003C                     pwm_set@channel:	
  1027                           ; 1 bytes @ 0x1C
  1028                           
  1029                           
  1030                           ; 2 bytes @ 0x1C
  1031  003C                     	ds	1
  1032  003D                     ??_PrintSetpoint:	
  1033                           
  1034                           ; 1 bytes @ 0x1D
  1035  003D                     	ds	1
  1036  003E                     pwm_set@duty_cycle:	
  1037  003E                     PrintSetpoint@sVar:	
  1038                           ; 4 bytes @ 0x1E
  1039                           
  1040                           
  1041                           ; 20 bytes @ 0x1E
  1042  003E                     	ds	4
  1043  0042                     ??_pwm_set:	
  1044                           
  1045                           ; 1 bytes @ 0x22
  1046  0042                     	ds	4
  1047  0046                     ??_SetMotor:	
  1048                           
  1049                           ; 1 bytes @ 0x26
  1050  0046                     	ds	2
  1051  0048                     SetMotor@P_Response:	
  1052                           
  1053                           ; 2 bytes @ 0x28
  1054  0048                     	ds	2
  1055  004A                     SetMotor@D_Response:	
  1056                           
  1057                           ; 2 bytes @ 0x2A
  1058  004A                     	ds	2
  1059  004C                     SetMotor@err:	
  1060                           
  1061                           ; 2 bytes @ 0x2C
  1062  004C                     	ds	2
  1063  004E                     SetMotor@resp:	
  1064                           
  1065                           ; 4 bytes @ 0x2E
  1066  004E                     	ds	4
  1067  0052                     ?_SetPoint:	
  1068  0052                     SetPoint@new_val:	
  1069                           ; 1 bytes @ 0x32
  1070                           
  1071                           
  1072                           ; 2 bytes @ 0x32
  1073  0052                     	ds	2
  1074  0054                     ??_SetPoint:	
  1075                           
  1076                           ; 1 bytes @ 0x34
  1077  0054                     	ds	4
  1078  0058                     ??_motor_reset:	
  1079  0058                     ??_main:	
  1080                           ; 1 bytes @ 0x38
  1081                           
  1082                           
  1083                           ; 1 bytes @ 0x38
  1084  0058                     	ds	1
  1085                           
  1086                           	psect	maintext
  1087  0038                     __pmaintext:	
  1088 ;;
  1089 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1090 ;;
  1091 ;; *************** function _main *****************
  1092 ;; Defined at:
  1093 ;;		line 288 in file "main.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  sVar           20    0[BANK1 ] unsigned char [20]
  1098 ;;  serialIn        1   25[BANK1 ] unsigned char 
  1099 ;;  i               2    0        int 
  1100 ;;  enc1            2    0        int 
  1101 ;;  serialIn        1    0        unsigned char 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : B00/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1111 ;;      Params:         0       0       0       0       0
  1112 ;;      Locals:         0       0      26       0       0
  1113 ;;      Temps:          0       1       0       0       0
  1114 ;;      Totals:         0       1      26       0       0
  1115 ;;Total ram usage:       27 bytes
  1116 ;; Hardware stack levels required when called:    6
  1117 ;; This function calls:
  1118 ;;		_SetMotor
  1119 ;;		_SetPoint
  1120 ;;		_chkchr
  1121 ;;		_encoders_init
  1122 ;;		_getServoCommand
  1123 ;;		_getServoState
  1124 ;;		_motor_reset
  1125 ;;		_putst
  1126 ;;		_pwm_init
  1127 ;;		_pwm_set
  1128 ;;		_resetCounter
  1129 ;;		_serial_init
  1130 ;;		_sprintf
  1131 ;; This function is called by:
  1132 ;;		Startup code after reset
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136                           
  1137                           ;psect for function _main
  1138  0038                     _main:	
  1139                           
  1140                           ;main.c: 297: OPTION_REGbits.T0CS = 0;
  1141                           
  1142                           ;incstack = 0
  1143                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1144  0038  1683               	bsf	3,5	;RP0=1, select bank1
  1145  0039  1303               	bcf	3,6	;RP1=0, select bank1
  1146  003A  1281               	bcf	1,5	;volatile
  1147                           
  1148                           ;main.c: 298: OPTION_REGbits.PSA = 0;
  1149  003B  1181               	bcf	1,3	;volatile
  1150                           
  1151                           ;main.c: 299: OPTION_REGbits.PS = 7;
  1152  003C  3007               	movlw	7
  1153  003D  0481               	iorwf	1,f	;volatile
  1154                           
  1155                           ;main.c: 302: TRISB5 = 0;
  1156  003E  1286               	bcf	6,5	;volatile
  1157                           
  1158                           ;main.c: 303: ANS13 = 0;
  1159  003F  1683               	bsf	3,5	;RP0=1, select bank3
  1160  0040  1703               	bsf	3,6	;RP1=1, select bank3
  1161  0041  1289               	bcf	9,5	;volatile
  1162                           
  1163                           ;main.c: 304: TRISB7 = 0;
  1164  0042  1683               	bsf	3,5	;RP0=1, select bank1
  1165  0043  1303               	bcf	3,6	;RP1=0, select bank1
  1166  0044  1386               	bcf	6,7	;volatile
  1167                           
  1168                           ;main.c: 305: TRISB1 = 1;
  1169  0045  1486               	bsf	6,1	;volatile
  1170                           
  1171                           ;main.c: 306: TRISB2 = 1;
  1172  0046  1506               	bsf	6,2	;volatile
  1173                           
  1174                           ;main.c: 307: TRISB3 = 1;
  1175  0047  1586               	bsf	6,3	;volatile
  1176                           
  1177                           ;main.c: 308: TRISB4 = 1;
  1178  0048  1606               	bsf	6,4	;volatile
  1179                           
  1180                           ;main.c: 309: ANS10 = 0;
  1181  0049  1683               	bsf	3,5	;RP0=1, select bank3
  1182  004A  1703               	bsf	3,6	;RP1=1, select bank3
  1183  004B  1109               	bcf	9,2	;volatile
  1184                           
  1185                           ;main.c: 310: ANS9 = 0;
  1186  004C  1089               	bcf	9,1	;volatile
  1187                           
  1188                           ;main.c: 311: ANS8 = 0;
  1189  004D  1009               	bcf	9,0	;volatile
  1190                           
  1191                           ;main.c: 312: ANS11 = 0;
  1192  004E  1189               	bcf	9,3	;volatile
  1193                           
  1194                           ;main.c: 313: RB5=1;
  1195  004F  1283               	bcf	3,5	;RP0=0, select bank0
  1196  0050  1303               	bcf	3,6	;RP1=0, select bank0
  1197  0051  1686               	bsf	6,5	;volatile
  1198                           
  1199                           ;main.c: 316: T0IE = 1;
  1200  0052  168B               	bsf	11,5	;volatile
  1201                           
  1202                           ;main.c: 317: TMR1IE = 0;
  1203  0053  1683               	bsf	3,5	;RP0=1, select bank1
  1204  0054  1303               	bcf	3,6	;RP1=0, select bank1
  1205  0055  100C               	bcf	12,0	;volatile
  1206                           
  1207                           ;main.c: 318: PEIE = 1;
  1208  0056  170B               	bsf	11,6	;volatile
  1209                           
  1210                           ;main.c: 319: GIE = 1;
  1211  0057  178B               	bsf	11,7	;volatile
  1212                           
  1213                           ;main.c: 320: IOCB=0b00011000;
  1214  0058  3018               	movlw	24
  1215  0059  0096               	movwf	22	;volatile
  1216                           
  1217                           ;main.c: 321: RBIE = 1;
  1218  005A  158B               	bsf	11,3	;volatile
  1219                           
  1220                           ;main.c: 325: serial_init();
  1221  005B  120A  158A  277F  120A  118A  	fcall	_serial_init
  1222                           
  1223                           ;main.c: 330: pwm_init();
  1224  0060  120A  118A  27B3  120A  118A  	fcall	_pwm_init
  1225                           
  1226                           ;main.c: 337: encoders_init();
  1227  0065  120A  158A  2767  120A  118A  	fcall	_encoders_init
  1228                           
  1229                           ;main.c: 345: pwm_set(1, 0);
  1230  006A  3001               	movlw	1
  1231  006B  1283               	bcf	3,5	;RP0=0, select bank0
  1232  006C  1303               	bcf	3,6	;RP1=0, select bank0
  1233  006D  00BC               	movwf	pwm_set@channel
  1234  006E  3000               	movlw	0
  1235  006F  00BD               	movwf	pwm_set@channel+1
  1236  0070  3000               	movlw	0
  1237  0071  00C1               	movwf	pwm_set@duty_cycle+3
  1238  0072  3000               	movlw	0
  1239  0073  00C0               	movwf	pwm_set@duty_cycle+2
  1240  0074  3000               	movlw	0
  1241  0075  00BF               	movwf	pwm_set@duty_cycle+1
  1242  0076  3000               	movlw	0
  1243  0077  00BE               	movwf	pwm_set@duty_cycle
  1244  0078  120A  118A  2570  120A  118A  	fcall	_pwm_set
  1245                           
  1246                           ;main.c: 346: pwm_set(2, 0);
  1247  007D  3002               	movlw	2
  1248  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1249  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0080  00BC               	movwf	pwm_set@channel
  1251  0081  3000               	movlw	0
  1252  0082  00BD               	movwf	pwm_set@channel+1
  1253  0083  3000               	movlw	0
  1254  0084  00C1               	movwf	pwm_set@duty_cycle+3
  1255  0085  3000               	movlw	0
  1256  0086  00C0               	movwf	pwm_set@duty_cycle+2
  1257  0087  3000               	movlw	0
  1258  0088  00BF               	movwf	pwm_set@duty_cycle+1
  1259  0089  3000               	movlw	0
  1260  008A  00BE               	movwf	pwm_set@duty_cycle
  1261  008B  120A  118A  2570  120A  118A  	fcall	_pwm_set
  1262  0090                     l2565:	
  1263                           
  1264                           ;main.c: 351: if (!getServoState()){
  1265  0090  120A  158A  2745  120A  118A  	fcall	_getServoState
  1266  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1267  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1268  0097  0820               	movf	?_getServoState,w
  1269  0098  0421               	iorwf	?_getServoState+1,w
  1270  0099  1D03               	btfss	3,2
  1271  009A  28A1               	goto	l2569
  1272                           
  1273                           ;main.c: 352: motor_reset();
  1274  009B  120A  118A  271F  120A  118A  	fcall	_motor_reset
  1275                           
  1276                           ;main.c: 353: }else{
  1277  00A0  28B5               	goto	l2571
  1278  00A1                     l2569:	
  1279                           
  1280                           ;main.c: 354: SetPoint(set_point + getServoCommand());
  1281  00A1  120A  118A  2787  120A  118A  	fcall	_getServoCommand
  1282  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  1283  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  1284  00A8  0859               	movf	_set_point,w	;volatile
  1285  00A9  0720               	addwf	?_getServoCommand,w
  1286  00AA  00D2               	movwf	SetPoint@new_val
  1287  00AB  085A               	movf	_set_point+1,w	;volatile
  1288  00AC  1803               	skipnc
  1289  00AD  0A5A               	incf	_set_point+1,w	;volatile
  1290  00AE  0721               	addwf	?_getServoCommand+1,w
  1291  00AF  00D3               	movwf	SetPoint@new_val+1
  1292  00B0  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1293  00B5                     l2571:	
  1294                           
  1295                           ;main.c: 355: };main.c: 357: if (set_motor_flag){
  1296  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1297  00B6  1303               	bcf	3,6	;RP1=0, select bank1
  1298  00B7  0842               	movf	_set_motor_flag^(0+128),w
  1299  00B8  1903               	btfsc	3,2
  1300  00B9  28C2               	goto	l2577
  1301                           
  1302                           ;main.c: 358: SetMotor();
  1303  00BA  120A  118A  2206  120A  118A  	fcall	_SetMotor
  1304                           
  1305                           ;main.c: 359: set_motor_flag = 0;
  1306  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1307  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1308  00C1  01C2               	clrf	_set_motor_flag^(0+128)
  1309  00C2                     l2577:	
  1310                           
  1311                           ;main.c: 360: };main.c: 362: if (sampling && (samples > 90)){
  1312  00C2  0872               	movf	_sampling,w	;volatile
  1313  00C3  1903               	btfsc	3,2
  1314  00C4  2955               	goto	l2605
  1315  00C5  0871               	movf	_samples+1,w	;volatile
  1316  00C6  3A80               	xorlw	128
  1317  00C7  00FF               	movwf	127
  1318  00C8  3080               	movlw	128
  1319  00C9  027F               	subwf	127,w
  1320  00CA  1D03               	skipz
  1321  00CB  28CE               	goto	u2265
  1322  00CC  305B               	movlw	91
  1323  00CD  0270               	subwf	_samples,w	;volatile
  1324  00CE                     u2265:	
  1325  00CE  1C03               	skipc
  1326  00CF  2955               	goto	l2605
  1327                           
  1328                           ;main.c: 364: sampling = 0;
  1329  00D0  01F2               	clrf	_sampling	;volatile
  1330                           
  1331                           ;main.c: 366: RB5=1;
  1332  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1333  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1334  00D3  1686               	bsf	6,5	;volatile
  1335                           
  1336                           ;main.c: 368: char sVar[20];;main.c: 369: samples = 0;
  1337  00D4  01F0               	clrf	_samples	;volatile
  1338  00D5  01F1               	clrf	_samples+1	;volatile
  1339                           
  1340                           ;main.c: 370: sprintf(sVar, "Kp: %d -> ", 4);
  1341  00D6  3029               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1342  00D7  00D8               	movwf	??_main
  1343  00D8  0858               	movf	??_main,w
  1344  00D9  00AE               	movwf	sprintf@f
  1345  00DA  3004               	movlw	4
  1346  00DB  00AF               	movwf	?_sprintf+1
  1347  00DC  3000               	movlw	0
  1348  00DD  00B0               	movwf	?_sprintf+2
  1349  00DE  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1350  00DF  120A  118A  240F  120A  118A  	fcall	_sprintf
  1351                           
  1352                           ;main.c: 371: putst(sVar);
  1353  00E4  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1354  00E5  120A  118A  26E9  120A  118A  	fcall	_putst
  1355  00EA                     l359:	
  1356                           ;main.c: 372: while (samples <= 90 /2){
  1357                           
  1358  00EA  0871               	movf	_samples+1,w	;volatile
  1359  00EB  3A80               	xorlw	128
  1360  00EC  00FF               	movwf	127
  1361  00ED  3080               	movlw	128
  1362  00EE  027F               	subwf	127,w
  1363  00EF  1D03               	skipz
  1364  00F0  28F3               	goto	u2275
  1365  00F1  302E               	movlw	46
  1366  00F2  0270               	subwf	_samples,w	;volatile
  1367  00F3                     u2275:	
  1368  00F3  1803               	btfsc	3,0
  1369  00F4  2938               	goto	l362
  1370                           
  1371                           ;main.c: 373: sprintf(sVar, "%d ", pos_log1[samples]);
  1372  00F5  3034               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1373  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  1374  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  1375  00F8  00D8               	movwf	??_main
  1376  00F9  0858               	movf	??_main,w
  1377  00FA  00AE               	movwf	sprintf@f
  1378  00FB  0870               	movf	_samples,w	;volatile
  1379  00FC  3EBE               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  1380  00FD  0084               	movwf	4
  1381  00FE  1783               	bsf	3,7	;select IRP bank3
  1382  00FF  0800               	movf	0,w
  1383  0100  00AF               	movwf	?_sprintf+1
  1384  0101  01B0               	clrf	?_sprintf+2
  1385  0102  1BAF               	btfsc	?_sprintf+1,7
  1386  0103  03B0               	decf	?_sprintf+2,f
  1387  0104  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1388  0105  120A  118A  240F  120A  118A  	fcall	_sprintf
  1389                           
  1390                           ;main.c: 374: putst(sVar);
  1391  010A  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1392  010B  120A  118A  26E9  120A  118A  	fcall	_putst
  1393                           
  1394                           ;main.c: 375: samples++;
  1395  0110  3001               	movlw	1
  1396  0111  07F0               	addwf	_samples,f	;volatile
  1397  0112  1803               	skipnc
  1398  0113  0AF1               	incf	_samples+1,f	;volatile
  1399  0114  3000               	movlw	0
  1400  0115  07F1               	addwf	_samples+1,f	;volatile
  1401  0116  28EA               	goto	l359
  1402  0117                     l2595:	
  1403                           
  1404                           ;main.c: 378: sprintf(sVar, "%d ", pos_log2[samples - 90 / 2]);
  1405  0117  3034               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1406  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1407  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1408  011A  00D8               	movwf	??_main
  1409  011B  0858               	movf	??_main,w
  1410  011C  00AE               	movwf	sprintf@f
  1411  011D  0870               	movf	_samples,w	;volatile
  1412  011E  3E63               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  1413  011F  0084               	movwf	4
  1414  0120  1783               	bsf	3,7	;select IRP bank3
  1415  0121  0800               	movf	0,w
  1416  0122  00AF               	movwf	?_sprintf+1
  1417  0123  01B0               	clrf	?_sprintf+2
  1418  0124  1BAF               	btfsc	?_sprintf+1,7
  1419  0125  03B0               	decf	?_sprintf+2,f
  1420  0126  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1421  0127  120A  118A  240F  120A  118A  	fcall	_sprintf
  1422                           
  1423                           ;main.c: 379: putst(sVar);
  1424  012C  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1425  012D  120A  118A  26E9  120A  118A  	fcall	_putst
  1426                           
  1427                           ;main.c: 380: samples++;
  1428  0132  3001               	movlw	1
  1429  0133  07F0               	addwf	_samples,f	;volatile
  1430  0134  1803               	skipnc
  1431  0135  0AF1               	incf	_samples+1,f	;volatile
  1432  0136  3000               	movlw	0
  1433  0137  07F1               	addwf	_samples+1,f	;volatile
  1434  0138                     l362:	
  1435  0138  0871               	movf	_samples+1,w	;volatile
  1436  0139  3A80               	xorlw	128
  1437  013A  00FF               	movwf	127
  1438  013B  3080               	movlw	128
  1439  013C  027F               	subwf	127,w
  1440  013D  1D03               	skipz
  1441  013E  2941               	goto	u2285
  1442  013F  305A               	movlw	90
  1443  0140  0270               	subwf	_samples,w	;volatile
  1444  0141                     u2285:	
  1445  0141  1C03               	skipc
  1446  0142  2917               	goto	l2595
  1447                           
  1448                           ;main.c: 381: };main.c: 382: sprintf(sVar, "Fim do teste ");
  1449  0143  301B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1450  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0145  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0146  00D8               	movwf	??_main
  1453  0147  0858               	movf	??_main,w
  1454  0148  00AE               	movwf	sprintf@f
  1455  0149  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1456  014A  120A  118A  240F  120A  118A  	fcall	_sprintf
  1457                           
  1458                           ;main.c: 383: putst(sVar);
  1459  014F  30A0               	movlw	(low (main@sVar| 0))& (0+255)
  1460  0150  120A  118A  26E9  120A  118A  	fcall	_putst
  1461  0155                     l2605:	
  1462                           
  1463                           ;main.c: 384: };main.c: 385: char serialIn = chkchr();
  1464  0155  120A  158A  2735  120A  118A  	fcall	_chkchr
  1465  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1466  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1467  015C  00D8               	movwf	??_main
  1468  015D  0858               	movf	??_main,w
  1469  015E  1683               	bsf	3,5	;RP0=1, select bank1
  1470  015F  1303               	bcf	3,6	;RP1=0, select bank1
  1471  0160  00B9               	movwf	main@serialIn_363^(0+128)
  1472                           
  1473                           ;main.c: 386: if (serialIn == 'u'){
  1474  0161  3075               	movlw	117
  1475  0162  0639               	xorwf	main@serialIn_363^(0+128),w
  1476  0163  1D03               	btfss	3,2
  1477  0164  2989               	goto	l2621
  1478                           
  1479                           ;main.c: 387: resetCounter();
  1480  0165  120A  158A  2754  120A  118A  	fcall	_resetCounter
  1481                           
  1482                           ;main.c: 389: last_pos = 0;
  1483  016A  3000               	movlw	0
  1484  016B  1683               	bsf	3,5	;RP0=1, select bank1
  1485  016C  1303               	bcf	3,6	;RP1=0, select bank1
  1486  016D  00BD               	movwf	(_last_pos+3)^(0+128)	;volatile
  1487  016E  3000               	movlw	0
  1488  016F  00BC               	movwf	(_last_pos+2)^(0+128)	;volatile
  1489  0170  3000               	movlw	0
  1490  0171  00BB               	movwf	(_last_pos+1)^(0+128)	;volatile
  1491  0172  3000               	movlw	0
  1492  0173  00BA               	movwf	_last_pos^(0+128)	;volatile
  1493                           
  1494                           ;main.c: 390: samples = 0;
  1495  0174  01F0               	clrf	_samples	;volatile
  1496  0175  01F1               	clrf	_samples+1	;volatile
  1497                           
  1498                           ;main.c: 391: sampling = 1;
  1499  0176  3001               	movlw	1
  1500  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0179  00D8               	movwf	??_main
  1503  017A  0858               	movf	??_main,w
  1504  017B  00F2               	movwf	_sampling	;volatile
  1505                           
  1506                           ;main.c: 392: SetPoint(100);
  1507  017C  3064               	movlw	100
  1508  017D  00D2               	movwf	SetPoint@new_val
  1509  017E  3000               	movlw	0
  1510  017F  00D3               	movwf	SetPoint@new_val+1
  1511  0180  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1512                           
  1513                           ;main.c: 393: RB5=0;
  1514  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0187  1286               	bcf	6,5	;volatile
  1517                           
  1518                           ;main.c: 395: }else if (serialIn == 'w' ){
  1519  0188  2890               	goto	l2565
  1520  0189                     l2621:	
  1521  0189  3077               	movlw	119
  1522  018A  0639               	xorwf	main@serialIn_363^(0+128),w
  1523  018B  1D03               	btfss	3,2
  1524  018C  299D               	goto	l2625
  1525                           
  1526                           ;main.c: 396: SetPoint(set_point + 100);
  1527  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1528  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1529  018F  0859               	movf	_set_point,w	;volatile
  1530  0190  3E64               	addlw	100
  1531  0191  00D2               	movwf	SetPoint@new_val
  1532  0192  085A               	movf	_set_point+1,w	;volatile
  1533  0193  1803               	skipnc
  1534  0194  3E01               	addlw	1
  1535  0195  3E00               	addlw	0
  1536  0196  00D3               	movwf	SetPoint@new_val+1
  1537  0197  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1538                           
  1539                           ;main.c: 397: }else if (serialIn == 's'){
  1540  019C  2890               	goto	l2565
  1541  019D                     l2625:	
  1542  019D  3073               	movlw	115
  1543  019E  0639               	xorwf	main@serialIn_363^(0+128),w
  1544  019F  1D03               	btfss	3,2
  1545  01A0  29B1               	goto	l2629
  1546                           
  1547                           ;main.c: 398: SetPoint(set_point - 100);
  1548  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1549  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1550  01A3  0859               	movf	_set_point,w	;volatile
  1551  01A4  3E9C               	addlw	156
  1552  01A5  00D2               	movwf	SetPoint@new_val
  1553  01A6  085A               	movf	_set_point+1,w	;volatile
  1554  01A7  1803               	skipnc
  1555  01A8  3E01               	addlw	1
  1556  01A9  3EFF               	addlw	255
  1557  01AA  00D3               	movwf	SetPoint@new_val+1
  1558  01AB  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1559                           
  1560                           ;main.c: 399: }else if (serialIn == ' '){
  1561  01B0  2890               	goto	l2565
  1562  01B1                     l2629:	
  1563  01B1  3020               	movlw	32
  1564  01B2  0639               	xorwf	main@serialIn_363^(0+128),w
  1565  01B3  1D03               	btfss	3,2
  1566  01B4  29BB               	goto	l2633
  1567                           
  1568                           ;main.c: 400: motor_reset();
  1569  01B5  120A  118A  271F  120A  118A  	fcall	_motor_reset
  1570                           
  1571                           ;main.c: 401: }else if (serialIn == 'e' ){
  1572  01BA  2890               	goto	l2565
  1573  01BB                     l2633:	
  1574  01BB  3065               	movlw	101
  1575  01BC  0639               	xorwf	main@serialIn_363^(0+128),w
  1576  01BD  1D03               	btfss	3,2
  1577  01BE  29CF               	goto	l2637
  1578                           
  1579                           ;main.c: 402: SetPoint(set_point + 50);
  1580  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1581  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1582  01C1  0859               	movf	_set_point,w	;volatile
  1583  01C2  3E32               	addlw	50
  1584  01C3  00D2               	movwf	SetPoint@new_val
  1585  01C4  085A               	movf	_set_point+1,w	;volatile
  1586  01C5  1803               	skipnc
  1587  01C6  3E01               	addlw	1
  1588  01C7  3E00               	addlw	0
  1589  01C8  00D3               	movwf	SetPoint@new_val+1
  1590  01C9  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1591                           
  1592                           ;main.c: 403: }else if (serialIn == 'd'){
  1593  01CE  2890               	goto	l2565
  1594  01CF                     l2637:	
  1595  01CF  3064               	movlw	100
  1596  01D0  0639               	xorwf	main@serialIn_363^(0+128),w
  1597  01D1  1D03               	btfss	3,2
  1598  01D2  29E3               	goto	l2641
  1599                           
  1600                           ;main.c: 404: SetPoint(set_point - 50);
  1601  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  1602  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  1603  01D5  0859               	movf	_set_point,w	;volatile
  1604  01D6  3ECE               	addlw	206
  1605  01D7  00D2               	movwf	SetPoint@new_val
  1606  01D8  085A               	movf	_set_point+1,w	;volatile
  1607  01D9  1803               	skipnc
  1608  01DA  3E01               	addlw	1
  1609  01DB  3EFF               	addlw	255
  1610  01DC  00D3               	movwf	SetPoint@new_val+1
  1611  01DD  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1612                           
  1613                           ;main.c: 405: }else if (serialIn == '0'){
  1614  01E2  2890               	goto	l2565
  1615  01E3                     l2641:	
  1616  01E3  3030               	movlw	48
  1617  01E4  0639               	xorwf	main@serialIn_363^(0+128),w
  1618  01E5  1D03               	btfss	3,2
  1619  01E6  29F2               	goto	l2645
  1620                           
  1621                           ;main.c: 406: SetPoint(0);
  1622  01E7  3000               	movlw	0
  1623  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1624  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1625  01EA  00D2               	movwf	SetPoint@new_val
  1626  01EB  00D3               	movwf	SetPoint@new_val+1
  1627  01EC  120A  158A  27D8  120A  118A  	fcall	_SetPoint
  1628                           
  1629                           ;main.c: 407: }else if (serialIn == 'k'){
  1630  01F1  2890               	goto	l2565
  1631  01F2                     l2645:	
  1632  01F2  306B               	movlw	107
  1633  01F3  0639               	xorwf	main@serialIn_363^(0+128),w
  1634  01F4  1D03               	btfss	3,2
  1635  01F5  29FD               	goto	l2649
  1636                           
  1637                           ;main.c: 408: onlyK = 1;
  1638  01F6  3001               	movlw	1
  1639  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1640  01F8  1303               	bcf	3,6	;RP1=0, select bank0
  1641  01F9  00E7               	movwf	_onlyK
  1642  01FA  3000               	movlw	0
  1643  01FB  00E8               	movwf	_onlyK+1
  1644                           
  1645                           ;main.c: 409: }else if (serialIn == 'l'){
  1646  01FC  2890               	goto	l2565
  1647  01FD                     l2649:	
  1648  01FD  306C               	movlw	108
  1649  01FE  0639               	xorwf	main@serialIn_363^(0+128),w
  1650  01FF  1D03               	btfss	3,2
  1651  0200  2890               	goto	l2565
  1652                           
  1653                           ;main.c: 410: onlyK = 0;
  1654  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1655  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1656  0203  01E7               	clrf	_onlyK
  1657  0204  01E8               	clrf	_onlyK+1
  1658  0205  2890               	goto	l2565
  1659  0206                     __end_of_main:	
  1660                           
  1661                           	psect	text1
  1662  0F7F                     __ptext1:	
  1663 ;; *************** function _serial_init *****************
  1664 ;; Defined at:
  1665 ;;		line 29 in file "serial.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1679 ;;      Params:         0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0
  1682 ;;      Totals:         0       0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    1
  1686 ;; This function calls:
  1687 ;;		Nothing
  1688 ;; This function is called by:
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           
  1694                           ;psect for function _serial_init
  1695  0F7F                     _serial_init:	
  1696                           
  1697                           ;serial.c: 65: SPBRG=((20000000/(16UL * 19200) -1));
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _serial_init: [wreg]
  1701  0F7F  3040               	movlw	64
  1702  0F80  1683               	bsf	3,5	;RP0=1, select bank1
  1703  0F81  1303               	bcf	3,6	;RP1=0, select bank1
  1704  0F82  0099               	movwf	25	;volatile
  1705                           
  1706                           ;serial.c: 66: BRGH=1;
  1707  0F83  1518               	bsf	24,2	;volatile
  1708                           
  1709                           ;serial.c: 67: SYNC=0;
  1710  0F84  1218               	bcf	24,4	;volatile
  1711                           
  1712                           ;serial.c: 68: SPEN=1;
  1713  0F85  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0F86  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0F87  1798               	bsf	24,7	;volatile
  1716                           
  1717                           ;serial.c: 69: CREN=1;
  1718  0F88  1618               	bsf	24,4	;volatile
  1719                           
  1720                           ;serial.c: 70: SREN=0;
  1721  0F89  1298               	bcf	24,5	;volatile
  1722                           
  1723                           ;serial.c: 71: TXIE=0;
  1724  0F8A  1683               	bsf	3,5	;RP0=1, select bank1
  1725  0F8B  1303               	bcf	3,6	;RP1=0, select bank1
  1726  0F8C  120C               	bcf	12,4	;volatile
  1727                           
  1728                           ;serial.c: 72: RCIE=0;
  1729  0F8D  128C               	bcf	12,5	;volatile
  1730                           
  1731                           ;serial.c: 73: TX9=0;
  1732  0F8E  1318               	bcf	24,6	;volatile
  1733                           
  1734                           ;serial.c: 74: RX9=0;
  1735  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0F91  1318               	bcf	24,6	;volatile
  1738                           
  1739                           ;serial.c: 75: TXEN=0;
  1740  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  1741  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  1742  0F94  1298               	bcf	24,5	;volatile
  1743                           
  1744                           ;serial.c: 76: TXEN=1;
  1745  0F95  1698               	bsf	24,5	;volatile
  1746  0F96  0008               	return
  1747  0F97                     __end_of_serial_init:	
  1748                           
  1749                           	psect	text2
  1750  07B3                     __ptext2:	
  1751 ;; *************** function _pwm_init *****************
  1752 ;; Defined at:
  1753 ;;		line 25 in file "pwm.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;		None
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1767 ;;      Params:         0       0       0       0       0
  1768 ;;      Locals:         0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0
  1770 ;;      Totals:         0       0       0       0       0
  1771 ;;Total ram usage:        0 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_main
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function _pwm_init
  1783  07B3                     _pwm_init:	
  1784                           
  1785                           ;pwm.c: 28: TRISC1 = 1;
  1786                           
  1787                           ;incstack = 0
  1788                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  1789  07B3  1683               	bsf	3,5	;RP0=1, select bank1
  1790  07B4  1303               	bcf	3,6	;RP1=0, select bank1
  1791  07B5  1487               	bsf	7,1	;volatile
  1792                           
  1793                           ;pwm.c: 29: TRISC2 = 1;
  1794  07B6  1507               	bsf	7,2	;volatile
  1795                           
  1796                           ;pwm.c: 32: PR2 = 0xFF;
  1797  07B7  30FF               	movlw	255
  1798  07B8  0092               	movwf	18	;volatile
  1799                           
  1800                           ;pwm.c: 35: CCP1CONbits.CCP1M= 12;
  1801  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  1802  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  1803  07BB  0817               	movf	23,w	;volatile
  1804  07BC  39F0               	andlw	-16
  1805  07BD  380C               	iorlw	12
  1806  07BE  0097               	movwf	23	;volatile
  1807                           
  1808                           ;pwm.c: 36: CCP2CONbits.CCP2M= 12;
  1809  07BF  081D               	movf	29,w	;volatile
  1810  07C0  39F0               	andlw	-16
  1811  07C1  380C               	iorlw	12
  1812  07C2  009D               	movwf	29	;volatile
  1813                           
  1814                           ;pwm.c: 39: CCPR1L = 0;
  1815  07C3  0195               	clrf	21	;volatile
  1816                           
  1817                           ;pwm.c: 40: CCP1CONbits.DC1B=0;
  1818  07C4  30CF               	movlw	-49
  1819  07C5  0597               	andwf	23,f	;volatile
  1820                           
  1821                           ;pwm.c: 41: CCPR2L = 0;
  1822  07C6  019B               	clrf	27	;volatile
  1823                           
  1824                           ;pwm.c: 45: PIR1bits.TMR2IF = 0;
  1825  07C7  108C               	bcf	12,1	;volatile
  1826                           
  1827                           ;pwm.c: 47: T2CONbits.T2CKPS = 0;
  1828  07C8  30FC               	movlw	-4
  1829  07C9  0592               	andwf	18,f	;volatile
  1830                           
  1831                           ;pwm.c: 49: T2CONbits.TMR2ON = 1;
  1832  07CA  1512               	bsf	18,2	;volatile
  1833  07CB                     l170:	
  1834                           ;pwm.c: 51: while (!PIR1bits.TMR2IF){}
  1835                           
  1836  07CB  1C8C               	btfss	12,1	;volatile
  1837  07CC  2FCB               	goto	l170
  1838                           
  1839                           ;pwm.c: 53: TRISC1 = 0;
  1840  07CD  1683               	bsf	3,5	;RP0=1, select bank1
  1841  07CE  1303               	bcf	3,6	;RP1=0, select bank1
  1842  07CF  1087               	bcf	7,1	;volatile
  1843                           
  1844                           ;pwm.c: 54: TRISC2 = 0;
  1845  07D0  1107               	bcf	7,2	;volatile
  1846                           
  1847                           ;pwm.c: 59: ANS4 = 0;
  1848  07D1  1683               	bsf	3,5	;RP0=1, select bank3
  1849  07D2  1703               	bsf	3,6	;RP1=1, select bank3
  1850  07D3  1208               	bcf	8,4	;volatile
  1851                           
  1852                           ;pwm.c: 60: TRISA5 = 0;
  1853  07D4  1683               	bsf	3,5	;RP0=1, select bank1
  1854  07D5  1303               	bcf	3,6	;RP1=0, select bank1
  1855  07D6  1285               	bcf	5,5	;volatile
  1856                           
  1857                           ;pwm.c: 61: TRISA6 = 0;
  1858  07D7  1305               	bcf	5,6	;volatile
  1859                           
  1860                           ;pwm.c: 62: RA5 = 0;
  1861  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  1862  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  1863  07DA  1285               	bcf	5,5	;volatile
  1864                           
  1865                           ;pwm.c: 63: RA6 = 0;
  1866  07DB  1305               	bcf	5,6	;volatile
  1867  07DC  0008               	return
  1868  07DD                     __end_of_pwm_init:	
  1869                           
  1870                           	psect	text3
  1871  071F                     __ptext3:	
  1872 ;; *************** function _motor_reset *****************
  1873 ;; Defined at:
  1874 ;;		line 162 in file "main.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1888 ;;      Params:         0       0       0       0       0
  1889 ;;      Locals:         0       0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0
  1891 ;;      Totals:         0       0       0       0       0
  1892 ;;Total ram usage:        0 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    5
  1895 ;; This function calls:
  1896 ;;		_SetPoint
  1897 ;;		_pwm_set
  1898 ;;		_resetCounter
  1899 ;; This function is called by:
  1900 ;;		_main
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function _motor_reset
  1906  071F                     _motor_reset:	
  1907                           
  1908                           ;main.c: 163: pwm_set(1, 0);
  1909                           
  1910                           ;incstack = 0
  1911                           ; Regs used in _motor_reset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1912  071F  3001               	movlw	1
  1913  0720  1283               	bcf	3,5	;RP0=0, select bank0
  1914  0721  1303               	bcf	3,6	;RP1=0, select bank0
  1915  0722  00BC               	movwf	pwm_set@channel
  1916  0723  3000               	movlw	0
  1917  0724  00BD               	movwf	pwm_set@channel+1
  1918  0725  3000               	movlw	0
  1919  0726  00C1               	movwf	pwm_set@duty_cycle+3
  1920  0727  3000               	movlw	0
  1921  0728  00C0               	movwf	pwm_set@duty_cycle+2
  1922  0729  3000               	movlw	0
  1923  072A  00BF               	movwf	pwm_set@duty_cycle+1
  1924  072B  3000               	movlw	0
  1925  072C  00BE               	movwf	pwm_set@duty_cycle
  1926  072D  120A  118A  2570  120A  118A  	fcall	_pwm_set
  1927                           
  1928                           ;main.c: 164: pwm_set(2, 0);
  1929  0732  3002               	movlw	2
  1930  0733  1283               	bcf	3,5	;RP0=0, select bank0
  1931  0734  1303               	bcf	3,6	;RP1=0, select bank0
  1932  0735  00BC               	movwf	pwm_set@channel
  1933  0736  3000               	movlw	0
  1934  0737  00BD               	movwf	pwm_set@channel+1
  1935  0738  3000               	movlw	0
  1936  0739  00C1               	movwf	pwm_set@duty_cycle+3
  1937  073A  3000               	movlw	0
  1938  073B  00C0               	movwf	pwm_set@duty_cycle+2
  1939  073C  3000               	movlw	0
  1940  073D  00BF               	movwf	pwm_set@duty_cycle+1
  1941  073E  3000               	movlw	0
  1942  073F  00BE               	movwf	pwm_set@duty_cycle
  1943  0740  120A  118A  2570  120A  118A  	fcall	_pwm_set
  1944                           
  1945                           ;main.c: 165: resetCounter();
  1946  0745  120A  158A  2754  120A  118A  	fcall	_resetCounter
  1947                           
  1948                           ;main.c: 166: SetPoint(0);
  1949  074A  3000               	movlw	0
  1950  074B  1283               	bcf	3,5	;RP0=0, select bank0
  1951  074C  1303               	bcf	3,6	;RP1=0, select bank0
  1952  074D  00D2               	movwf	SetPoint@new_val
  1953  074E  00D3               	movwf	SetPoint@new_val+1
  1954  074F  120A  158A  27D8   	fcall	_SetPoint
  1955  0752  0008               	return
  1956  0753                     __end_of_motor_reset:	
  1957                           
  1958                           	psect	text4
  1959  0F54                     __ptext4:	
  1960 ;; *************** function _resetCounter *****************
  1961 ;; Defined at:
  1962 ;;		line 157 in file "main.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1976 ;;      Params:         0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    1
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_motor_reset
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _resetCounter
  1993  0F54                     _resetCounter:	
  1994                           
  1995                           ;main.c: 158: encoder1_counter = 0;
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _resetCounter: [wreg]
  1999  0F54  3000               	movlw	0
  2000  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0F57  00E4               	movwf	_encoder1_counter+3	;volatile
  2003  0F58  3000               	movlw	0
  2004  0F59  00E3               	movwf	_encoder1_counter+2	;volatile
  2005  0F5A  3000               	movlw	0
  2006  0F5B  00E2               	movwf	_encoder1_counter+1	;volatile
  2007  0F5C  3000               	movlw	0
  2008  0F5D  00E1               	movwf	_encoder1_counter	;volatile
  2009                           
  2010                           ;main.c: 159: motor_pos = 0;
  2011  0F5E  3000               	movlw	0
  2012  0F5F  00E0               	movwf	_motor_pos+3	;volatile
  2013  0F60  3000               	movlw	0
  2014  0F61  00DF               	movwf	_motor_pos+2	;volatile
  2015  0F62  3000               	movlw	0
  2016  0F63  00DE               	movwf	_motor_pos+1	;volatile
  2017  0F64  3000               	movlw	0
  2018  0F65  00DD               	movwf	_motor_pos	;volatile
  2019  0F66  0008               	return
  2020  0F67                     __end_of_resetCounter:	
  2021                           
  2022                           	psect	text5
  2023  0FD8                     __ptext5:	
  2024 ;; *************** function _SetPoint *****************
  2025 ;; Defined at:
  2026 ;;		line 149 in file "main.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  new_val         2   50[BANK0 ] int 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;		None
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         0       2       0       0       0
  2041 ;;      Locals:         0       0       0       0       0
  2042 ;;      Temps:          0       4       0       0       0
  2043 ;;      Totals:         0       6       0       0       0
  2044 ;;Total ram usage:        6 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    4
  2047 ;; This function calls:
  2048 ;;		_PrintSetpoint
  2049 ;; This function is called by:
  2050 ;;		_motor_reset
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           
  2056                           ;psect for function _SetPoint
  2057  0FD8                     _SetPoint:	
  2058                           
  2059                           ;main.c: 150: if (new_val != set_point){
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in _SetPoint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2063  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  2064  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  2065  0FDA  0852               	movf	SetPoint@new_val,w
  2066  0FDB  00D4               	movwf	??_SetPoint
  2067  0FDC  0853               	movf	SetPoint@new_val+1,w
  2068  0FDD  00D5               	movwf	??_SetPoint+1
  2069  0FDE  3000               	movlw	0
  2070  0FDF  1BD5               	btfsc	??_SetPoint+1,7
  2071  0FE0  30FF               	movlw	255
  2072  0FE1  00D6               	movwf	??_SetPoint+2
  2073  0FE2  00D7               	movwf	??_SetPoint+3
  2074  0FE3  085C               	movf	_set_point+3,w	;volatile
  2075  0FE4  0657               	xorwf	??_SetPoint+3,w
  2076  0FE5  1D03               	skipz
  2077  0FE6  2FF1               	goto	u1625
  2078  0FE7  085B               	movf	_set_point+2,w	;volatile
  2079  0FE8  0656               	xorwf	??_SetPoint+2,w
  2080  0FE9  1D03               	skipz
  2081  0FEA  2FF1               	goto	u1625
  2082  0FEB  085A               	movf	_set_point+1,w	;volatile
  2083  0FEC  0655               	xorwf	??_SetPoint+1,w
  2084  0FED  1D03               	skipz
  2085  0FEE  2FF1               	goto	u1625
  2086  0FEF  0859               	movf	_set_point,w	;volatile
  2087  0FF0  0654               	xorwf	??_SetPoint,w
  2088  0FF1                     u1625:	
  2089  0FF1  1903               	skipnz
  2090  0FF2  0008               	return
  2091                           
  2092                           ;main.c: 152: set_point = new_val;
  2093  0FF3  0852               	movf	SetPoint@new_val,w
  2094  0FF4  00D9               	movwf	_set_point	;volatile
  2095  0FF5  0853               	movf	SetPoint@new_val+1,w
  2096  0FF6  00DA               	movwf	_set_point+1	;volatile
  2097  0FF7  3000               	movlw	0
  2098  0FF8  1BDA               	btfsc	_set_point+1,7	;volatile
  2099  0FF9  30FF               	movlw	255
  2100  0FFA  00DB               	movwf	_set_point+2	;volatile
  2101  0FFB  00DC               	movwf	_set_point+3	;volatile
  2102                           
  2103                           ;main.c: 153: PrintSetpoint();
  2104  0FFC  120A  158A  2797   	fcall	_PrintSetpoint
  2105  0FFF  0008               	return
  2106  1000                     __end_of_SetPoint:	
  2107                           
  2108                           	psect	text6
  2109  0F97                     __ptext6:	
  2110 ;; *************** function _PrintSetpoint *****************
  2111 ;; Defined at:
  2112 ;;		line 108 in file "main.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  sVar           20   30[BANK0 ] unsigned char [20]
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2126 ;;      Params:         0       0       0       0       0
  2127 ;;      Locals:         0      20       0       0       0
  2128 ;;      Temps:          0       1       0       0       0
  2129 ;;      Totals:         0      21       0       0       0
  2130 ;;Total ram usage:       21 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    3
  2133 ;; This function calls:
  2134 ;;		_putst
  2135 ;;		_sprintf
  2136 ;; This function is called by:
  2137 ;;		_SetPoint
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           
  2142                           ;psect for function _PrintSetpoint
  2143  0F97                     _PrintSetpoint:	
  2144                           
  2145                           ;main.c: 109: char sVar[20];;main.c: 110: sprintf(sVar, "SetPoint: %d \r\n", set_point);
  2146                           
  2147                           ;incstack = 0
  2148                           ; Regs used in _PrintSetpoint: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2149  0F97  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2150  0F98  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0F99  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0F9A  00BD               	movwf	??_PrintSetpoint
  2153  0F9B  083D               	movf	??_PrintSetpoint,w
  2154  0F9C  00AE               	movwf	sprintf@f
  2155  0F9D  085C               	movf	_set_point+3,w	;volatile
  2156  0F9E  00B2               	movwf	?_sprintf+4
  2157  0F9F  085B               	movf	_set_point+2,w	;volatile
  2158  0FA0  00B1               	movwf	?_sprintf+3
  2159  0FA1  085A               	movf	_set_point+1,w	;volatile
  2160  0FA2  00B0               	movwf	?_sprintf+2
  2161  0FA3  0859               	movf	_set_point,w	;volatile
  2162  0FA4  00AF               	movwf	?_sprintf+1
  2163  0FA5  303E               	movlw	(low (PrintSetpoint@sVar| 0))& (0+255)
  2164  0FA6  120A  118A  240F  120A  158A  	fcall	_sprintf
  2165                           
  2166                           ;main.c: 111: putst(sVar);
  2167  0FAB  303E               	movlw	(low (PrintSetpoint@sVar| 0))& (0+255)
  2168  0FAC  120A  118A  26E9   	fcall	_putst
  2169  0FAF  0008               	return
  2170  0FB0                     __end_of_PrintSetpoint:	
  2171                           
  2172                           	psect	text7
  2173  040F                     __ptext7:	
  2174 ;; *************** function _sprintf *****************
  2175 ;; Defined at:
  2176 ;;		line 500 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  2177 ;; Parameters:    Size  Location     Type
  2178 ;;  sp              1    wreg     PTR unsigned char 
  2179 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  2180 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  2181 ;;		 -> STR_5(14), STR_4(4), STR_3(4), STR_2(11), 
  2182 ;;		 -> STR_1(16), 
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  sp              1   27[BANK0 ] PTR unsigned char 
  2185 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  2186 ;;  tmpval          4    0        struct .
  2187 ;;  val             2   25[BANK0 ] unsigned int 
  2188 ;;  cp              2    0        PTR const unsigned char 
  2189 ;;  len             2    0        unsigned int 
  2190 ;;  c               1   28[BANK0 ] unsigned char 
  2191 ;;  prec            1   24[BANK0 ] char 
  2192 ;;  flag            1   23[BANK0 ] unsigned char 
  2193 ;;  ap              1   22[BANK0 ] PTR void [1]
  2194 ;;		 -> ?_sprintf(2), 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  2   14[BANK0 ] int 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2204 ;;      Params:         0       5       0       0       0
  2205 ;;      Locals:         0       7       0       0       0
  2206 ;;      Temps:          0       3       0       0       0
  2207 ;;      Totals:         0      15       0       0       0
  2208 ;;Total ram usage:       15 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    2
  2211 ;; This function calls:
  2212 ;;		___lwdiv
  2213 ;;		___lwmod
  2214 ;; This function is called by:
  2215 ;;		_PrintSetpoint
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _sprintf
  2222  040F                     _sprintf:	
  2223                           
  2224                           ;incstack = 0
  2225                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2226                           ;sprintf@sp stored from wreg
  2227  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2228  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2229  0411  00BB               	movwf	sprintf@sp
  2230                           
  2231                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 516: signed char prec;;dopr
      +                          nt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c: 536: unsigned long vd;;d
      +                          oprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c: 540: unsigned int val;;do
      +                          prnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;doprnt.c: 545: *ap = __va_sta
      +                          rt();
  2232  0412  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2233  0413  00B3               	movwf	??_sprintf
  2234  0414  0833               	movf	??_sprintf,w
  2235  0415  00B6               	movwf	sprintf@ap
  2236  0416                     l1887:	
  2237                           ;doprnt.c: 548: while((c = *f++)) {
  2238                           
  2239  0416  3001               	movlw	1
  2240  0417  07AE               	addwf	sprintf@f,f
  2241  0418  30FF               	movlw	-1
  2242  0419  072E               	addwf	sprintf@f,w
  2243  041A  0084               	movwf	4
  2244  041B  120A  118A  2670  120A  118A  	fcall	stringdir
  2245  0420  00B3               	movwf	??_sprintf
  2246  0421  0833               	movf	??_sprintf,w
  2247  0422  00BC               	movwf	sprintf@c
  2248  0423  083C               	movf	sprintf@c,w
  2249  0424  1903               	btfsc	3,2
  2250  0425  2CDC               	goto	l1889
  2251                           
  2252                           ;doprnt.c: 550: if(c != '%')
  2253  0426  3025               	movlw	37
  2254  0427  063C               	xorwf	sprintf@c,w
  2255  0428  1903               	btfsc	3,2
  2256  0429  2C36               	goto	l1843
  2257                           
  2258                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  2259  042A  083C               	movf	sprintf@c,w
  2260  042B  00B3               	movwf	??_sprintf
  2261  042C  083B               	movf	sprintf@sp,w
  2262  042D  0084               	movwf	4
  2263  042E  0833               	movf	??_sprintf,w
  2264  042F  1383               	bcf	3,7	;select IRP bank0
  2265  0430  0080               	movwf	0
  2266  0431  3001               	movlw	1
  2267  0432  00B3               	movwf	??_sprintf
  2268  0433  0833               	movf	??_sprintf,w
  2269  0434  07BB               	addwf	sprintf@sp,f
  2270                           
  2271                           ;doprnt.c: 554: continue;
  2272  0435  2C16               	goto	l1887
  2273  0436                     l1843:	
  2274                           
  2275                           ;doprnt.c: 555: };doprnt.c: 560: flag = 0;
  2276  0436  01B7               	clrf	sprintf@flag
  2277                           
  2278                           ;doprnt.c: 654: switch(c = *f++) {
  2279  0437  3001               	movlw	1
  2280  0438  07AE               	addwf	sprintf@f,f
  2281  0439  30FF               	movlw	-1
  2282  043A  072E               	addwf	sprintf@f,w
  2283  043B  0084               	movwf	4
  2284  043C  120A  118A  2670  120A  118A  	fcall	stringdir
  2285  0441  00BC               	movwf	sprintf@c
  2286                           
  2287                           ; Switch size 1, requested type "simple"
  2288                           ; Number of cases is 3, Range of values is 0 to 105
  2289                           ; switch strategies available:
  2290                           ; Name         Instructions Cycles
  2291                           ; simple_byte           10     6 (average)
  2292                           ; jumptable            260     6 (fixed)
  2293                           ;	Chosen strategy is simple_byte
  2294  0442  3A00               	xorlw	0	; case 0
  2295  0443  1903               	skipnz
  2296  0444  2CDC               	goto	l1889
  2297  0445  3A64               	xorlw	100	; case 100
  2298  0446  1903               	skipnz
  2299  0447  2C4C               	goto	l1849
  2300  0448  3A0D               	xorlw	13	; case 105
  2301  0449  1903               	skipnz
  2302  044A  2C4C               	goto	l1849
  2303  044B  2C16               	goto	l1887
  2304  044C                     l1849:	
  2305                           
  2306                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2307  044C  0836               	movf	sprintf@ap,w
  2308  044D  0084               	movwf	4
  2309  044E  1383               	bcf	3,7	;select IRP bank0
  2310  044F  0800               	movf	0,w
  2311  0450  00B9               	movwf	sprintf@val
  2312  0451  0A84               	incf	4,f
  2313  0452  0800               	movf	0,w
  2314  0453  00BA               	movwf	sprintf@val+1
  2315  0454  3002               	movlw	2
  2316  0455  00B3               	movwf	??_sprintf
  2317  0456  0833               	movf	??_sprintf,w
  2318  0457  07B6               	addwf	sprintf@ap,f
  2319                           
  2320                           ;doprnt.c: 1280: if((int)val < 0) {
  2321  0458  1FBA               	btfss	sprintf@val+1,7
  2322  0459  2C63               	goto	l1859
  2323                           
  2324                           ;doprnt.c: 1281: flag |= 0x03;
  2325  045A  3003               	movlw	3
  2326  045B  00B3               	movwf	??_sprintf
  2327  045C  0833               	movf	??_sprintf,w
  2328  045D  04B7               	iorwf	sprintf@flag,f
  2329                           
  2330                           ;doprnt.c: 1282: val = -val;
  2331  045E  09B9               	comf	sprintf@val,f
  2332  045F  09BA               	comf	sprintf@val+1,f
  2333  0460  0AB9               	incf	sprintf@val,f
  2334  0461  1903               	skipnz
  2335  0462  0ABA               	incf	sprintf@val+1,f
  2336  0463                     l1859:	
  2337                           
  2338                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  2339  0463  01BC               	clrf	sprintf@c
  2340  0464  0ABC               	incf	sprintf@c,f
  2341  0465                     l1865:	
  2342                           
  2343                           ;doprnt.c: 1325: if(val < dpowers[c])
  2344  0465  083C               	movf	sprintf@c,w
  2345  0466  00B3               	movwf	??_sprintf
  2346  0467  0733               	addwf	??_sprintf,w
  2347  0468  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2348  0469  0084               	movwf	4
  2349  046A  120A  118A  2670  120A  118A  	fcall	stringdir
  2350  046F  00B4               	movwf	??_sprintf+1
  2351  0470  120A  118A  2670  120A  118A  	fcall	stringdir
  2352  0475  00B5               	movwf	??_sprintf+2
  2353  0476  0835               	movf	??_sprintf+2,w
  2354  0477  023A               	subwf	sprintf@val+1,w
  2355  0478  1D03               	skipz
  2356  0479  2C7C               	goto	u1365
  2357  047A  0834               	movf	??_sprintf+1,w
  2358  047B  0239               	subwf	sprintf@val,w
  2359  047C                     u1365:	
  2360  047C  1C03               	btfss	3,0
  2361  047D  2C86               	goto	l1871
  2362  047E  3001               	movlw	1
  2363  047F  00B3               	movwf	??_sprintf
  2364  0480  0833               	movf	??_sprintf,w
  2365  0481  07BC               	addwf	sprintf@c,f
  2366  0482  3005               	movlw	5
  2367  0483  063C               	xorwf	sprintf@c,w
  2368  0484  1D03               	btfss	3,2
  2369  0485  2C65               	goto	l1865
  2370  0486                     l1871:	
  2371                           
  2372                           ;doprnt.c: 1441: {;doprnt.c: 1457: if(flag & 0x03)
  2373  0486  0837               	movf	sprintf@flag,w
  2374  0487  3903               	andlw	3
  2375  0488  1903               	btfsc	3,2
  2376  0489  2C95               	goto	l1877
  2377                           
  2378                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2379  048A  302D               	movlw	45
  2380  048B  00B3               	movwf	??_sprintf
  2381  048C  083B               	movf	sprintf@sp,w
  2382  048D  0084               	movwf	4
  2383  048E  0833               	movf	??_sprintf,w
  2384  048F  1383               	bcf	3,7	;select IRP bank0
  2385  0490  0080               	movwf	0
  2386  0491  3001               	movlw	1
  2387  0492  00B3               	movwf	??_sprintf
  2388  0493  0833               	movf	??_sprintf,w
  2389  0494  07BB               	addwf	sprintf@sp,f
  2390  0495                     l1877:	
  2391                           
  2392                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  2393  0495  083C               	movf	sprintf@c,w
  2394  0496  00B3               	movwf	??_sprintf
  2395  0497  0833               	movf	??_sprintf,w
  2396  0498  00B8               	movwf	sprintf@prec
  2397  0499                     l1885:	
  2398                           ;doprnt.c: 1493: while(prec--) {
  2399                           
  2400  0499  30FF               	movlw	255
  2401  049A  00B3               	movwf	??_sprintf
  2402  049B  0833               	movf	??_sprintf,w
  2403  049C  07B8               	addwf	sprintf@prec,f
  2404  049D  0A38               	incf	sprintf@prec,w
  2405  049E  1903               	btfsc	3,2
  2406  049F  2C16               	goto	l1887
  2407                           
  2408                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2409  04A0  300A               	movlw	10
  2410  04A1  00A8               	movwf	___lwmod@divisor
  2411  04A2  3000               	movlw	0
  2412  04A3  00A9               	movwf	___lwmod@divisor+1
  2413  04A4  0838               	movf	sprintf@prec,w
  2414  04A5  00B3               	movwf	??_sprintf
  2415  04A6  0733               	addwf	??_sprintf,w
  2416  04A7  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2417  04A8  0084               	movwf	4
  2418  04A9  120A  118A  2670  120A  118A  	fcall	stringdir
  2419  04AE  00A0               	movwf	___lwdiv@divisor
  2420  04AF  120A  118A  2670  120A  118A  	fcall	stringdir
  2421  04B4  00A1               	movwf	___lwdiv@divisor+1
  2422  04B5  083A               	movf	sprintf@val+1,w
  2423  04B6  00A3               	movwf	___lwdiv@dividend+1
  2424  04B7  0839               	movf	sprintf@val,w
  2425  04B8  00A2               	movwf	___lwdiv@dividend
  2426  04B9  120A  118A  2632  120A  118A  	fcall	___lwdiv
  2427  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  2428  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  2429  04C0  0821               	movf	?___lwdiv+1,w
  2430  04C1  00AB               	movwf	___lwmod@dividend+1
  2431  04C2  0820               	movf	?___lwdiv,w
  2432  04C3  00AA               	movwf	___lwmod@dividend
  2433  04C4  120A  118A  2753  120A  118A  	fcall	___lwmod
  2434  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  2435  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  2436  04CB  0828               	movf	?___lwmod,w
  2437  04CC  3E30               	addlw	48
  2438  04CD  00B4               	movwf	??_sprintf+1
  2439  04CE  0834               	movf	??_sprintf+1,w
  2440  04CF  00BC               	movwf	sprintf@c
  2441                           
  2442                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  2443  04D0  083C               	movf	sprintf@c,w
  2444  04D1  00B3               	movwf	??_sprintf
  2445  04D2  083B               	movf	sprintf@sp,w
  2446  04D3  0084               	movwf	4
  2447  04D4  0833               	movf	??_sprintf,w
  2448  04D5  1383               	bcf	3,7	;select IRP bank0
  2449  04D6  0080               	movwf	0
  2450  04D7  3001               	movlw	1
  2451  04D8  00B3               	movwf	??_sprintf
  2452  04D9  0833               	movf	??_sprintf,w
  2453  04DA  07BB               	addwf	sprintf@sp,f
  2454  04DB  2C99               	goto	l1885
  2455  04DC                     l1889:	
  2456                           
  2457                           ;doprnt.c: 1557: *sp = 0;
  2458  04DC  083B               	movf	sprintf@sp,w
  2459  04DD  0084               	movwf	4
  2460  04DE  1383               	bcf	3,7	;select IRP bank0
  2461  04DF  0180               	clrf	0
  2462  04E0  0008               	return
  2463  04E1                     __end_of_sprintf:	
  2464                           
  2465                           	psect	text8
  2466  0753                     __ptext8:	
  2467 ;; *************** function ___lwmod *****************
  2468 ;; Defined at:
  2469 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;  divisor         2    8[BANK0 ] unsigned int 
  2472 ;;  dividend        2   10[BANK0 ] unsigned int 
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;  counter         1   13[BANK0 ] unsigned char 
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  2    8[BANK0 ] unsigned int 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, status,0
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2484 ;;      Params:         0       4       0       0       0
  2485 ;;      Locals:         0       1       0       0       0
  2486 ;;      Temps:          0       1       0       0       0
  2487 ;;      Totals:         0       6       0       0       0
  2488 ;;Total ram usage:        6 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    1
  2491 ;; This function calls:
  2492 ;;		Nothing
  2493 ;; This function is called by:
  2494 ;;		_sprintf
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           
  2499                           ;psect for function ___lwmod
  2500  0753                     ___lwmod:	
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2504  0753  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0754  1303               	bcf	3,6	;RP1=0, select bank0
  2506  0755  0828               	movf	___lwmod@divisor,w
  2507  0756  0429               	iorwf	___lwmod@divisor+1,w
  2508  0757  1903               	btfsc	3,2
  2509  0758  2F82               	goto	l1815
  2510  0759  01AD               	clrf	___lwmod@counter
  2511  075A  0AAD               	incf	___lwmod@counter,f
  2512  075B                     l1805:	
  2513  075B  1BA9               	btfsc	___lwmod@divisor+1,7
  2514  075C  2F69               	goto	l1807
  2515  075D  3001               	movlw	1
  2516  075E                     u1265:	
  2517  075E  1003               	clrc
  2518  075F  0DA8               	rlf	___lwmod@divisor,f
  2519  0760  0DA9               	rlf	___lwmod@divisor+1,f
  2520  0761  3EFF               	addlw	-1
  2521  0762  1D03               	skipz
  2522  0763  2F5E               	goto	u1265
  2523  0764  3001               	movlw	1
  2524  0765  00AC               	movwf	??___lwmod
  2525  0766  082C               	movf	??___lwmod,w
  2526  0767  07AD               	addwf	___lwmod@counter,f
  2527  0768  2F5B               	goto	l1805
  2528  0769                     l1807:	
  2529  0769  0829               	movf	___lwmod@divisor+1,w
  2530  076A  022B               	subwf	___lwmod@dividend+1,w
  2531  076B  1D03               	skipz
  2532  076C  2F6F               	goto	u1285
  2533  076D  0828               	movf	___lwmod@divisor,w
  2534  076E  022A               	subwf	___lwmod@dividend,w
  2535  076F                     u1285:	
  2536  076F  1C03               	skipc
  2537  0770  2F77               	goto	l1811
  2538  0771  0828               	movf	___lwmod@divisor,w
  2539  0772  02AA               	subwf	___lwmod@dividend,f
  2540  0773  0829               	movf	___lwmod@divisor+1,w
  2541  0774  1C03               	skipc
  2542  0775  03AB               	decf	___lwmod@dividend+1,f
  2543  0776  02AB               	subwf	___lwmod@dividend+1,f
  2544  0777                     l1811:	
  2545  0777  3001               	movlw	1
  2546  0778                     u1295:	
  2547  0778  1003               	clrc
  2548  0779  0CA9               	rrf	___lwmod@divisor+1,f
  2549  077A  0CA8               	rrf	___lwmod@divisor,f
  2550  077B  3EFF               	addlw	-1
  2551  077C  1D03               	skipz
  2552  077D  2F78               	goto	u1295
  2553  077E  3001               	movlw	1
  2554  077F  02AD               	subwf	___lwmod@counter,f
  2555  0780  1D03               	btfss	3,2
  2556  0781  2F69               	goto	l1807
  2557  0782                     l1815:	
  2558  0782  082B               	movf	___lwmod@dividend+1,w
  2559  0783  00A9               	movwf	?___lwmod+1
  2560  0784  082A               	movf	___lwmod@dividend,w
  2561  0785  00A8               	movwf	?___lwmod
  2562  0786  0008               	return
  2563  0787                     __end_of___lwmod:	
  2564                           
  2565                           	psect	text9
  2566  0632                     __ptext9:	
  2567 ;; *************** function ___lwdiv *****************
  2568 ;; Defined at:
  2569 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;  divisor         2    0[BANK0 ] unsigned int 
  2572 ;;  dividend        2    2[BANK0 ] unsigned int 
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;  quotient        2    5[BANK0 ] unsigned int 
  2575 ;;  counter         1    7[BANK0 ] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  2    0[BANK0 ] unsigned int 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2585 ;;      Params:         0       4       0       0       0
  2586 ;;      Locals:         0       3       0       0       0
  2587 ;;      Temps:          0       1       0       0       0
  2588 ;;      Totals:         0       8       0       0       0
  2589 ;;Total ram usage:        8 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    1
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_sprintf
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           
  2600                           ;psect for function ___lwdiv
  2601  0632                     ___lwdiv:	
  2602                           
  2603                           ;incstack = 0
  2604                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2605  0632  1283               	bcf	3,5	;RP0=0, select bank0
  2606  0633  1303               	bcf	3,6	;RP1=0, select bank0
  2607  0634  01A5               	clrf	___lwdiv@quotient
  2608  0635  01A6               	clrf	___lwdiv@quotient+1
  2609  0636  0820               	movf	___lwdiv@divisor,w
  2610  0637  0421               	iorwf	___lwdiv@divisor+1,w
  2611  0638  1903               	btfsc	3,2
  2612  0639  2E6B               	goto	l1793
  2613  063A  01A7               	clrf	___lwdiv@counter
  2614  063B  0AA7               	incf	___lwdiv@counter,f
  2615  063C                     l1781:	
  2616  063C  1BA1               	btfsc	___lwdiv@divisor+1,7
  2617  063D  2E4A               	goto	l1783
  2618  063E  3001               	movlw	1
  2619  063F                     u1195:	
  2620  063F  1003               	clrc
  2621  0640  0DA0               	rlf	___lwdiv@divisor,f
  2622  0641  0DA1               	rlf	___lwdiv@divisor+1,f
  2623  0642  3EFF               	addlw	-1
  2624  0643  1D03               	skipz
  2625  0644  2E3F               	goto	u1195
  2626  0645  3001               	movlw	1
  2627  0646  00A4               	movwf	??___lwdiv
  2628  0647  0824               	movf	??___lwdiv,w
  2629  0648  07A7               	addwf	___lwdiv@counter,f
  2630  0649  2E3C               	goto	l1781
  2631  064A                     l1783:	
  2632  064A  3001               	movlw	1
  2633  064B                     u1215:	
  2634  064B  1003               	clrc
  2635  064C  0DA5               	rlf	___lwdiv@quotient,f
  2636  064D  0DA6               	rlf	___lwdiv@quotient+1,f
  2637  064E  3EFF               	addlw	-1
  2638  064F  1D03               	skipz
  2639  0650  2E4B               	goto	u1215
  2640  0651  0821               	movf	___lwdiv@divisor+1,w
  2641  0652  0223               	subwf	___lwdiv@dividend+1,w
  2642  0653  1D03               	skipz
  2643  0654  2E57               	goto	u1225
  2644  0655  0820               	movf	___lwdiv@divisor,w
  2645  0656  0222               	subwf	___lwdiv@dividend,w
  2646  0657                     u1225:	
  2647  0657  1C03               	skipc
  2648  0658  2E60               	goto	l1789
  2649  0659  0820               	movf	___lwdiv@divisor,w
  2650  065A  02A2               	subwf	___lwdiv@dividend,f
  2651  065B  0821               	movf	___lwdiv@divisor+1,w
  2652  065C  1C03               	skipc
  2653  065D  03A3               	decf	___lwdiv@dividend+1,f
  2654  065E  02A3               	subwf	___lwdiv@dividend+1,f
  2655  065F  1425               	bsf	___lwdiv@quotient,0
  2656  0660                     l1789:	
  2657  0660  3001               	movlw	1
  2658  0661                     u1235:	
  2659  0661  1003               	clrc
  2660  0662  0CA1               	rrf	___lwdiv@divisor+1,f
  2661  0663  0CA0               	rrf	___lwdiv@divisor,f
  2662  0664  3EFF               	addlw	-1
  2663  0665  1D03               	skipz
  2664  0666  2E61               	goto	u1235
  2665  0667  3001               	movlw	1
  2666  0668  02A7               	subwf	___lwdiv@counter,f
  2667  0669  1D03               	btfss	3,2
  2668  066A  2E4A               	goto	l1783
  2669  066B                     l1793:	
  2670  066B  0826               	movf	___lwdiv@quotient+1,w
  2671  066C  00A1               	movwf	?___lwdiv+1
  2672  066D  0825               	movf	___lwdiv@quotient,w
  2673  066E  00A0               	movwf	?___lwdiv
  2674  066F  0008               	return
  2675  0670                     __end_of___lwdiv:	
  2676                           
  2677                           	psect	text10
  2678  06E9                     __ptext10:	
  2679 ;; *************** function _putst *****************
  2680 ;; Defined at:
  2681 ;;		line 211 in file "serial.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;  str             1    wreg     PTR const unsigned char 
  2684 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  str             1    3[BANK0 ] PTR const unsigned char 
  2687 ;;		 -> main@sVar(20), PrintSetpoint@sVar(20), 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2697 ;;      Params:         0       0       0       0       0
  2698 ;;      Locals:         0       1       0       0       0
  2699 ;;      Temps:          0       1       0       0       0
  2700 ;;      Totals:         0       2       0       0       0
  2701 ;;Total ram usage:        2 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    2
  2704 ;; This function calls:
  2705 ;;		_putch
  2706 ;; This function is called by:
  2707 ;;		_PrintSetpoint
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           
  2713                           ;psect for function _putst
  2714  06E9                     _putst:	
  2715                           
  2716                           ;incstack = 0
  2717                           ; Regs used in _putst: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2718                           ;putst@str stored from wreg
  2719  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  2720  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  2721  06EB  00A3               	movwf	putst@str
  2722  06EC                     l1833:	
  2723                           ;serial.c: 212: while((*str)!=0) {
  2724                           
  2725  06EC  0823               	movf	putst@str,w
  2726  06ED  0084               	movwf	4
  2727  06EE  1383               	bcf	3,7	;select IRP bank0
  2728  06EF  0800               	movf	0,w
  2729  06F0  1903               	btfsc	3,2
  2730  06F1  0008               	return
  2731                           
  2732                           ;serial.c: 213: putch(*str);
  2733  06F2  0823               	movf	putst@str,w
  2734  06F3  0084               	movwf	4
  2735  06F4  0800               	movf	0,w
  2736  06F5  120A  158A  27B0  120A  118A  	fcall	_putch
  2737                           
  2738                           ;serial.c: 214: if (*str==13) putch(10);
  2739  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2740  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2741  06FC  0823               	movf	putst@str,w
  2742  06FD  0084               	movwf	4
  2743  06FE  300D               	movlw	13
  2744  06FF  1383               	bcf	3,7	;select IRP bank0
  2745  0700  0600               	xorwf	0,w
  2746  0701  1D03               	btfss	3,2
  2747  0702  2F09               	goto	l1827
  2748  0703  300A               	movlw	10
  2749  0704  120A  158A  27B0  120A  118A  	fcall	_putch
  2750  0709                     l1827:	
  2751                           
  2752                           ;serial.c: 215: if (*str==10) putch(13);
  2753  0709  1283               	bcf	3,5	;RP0=0, select bank0
  2754  070A  1303               	bcf	3,6	;RP1=0, select bank0
  2755  070B  0823               	movf	putst@str,w
  2756  070C  0084               	movwf	4
  2757  070D  300A               	movlw	10
  2758  070E  1383               	bcf	3,7	;select IRP bank0
  2759  070F  0600               	xorwf	0,w
  2760  0710  1D03               	btfss	3,2
  2761  0711  2F18               	goto	l1831
  2762  0712  300D               	movlw	13
  2763  0713  120A  158A  27B0  120A  118A  	fcall	_putch
  2764  0718                     l1831:	
  2765                           
  2766                           ;serial.c: 216: str++;
  2767  0718  3001               	movlw	1
  2768  0719  1283               	bcf	3,5	;RP0=0, select bank0
  2769  071A  1303               	bcf	3,6	;RP1=0, select bank0
  2770  071B  00A2               	movwf	??_putst
  2771  071C  0822               	movf	??_putst,w
  2772  071D  07A3               	addwf	putst@str,f
  2773  071E  2EEC               	goto	l1833
  2774  071F                     __end_of_putst:	
  2775                           
  2776                           	psect	text11
  2777  0FB0                     __ptext11:	
  2778 ;; *************** function _putch *****************
  2779 ;; Defined at:
  2780 ;;		line 95 in file "serial.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  c               1    wreg     unsigned char 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  c               1    1[BANK0 ] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2794 ;;      Params:         0       0       0       0       0
  2795 ;;      Locals:         0       1       0       0       0
  2796 ;;      Temps:          0       1       0       0       0
  2797 ;;      Totals:         0       2       0       0       0
  2798 ;;Total ram usage:        2 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    1
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_putst
  2805 ;;		_putchhex
  2806 ;;		_putchdec
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           
  2811                           ;psect for function _putch
  2812  0FB0                     _putch:	
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _putch: [wreg]
  2816                           ;putch@c stored from wreg
  2817  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0FB2  00A1               	movwf	putch@c
  2820  0FB3                     l1767:	
  2821                           ;serial.c: 96: while(!TXIF) {
  2822                           
  2823  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  2824  0FB4  1303               	bcf	3,6	;RP1=0, select bank0
  2825  0FB5  1A0C               	btfsc	12,4	;volatile
  2826  0FB6  2FCD               	goto	l1769
  2827                           
  2828                           ;serial.c: 97: if (OERR) { TXEN=0; TXEN=1; CREN=0; CREN=1; } if (FERR) { dummy=RCREG; TX
      +                          EN=0; TXEN=1; };
  2829  0FB7  1C98               	btfss	24,1	;volatile
  2830  0FB8  2FC1               	goto	l82
  2831  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  2832  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  2833  0FBB  1298               	bcf	24,5	;volatile
  2834  0FBC  1698               	bsf	24,5	;volatile
  2835  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2837  0FBF  1218               	bcf	24,4	;volatile
  2838  0FC0  1618               	bsf	24,4	;volatile
  2839  0FC1                     l82:	
  2840  0FC1  1D18               	btfss	24,2	;volatile
  2841  0FC2  2FCB               	goto	l83
  2842  0FC3  081A               	movf	26,w	;volatile
  2843  0FC4  00A0               	movwf	??_putch
  2844  0FC5  0820               	movf	??_putch,w
  2845  0FC6  00F5               	movwf	_dummy
  2846  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  2847  0FC8  1303               	bcf	3,6	;RP1=0, select bank1
  2848  0FC9  1298               	bcf	24,5	;volatile
  2849  0FCA  1698               	bsf	24,5	;volatile
  2850  0FCB                     l83:	
  2851  0FCB  0064               	clrwdt	;# 
  2852  0FCC  2FB3               	goto	l1767
  2853  0FCD                     l1769:	
  2854                           
  2855                           ;serial.c: 99: };serial.c: 100: TXREG=c;
  2856  0FCD  0821               	movf	putch@c,w
  2857  0FCE  0099               	movwf	25	;volatile
  2858                           
  2859                           ;serial.c: 101: { delayus_variable=(unsigned char)(60/1); asm("nop"); asm("nop"); } asm(
      +                          "decfsz _delayus_variable,f"); asm("goto $ - 3");;
  2860  0FCF  303C               	movlw	60
  2861  0FD0  00A0               	movwf	??_putch
  2862  0FD1  0820               	movf	??_putch,w
  2863  0FD2  00F6               	movwf	_delayus_variable
  2864  0FD3  0000               	nop	;# 
  2865  0FD4  0000               	nop	;# 
  2866  0FD5  0BF6               	decfsz	_delayus_variable,f	;# 
  2867  0FD6  2FAD               	goto	($+-3)	;# 
  2868  0FD7  0008               	return
  2869  0FD8                     __end_of_putch:	
  2870                           
  2871                           	psect	text12
  2872  0F45                     __ptext12:	
  2873 ;; *************** function _getServoState *****************
  2874 ;; Defined at:
  2875 ;;		line 18 in file "servoController.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;		None
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;		None
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  2    0[BANK0 ] int 
  2882 ;; Registers used:
  2883 ;;		wreg, status,0
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2889 ;;      Params:         0       2       0       0       0
  2890 ;;      Locals:         0       0       0       0       0
  2891 ;;      Temps:          0       2       0       0       0
  2892 ;;      Totals:         0       4       0       0       0
  2893 ;;Total ram usage:        4 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    1
  2896 ;; This function calls:
  2897 ;;		Nothing
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _getServoState
  2905  0F45                     _getServoState:	
  2906                           
  2907                           ;servoController.c: 19: return RC3;
  2908                           
  2909                           ;incstack = 0
  2910                           ; Regs used in _getServoState: [wreg+status,0]
  2911  0F45  1003               	clrc
  2912  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0F48  1987               	btfsc	7,3	;volatile
  2915  0F49  1403               	setc
  2916  0F4A  3000               	movlw	0
  2917  0F4B  1803               	skipnc
  2918  0F4C  3001               	movlw	1
  2919  0F4D  00A2               	movwf	??_getServoState
  2920  0F4E  01A3               	clrf	??_getServoState+1
  2921  0F4F  0822               	movf	??_getServoState,w
  2922  0F50  00A0               	movwf	?_getServoState
  2923  0F51  0823               	movf	??_getServoState+1,w
  2924  0F52  00A1               	movwf	?_getServoState+1
  2925  0F53  0008               	return
  2926  0F54                     __end_of_getServoState:	
  2927                           
  2928                           	psect	text13
  2929  0787                     __ptext13:	
  2930 ;; *************** function _getServoCommand *****************
  2931 ;; Defined at:
  2932 ;;		line 22 in file "servoController.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;		None
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;		None
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  2    0[BANK0 ] int 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2946 ;;      Params:         0       2       0       0       0
  2947 ;;      Locals:         0       0       0       0       0
  2948 ;;      Temps:          0       4       0       0       0
  2949 ;;      Totals:         0       6       0       0       0
  2950 ;;Total ram usage:        6 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    1
  2953 ;; This function calls:
  2954 ;;		Nothing
  2955 ;; This function is called by:
  2956 ;;		_main
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           
  2961                           ;psect for function _getServoCommand
  2962  0787                     _getServoCommand:	
  2963                           
  2964                           ;servoController.c: 23: static char lStep;;servoController.c: 24: if (RC4 != lStep){
  2965                           
  2966                           ;incstack = 0
  2967                           ; Regs used in _getServoCommand: [wreg+status,2+status,0]
  2968  0787  3000               	movlw	0
  2969  0788  1283               	bcf	3,5	;RP0=0, select bank0
  2970  0789  1303               	bcf	3,6	;RP1=0, select bank0
  2971  078A  1A07               	btfsc	7,4	;volatile
  2972  078B  3001               	movlw	1
  2973  078C  066B               	xorwf	getServoCommand@lStep,w
  2974  078D  1903               	skipnz
  2975  078E  2FB0               	goto	l2133
  2976                           
  2977                           ;servoController.c: 25: lStep = !lStep;
  2978  078F  086B               	movf	getServoCommand@lStep,w
  2979  0790  1D03               	btfss	3,2
  2980  0791  2F94               	goto	u1770
  2981  0792  3001               	movlw	1
  2982  0793  2F95               	goto	u1780
  2983  0794                     u1770:	
  2984  0794  3000               	movlw	0
  2985  0795                     u1780:	
  2986  0795  00A2               	movwf	??_getServoCommand
  2987  0796  0822               	movf	??_getServoCommand,w
  2988  0797  00EB               	movwf	getServoCommand@lStep
  2989                           
  2990                           ;servoController.c: 26: return ((2*RC5) - 1);
  2991  0798  1003               	clrc
  2992  0799  1A87               	btfsc	7,5	;volatile
  2993  079A  1403               	setc
  2994  079B  3000               	movlw	0
  2995  079C  1803               	skipnc
  2996  079D  3001               	movlw	1
  2997  079E  00A2               	movwf	??_getServoCommand
  2998  079F  01A3               	clrf	??_getServoCommand+1
  2999  07A0  1003               	clrc
  3000  07A1  0DA2               	rlf	??_getServoCommand,f
  3001  07A2  0DA3               	rlf	??_getServoCommand+1,f
  3002  07A3  0822               	movf	??_getServoCommand,w
  3003  07A4  3EFF               	addlw	255
  3004  07A5  00A4               	movwf	??_getServoCommand+2
  3005  07A6  0823               	movf	??_getServoCommand+1,w
  3006  07A7  1803               	skipnc
  3007  07A8  3E01               	addlw	1
  3008  07A9  3EFF               	addlw	255
  3009  07AA  00A5               	movwf	??_getServoCommand+3
  3010  07AB  0824               	movf	??_getServoCommand+2,w
  3011  07AC  00A0               	movwf	?_getServoCommand
  3012  07AD  0825               	movf	??_getServoCommand+3,w
  3013  07AE  00A1               	movwf	?_getServoCommand+1
  3014  07AF  0008               	return
  3015  07B0                     l2133:	
  3016                           
  3017                           ;servoController.c: 28: return 0;
  3018  07B0  01A0               	clrf	?_getServoCommand
  3019  07B1  01A1               	clrf	?_getServoCommand+1
  3020  07B2  0008               	return
  3021  07B3                     __end_of_getServoCommand:	
  3022                           
  3023                           	psect	text14
  3024  0F67                     __ptext14:	
  3025 ;; *************** function _encoders_init *****************
  3026 ;; Defined at:
  3027 ;;		line 251 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;		None
  3030 ;; Auto vars:     Size  Location     Type
  3031 ;;		None
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      void 
  3034 ;; Registers used:
  3035 ;;		wreg, status,2, status,0
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3041 ;;      Params:         0       0       0       0       0
  3042 ;;      Locals:         0       0       0       0       0
  3043 ;;      Temps:          0       2       0       0       0
  3044 ;;      Totals:         0       2       0       0       0
  3045 ;;Total ram usage:        2 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_main
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _encoders_init
  3057  0F67                     _encoders_init:	
  3058                           
  3059                           ;main.c: 254: state1 = (PORTB & 0b00011000) >>3;
  3060                           
  3061                           ;incstack = 0
  3062                           ; Regs used in _encoders_init: [wreg+status,2+status,0]
  3063  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0F69  0806               	movf	6,w	;volatile
  3066  0F6A  00A0               	movwf	??_encoders_init
  3067  0F6B  3003               	movlw	3
  3068  0F6C                     u1755:	
  3069  0F6C  1003               	clrc
  3070  0F6D  0CA0               	rrf	??_encoders_init,f
  3071  0F6E  3EFF               	addlw	-1
  3072  0F6F  1D03               	skipz
  3073  0F70  2F6C               	goto	u1755
  3074  0F71  0820               	movf	??_encoders_init,w
  3075  0F72  3903               	andlw	3
  3076  0F73  00A1               	movwf	??_encoders_init+1
  3077  0F74  0821               	movf	??_encoders_init+1,w
  3078  0F75  00F4               	movwf	_state1	;volatile
  3079                           
  3080                           ;main.c: 255: encoder1_counter = 0;
  3081  0F76  3000               	movlw	0
  3082  0F77  00E4               	movwf	_encoder1_counter+3	;volatile
  3083  0F78  3000               	movlw	0
  3084  0F79  00E3               	movwf	_encoder1_counter+2	;volatile
  3085  0F7A  3000               	movlw	0
  3086  0F7B  00E2               	movwf	_encoder1_counter+1	;volatile
  3087  0F7C  3000               	movlw	0
  3088  0F7D  00E1               	movwf	_encoder1_counter	;volatile
  3089  0F7E  0008               	return
  3090  0F7F                     __end_of_encoders_init:	
  3091                           
  3092                           	psect	text15
  3093  0F35                     __ptext15:	
  3094 ;; *************** function _chkchr *****************
  3095 ;; Defined at:
  3096 ;;		line 142 in file "serial.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      unsigned char 
  3103 ;; Registers used:
  3104 ;;		wreg
  3105 ;; Tracked objects:
  3106 ;;		On entry : 0/0
  3107 ;;		On exit  : 0/0
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3110 ;;      Params:         0       0       0       0       0
  3111 ;;      Locals:         0       0       0       0       0
  3112 ;;      Temps:          0       0       0       0       0
  3113 ;;      Totals:         0       0       0       0       0
  3114 ;;Total ram usage:        0 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    1
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_main
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           
  3125                           ;psect for function _chkchr
  3126  0F35                     _chkchr:	
  3127                           
  3128                           ;serial.c: 143: if (RCIF) {
  3129                           
  3130                           ;incstack = 0
  3131                           ; Regs used in _chkchr: [wreg]
  3132  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  3134  0F37  1E8C               	btfss	12,5	;volatile
  3135  0F38  2F3B               	goto	l2453
  3136                           
  3137                           ;serial.c: 144: return RCREG;
  3138  0F39  081A               	movf	26,w	;volatile
  3139  0F3A  0008               	return
  3140  0F3B                     l2453:	
  3141                           
  3142                           ;serial.c: 145: };serial.c: 146: return 255;
  3143  0F3B  30FF               	movlw	255
  3144  0F3C  0008               	return
  3145  0F3D                     __end_of_chkchr:	
  3146                           
  3147                           	psect	text16
  3148  0206                     __ptext16:	
  3149 ;; *************** function _SetMotor *****************
  3150 ;; Defined at:
  3151 ;;		line 116 in file "main.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  D_Response      2   42[BANK0 ] int 
  3156 ;;  P_Response      2   40[BANK0 ] int 
  3157 ;;  resp            4   46[BANK0 ] long 
  3158 ;;  err             2   44[BANK0 ] int 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3168 ;;      Params:         0       0       0       0       0
  3169 ;;      Locals:         0      10       0       0       0
  3170 ;;      Temps:          0       2       0       0       0
  3171 ;;      Totals:         0      12       0       0       0
  3172 ;;Total ram usage:       12 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    3
  3175 ;; This function calls:
  3176 ;;		___wmul
  3177 ;;		_constrain
  3178 ;;		_pwm_set
  3179 ;; This function is called by:
  3180 ;;		_main
  3181 ;; This function uses a non-reentrant model
  3182 ;;
  3183                           
  3184                           
  3185                           ;psect for function _SetMotor
  3186  0206                     _SetMotor:	
  3187                           
  3188                           ;main.c: 118: static int derivative;;main.c: 119: static int last_err;;main.c: 120: long
      +                           resp;;main.c: 121: int err = set_point - motor_pos;
  3189                           
  3190                           ;incstack = 0
  3191                           ; Regs used in _SetMotor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3192  0206  1283               	bcf	3,5	;RP0=0, select bank0
  3193  0207  1303               	bcf	3,6	;RP1=0, select bank0
  3194  0208  085D               	movf	_motor_pos,w	;volatile
  3195  0209  0259               	subwf	_set_point,w	;volatile
  3196  020A  00CC               	movwf	SetMotor@err
  3197  020B  085E               	movf	_motor_pos+1,w	;volatile
  3198  020C  1C03               	skipc
  3199  020D  0A5E               	incf	_motor_pos+1,w	;volatile
  3200  020E  025A               	subwf	_set_point+1,w	;volatile
  3201  020F  00CD               	movwf	SetMotor@err+1
  3202                           
  3203                           ;main.c: 123: if (onlyK){
  3204  0210  0867               	movf	_onlyK,w
  3205  0211  0468               	iorwf	_onlyK+1,w
  3206  0212  1903               	btfsc	3,2
  3207  0213  2A27               	goto	l2481
  3208                           
  3209                           ;main.c: 124: resp = (err) * 4;
  3210  0214  084D               	movf	SetMotor@err+1,w
  3211  0215  00C7               	movwf	??_SetMotor+1
  3212  0216  084C               	movf	SetMotor@err,w
  3213  0217  00C6               	movwf	??_SetMotor
  3214  0218  1003               	clrc
  3215  0219  0DC6               	rlf	??_SetMotor,f
  3216  021A  0DC7               	rlf	??_SetMotor+1,f
  3217  021B  1003               	clrc
  3218  021C  0DC6               	rlf	??_SetMotor,f
  3219  021D  0DC7               	rlf	??_SetMotor+1,f
  3220  021E  0846               	movf	??_SetMotor,w
  3221  021F  00CE               	movwf	SetMotor@resp
  3222  0220  0847               	movf	??_SetMotor+1,w
  3223  0221  00CF               	movwf	SetMotor@resp+1
  3224  0222  3000               	movlw	0
  3225  0223  1BCF               	btfsc	SetMotor@resp+1,7
  3226  0224  30FF               	movlw	255
  3227  0225  00D0               	movwf	SetMotor@resp+2
  3228  0226  2A60               	goto	L1
  3229  0227                     l2481:	
  3230                           ;main.c: 125: }else{
  3231                           
  3232                           
  3233                           ;main.c: 127: derivative = (err - last_err);
  3234  0227  0865               	movf	SetMotor@last_err,w
  3235  0228  024C               	subwf	SetMotor@err,w
  3236  0229  00ED               	movwf	SetMotor@derivative
  3237  022A  0866               	movf	SetMotor@last_err+1,w
  3238  022B  1C03               	skipc
  3239  022C  0A66               	incf	SetMotor@last_err+1,w
  3240  022D  024D               	subwf	SetMotor@err+1,w
  3241  022E  00EE               	movwf	SetMotor@derivative+1
  3242                           
  3243                           ;main.c: 128: last_err = err;
  3244  022F  084D               	movf	SetMotor@err+1,w
  3245  0230  00E6               	movwf	SetMotor@last_err+1
  3246  0231  084C               	movf	SetMotor@err,w
  3247  0232  00E5               	movwf	SetMotor@last_err
  3248                           
  3249                           ;main.c: 130: int P_Response = 4 * err;
  3250  0233  084D               	movf	SetMotor@err+1,w
  3251  0234  00C7               	movwf	??_SetMotor+1
  3252  0235  084C               	movf	SetMotor@err,w
  3253  0236  00C6               	movwf	??_SetMotor
  3254  0237  1003               	clrc
  3255  0238  0DC6               	rlf	??_SetMotor,f
  3256  0239  0DC7               	rlf	??_SetMotor+1,f
  3257  023A  1003               	clrc
  3258  023B  0DC6               	rlf	??_SetMotor,f
  3259  023C  0DC7               	rlf	??_SetMotor+1,f
  3260  023D  0846               	movf	??_SetMotor,w
  3261  023E  00C8               	movwf	SetMotor@P_Response
  3262  023F  0847               	movf	??_SetMotor+1,w
  3263  0240  00C9               	movwf	SetMotor@P_Response+1
  3264                           
  3265                           ;main.c: 131: int D_Response = (13 * derivative);
  3266  0241  086E               	movf	SetMotor@derivative+1,w
  3267  0242  00A1               	movwf	___wmul@multiplier+1
  3268  0243  086D               	movf	SetMotor@derivative,w
  3269  0244  00A0               	movwf	___wmul@multiplier
  3270  0245  300D               	movlw	13
  3271  0246  00A2               	movwf	___wmul@multiplicand
  3272  0247  3000               	movlw	0
  3273  0248  00A3               	movwf	___wmul@multiplicand+1
  3274  0249  120A  118A  27DD  120A  118A  	fcall	___wmul
  3275  024E  1283               	bcf	3,5	;RP0=0, select bank0
  3276  024F  1303               	bcf	3,6	;RP1=0, select bank0
  3277  0250  0821               	movf	?___wmul+1,w
  3278  0251  00CB               	movwf	SetMotor@D_Response+1
  3279  0252  0820               	movf	?___wmul,w
  3280  0253  00CA               	movwf	SetMotor@D_Response
  3281                           
  3282                           ;main.c: 133: resp = P_Response + D_Response;
  3283  0254  084A               	movf	SetMotor@D_Response,w
  3284  0255  0748               	addwf	SetMotor@P_Response,w
  3285  0256  00CE               	movwf	SetMotor@resp
  3286  0257  084B               	movf	SetMotor@D_Response+1,w
  3287  0258  1803               	skipnc
  3288  0259  0A4B               	incf	SetMotor@D_Response+1,w
  3289  025A  0749               	addwf	SetMotor@P_Response+1,w
  3290  025B  00CF               	movwf	SetMotor@resp+1
  3291  025C  01D0               	clrf	SetMotor@resp+2
  3292  025D  1BCF               	btfsc	SetMotor@resp+1,7
  3293  025E  03D0               	decf	SetMotor@resp+2,f
  3294  025F  0850               	movf	SetMotor@resp+2,w
  3295  0260                     L1:	
  3296  0260  00D1               	movwf	SetMotor@resp+3
  3297                           
  3298                           ;main.c: 134: };main.c: 136: resp = constrain(resp, -255,255 );
  3299  0261  0851               	movf	SetMotor@resp+3,w
  3300  0262  00A3               	movwf	constrain@value+3
  3301  0263  0850               	movf	SetMotor@resp+2,w
  3302  0264  00A2               	movwf	constrain@value+2
  3303  0265  084F               	movf	SetMotor@resp+1,w
  3304  0266  00A1               	movwf	constrain@value+1
  3305  0267  084E               	movf	SetMotor@resp,w
  3306  0268  00A0               	movwf	constrain@value
  3307  0269  30FF               	movlw	255
  3308  026A  00A7               	movwf	constrain@lLimit+3
  3309  026B  30FF               	movlw	255
  3310  026C  00A6               	movwf	constrain@lLimit+2
  3311  026D  30FF               	movlw	255
  3312  026E  00A5               	movwf	constrain@lLimit+1
  3313  026F  3001               	movlw	1
  3314  0270  00A4               	movwf	constrain@lLimit
  3315  0271  3000               	movlw	0
  3316  0272  00AB               	movwf	constrain@uLimit+3
  3317  0273  3000               	movlw	0
  3318  0274  00AA               	movwf	constrain@uLimit+2
  3319  0275  3000               	movlw	0
  3320  0276  00A9               	movwf	constrain@uLimit+1
  3321  0277  30FF               	movlw	255
  3322  0278  00A8               	movwf	constrain@uLimit
  3323  0279  120A  118A  26AD  120A  118A  	fcall	_constrain
  3324  027E  1283               	bcf	3,5	;RP0=0, select bank0
  3325  027F  1303               	bcf	3,6	;RP1=0, select bank0
  3326  0280  0823               	movf	?_constrain+3,w
  3327  0281  00D1               	movwf	SetMotor@resp+3
  3328  0282  0822               	movf	?_constrain+2,w
  3329  0283  00D0               	movwf	SetMotor@resp+2
  3330  0284  0821               	movf	?_constrain+1,w
  3331  0285  00CF               	movwf	SetMotor@resp+1
  3332  0286  0820               	movf	?_constrain,w
  3333  0287  00CE               	movwf	SetMotor@resp
  3334                           
  3335                           ;main.c: 137: if (resp > 0){
  3336  0288  1BD1               	btfsc	SetMotor@resp+3,7
  3337  0289  2ABC               	goto	l296
  3338  028A  0851               	movf	SetMotor@resp+3,w
  3339  028B  1D03               	btfss	3,2
  3340  028C  2A99               	goto	l2495
  3341  028D  0850               	movf	SetMotor@resp+2,w
  3342  028E  1D03               	btfss	3,2
  3343  028F  2A99               	goto	l2495
  3344  0290  084F               	movf	SetMotor@resp+1,w
  3345  0291  1D03               	btfss	3,2
  3346  0292  2A99               	goto	l2495
  3347  0293  3001               	movlw	1
  3348  0294  024E               	subwf	SetMotor@resp,w
  3349  0295  1D03               	skipz
  3350  0296  2A97               	goto	u2213
  3351  0297                     u2213:	
  3352  0297  1C03               	btfss	3,0
  3353  0298  2ABC               	goto	l296
  3354  0299                     l2495:	
  3355                           
  3356                           ;main.c: 138: pwm_set(1, resp );
  3357  0299  3001               	movlw	1
  3358  029A  00BC               	movwf	pwm_set@channel
  3359  029B  3000               	movlw	0
  3360  029C  00BD               	movwf	pwm_set@channel+1
  3361  029D  0851               	movf	SetMotor@resp+3,w
  3362  029E  00C1               	movwf	pwm_set@duty_cycle+3
  3363  029F  0850               	movf	SetMotor@resp+2,w
  3364  02A0  00C0               	movwf	pwm_set@duty_cycle+2
  3365  02A1  084F               	movf	SetMotor@resp+1,w
  3366  02A2  00BF               	movwf	pwm_set@duty_cycle+1
  3367  02A3  084E               	movf	SetMotor@resp,w
  3368  02A4  00BE               	movwf	pwm_set@duty_cycle
  3369  02A5  120A  118A  2570  120A  118A  	fcall	_pwm_set
  3370                           
  3371                           ;main.c: 139: pwm_set(2, 0 );
  3372  02AA  3002               	movlw	2
  3373  02AB  1283               	bcf	3,5	;RP0=0, select bank0
  3374  02AC  1303               	bcf	3,6	;RP1=0, select bank0
  3375  02AD  00BC               	movwf	pwm_set@channel
  3376  02AE  3000               	movlw	0
  3377  02AF  00BD               	movwf	pwm_set@channel+1
  3378  02B0  3000               	movlw	0
  3379  02B1  00C1               	movwf	pwm_set@duty_cycle+3
  3380  02B2  3000               	movlw	0
  3381  02B3  00C0               	movwf	pwm_set@duty_cycle+2
  3382  02B4  3000               	movlw	0
  3383  02B5  00BF               	movwf	pwm_set@duty_cycle+1
  3384  02B6  3000               	movlw	0
  3385  02B7  00BE               	movwf	pwm_set@duty_cycle
  3386  02B8  120A  118A  2570   	fcall	_pwm_set
  3387                           
  3388                           ;main.c: 140: }else if(resp < 0){
  3389  02BB  0008               	return
  3390  02BC                     l296:	
  3391  02BC  1FD1               	btfss	SetMotor@resp+3,7
  3392  02BD  2AE8               	goto	l2499
  3393                           
  3394                           ;main.c: 141: pwm_set(1, 0 );
  3395  02BE  3001               	movlw	1
  3396  02BF  00BC               	movwf	pwm_set@channel
  3397  02C0  3000               	movlw	0
  3398  02C1  00BD               	movwf	pwm_set@channel+1
  3399  02C2  3000               	movlw	0
  3400  02C3  00C1               	movwf	pwm_set@duty_cycle+3
  3401  02C4  3000               	movlw	0
  3402  02C5  00C0               	movwf	pwm_set@duty_cycle+2
  3403  02C6  3000               	movlw	0
  3404  02C7  00BF               	movwf	pwm_set@duty_cycle+1
  3405  02C8  3000               	movlw	0
  3406  02C9  00BE               	movwf	pwm_set@duty_cycle
  3407  02CA  120A  118A  2570  120A  118A  	fcall	_pwm_set
  3408                           
  3409                           ;main.c: 142: pwm_set(2, -resp );
  3410  02CF  3002               	movlw	2
  3411  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  3412  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  3413  02D2  00BC               	movwf	pwm_set@channel
  3414  02D3  3000               	movlw	0
  3415  02D4  00BD               	movwf	pwm_set@channel+1
  3416  02D5  094E               	comf	SetMotor@resp,w
  3417  02D6  00BE               	movwf	pwm_set@duty_cycle
  3418  02D7  094F               	comf	SetMotor@resp+1,w
  3419  02D8  00BF               	movwf	pwm_set@duty_cycle+1
  3420  02D9  0950               	comf	SetMotor@resp+2,w
  3421  02DA  00C0               	movwf	pwm_set@duty_cycle+2
  3422  02DB  0951               	comf	SetMotor@resp+3,w
  3423  02DC  00C1               	movwf	pwm_set@duty_cycle+3
  3424  02DD  0ABE               	incf	pwm_set@duty_cycle,f
  3425  02DE  1903               	skipnz
  3426  02DF  0ABF               	incf	pwm_set@duty_cycle+1,f
  3427  02E0  1903               	skipnz
  3428  02E1  0AC0               	incf	pwm_set@duty_cycle+2,f
  3429  02E2  1903               	skipnz
  3430  02E3  0AC1               	incf	pwm_set@duty_cycle+3,f
  3431  02E4  120A  118A  2570   	fcall	_pwm_set
  3432                           
  3433                           ;main.c: 143: }else{
  3434  02E7  0008               	return
  3435  02E8                     l2499:	
  3436                           
  3437                           ;main.c: 144: pwm_set(1, 0 );
  3438  02E8  3001               	movlw	1
  3439  02E9  00BC               	movwf	pwm_set@channel
  3440  02EA  3000               	movlw	0
  3441  02EB  00BD               	movwf	pwm_set@channel+1
  3442  02EC  3000               	movlw	0
  3443  02ED  00C1               	movwf	pwm_set@duty_cycle+3
  3444  02EE  3000               	movlw	0
  3445  02EF  00C0               	movwf	pwm_set@duty_cycle+2
  3446  02F0  3000               	movlw	0
  3447  02F1  00BF               	movwf	pwm_set@duty_cycle+1
  3448  02F2  3000               	movlw	0
  3449  02F3  00BE               	movwf	pwm_set@duty_cycle
  3450  02F4  120A  118A  2570  120A  118A  	fcall	_pwm_set
  3451                           
  3452                           ;main.c: 145: pwm_set(2, 0 );
  3453  02F9  3002               	movlw	2
  3454  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  3455  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  3456  02FC  00BC               	movwf	pwm_set@channel
  3457  02FD  3000               	movlw	0
  3458  02FE  00BD               	movwf	pwm_set@channel+1
  3459  02FF  3000               	movlw	0
  3460  0300  00C1               	movwf	pwm_set@duty_cycle+3
  3461  0301  3000               	movlw	0
  3462  0302  00C0               	movwf	pwm_set@duty_cycle+2
  3463  0303  3000               	movlw	0
  3464  0304  00BF               	movwf	pwm_set@duty_cycle+1
  3465  0305  3000               	movlw	0
  3466  0306  00BE               	movwf	pwm_set@duty_cycle
  3467  0307  120A  118A  2570   	fcall	_pwm_set
  3468  030A  0008               	return
  3469  030B                     __end_of_SetMotor:	
  3470                           
  3471                           	psect	text17
  3472  0570                     __ptext17:	
  3473 ;; *************** function _pwm_set *****************
  3474 ;; Defined at:
  3475 ;;		line 72 in file "pwm.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  channel         2   28[BANK0 ] int 
  3478 ;;  duty_cycle      4   30[BANK0 ] long 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3490 ;;      Params:         0       6       0       0       0
  3491 ;;      Locals:         0       0       0       0       0
  3492 ;;      Temps:          0       4       0       0       0
  3493 ;;      Totals:         0      10       0       0       0
  3494 ;;Total ram usage:       10 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    2
  3497 ;; This function calls:
  3498 ;;		___aldiv
  3499 ;;		___lmul
  3500 ;; This function is called by:
  3501 ;;		_SetMotor
  3502 ;;		_motor_reset
  3503 ;;		_main
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           
  3508                           ;psect for function _pwm_set
  3509  0570                     _pwm_set:	
  3510                           
  3511                           ;pwm.c: 76: if ((duty_cycle >= 0)&&(duty_cycle <=255)){
  3512                           
  3513                           ;incstack = 0
  3514                           ; Regs used in _pwm_set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3515  0570  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0571  1303               	bcf	3,6	;RP1=0, select bank0
  3517  0572  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  3518  0573  0008               	return
  3519  0574  1BC1               	btfsc	pwm_set@duty_cycle+3,7
  3520  0575  2D86               	goto	l1955
  3521  0576  0841               	movf	pwm_set@duty_cycle+3,w
  3522  0577  1D03               	btfss	3,2
  3523  0578  0008               	return
  3524  0579  0840               	movf	pwm_set@duty_cycle+2,w
  3525  057A  1D03               	btfss	3,2
  3526  057B  0008               	return
  3527  057C  3001               	movlw	1
  3528  057D  023F               	subwf	pwm_set@duty_cycle+1,w
  3529  057E  1D03               	skipz
  3530  057F  2D84               	goto	u1573
  3531  0580  3000               	movlw	0
  3532  0581  023E               	subwf	pwm_set@duty_cycle,w
  3533  0582  1D03               	skipz
  3534  0583  2D84               	goto	u1573
  3535  0584                     u1573:	
  3536  0584  1803               	btfsc	3,0
  3537  0585  0008               	return
  3538  0586                     l1955:	
  3539                           
  3540                           ;pwm.c: 77: if (duty_cycle !=0){
  3541  0586  0841               	movf	pwm_set@duty_cycle+3,w
  3542  0587  0440               	iorwf	pwm_set@duty_cycle+2,w
  3543  0588  043F               	iorwf	pwm_set@duty_cycle+1,w
  3544  0589  043E               	iorwf	pwm_set@duty_cycle,w
  3545  058A  1903               	skipnz
  3546  058B  2DE3               	goto	l1965
  3547                           
  3548                           ;pwm.c: 78: duty_cycle = 32 + ((223 * duty_cycle/255));
  3549  058C  3020               	movlw	32
  3550  058D  00C2               	movwf	??_pwm_set
  3551  058E  3000               	movlw	0
  3552  058F  00C3               	movwf	??_pwm_set+1
  3553  0590  3000               	movlw	0
  3554  0591  00C4               	movwf	??_pwm_set+2
  3555  0592  3000               	movlw	0
  3556  0593  00C5               	movwf	??_pwm_set+3
  3557  0594  3000               	movlw	0
  3558  0595  00B0               	movwf	___aldiv@divisor+3
  3559  0596  3000               	movlw	0
  3560  0597  00AF               	movwf	___aldiv@divisor+2
  3561  0598  3000               	movlw	0
  3562  0599  00AE               	movwf	___aldiv@divisor+1
  3563  059A  30FF               	movlw	255
  3564  059B  00AD               	movwf	___aldiv@divisor
  3565  059C  0841               	movf	pwm_set@duty_cycle+3,w
  3566  059D  00A3               	movwf	___lmul@multiplier+3
  3567  059E  0840               	movf	pwm_set@duty_cycle+2,w
  3568  059F  00A2               	movwf	___lmul@multiplier+2
  3569  05A0  083F               	movf	pwm_set@duty_cycle+1,w
  3570  05A1  00A1               	movwf	___lmul@multiplier+1
  3571  05A2  083E               	movf	pwm_set@duty_cycle,w
  3572  05A3  00A0               	movwf	___lmul@multiplier
  3573  05A4  3000               	movlw	0
  3574  05A5  00A7               	movwf	___lmul@multiplicand+3
  3575  05A6  3000               	movlw	0
  3576  05A7  00A6               	movwf	___lmul@multiplicand+2
  3577  05A8  3000               	movlw	0
  3578  05A9  00A5               	movwf	___lmul@multiplicand+1
  3579  05AA  30DF               	movlw	223
  3580  05AB  00A4               	movwf	___lmul@multiplicand
  3581  05AC  120A  118A  25F1  120A  118A  	fcall	___lmul
  3582  05B1  1283               	bcf	3,5	;RP0=0, select bank0
  3583  05B2  1303               	bcf	3,6	;RP1=0, select bank0
  3584  05B3  0823               	movf	?___lmul+3,w
  3585  05B4  00B4               	movwf	___aldiv@dividend+3
  3586  05B5  0822               	movf	?___lmul+2,w
  3587  05B6  00B3               	movwf	___aldiv@dividend+2
  3588  05B7  0821               	movf	?___lmul+1,w
  3589  05B8  00B2               	movwf	___aldiv@dividend+1
  3590  05B9  0820               	movf	?___lmul,w
  3591  05BA  00B1               	movwf	___aldiv@dividend
  3592  05BB  120A  118A  24E1  120A  118A  	fcall	___aldiv
  3593  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  3594  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  3595  05C2  082D               	movf	?___aldiv,w
  3596  05C3  07C2               	addwf	??_pwm_set,f
  3597  05C4  082E               	movf	?___aldiv+1,w
  3598  05C5  1803               	skipnc
  3599  05C6  0F2E               	incfsz	?___aldiv+1,w
  3600  05C7  2DC9               	goto	u1590
  3601  05C8  2DCA               	goto	u1591
  3602  05C9                     u1590:	
  3603  05C9  07C3               	addwf	??_pwm_set+1,f
  3604  05CA                     u1591:	
  3605  05CA  082F               	movf	?___aldiv+2,w
  3606  05CB  1803               	skipnc
  3607  05CC  0F2F               	incfsz	?___aldiv+2,w
  3608  05CD  2DCF               	goto	u1592
  3609  05CE  2DD0               	goto	u1593
  3610  05CF                     u1592:	
  3611  05CF  07C4               	addwf	??_pwm_set+2,f
  3612  05D0                     u1593:	
  3613  05D0  0830               	movf	?___aldiv+3,w
  3614  05D1  1803               	skipnc
  3615  05D2  0A30               	incf	?___aldiv+3,w
  3616  05D3  07C5               	addwf	??_pwm_set+3,f
  3617  05D4  0845               	movf	??_pwm_set+3,w
  3618  05D5  00C1               	movwf	pwm_set@duty_cycle+3
  3619  05D6  0844               	movf	??_pwm_set+2,w
  3620  05D7  00C0               	movwf	pwm_set@duty_cycle+2
  3621  05D8  0843               	movf	??_pwm_set+1,w
  3622  05D9  00BF               	movwf	pwm_set@duty_cycle+1
  3623  05DA  0842               	movf	??_pwm_set,w
  3624  05DB  00BE               	movwf	pwm_set@duty_cycle
  3625  05DC  2DE3               	goto	l1965
  3626  05DD                     l1959:	
  3627                           
  3628                           ;pwm.c: 82: CCPR1L = duty_cycle;
  3629  05DD  083E               	movf	pwm_set@duty_cycle,w
  3630  05DE  0095               	movwf	21	;volatile
  3631                           
  3632                           ;pwm.c: 83: break;
  3633  05DF  0008               	return
  3634  05E0                     l1961:	
  3635                           
  3636                           ;pwm.c: 85: CCPR2L = duty_cycle;
  3637  05E0  083E               	movf	pwm_set@duty_cycle,w
  3638  05E1  009B               	movwf	27	;volatile
  3639                           
  3640                           ;pwm.c: 86: break;
  3641  05E2  0008               	return
  3642  05E3                     l1965:	
  3643                           
  3644                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3645                           ; Switch size 1, requested type "simple"
  3646                           ; Number of cases is 1, Range of values is 0 to 0
  3647                           ; switch strategies available:
  3648                           ; Name         Instructions Cycles
  3649                           ; simple_byte            4     3 (average)
  3650                           ; direct_byte           11     8 (fixed)
  3651                           ; jumptable            260     6 (fixed)
  3652                           ;	Chosen strategy is simple_byte
  3653  05E3  083D               	movf	pwm_set@channel+1,w
  3654  05E4  3A00               	xorlw	0	; case 0
  3655  05E5  1903               	skipnz
  3656  05E6  2DE8               	goto	l2673
  3657  05E7  2DF0               	goto	l182
  3658  05E8                     l2673:	
  3659                           
  3660                           ; Switch size 1, requested type "simple"
  3661                           ; Number of cases is 2, Range of values is 1 to 2
  3662                           ; switch strategies available:
  3663                           ; Name         Instructions Cycles
  3664                           ; simple_byte            7     4 (average)
  3665                           ; direct_byte           17    11 (fixed)
  3666                           ; jumptable            263     9 (fixed)
  3667                           ;	Chosen strategy is simple_byte
  3668  05E8  083C               	movf	pwm_set@channel,w
  3669  05E9  3A01               	xorlw	1	; case 1
  3670  05EA  1903               	skipnz
  3671  05EB  2DDD               	goto	l1959
  3672  05EC  3A03               	xorlw	3	; case 2
  3673  05ED  1903               	skipnz
  3674  05EE  2DE0               	goto	l1961
  3675  05EF  2DF0               	goto	l182
  3676  05F0                     l182:	
  3677  05F0  0008               	return
  3678  05F1                     __end_of_pwm_set:	
  3679                           
  3680                           	psect	text18
  3681  05F1                     __ptext18:	
  3682 ;; *************** function ___lmul *****************
  3683 ;; Defined at:
  3684 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3687 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  product         4    9[BANK0 ] unsigned long 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  4    0[BANK0 ] unsigned long 
  3692 ;; Registers used:
  3693 ;;		wreg, status,2, status,0
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3699 ;;      Params:         0       8       0       0       0
  3700 ;;      Locals:         0       4       0       0       0
  3701 ;;      Temps:          0       1       0       0       0
  3702 ;;      Totals:         0      13       0       0       0
  3703 ;;Total ram usage:       13 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    1
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_pwm_set
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           
  3714                           ;psect for function ___lmul
  3715  05F1                     ___lmul:	
  3716                           
  3717                           ;incstack = 0
  3718                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3719  05F1  3000               	movlw	0
  3720  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  3721  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  3722  05F4  00AC               	movwf	___lmul@product+3
  3723  05F5  3000               	movlw	0
  3724  05F6  00AB               	movwf	___lmul@product+2
  3725  05F7  3000               	movlw	0
  3726  05F8  00AA               	movwf	___lmul@product+1
  3727  05F9  3000               	movlw	0
  3728  05FA  00A9               	movwf	___lmul@product
  3729  05FB                     l1899:	
  3730  05FB  1C20               	btfss	___lmul@multiplier,0
  3731  05FC  2E11               	goto	l1903
  3732  05FD  0824               	movf	___lmul@multiplicand,w
  3733  05FE  07A9               	addwf	___lmul@product,f
  3734  05FF  0825               	movf	___lmul@multiplicand+1,w
  3735  0600  1103               	clrz
  3736  0601  1803               	skipnc
  3737  0602  3E01               	addlw	1
  3738  0603  1D03               	btfss	3,2
  3739  0604  07AA               	addwf	___lmul@product+1,f
  3740  0605  0826               	movf	___lmul@multiplicand+2,w
  3741  0606  1103               	clrz
  3742  0607  1803               	skipnc
  3743  0608  3E01               	addlw	1
  3744  0609  1D03               	btfss	3,2
  3745  060A  07AB               	addwf	___lmul@product+2,f
  3746  060B  0827               	movf	___lmul@multiplicand+3,w
  3747  060C  1103               	clrz
  3748  060D  1803               	skipnc
  3749  060E  3E01               	addlw	1
  3750  060F  1D03               	btfss	3,2
  3751  0610  07AC               	addwf	___lmul@product+3,f
  3752  0611                     l1903:	
  3753  0611  3001               	movlw	1
  3754  0612  00A8               	movwf	??___lmul
  3755  0613                     u1435:	
  3756  0613  1003               	clrc
  3757  0614  0DA4               	rlf	___lmul@multiplicand,f
  3758  0615  0DA5               	rlf	___lmul@multiplicand+1,f
  3759  0616  0DA6               	rlf	___lmul@multiplicand+2,f
  3760  0617  0DA7               	rlf	___lmul@multiplicand+3,f
  3761  0618  0BA8               	decfsz	??___lmul,f
  3762  0619  2E13               	goto	u1435
  3763  061A  3001               	movlw	1
  3764  061B                     u1445:	
  3765  061B  1003               	clrc
  3766  061C  0CA3               	rrf	___lmul@multiplier+3,f
  3767  061D  0CA2               	rrf	___lmul@multiplier+2,f
  3768  061E  0CA1               	rrf	___lmul@multiplier+1,f
  3769  061F  0CA0               	rrf	___lmul@multiplier,f
  3770  0620  3EFF               	addlw	-1
  3771  0621  1D03               	skipz
  3772  0622  2E1B               	goto	u1445
  3773  0623  0823               	movf	___lmul@multiplier+3,w
  3774  0624  0422               	iorwf	___lmul@multiplier+2,w
  3775  0625  0421               	iorwf	___lmul@multiplier+1,w
  3776  0626  0420               	iorwf	___lmul@multiplier,w
  3777  0627  1D03               	skipz
  3778  0628  2DFB               	goto	l1899
  3779  0629  082C               	movf	___lmul@product+3,w
  3780  062A  00A3               	movwf	?___lmul+3
  3781  062B  082B               	movf	___lmul@product+2,w
  3782  062C  00A2               	movwf	?___lmul+2
  3783  062D  082A               	movf	___lmul@product+1,w
  3784  062E  00A1               	movwf	?___lmul+1
  3785  062F  0829               	movf	___lmul@product,w
  3786  0630  00A0               	movwf	?___lmul
  3787  0631  0008               	return
  3788  0632                     __end_of___lmul:	
  3789                           
  3790                           	psect	text19
  3791  04E1                     __ptext19:	
  3792 ;; *************** function ___aldiv *****************
  3793 ;; Defined at:
  3794 ;;		line 5 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  divisor         4   13[BANK0 ] long 
  3797 ;;  dividend        4   17[BANK0 ] long 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  quotient        4   24[BANK0 ] long 
  3800 ;;  sign            1   23[BANK0 ] unsigned char 
  3801 ;;  counter         1   22[BANK0 ] unsigned char 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  4   13[BANK0 ] long 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3811 ;;      Params:         0       8       0       0       0
  3812 ;;      Locals:         0       6       0       0       0
  3813 ;;      Temps:          0       1       0       0       0
  3814 ;;      Totals:         0      15       0       0       0
  3815 ;;Total ram usage:       15 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    1
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_pwm_set
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function ___aldiv
  3827  04E1                     ___aldiv:	
  3828                           
  3829                           ;incstack = 0
  3830                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3831  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3832  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3833  04E3  01B7               	clrf	___aldiv@sign
  3834  04E4  1FB0               	btfss	___aldiv@divisor+3,7
  3835  04E5  2CF3               	goto	l588
  3836  04E6  09AD               	comf	___aldiv@divisor,f
  3837  04E7  09AE               	comf	___aldiv@divisor+1,f
  3838  04E8  09AF               	comf	___aldiv@divisor+2,f
  3839  04E9  09B0               	comf	___aldiv@divisor+3,f
  3840  04EA  0AAD               	incf	___aldiv@divisor,f
  3841  04EB  1903               	skipnz
  3842  04EC  0AAE               	incf	___aldiv@divisor+1,f
  3843  04ED  1903               	skipnz
  3844  04EE  0AAF               	incf	___aldiv@divisor+2,f
  3845  04EF  1903               	skipnz
  3846  04F0  0AB0               	incf	___aldiv@divisor+3,f
  3847  04F1  01B7               	clrf	___aldiv@sign
  3848  04F2  0AB7               	incf	___aldiv@sign,f
  3849  04F3                     l588:	
  3850  04F3  1FB4               	btfss	___aldiv@dividend+3,7
  3851  04F4  2D04               	goto	l1921
  3852  04F5  09B1               	comf	___aldiv@dividend,f
  3853  04F6  09B2               	comf	___aldiv@dividend+1,f
  3854  04F7  09B3               	comf	___aldiv@dividend+2,f
  3855  04F8  09B4               	comf	___aldiv@dividend+3,f
  3856  04F9  0AB1               	incf	___aldiv@dividend,f
  3857  04FA  1903               	skipnz
  3858  04FB  0AB2               	incf	___aldiv@dividend+1,f
  3859  04FC  1903               	skipnz
  3860  04FD  0AB3               	incf	___aldiv@dividend+2,f
  3861  04FE  1903               	skipnz
  3862  04FF  0AB4               	incf	___aldiv@dividend+3,f
  3863  0500  3001               	movlw	1
  3864  0501  00B5               	movwf	??___aldiv
  3865  0502  0835               	movf	??___aldiv,w
  3866  0503  06B7               	xorwf	___aldiv@sign,f
  3867  0504                     l1921:	
  3868  0504  3000               	movlw	0
  3869  0505  00BB               	movwf	___aldiv@quotient+3
  3870  0506  3000               	movlw	0
  3871  0507  00BA               	movwf	___aldiv@quotient+2
  3872  0508  3000               	movlw	0
  3873  0509  00B9               	movwf	___aldiv@quotient+1
  3874  050A  3000               	movlw	0
  3875  050B  00B8               	movwf	___aldiv@quotient
  3876  050C  0830               	movf	___aldiv@divisor+3,w
  3877  050D  042F               	iorwf	___aldiv@divisor+2,w
  3878  050E  042E               	iorwf	___aldiv@divisor+1,w
  3879  050F  042D               	iorwf	___aldiv@divisor,w
  3880  0510  1903               	skipnz
  3881  0511  2D59               	goto	l1943
  3882  0512  01B6               	clrf	___aldiv@counter
  3883  0513  0AB6               	incf	___aldiv@counter,f
  3884  0514                     l1929:	
  3885  0514  1BB0               	btfsc	___aldiv@divisor+3,7
  3886  0515  2D24               	goto	l1931
  3887  0516  3001               	movlw	1
  3888  0517  00B5               	movwf	??___aldiv
  3889  0518                     u1495:	
  3890  0518  1003               	clrc
  3891  0519  0DAD               	rlf	___aldiv@divisor,f
  3892  051A  0DAE               	rlf	___aldiv@divisor+1,f
  3893  051B  0DAF               	rlf	___aldiv@divisor+2,f
  3894  051C  0DB0               	rlf	___aldiv@divisor+3,f
  3895  051D  0BB5               	decfsz	??___aldiv,f
  3896  051E  2D18               	goto	u1495
  3897  051F  3001               	movlw	1
  3898  0520  00B5               	movwf	??___aldiv
  3899  0521  0835               	movf	??___aldiv,w
  3900  0522  07B6               	addwf	___aldiv@counter,f
  3901  0523  2D14               	goto	l1929
  3902  0524                     l1931:	
  3903  0524  3001               	movlw	1
  3904  0525  00B5               	movwf	??___aldiv
  3905  0526                     u1515:	
  3906  0526  1003               	clrc
  3907  0527  0DB8               	rlf	___aldiv@quotient,f
  3908  0528  0DB9               	rlf	___aldiv@quotient+1,f
  3909  0529  0DBA               	rlf	___aldiv@quotient+2,f
  3910  052A  0DBB               	rlf	___aldiv@quotient+3,f
  3911  052B  0BB5               	decfsz	??___aldiv,f
  3912  052C  2D26               	goto	u1515
  3913  052D  0830               	movf	___aldiv@divisor+3,w
  3914  052E  0234               	subwf	___aldiv@dividend+3,w
  3915  052F  1D03               	skipz
  3916  0530  2D3B               	goto	u1525
  3917  0531  082F               	movf	___aldiv@divisor+2,w
  3918  0532  0233               	subwf	___aldiv@dividend+2,w
  3919  0533  1D03               	skipz
  3920  0534  2D3B               	goto	u1525
  3921  0535  082E               	movf	___aldiv@divisor+1,w
  3922  0536  0232               	subwf	___aldiv@dividend+1,w
  3923  0537  1D03               	skipz
  3924  0538  2D3B               	goto	u1525
  3925  0539  082D               	movf	___aldiv@divisor,w
  3926  053A  0231               	subwf	___aldiv@dividend,w
  3927  053B                     u1525:	
  3928  053B  1C03               	skipc
  3929  053C  2D4C               	goto	l1939
  3930  053D  082D               	movf	___aldiv@divisor,w
  3931  053E  02B1               	subwf	___aldiv@dividend,f
  3932  053F  082E               	movf	___aldiv@divisor+1,w
  3933  0540  1C03               	skipc
  3934  0541  0F2E               	incfsz	___aldiv@divisor+1,w
  3935  0542  02B2               	subwf	___aldiv@dividend+1,f
  3936  0543  082F               	movf	___aldiv@divisor+2,w
  3937  0544  1C03               	skipc
  3938  0545  0F2F               	incfsz	___aldiv@divisor+2,w
  3939  0546  02B3               	subwf	___aldiv@dividend+2,f
  3940  0547  0830               	movf	___aldiv@divisor+3,w
  3941  0548  1C03               	skipc
  3942  0549  0F30               	incfsz	___aldiv@divisor+3,w
  3943  054A  02B4               	subwf	___aldiv@dividend+3,f
  3944  054B  1438               	bsf	___aldiv@quotient,0
  3945  054C                     l1939:	
  3946  054C  3001               	movlw	1
  3947  054D                     u1535:	
  3948  054D  1003               	clrc
  3949  054E  0CB0               	rrf	___aldiv@divisor+3,f
  3950  054F  0CAF               	rrf	___aldiv@divisor+2,f
  3951  0550  0CAE               	rrf	___aldiv@divisor+1,f
  3952  0551  0CAD               	rrf	___aldiv@divisor,f
  3953  0552  3EFF               	addlw	-1
  3954  0553  1D03               	skipz
  3955  0554  2D4D               	goto	u1535
  3956  0555  3001               	movlw	1
  3957  0556  02B6               	subwf	___aldiv@counter,f
  3958  0557  1D03               	btfss	3,2
  3959  0558  2D24               	goto	l1931
  3960  0559                     l1943:	
  3961  0559  0837               	movf	___aldiv@sign,w
  3962  055A  1903               	btfsc	3,2
  3963  055B  2D67               	goto	l1947
  3964  055C  09B8               	comf	___aldiv@quotient,f
  3965  055D  09B9               	comf	___aldiv@quotient+1,f
  3966  055E  09BA               	comf	___aldiv@quotient+2,f
  3967  055F  09BB               	comf	___aldiv@quotient+3,f
  3968  0560  0AB8               	incf	___aldiv@quotient,f
  3969  0561  1903               	skipnz
  3970  0562  0AB9               	incf	___aldiv@quotient+1,f
  3971  0563  1903               	skipnz
  3972  0564  0ABA               	incf	___aldiv@quotient+2,f
  3973  0565  1903               	skipnz
  3974  0566  0ABB               	incf	___aldiv@quotient+3,f
  3975  0567                     l1947:	
  3976  0567  083B               	movf	___aldiv@quotient+3,w
  3977  0568  00B0               	movwf	?___aldiv+3
  3978  0569  083A               	movf	___aldiv@quotient+2,w
  3979  056A  00AF               	movwf	?___aldiv+2
  3980  056B  0839               	movf	___aldiv@quotient+1,w
  3981  056C  00AE               	movwf	?___aldiv+1
  3982  056D  0838               	movf	___aldiv@quotient,w
  3983  056E  00AD               	movwf	?___aldiv
  3984  056F  0008               	return
  3985  0570                     __end_of___aldiv:	
  3986                           
  3987                           	psect	text20
  3988  06AD                     __ptext20:	
  3989 ;; *************** function _constrain *****************
  3990 ;; Defined at:
  3991 ;;		line 98 in file "main.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  value           4    0[BANK0 ] long 
  3994 ;;  lLimit          4    4[BANK0 ] long 
  3995 ;;  uLimit          4    8[BANK0 ] long 
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  4    0[BANK0 ] long 
  4000 ;; Registers used:
  4001 ;;		wreg, btemp+1
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4007 ;;      Params:         0      12       0       0       0
  4008 ;;      Locals:         0       0       0       0       0
  4009 ;;      Temps:          0       0       0       0       0
  4010 ;;      Totals:         0      12       0       0       0
  4011 ;;Total ram usage:       12 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    1
  4014 ;; This function calls:
  4015 ;;		Nothing
  4016 ;; This function is called by:
  4017 ;;		_SetMotor
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _constrain
  4023  06AD                     _constrain:	
  4024                           
  4025                           ;main.c: 99: if (value > uLimit){
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _constrain: [wreg+btemp+1]
  4029  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  4030  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  4031  06AF  082B               	movf	constrain@uLimit+3,w
  4032  06B0  3A80               	xorlw	128
  4033  06B1  00FF               	movwf	127
  4034  06B2  0823               	movf	constrain@value+3,w
  4035  06B3  3A80               	xorlw	128
  4036  06B4  027F               	subwf	127,w
  4037  06B5  1D03               	skipz
  4038  06B6  2EC1               	goto	u2123
  4039  06B7  0822               	movf	constrain@value+2,w
  4040  06B8  022A               	subwf	constrain@uLimit+2,w
  4041  06B9  1D03               	skipz
  4042  06BA  2EC1               	goto	u2123
  4043  06BB  0821               	movf	constrain@value+1,w
  4044  06BC  0229               	subwf	constrain@uLimit+1,w
  4045  06BD  1D03               	skipz
  4046  06BE  2EC1               	goto	u2123
  4047  06BF  0820               	movf	constrain@value,w
  4048  06C0  0228               	subwf	constrain@uLimit,w
  4049  06C1                     u2123:	
  4050  06C1  1803               	skipnc
  4051  06C2  2ECC               	goto	l2399
  4052                           
  4053                           ;main.c: 100: return(uLimit);
  4054  06C3  082B               	movf	constrain@uLimit+3,w
  4055  06C4  00A3               	movwf	?_constrain+3
  4056  06C5  082A               	movf	constrain@uLimit+2,w
  4057  06C6  00A2               	movwf	?_constrain+2
  4058  06C7  0829               	movf	constrain@uLimit+1,w
  4059  06C8  00A1               	movwf	?_constrain+1
  4060  06C9  0828               	movf	constrain@uLimit,w
  4061  06CA  00A0               	movwf	?_constrain
  4062  06CB  0008               	return
  4063  06CC                     l2399:	
  4064  06CC  0823               	movf	constrain@value+3,w
  4065  06CD  3A80               	xorlw	128
  4066  06CE  00FF               	movwf	127
  4067  06CF  0827               	movf	constrain@lLimit+3,w
  4068  06D0  3A80               	xorlw	128
  4069  06D1  027F               	subwf	127,w
  4070  06D2  1D03               	skipz
  4071  06D3  2EDE               	goto	u2133
  4072  06D4  0826               	movf	constrain@lLimit+2,w
  4073  06D5  0222               	subwf	constrain@value+2,w
  4074  06D6  1D03               	skipz
  4075  06D7  2EDE               	goto	u2133
  4076  06D8  0825               	movf	constrain@lLimit+1,w
  4077  06D9  0221               	subwf	constrain@value+1,w
  4078  06DA  1D03               	skipz
  4079  06DB  2EDE               	goto	u2133
  4080  06DC  0824               	movf	constrain@lLimit,w
  4081  06DD  0220               	subwf	constrain@value,w
  4082  06DE                     u2133:	
  4083  06DE  1803               	skipnc
  4084  06DF  0008               	return
  4085                           
  4086                           ;main.c: 102: return(lLimit);
  4087  06E0  0827               	movf	constrain@lLimit+3,w
  4088  06E1  00A3               	movwf	?_constrain+3
  4089  06E2  0826               	movf	constrain@lLimit+2,w
  4090  06E3  00A2               	movwf	?_constrain+2
  4091  06E4  0825               	movf	constrain@lLimit+1,w
  4092  06E5  00A1               	movwf	?_constrain+1
  4093  06E6  0824               	movf	constrain@lLimit,w
  4094  06E7  00A0               	movwf	?_constrain
  4095  06E8  0008               	return
  4096  06E9                     __end_of_constrain:	
  4097                           ;main.c: 104: return(value);
  4098                           
  4099                           
  4100                           	psect	text21
  4101  07DD                     __ptext21:	
  4102 ;; *************** function ___wmul *****************
  4103 ;; Defined at:
  4104 ;;		line 15 in file "D:\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4107 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  product         2    4[BANK0 ] unsigned int 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  2    0[BANK0 ] unsigned int 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4119 ;;      Params:         0       4       0       0       0
  4120 ;;      Locals:         0       2       0       0       0
  4121 ;;      Temps:          0       0       0       0       0
  4122 ;;      Totals:         0       6       0       0       0
  4123 ;;Total ram usage:        6 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    1
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_SetMotor
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function ___wmul
  4135  07DD                     ___wmul:	
  4136                           
  4137                           ;incstack = 0
  4138                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4139  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  4140  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  4141  07DF  01A4               	clrf	___wmul@product
  4142  07E0  01A5               	clrf	___wmul@product+1
  4143  07E1                     l2411:	
  4144  07E1  1C20               	btfss	___wmul@multiplier,0
  4145  07E2  2FE9               	goto	l523
  4146  07E3  0822               	movf	___wmul@multiplicand,w
  4147  07E4  07A4               	addwf	___wmul@product,f
  4148  07E5  1803               	skipnc
  4149  07E6  0AA5               	incf	___wmul@product+1,f
  4150  07E7  0823               	movf	___wmul@multiplicand+1,w
  4151  07E8  07A5               	addwf	___wmul@product+1,f
  4152  07E9                     l523:	
  4153  07E9  3001               	movlw	1
  4154  07EA                     u2155:	
  4155  07EA  1003               	clrc
  4156  07EB  0DA2               	rlf	___wmul@multiplicand,f
  4157  07EC  0DA3               	rlf	___wmul@multiplicand+1,f
  4158  07ED  3EFF               	addlw	-1
  4159  07EE  1D03               	skipz
  4160  07EF  2FEA               	goto	u2155
  4161  07F0  3001               	movlw	1
  4162  07F1                     u2165:	
  4163  07F1  1003               	clrc
  4164  07F2  0CA1               	rrf	___wmul@multiplier+1,f
  4165  07F3  0CA0               	rrf	___wmul@multiplier,f
  4166  07F4  3EFF               	addlw	-1
  4167  07F5  1D03               	skipz
  4168  07F6  2FF1               	goto	u2165
  4169  07F7  0820               	movf	___wmul@multiplier,w
  4170  07F8  0421               	iorwf	___wmul@multiplier+1,w
  4171  07F9  1D03               	btfss	3,2
  4172  07FA  2FE1               	goto	l2411
  4173  07FB  0825               	movf	___wmul@product+1,w
  4174  07FC  00A1               	movwf	?___wmul+1
  4175  07FD  0824               	movf	___wmul@product,w
  4176  07FE  00A0               	movwf	?___wmul
  4177  07FF  0008               	return
  4178  0800                     __end_of___wmul:	
  4179                           
  4180                           	psect	text22
  4181  030B                     __ptext22:	
  4182 ;; *************** function _isr *****************
  4183 ;; Defined at:
  4184 ;;		line 172 in file "main.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;		None
  4187 ;; Auto vars:     Size  Location     Type
  4188 ;;  portB           1    6[COMMON] unsigned char 
  4189 ;; Return value:  Size  Location     Type
  4190 ;;                  1    wreg      void 
  4191 ;; Registers used:
  4192 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4193 ;; Tracked objects:
  4194 ;;		On entry : 0/0
  4195 ;;		On exit  : 0/0
  4196 ;;		Unchanged: 0/0
  4197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4198 ;;      Params:         0       0       0       0       0
  4199 ;;      Locals:         1       0       0       0       0
  4200 ;;      Temps:          6       0       0       0       0
  4201 ;;      Totals:         7       0       0       0       0
  4202 ;;Total ram usage:        7 bytes
  4203 ;; Hardware stack levels used:    1
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		Interrupt level 1
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _isr
  4213  030B                     _isr:	
  4214                           
  4215                           ;main.c: 173: static int tick;;main.c: 177: if (T0IE && T0IF) {
  4216  030B  1A8B               	btfsc	11,5	;volatile
  4217  030C  1D0B               	btfss	11,2	;volatile
  4218  030D  2B58               	goto	i1l2173
  4219                           
  4220                           ;main.c: 178: set_motor_flag = 1;
  4221  030E  1683               	bsf	3,5	;RP0=1, select bank1
  4222  030F  1303               	bcf	3,6	;RP1=0, select bank1
  4223  0310  01C2               	clrf	_set_motor_flag^(0+128)
  4224  0311  0AC2               	incf	_set_motor_flag^(0+128),f
  4225                           
  4226                           ;main.c: 179: if (sampling){
  4227  0312  0872               	movf	_sampling,w	;volatile
  4228  0313  1903               	btfsc	3,2
  4229  0314  2B53               	goto	i1l2169
  4230                           
  4231                           ;main.c: 180: if (samples < 90/2){
  4232  0315  0871               	movf	_samples+1,w	;volatile
  4233  0316  3A80               	xorlw	128
  4234  0317  00FF               	movwf	127
  4235  0318  3080               	movlw	128
  4236  0319  027F               	subwf	127,w
  4237  031A  1D03               	skipz
  4238  031B  2B1E               	goto	u185_25
  4239  031C  302D               	movlw	45
  4240  031D  0270               	subwf	_samples,w	;volatile
  4241  031E                     u185_25:	
  4242  031E  1803               	skipnc
  4243  031F  2B2A               	goto	i1l2163
  4244                           
  4245                           ;main.c: 181: pos_log1[samples] = motor_pos-last_pos;
  4246  0320  1683               	bsf	3,5	;RP0=1, select bank1
  4247  0321  1303               	bcf	3,6	;RP1=0, select bank1
  4248  0322  083A               	movf	_last_pos^(0+128),w	;volatile
  4249  0323  1283               	bcf	3,5	;RP0=0, select bank0
  4250  0324  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0325  025D               	subwf	_motor_pos,w	;volatile
  4252  0326  00F7               	movwf	??_isr
  4253  0327  0870               	movf	_samples,w	;volatile
  4254  0328  3EBE               	addlw	(low (_pos_log1| (0+256)))& (0+255)
  4255  0329  2B33               	goto	L2
  4256  032A                     i1l2163:	
  4257                           ;main.c: 182: }else{
  4258                           
  4259                           
  4260                           ;main.c: 183: pos_log2[samples-(90/2)] = motor_pos-last_pos;
  4261  032A  1683               	bsf	3,5	;RP0=1, select bank1
  4262  032B  1303               	bcf	3,6	;RP1=0, select bank1
  4263  032C  083A               	movf	_last_pos^(0+128),w	;volatile
  4264  032D  1283               	bcf	3,5	;RP0=0, select bank0
  4265  032E  1303               	bcf	3,6	;RP1=0, select bank0
  4266  032F  025D               	subwf	_motor_pos,w	;volatile
  4267  0330  00F7               	movwf	??_isr
  4268  0331  0870               	movf	_samples,w	;volatile
  4269  0332  3E63               	addlw	(low ((_pos_log2| (0+256)+211)))& (0+255)
  4270  0333                     L2:	
  4271  0333  0084               	movwf	4
  4272  0334  0877               	movf	??_isr,w
  4273  0335  1783               	bsf	3,7	;select IRP bank3
  4274  0336  0080               	movwf	0
  4275                           
  4276                           ;main.c: 184: };main.c: 185: last_pos = motor_pos;
  4277  0337  0860               	movf	_motor_pos+3,w	;volatile
  4278  0338  1683               	bsf	3,5	;RP0=1, select bank1
  4279  0339  1303               	bcf	3,6	;RP1=0, select bank1
  4280  033A  00BD               	movwf	(_last_pos+3)^(0+128)	;volatile
  4281  033B  1283               	bcf	3,5	;RP0=0, select bank0
  4282  033C  1303               	bcf	3,6	;RP1=0, select bank0
  4283  033D  085F               	movf	_motor_pos+2,w	;volatile
  4284  033E  1683               	bsf	3,5	;RP0=1, select bank1
  4285  033F  1303               	bcf	3,6	;RP1=0, select bank1
  4286  0340  00BC               	movwf	(_last_pos+2)^(0+128)	;volatile
  4287  0341  1283               	bcf	3,5	;RP0=0, select bank0
  4288  0342  1303               	bcf	3,6	;RP1=0, select bank0
  4289  0343  085E               	movf	_motor_pos+1,w	;volatile
  4290  0344  1683               	bsf	3,5	;RP0=1, select bank1
  4291  0345  1303               	bcf	3,6	;RP1=0, select bank1
  4292  0346  00BB               	movwf	(_last_pos+1)^(0+128)	;volatile
  4293  0347  1283               	bcf	3,5	;RP0=0, select bank0
  4294  0348  1303               	bcf	3,6	;RP1=0, select bank0
  4295  0349  085D               	movf	_motor_pos,w	;volatile
  4296  034A  1683               	bsf	3,5	;RP0=1, select bank1
  4297  034B  1303               	bcf	3,6	;RP1=0, select bank1
  4298  034C  00BA               	movwf	_last_pos^(0+128)	;volatile
  4299                           
  4300                           ;main.c: 186: samples++;
  4301  034D  3001               	movlw	1
  4302  034E  07F0               	addwf	_samples,f	;volatile
  4303  034F  1803               	skipnc
  4304  0350  0AF1               	incf	_samples+1,f	;volatile
  4305  0351  3000               	movlw	0
  4306  0352  07F1               	addwf	_samples+1,f	;volatile
  4307  0353                     i1l2169:	
  4308                           
  4309                           ;main.c: 187: };main.c: 191: TMR0 = (0xff - 195);
  4310  0353  303C               	movlw	60
  4311  0354  1283               	bcf	3,5	;RP0=0, select bank0
  4312  0355  1303               	bcf	3,6	;RP1=0, select bank0
  4313  0356  0081               	movwf	1	;volatile
  4314                           
  4315                           ;main.c: 192: T0IF = 0;
  4316  0357  110B               	bcf	11,2	;volatile
  4317  0358                     i1l2173:	
  4318                           
  4319                           ;main.c: 193: };main.c: 196: if (RBIE && RBIF) {
  4320  0358  198B               	btfsc	11,3	;volatile
  4321  0359  1C0B               	btfss	11,0	;volatile
  4322  035A  2C04               	goto	i1l346
  4323                           
  4324                           ;main.c: 197: char portB = PORTB;
  4325  035B  0806               	movf	6,w	;volatile
  4326  035C  00F7               	movwf	??_isr
  4327  035D  0877               	movf	??_isr,w
  4328  035E  00FD               	movwf	isr@portB
  4329                           
  4330                           ;main.c: 199: ab1 = (portB & 0b00011000) >>3;
  4331  035F  087D               	movf	isr@portB,w
  4332  0360  00F7               	movwf	??_isr
  4333  0361  3003               	movlw	3
  4334  0362                     u188_25:	
  4335  0362  1003               	clrc
  4336  0363  0CF7               	rrf	??_isr,f
  4337  0364  3EFF               	addlw	-1
  4338  0365  1D03               	skipz
  4339  0366  2B62               	goto	u188_25
  4340  0367  0877               	movf	??_isr,w
  4341  0368  3903               	andlw	3
  4342  0369  00F8               	movwf	??_isr+1
  4343  036A  0878               	movf	??_isr+1,w
  4344  036B  00F3               	movwf	_ab1	;volatile
  4345                           
  4346                           ;main.c: 200: switch(state1)
  4347  036C  2BE6               	goto	i1l2219
  4348  036D                     i1l2181:	
  4349                           
  4350                           ;main.c: 203: if(ab1 == 1){
  4351  036D  0373               	decf	_ab1,w	;volatile
  4352  036E  1D03               	btfss	3,2
  4353  036F  2B72               	goto	i1l2185
  4354                           
  4355                           ;main.c: 204: state1 = 1;
  4356  0370  3001               	movlw	1
  4357  0371  2B92               	goto	L3
  4358  0372                     i1l2185:	
  4359                           ;main.c: 206: }
  4360                           
  4361                           ;main.c: 205: encoder1_counter--;
  4362                           
  4363                           
  4364                           ;main.c: 207: else if(ab1 == 2){
  4365  0372  3002               	movlw	2
  4366  0373  0673               	xorwf	_ab1,w	;volatile
  4367  0374  1D03               	btfss	3,2
  4368  0375  2BF4               	goto	i1l2221
  4369                           
  4370                           ;main.c: 208: state1 = 2;
  4371  0376  3002               	movlw	2
  4372  0377  00F7               	movwf	??_isr
  4373  0378  0877               	movf	??_isr,w
  4374  0379  00F4               	movwf	_state1	;volatile
  4375  037A  2B7F               	goto	i1l2193
  4376  037B                     i1l2189:	
  4377                           ;main.c: 209: encoder1_counter++;
  4378                           
  4379                           
  4380                           ;main.c: 213: if(ab1 == 0){
  4381  037B  0873               	movf	_ab1,w	;volatile
  4382  037C  1D03               	btfss	3,2
  4383  037D  2B8D               	goto	i1l2195
  4384                           
  4385                           ;main.c: 214: state1 = 0;
  4386  037E  01F4               	clrf	_state1	;volatile
  4387  037F                     i1l2193:	
  4388                           
  4389                           ;main.c: 215: encoder1_counter++;
  4390  037F  3001               	movlw	1
  4391  0380  07E1               	addwf	_encoder1_counter,f	;volatile
  4392  0381  3000               	movlw	0
  4393  0382  1803               	skipnc
  4394  0383  3001               	movlw	1
  4395  0384  07E2               	addwf	_encoder1_counter+1,f	;volatile
  4396  0385  3000               	movlw	0
  4397  0386  1803               	skipnc
  4398  0387  3001               	movlw	1
  4399  0388  07E3               	addwf	_encoder1_counter+2,f	;volatile
  4400  0389  3000               	movlw	0
  4401  038A  1803               	skipnc
  4402  038B  3001               	movlw	1
  4403  038C  2B9F               	goto	L4
  4404  038D                     i1l2195:	
  4405                           ;main.c: 216: }
  4406                           
  4407                           
  4408                           ;main.c: 217: else if (ab1 == 3){
  4409  038D  3003               	movlw	3
  4410  038E  0673               	xorwf	_ab1,w	;volatile
  4411  038F  1D03               	btfss	3,2
  4412  0390  2BF4               	goto	i1l2221
  4413                           
  4414                           ;main.c: 218: state1 = 3;
  4415  0391  3003               	movlw	3
  4416  0392                     L3:	
  4417  0392  00F7               	movwf	??_isr
  4418  0393  0877               	movf	??_isr,w
  4419  0394  00F4               	movwf	_state1	;volatile
  4420                           
  4421                           ;main.c: 219: encoder1_counter--;
  4422  0395  30FF               	movlw	255
  4423  0396  07E1               	addwf	_encoder1_counter,f	;volatile
  4424  0397  30FF               	movlw	255
  4425  0398  1C03               	skipc
  4426  0399  07E2               	addwf	_encoder1_counter+1,f	;volatile
  4427  039A  30FF               	movlw	255
  4428  039B  1C03               	skipc
  4429  039C  07E3               	addwf	_encoder1_counter+2,f	;volatile
  4430  039D  30FF               	movlw	255
  4431  039E  1C03               	skipc
  4432  039F                     L4:	
  4433  039F  07E4               	addwf	_encoder1_counter+3,f	;volatile
  4434  03A0  2BF4               	goto	i1l2221
  4435  03A1                     i1l2199:	
  4436                           
  4437                           ;main.c: 223: if(ab1 == 0){
  4438  03A1  0873               	movf	_ab1,w	;volatile
  4439  03A2  1D03               	btfss	3,2
  4440  03A3  2BA6               	goto	i1l2205
  4441                           
  4442                           ;main.c: 224: state1 = 0;
  4443  03A4  01F4               	clrf	_state1	;volatile
  4444  03A5  2BC4               	goto	L5
  4445  03A6                     i1l2205:	
  4446                           ;main.c: 226: }
  4447                           
  4448                           ;main.c: 225: encoder1_counter--;
  4449                           
  4450                           
  4451                           ;main.c: 227: else if(ab1 == 3){
  4452  03A6  3003               	movlw	3
  4453  03A7  0673               	xorwf	_ab1,w	;volatile
  4454  03A8  1D03               	btfss	3,2
  4455  03A9  2BF4               	goto	i1l2221
  4456                           
  4457                           ;main.c: 228: state1 = 3;
  4458  03AA  3003               	movlw	3
  4459  03AB  00F7               	movwf	??_isr
  4460  03AC  0877               	movf	??_isr,w
  4461  03AD  00F4               	movwf	_state1	;volatile
  4462                           
  4463                           ;main.c: 229: encoder1_counter++;
  4464  03AE  3001               	movlw	1
  4465  03AF  07E1               	addwf	_encoder1_counter,f	;volatile
  4466  03B0  3000               	movlw	0
  4467  03B1  1803               	skipnc
  4468  03B2  3001               	movlw	1
  4469  03B3  07E2               	addwf	_encoder1_counter+1,f	;volatile
  4470  03B4  3000               	movlw	0
  4471  03B5  1803               	skipnc
  4472  03B6  3001               	movlw	1
  4473  03B7  07E3               	addwf	_encoder1_counter+2,f	;volatile
  4474  03B8  3000               	movlw	0
  4475  03B9  1803               	skipnc
  4476  03BA  3001               	movlw	1
  4477  03BB  2BCE               	goto	L6
  4478  03BC                     i1l2209:	
  4479                           
  4480                           ;main.c: 233: if(ab1 == 2){
  4481  03BC  3002               	movlw	2
  4482  03BD  0673               	xorwf	_ab1,w	;volatile
  4483  03BE  1D03               	btfss	3,2
  4484  03BF  2BD0               	goto	i1l2213
  4485                           
  4486                           ;main.c: 234: state1 = 2;
  4487  03C0  3002               	movlw	2
  4488  03C1  00F7               	movwf	??_isr
  4489  03C2  0877               	movf	??_isr,w
  4490  03C3  00F4               	movwf	_state1	;volatile
  4491  03C4                     L5:	
  4492                           
  4493                           ;main.c: 235: encoder1_counter--;
  4494  03C4  30FF               	movlw	255
  4495  03C5  07E1               	addwf	_encoder1_counter,f	;volatile
  4496  03C6  30FF               	movlw	255
  4497  03C7  1C03               	skipc
  4498  03C8  07E2               	addwf	_encoder1_counter+1,f	;volatile
  4499  03C9  30FF               	movlw	255
  4500  03CA  1C03               	skipc
  4501  03CB  07E3               	addwf	_encoder1_counter+2,f	;volatile
  4502  03CC  30FF               	movlw	255
  4503  03CD  1C03               	skipc
  4504  03CE                     L6:	
  4505  03CE  07E4               	addwf	_encoder1_counter+3,f	;volatile
  4506                           
  4507                           ;main.c: 236: }
  4508  03CF  2BF4               	goto	i1l2221
  4509  03D0                     i1l2213:	
  4510                           
  4511                           ;main.c: 237: else if (ab1 == 1){
  4512  03D0  0373               	decf	_ab1,w	;volatile
  4513  03D1  1D03               	btfss	3,2
  4514  03D2  2BF4               	goto	i1l2221
  4515                           
  4516                           ;main.c: 238: state1 = 1;
  4517  03D3  3001               	movlw	1
  4518  03D4  00F7               	movwf	??_isr
  4519  03D5  0877               	movf	??_isr,w
  4520  03D6  00F4               	movwf	_state1	;volatile
  4521                           
  4522                           ;main.c: 239: encoder1_counter++;
  4523  03D7  3001               	movlw	1
  4524  03D8  07E1               	addwf	_encoder1_counter,f	;volatile
  4525  03D9  3000               	movlw	0
  4526  03DA  1803               	skipnc
  4527  03DB  3001               	movlw	1
  4528  03DC  07E2               	addwf	_encoder1_counter+1,f	;volatile
  4529  03DD  3000               	movlw	0
  4530  03DE  1803               	skipnc
  4531  03DF  3001               	movlw	1
  4532  03E0  07E3               	addwf	_encoder1_counter+2,f	;volatile
  4533  03E1  3000               	movlw	0
  4534  03E2  1803               	skipnc
  4535  03E3  3001               	movlw	1
  4536  03E4  07E4               	addwf	_encoder1_counter+3,f	;volatile
  4537  03E5  2BF4               	goto	i1l2221
  4538  03E6                     i1l2219:	
  4539  03E6  0874               	movf	_state1,w	;volatile
  4540                           
  4541                           ; Switch size 1, requested type "simple"
  4542                           ; Number of cases is 4, Range of values is 0 to 3
  4543                           ; switch strategies available:
  4544                           ; Name         Instructions Cycles
  4545                           ; simple_byte           13     7 (average)
  4546                           ; direct_byte           20     8 (fixed)
  4547                           ; jumptable            260     6 (fixed)
  4548                           ;	Chosen strategy is simple_byte
  4549  03E7  3A00               	xorlw	0	; case 0
  4550  03E8  1903               	skipnz
  4551  03E9  2B6D               	goto	i1l2181
  4552  03EA  3A01               	xorlw	1	; case 1
  4553  03EB  1903               	skipnz
  4554  03EC  2B7B               	goto	i1l2189
  4555  03ED  3A03               	xorlw	3	; case 2
  4556  03EE  1903               	skipnz
  4557  03EF  2BA1               	goto	i1l2199
  4558  03F0  3A01               	xorlw	1	; case 3
  4559  03F1  1903               	skipnz
  4560  03F2  2BBC               	goto	i1l2209
  4561  03F3  2BF4               	goto	i1l2221
  4562  03F4                     i1l2221:	
  4563                           
  4564                           ;main.c: 244: motor_pos = -encoder1_counter;
  4565  03F4  0961               	comf	_encoder1_counter,w	;volatile
  4566  03F5  00DD               	movwf	_motor_pos	;volatile
  4567  03F6  0962               	comf	_encoder1_counter+1,w	;volatile
  4568  03F7  00DE               	movwf	_motor_pos+1	;volatile
  4569  03F8  0963               	comf	_encoder1_counter+2,w	;volatile
  4570  03F9  00DF               	movwf	_motor_pos+2	;volatile
  4571  03FA  0964               	comf	_encoder1_counter+3,w	;volatile
  4572  03FB  00E0               	movwf	_motor_pos+3	;volatile
  4573  03FC  0ADD               	incf	_motor_pos,f	;volatile
  4574  03FD  1903               	skipnz
  4575  03FE  0ADE               	incf	_motor_pos+1,f	;volatile
  4576  03FF  1903               	skipnz
  4577  0400  0ADF               	incf	_motor_pos+2,f	;volatile
  4578  0401  1903               	skipnz
  4579  0402  0AE0               	incf	_motor_pos+3,f	;volatile
  4580                           
  4581                           ;main.c: 245: RBIF = 0;
  4582  0403  100B               	bcf	11,0	;volatile
  4583  0404                     i1l346:	
  4584  0404  087C               	movf	??_isr+5,w
  4585  0405  00FF               	movwf	127
  4586  0406  087B               	movf	??_isr+4,w
  4587  0407  008A               	movwf	10
  4588  0408  087A               	movf	??_isr+3,w
  4589  0409  0084               	movwf	4
  4590  040A  0E79               	swapf	(??_isr+2)^(0+4294967168),w
  4591  040B  0083               	movwf	3
  4592  040C  0EFE               	swapf	126,f
  4593  040D  0E7E               	swapf	126,w
  4594  040E  0009               	retfie
  4595  040F                     __end_of_isr:	
  4596  007E                     btemp	set	126	;btemp
  4597  007E                     wtemp0	set	126
  4598                           
  4599                           	psect	intentry
  4600  0004                     __pintentry:	
  4601                           ;incstack = 0
  4602                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1]
  4603                           
  4604  0004                     interrupt_function:	
  4605  007E                     saved_w	set	btemp
  4606  0004  00FE               	movwf	btemp
  4607  0005  0E03               	swapf	3,w
  4608  0006  00F9               	movwf	??_isr+2
  4609  0007  0804               	movf	4,w
  4610  0008  00FA               	movwf	??_isr+3
  4611  0009  080A               	movf	10,w
  4612  000A  00FB               	movwf	??_isr+4
  4613  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4614  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4615  000D  087F               	movf	btemp+1,w
  4616  000E  00FC               	movwf	??_isr+5
  4617  000F  120A  118A  2B0B   	ljmp	_isr


Data Sizes:
    Strings     45
    Constant    10
    Data        0
    BSS         130
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     57      79
    BANK1            80     26      35
    BANK3            96      0      92
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[14]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[11]), 
		 -> STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@sVar(BANK1[20]), PrintSetpoint@sVar(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    putst@str	PTR const unsigned char  size(1) Largest target is 20
		 -> main@sVar(BANK1[20]), PrintSetpoint@sVar(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SetPoint
    _motor_reset->_SetPoint
    _SetPoint->_PrintSetpoint
    _PrintSetpoint->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _putst->_putch
    _SetMotor->_pwm_set
    _pwm_set->___aldiv
    ___aldiv->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0   16035
                                             56 BANK0      1     1      0
                                              0 BANK1     26    26      0
                           _SetMotor
                           _SetPoint
                             _chkchr
                      _encoders_init
                    _getServoCommand
                      _getServoState
                        _motor_reset
                              _putst
                           _pwm_init
                            _pwm_set
                       _resetCounter
                        _serial_init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor_reset                                          0     0      0    5002
                           _SetPoint
                            _pwm_set
                       _resetCounter
 ---------------------------------------------------------------------------------
 (1) _resetCounter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetPoint                                             6     4      2    2631
                                             50 BANK0      6     4      2
                      _PrintSetpoint
                    _getServoCommand (ARG)
 ---------------------------------------------------------------------------------
 (3) _PrintSetpoint                                       21    21      0    1979
                                             29 BANK0     21    21      0
                              _putst
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    18      5    1647
                                             14 BANK0     15    10      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _putst                                                2     2      0     276
                                              2 BANK0      2     2      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getServoState                                        4     2      2       0
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _getServoCommand                                      6     4      2       0
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _encoders_init                                        2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _chkchr                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotor                                            12    12      0    3533
                                             38 BANK0     12    12      0
                             ___wmul
                          _constrain
                            _pwm_set
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                             10     4      6    2371
                                             28 BANK0     10     4      6
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _constrain                                           12     0     12     487
                                              0 BANK0     12     0     12
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  7     7      0      23
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SetMotor
     ___wmul
     _constrain
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
   _SetPoint
     _PrintSetpoint
       _putst
         _putch
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
     _getServoCommand (ARG)
   _chkchr
   _encoders_init
   _getServoCommand
   _getServoState
   _motor_reset
     _SetPoint
       _PrintSetpoint
         _putst
           _putch
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
       _getServoCommand (ARG)
     _pwm_set
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _resetCounter
   _putst
     _putch
   _pwm_init
   _pwm_set
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _resetCounter
   _serial_init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      DC       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     39      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1A      23       7       43.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      5C       9       95.8%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      DC      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 31 17:33:22 2019

                       pc 0002               __CFG_CP$OFF 0000                        l82 0FC1  
                      l83 0FCB                        fsr 0004       ___wmul@multiplicand 0022  
         ??_getServoState 0022                       l170 07CB                       l182 05F0  
                     l362 0138                       l523 07E9                       l359 00EA  
                     l296 02BC                       l588 04F3                       _GIE 005F  
                     _RA5 002D                       _RA6 002E                       _RB5 0035  
                     _RC3 003B                       _RC4 003C                       _RC5 003D  
                     _PR2 0092              __CFG_CPD$OFF 0000                       _RX9 00C6  
                     _TX9 04C6                       _ab1 0073                       _isr 030B  
                     fsr0 0004                       indf 0000              __CFG_IESO$ON 0000  
            __CFG_FOSC$EC 0000          _encoder1_counter 0061              __CFG_LVP$OFF 0000  
                    l2133 07B0                      l2411 07E1                      l1811 0777  
                    l2453 0F3B                      l1805 075B                      l2621 0189  
                    l2605 0155                      l1903 0611                      l1831 0718  
                    l1807 0769                      l1815 0782                      l1921 0504  
                    l2481 0227                      l1833 06EC                      l2641 01E3  
                    l2633 01BB                      l2625 019D                      l1931 0524  
                    l1827 0709                      l1843 0436                      l2571 00B5  
                    l1781 063C                      l2645 01F2                      l2637 01CF  
                    l2629 01B1                      l2565 0090                      l2399 06CC  
                    l1943 0559                      l2495 0299                      l1767 0FB3  
                    l1783 064A                      l1871 0486                      l1929 0514  
                    l2673 05E8                      l1961 05E0                      l1769 0FCD  
                    l1793 066B                      l1865 0465                      l1849 044C  
                    l2649 01FD                      l2577 00C2                      l2569 00A1  
                    l1947 0567                      l1939 054C                      l1955 0586  
                    l2499 02E8                      l1859 0463                      l2595 0117  
                    l1965 05E3                      l1789 0660                      l1885 0499  
                    l1877 0495                      l1959 05DD                      l1887 0416  
                    l1889 04DC                      l1899 05FB                      ?_isr 0077  
                    STR_1 0680                      STR_2 069E                      STR_3 06A9  
                    STR_4 06A9                      _ANS4 0C44                      STR_5 0690  
                    _ANS8 0C48                      _ANS9 0C49                      _BRGH 04C2  
                    _T0IE 005D                      _CREN 00C4                      _T0IF 005A  
                    _FERR 00C2                      u1215 064B                      u1225 0657  
                    u2123 06C1                      u1235 0661                      _IOCB 0096  
                    u2133 06DE                      u2213 0297                      u1265 075E  
                    u2155 07EA                      u1515 0526                      u1435 0613  
                    u1195 063F                      u2165 07F1                      u1525 053B  
                    u1445 061B                      u1285 076F                      u1365 047C  
                    u1535 054D                      u1295 0778                      u1625 0FF1  
                    u2265 00CE                      u2275 00F3                      u1573 0584  
                    u2285 0141                      u1590 05C9                      u1495 0518  
                    u1591 05CA                      u1592 05CF                      u1593 05D0  
                    u1770 0794                      u1755 0F6C                      u1780 0795  
                    _PEIE 005E                      _RBIE 005B                      _RBIF 0058  
                    _RCIE 0465                      _RCIF 0065                      _OERR 00C1  
                    _TMR0 0001                      _SPEN 00C7                      _SREN 00C5  
                    _TXIE 0464                      _TXEN 04C5                      _TXIF 0064  
                    _SYNC 04C4         ??_getServoCommand 0022              __CFG_WRT$OFF 0000  
           __CFG_FCMEN$ON 0000                      _main 0038                      btemp 007E  
                    start 0012             __CFG_MCLRE$ON 0000                     ??_isr 0077  
       PrintSetpoint@sVar 003E           __end_of___aldiv 0570                     ?_main 0077  
                   _ANS10 0C4A                     _ANS11 0C4B                     _ANS13 0C4D  
           __CFG_WDTE$OFF 0000           __end_of___lwdiv 0670           __end_of___lwmod 0787  
                   i1l346 0404                     _RCREG 001A                     _SPBRG 0099  
                   _PORTB 0006                     _TXREG 0019       ___lmul@multiplicand 0024  
         ??_encoders_init 0020           __end_of_dpowers 0680                     _dummy 0075  
                   _onlyK 0067                     _putch 0FB0                     _putst 06E9  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_pwm_set 05F1  
                   status 0003                     wtemp0 007E           __end_of_sprintf 04E1  
         __initialization 0015              __end_of_main 0206                    ??_main 0058  
        __end_of_SetMotor 030B          __end_of_SetPoint 1000                    _CCPR1L 0015  
                  _CCPR2L 001B                    ?_putch 0077                    ?_putst 0077  
                  i1l2213 03D0                    i1l2205 03A6                    i1l2221 03F4  
                  i1l2209 03BC                    i1l2219 03E6                    i1l2163 032A  
                  i1l2181 036D                    i1l2173 0358                    i1l2193 037F  
                  i1l2185 0372                    i1l2169 0353                    i1l2195 038D  
                  i1l2189 037B                    i1l2199 03A1                    u185_25 031E  
                  u188_25 0362                    _TMR1IE 0460                    _TRISB1 0431  
                  _TRISB2 0432                    _TRISC1 0439                    _TRISA5 042D  
                  _TRISB3 0433                    _TRISC2 043A                    _TRISA6 042E  
                  _TRISB4 0434                    _TRISB5 0435                    _TRISC3 043B  
                  _TRISC4 043C                    _TRISB7 0437                    _TRISC5 043D  
          __CFG_PWRTE$OFF 0000              ?_serial_init 0077                    ___lmul 05F1  
               ??___aldiv 0035                    ___wmul 07DD                    _chkchr 0F35  
               ??___lwdiv 0024                 ??___lwmod 002C                    _state1 0074  
            ?_motor_reset 0077                    saved_w 007E          __end_of_pwm_init 07DD  
                  putch@c 0021                 ??_pwm_set 0042                 ??_sprintf 0033  
 __end_of__initialization 0034            __pcstackCOMMON 0077     __end_of_PrintSetpoint 0FB0  
           __end_of_putch 0FD8             __end_of_putst 071F           _getServoCommand 0787  
          _OPTION_REGbits 0081               SetMotor@err 004C                   ??_putch 0020  
                 ??_putst 0022                __pbssBANK0 0059                __pbssBANK1 00BA  
              __pbssBANK3 0190        __size_of_constrain 003C      getServoCommand@lStep 006B  
               ?_SetMotor 0077                 ?_SetPoint 0052                __pmaintext 0038  
                 ?___lmul 0020                   ?___wmul 0020                   ?_chkchr 0077  
              __pintentry 0004            ___lmul@product 0029     __end_of_getServoState 0F54  
           ?_resetCounter 0077                   _SPIData 006C                __stringtab 0670  
              ??_SetMotor 0046                ??_SetPoint 0054                   ___aldiv 04E1  
         __size_of___lmul 0041           __size_of___wmul 0023                 ?_pwm_init 0077  
                 ___lwdiv 0632                   ___lwmod 0753           __size_of_chkchr 0008  
 __end_of_getServoCommand 07B3      __size_of_serial_init 0018         __end_of_constrain 06E9  
                 __ptext1 0F7F                   __ptext2 07B3                   __ptext3 071F  
                 __ptext4 0F54                   __ptext5 0FD8                   __ptext6 0F97  
                 __ptext7 040F                   __ptext8 0753                   __ptext9 0632  
                 _dpowers 0676                 _T2CONbits 0012              __size_of_isr 0104  
        ___aldiv@dividend 0031      __size_of_motor_reset 0034                   _samples 0070  
          ??_resetCounter 0020                   _pwm_set 0570                   _sprintf 040F  
                 clrloop0 0F3E      end_of_initialization 0034     __end_of_encoders_init 0F7F  
                 isr@tick 00BE          ___aldiv@quotient 0038                ??_pwm_init 0020  
        SetMotor@last_err 0065        SetMotor@D_Response 004A               _CCP1CONbits 0017  
             _CCP2CONbits 001D            __end_of___lmul 0632            _set_motor_flag 00C2  
        ?_getServoCommand 0020            __end_of___wmul 0800            __end_of_chkchr 0F3D  
        _delayus_variable 0076       start_initialization 0015               __end_of_isr 040F  
            SetMotor@resp 004E      __end_of_resetCounter 0F67                  ??___lmul 0028  
       __size_of_SetMotor 0105         __size_of_SetPoint 0028                  ??___wmul 0024  
      SetMotor@P_Response 0048                  ??_chkchr 0020         pwm_set@duty_cycle 003E  
             __pbssCOMMON 0070                 ___latbits 0002             __pcstackBANK0 0020  
           __pcstackBANK1 00A0    __size_of_PrintSetpoint 0019               sprintf@flag 0037  
             sprintf@prec 0038          ___lwdiv@dividend 0022                  ?___aldiv 002D  
                ?___lwdiv 0020                  ?___lwmod 0028                 __pstrings 0670  
       __size_of_pwm_init 002A            pwm_set@channel 003C                 _constrain 06AD  
        ___lwdiv@quotient 0025                  ?_pwm_set 003C                  ?_sprintf 002E  
          __size_of_putch 0028            __size_of_putst 0036           ___aldiv@divisor 002D  
        main@serialIn_363 00B9         interrupt_function 0004           ___aldiv@counter 0036  
          ___wmul@product 0024                 clear_ram0 0F3D    __size_of_getServoState 000F  
                _PIR1bits 000C             ??_serial_init 0020                 _set_point 0059  
               _motor_pos 005D             _PrintSetpoint 0F97             ??_motor_reset 0058  
             __stringbase 0675         ___wmul@multiplier 0020                ?_constrain 0020  
         SetPoint@new_val 0052         ___lmul@multiplier 0020     __size_of_resetCounter 0013  
                _SetMotor 0206                  _SetPoint 0FD8            ?_PrintSetpoint 0077  
                _nSPIData 00C0          __size_of___aldiv 008F          __size_of___lwdiv 003E  
        __size_of___lwmod 0034    __size_of_encoders_init 0018       __end_of_serial_init 0F97  
      __end_of__stringtab 0676                sprintf@val 0039             _getServoState 0F45  
         ___lwdiv@divisor 0020           ___lwdiv@counter 0027                  __ptext10 06E9  
                __ptext11 0FB0                  __ptext20 06AD                  __ptext12 0F45  
                __ptext21 07DD                  __ptext13 0787                  __ptext22 030B  
                __ptext14 0F67                  __ptext15 0F35                  __ptext16 0206  
                __ptext17 0570                  __ptext18 05F1                  __ptext19 04E1  
            _resetCounter 0F54       __end_of_motor_reset 0753         __CFG_BOR4V$BOR21V 0000  
                _com_time 0069          __size_of_pwm_set 0081          __size_of_sprintf 00D2  
                _last_pos 00BA             __size_of_main 01CE                  _sampling 0072  
                _pos_log1 01BE                  _pos_log2 0190        SetMotor@derivative 006D  
                _pwm_init 07B3                  main@sVar 00A0            ?_getServoState 0020  
             ??_constrain 002C  __size_of_getServoCommand 002C                  isr@portB 007D  
         constrain@lLimit 0024           constrain@uLimit 0028                  intlevel1 0000  
               sprintf@ap 0036                 sprintf@sp 003B             _encoders_init 0F67  
        ___lwmod@dividend 002A                 stringcode 0670           ??_PrintSetpoint 003D  
             _serial_init 0F7F               _motor_reset 071F            constrain@value 0020  
                sprintf@c 003C                  sprintf@f 002E                  putst@str 0023  
         ___lwmod@divisor 0028           ___lwmod@counter 002D                  stringdir 0670  
                stringtab 0670              ___aldiv@sign 0037            ?_encoders_init 0077  
